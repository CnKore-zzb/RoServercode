// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneUser2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneUser2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* GoCity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoCity_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgLangParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgLangParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgParam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgParam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcDataSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcDataSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserNineSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserNineSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserActionNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserActionNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* BufferData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BufferData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBuffNineSyncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBuffNineSyncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitPosUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitPosUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relive_reflection_ = NULL;
const ::google::protobuf::Descriptor* VarUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VarUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* TalkInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TalkInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* EffectUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EffectUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MenuList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MenuList_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfoNine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfoNine_reflection_ = NULL;
const ::google::protobuf::Descriptor* UsePortrait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UsePortrait_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPortraitFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPortraitFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPortraitListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPortraitListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseDressing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseDressing_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDressing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDressing_reflection_ = NULL;
const ::google::protobuf::Descriptor* DressingListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressingListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddAttrPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddAttrPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopGotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopGotItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryShopGotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryShopGotItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateShopGotItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateShopGotItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* DbgSysMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DbgSysMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowTransferCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowTransferCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallNpcFuncCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallNpcFuncCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoundEffectCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoundEffectCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PresetMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PresetMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PresetMsgCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PresetMsgCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeBgmCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeBgmCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FighterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FighterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryFighterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryFighterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameTimeCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameTimeCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDTimeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTimeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDTimeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTimeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Photo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Photo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeScreen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeScreen_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShortcutItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShortcutItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutShortcut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutShortcut_reflection_ = NULL;
const ::google::protobuf::Descriptor* NpcChangeAngle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NpcChangeAngle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraFocus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraFocus_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToGearUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToGearUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewTransMapCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewTransMapCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeathTransferListCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeathTransferListCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewDeathTransferCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewDeathTransferCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseDeathTransferCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseDeathTransferCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FollowerUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FollowerUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeFollowUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeFollowUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LaboratoryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LaboratoryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GotoLaboratoryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GotoLaboratoryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeProfession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeProfession_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scenery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scenery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SceneryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SceneryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoMapQuestUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoMapQuestUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoMapFollowUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoMapFollowUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAutoHitCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAutoHitCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadSceneryPhotoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadSceneryPhotoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpyunUrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpyunUrl_reflection_ = NULL;
const ::google::protobuf::Descriptor* DownloadSceneryPhotoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadSceneryPhotoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMapArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMapArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMapAreaNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMapAreaNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffForeverCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffForeverCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinHandsUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinHandsUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BreakUpHandsUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BreakUpHandsUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandStatusUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandStatusUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryShow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryShow_reflection_ = NULL;
const ::google::protobuf::Descriptor* MusicItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MusicItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryMusicList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryMusicList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DemandMusic_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DemandMusic_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseMusicFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseMusicFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadOkSceneryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadOkSceneryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinHandsUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinHandsUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraceItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraceItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTraceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTraceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateTraceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateTraceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetDirection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetDirection_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleTimelenUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleTimelenUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetOptionUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetOptionUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserInfoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserInfoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountDownTickUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountDownTickUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemMusicNtfUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemMusicNtfUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShakeTreeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShakeTreeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Tree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tree_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityNtfUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityNtfUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecentZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecentZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryZoneStatusUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryZoneStatusUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JumpZoneUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JumpZoneUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemImageUserNtfUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemImageUserNtfUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFollowUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFollowUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeNameUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeNameUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargePlayUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargePlayUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequireNpcFuncUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequireNpcFuncUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckSeatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckSeatUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfSeatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfSeatUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* YoyoSeatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YoyoSeatUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowSeatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowSeatUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetNormalSkillOptionUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetNormalSkillOptionUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewSetOptionUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewSetOptionUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsolvedSceneryNtfUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsolvedSceneryNtfUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* VisibleNpc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VisibleNpc_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfVisibleNpcUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfVisibleNpcUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpyunAuthorizationCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpyunAuthorizationCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransformPreDataCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransformPreDataCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRenameCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRenameCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyZenyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyZenyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallTeamerUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallTeamerUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallTeamerReplyUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallTeamerReplyUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SpecialEffectCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SpecialEffectCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageProposalCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageProposalCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageProposalReplyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageProposalReplyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UploadWeddingPhotoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UploadWeddingPhotoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarriageProposalSuccessCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarriageProposalSuccessCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteeWeddingStartNtfUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteeWeddingStartNtfUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KFCShareUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KFCShareUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckRelationUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckRelationUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TwinsActionUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TwinsActionUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShowServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShowServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplaceServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplaceServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServantService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServantService_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecommendServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecommendServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FavorabilityStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FavorabilityStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServantRewardStatusUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServantRewardStatusUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionQueryUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionQueryUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionBuyUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionBuyUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionChangeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionChangeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AstrolabeProfessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AstrolabeProfessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrProfessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrProfessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipPackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipPackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillValidPosData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillValidPosData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillProfessionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillProfessionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfessionUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfessionUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAstrolMaterialData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAstrolMaterialData_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRecordInfoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRecordInfoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveRecordUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveRecordUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadRecordUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadRecordUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeRecordNameUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeRecordNameUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyRecordSlotUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyRecordSlotUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRecordUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRecordUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBranchInfoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBranchInfoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterCapraActivityCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterCapraActivityCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteWithMeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteWithMeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryAltmanKillUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryAltmanKillUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoothInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoothInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoothReqUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoothReqUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoothInfoSyncUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoothInfoSyncUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DressUpModelUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressUpModelUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DressUpHeadUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressUpHeadUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryStageUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryStageUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DressUpLineUpUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressUpLineUpUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StageUserDataType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StageUserDataType_reflection_ = NULL;
const ::google::protobuf::Descriptor* DressUpStageUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DressUpStageUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoToFunctionMapUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoToFunctionMapUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthCurInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthCurInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthValueInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthValueInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveGrowthServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveGrowthServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowthOpenServantUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowthOpenServantUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheatTagUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheatTagUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheatTagStatUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheatTagStatUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* User2Param_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMessageType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EMessageActOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUserActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReliveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEffectOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEffectType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDressType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PointType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDbgMsgType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameTimeOpt_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CD_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGoToGearType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFollowType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAlbumType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBattleStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EQueryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFashionHideType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECountDownType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETreeStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EZoneStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EZoneState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EJumpZone_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SeatShowType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EOptionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERenameErrCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProposalReply_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETwinsOperation_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EServantService_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ERecommendStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EProfressionDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESlotType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBoothOper_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EBoothSign_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDressUpStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFuncMapType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGrowthStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGrowthType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneUser2_2eproto() {
  protobuf_AddDesc_SceneUser2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneUser2.proto");
  GOOGLE_CHECK(file != NULL);
  GoCity_descriptor_ = file->message_type(0);
  static const int GoCity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCity, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCity, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCity, mapid_),
  };
  GoCity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoCity_descriptor_,
      GoCity::default_instance_,
      GoCity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoCity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoCity));
  MsgLangParam_descriptor_ = file->message_type(1);
  static const int MsgLangParam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLangParam, language_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLangParam, param_),
  };
  MsgLangParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgLangParam_descriptor_,
      MsgLangParam::default_instance_,
      MsgLangParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLangParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgLangParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgLangParam));
  MsgParam_descriptor_ = file->message_type(2);
  static const int MsgParam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgParam, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgParam, subparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgParam, langparams_),
  };
  MsgParam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgParam_descriptor_,
      MsgParam::default_instance_,
      MsgParam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgParam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgParam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgParam));
  SysMsg_descriptor_ = file->message_type(3);
  static const int SysMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, delay_),
  };
  SysMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMsg_descriptor_,
      SysMsg::default_instance_,
      SysMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMsg));
  NpcDataSync_descriptor_ = file->message_type(4);
  static const int NpcDataSync_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, datas_),
  };
  NpcDataSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcDataSync_descriptor_,
      NpcDataSync::default_instance_,
      NpcDataSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcDataSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcDataSync));
  UserNineSyncCmd_descriptor_ = file->message_type(5);
  static const int UserNineSyncCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, attrs_),
  };
  UserNineSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserNineSyncCmd_descriptor_,
      UserNineSyncCmd::default_instance_,
      UserNineSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserNineSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserNineSyncCmd));
  UserActionNtf_descriptor_ = file->message_type(6);
  static const int UserActionNtf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, delay_),
  };
  UserActionNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserActionNtf_descriptor_,
      UserActionNtf::default_instance_,
      UserActionNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserActionNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserActionNtf));
  BufferData_descriptor_ = file->message_type(7);
  static const int BufferData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, fromname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, level_),
  };
  BufferData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BufferData_descriptor_,
      BufferData::default_instance_,
      BufferData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BufferData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BufferData));
  UserBuffNineSyncCmd_descriptor_ = file->message_type(8);
  static const int UserBuffNineSyncCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, dels_),
  };
  UserBuffNineSyncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserBuffNineSyncCmd_descriptor_,
      UserBuffNineSyncCmd::default_instance_,
      UserBuffNineSyncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBuffNineSyncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserBuffNineSyncCmd));
  ExitPosUserCmd_descriptor_ = file->message_type(9);
  static const int ExitPosUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, exitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, mapid_),
  };
  ExitPosUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitPosUserCmd_descriptor_,
      ExitPosUserCmd::default_instance_,
      ExitPosUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitPosUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitPosUserCmd));
  Relive_descriptor_ = file->message_type(10);
  static const int Relive_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relive, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relive, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relive, type_),
  };
  Relive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Relive_descriptor_,
      Relive::default_instance_,
      Relive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Relive));
  VarUpdate_descriptor_ = file->message_type(11);
  static const int VarUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarUpdate, vars_),
  };
  VarUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VarUpdate_descriptor_,
      VarUpdate::default_instance_,
      VarUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VarUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VarUpdate));
  TalkInfo_descriptor_ = file->message_type(12);
  static const int TalkInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, talkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, talkmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, params_),
  };
  TalkInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TalkInfo_descriptor_,
      TalkInfo::default_instance_,
      TalkInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TalkInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TalkInfo));
  ServerTime_descriptor_ = file->message_type(13);
  static const int ServerTime_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, time_),
  };
  ServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTime_descriptor_,
      ServerTime::default_instance_,
      ServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTime));
  EffectUserCmd_descriptor_ = file->message_type(14);
  static const int EffectUserCmd_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, effecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, effectpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, posbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, epbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, skillid_),
  };
  EffectUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EffectUserCmd_descriptor_,
      EffectUserCmd::default_instance_,
      EffectUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EffectUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EffectUserCmd));
  MenuList_descriptor_ = file->message_type(15);
  static const int MenuList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, dellist_),
  };
  MenuList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MenuList_descriptor_,
      MenuList::default_instance_,
      MenuList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MenuList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MenuList));
  NewMenu_descriptor_ = file->message_type(16);
  static const int NewMenu_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, animplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, list_),
  };
  NewMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMenu_descriptor_,
      NewMenu::default_instance_,
      NewMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMenu));
  TeamInfoNine_descriptor_ = file->message_type(17);
  static const int TeamInfoNine_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, name_),
  };
  TeamInfoNine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfoNine_descriptor_,
      TeamInfoNine::default_instance_,
      TeamInfoNine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfoNine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfoNine));
  UsePortrait_descriptor_ = file->message_type(18);
  static const int UsePortrait_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePortrait, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePortrait, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePortrait, id_),
  };
  UsePortrait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UsePortrait_descriptor_,
      UsePortrait::default_instance_,
      UsePortrait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePortrait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UsePortrait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UsePortrait));
  UseFrame_descriptor_ = file->message_type(19);
  static const int UseFrame_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseFrame, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseFrame, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseFrame, id_),
  };
  UseFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseFrame_descriptor_,
      UseFrame::default_instance_,
      UseFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseFrame));
  NewPortraitFrame_descriptor_ = file->message_type(20);
  static const int NewPortraitFrame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, frame_),
  };
  NewPortraitFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPortraitFrame_descriptor_,
      NewPortraitFrame::default_instance_,
      NewPortraitFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPortraitFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPortraitFrame));
  QueryPortraitListUserCmd_descriptor_ = file->message_type(21);
  static const int QueryPortraitListUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPortraitListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPortraitListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPortraitListUserCmd, portrait_),
  };
  QueryPortraitListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPortraitListUserCmd_descriptor_,
      QueryPortraitListUserCmd::default_instance_,
      QueryPortraitListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPortraitListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPortraitListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPortraitListUserCmd));
  UseDressing_descriptor_ = file->message_type(22);
  static const int UseDressing_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, type_),
  };
  UseDressing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseDressing_descriptor_,
      UseDressing::default_instance_,
      UseDressing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDressing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseDressing));
  NewDressing_descriptor_ = file->message_type(23);
  static const int NewDressing_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, dressids_),
  };
  NewDressing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDressing_descriptor_,
      NewDressing::default_instance_,
      NewDressing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDressing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDressing));
  DressingListUserCmd_descriptor_ = file->message_type(24);
  static const int DressingListUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, dressids_),
  };
  DressingListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressingListUserCmd_descriptor_,
      DressingListUserCmd::default_instance_,
      DressingListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressingListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressingListUserCmd));
  AddAttrPoint_descriptor_ = file->message_type(25);
  static const int AddAttrPoint_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, strpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, intpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, agipoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, dexpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, vitpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, lukpoint_),
  };
  AddAttrPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddAttrPoint_descriptor_,
      AddAttrPoint::default_instance_,
      AddAttrPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddAttrPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddAttrPoint));
  ShopGotItem_descriptor_ = file->message_type(26);
  static const int ShopGotItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGotItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGotItem, count_),
  };
  ShopGotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopGotItem_descriptor_,
      ShopGotItem::default_instance_,
      ShopGotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopGotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopGotItem));
  QueryShopGotItem_descriptor_ = file->message_type(27);
  static const int QueryShopGotItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, discountitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, limititems_),
  };
  QueryShopGotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryShopGotItem_descriptor_,
      QueryShopGotItem::default_instance_,
      QueryShopGotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShopGotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryShopGotItem));
  UpdateShopGotItem_descriptor_ = file->message_type(28);
  static const int UpdateShopGotItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, discountitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, limititem_),
  };
  UpdateShopGotItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateShopGotItem_descriptor_,
      UpdateShopGotItem::default_instance_,
      UpdateShopGotItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateShopGotItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateShopGotItem));
  OpenUI_descriptor_ = file->message_type(29);
  static const int OpenUI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, ui_),
  };
  OpenUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenUI_descriptor_,
      OpenUI::default_instance_,
      OpenUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenUI));
  DbgSysMsg_descriptor_ = file->message_type(30);
  static const int DbgSysMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, content_),
  };
  DbgSysMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DbgSysMsg_descriptor_,
      DbgSysMsg::default_instance_,
      DbgSysMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DbgSysMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DbgSysMsg));
  FollowTransferCmd_descriptor_ = file->message_type(31);
  static const int FollowTransferCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowTransferCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowTransferCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowTransferCmd, targetid_),
  };
  FollowTransferCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowTransferCmd_descriptor_,
      FollowTransferCmd::default_instance_,
      FollowTransferCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowTransferCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowTransferCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowTransferCmd));
  CallNpcFuncCmd_descriptor_ = file->message_type(32);
  static const int CallNpcFuncCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, funparam_),
  };
  CallNpcFuncCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallNpcFuncCmd_descriptor_,
      CallNpcFuncCmd::default_instance_,
      CallNpcFuncCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallNpcFuncCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallNpcFuncCmd));
  ModelShow_descriptor_ = file->message_type(33);
  static const int ModelShow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, data_),
  };
  ModelShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelShow_descriptor_,
      ModelShow::default_instance_,
      ModelShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelShow));
  SoundEffectCmd_descriptor_ = file->message_type(34);
  static const int SoundEffectCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, se_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, delay_),
  };
  SoundEffectCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoundEffectCmd_descriptor_,
      SoundEffectCmd::default_instance_,
      SoundEffectCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoundEffectCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoundEffectCmd));
  PresetMsg_descriptor_ = file->message_type(35);
  static const int PresetMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsg, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsg, msg_),
  };
  PresetMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PresetMsg_descriptor_,
      PresetMsg::default_instance_,
      PresetMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PresetMsg));
  PresetMsgCmd_descriptor_ = file->message_type(36);
  static const int PresetMsgCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsgCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsgCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsgCmd, msgs_),
  };
  PresetMsgCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PresetMsgCmd_descriptor_,
      PresetMsgCmd::default_instance_,
      PresetMsgCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsgCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PresetMsgCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PresetMsgCmd));
  ChangeBgmCmd_descriptor_ = file->message_type(37);
  static const int ChangeBgmCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, bgm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, play_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, type_),
  };
  ChangeBgmCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeBgmCmd_descriptor_,
      ChangeBgmCmd::default_instance_,
      ChangeBgmCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeBgmCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeBgmCmd));
  FighterInfo_descriptor_ = file->message_type(38);
  static const int FighterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, attrs_),
  };
  FighterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FighterInfo_descriptor_,
      FighterInfo::default_instance_,
      FighterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FighterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FighterInfo));
  QueryFighterInfo_descriptor_ = file->message_type(39);
  static const int QueryFighterInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFighterInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFighterInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFighterInfo, fighters_),
  };
  QueryFighterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryFighterInfo_descriptor_,
      QueryFighterInfo::default_instance_,
      QueryFighterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFighterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryFighterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryFighterInfo));
  GameTimeCmd_descriptor_ = file->message_type(40);
  static const int GameTimeCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, opt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, speed_),
  };
  GameTimeCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameTimeCmd_descriptor_,
      GameTimeCmd::default_instance_,
      GameTimeCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameTimeCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameTimeCmd));
  CDTimeItem_descriptor_ = file->message_type(41);
  static const int CDTimeItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeItem, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeItem, type_),
  };
  CDTimeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDTimeItem_descriptor_,
      CDTimeItem::default_instance_,
      CDTimeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDTimeItem));
  CDTimeUserCmd_descriptor_ = file->message_type(42);
  static const int CDTimeUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeUserCmd, list_),
  };
  CDTimeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDTimeUserCmd_descriptor_,
      CDTimeUserCmd::default_instance_,
      CDTimeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTimeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDTimeUserCmd));
  StateChange_descriptor_ = file->message_type(43);
  static const int StateChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChange, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChange, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChange, status_),
  };
  StateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StateChange_descriptor_,
      StateChange::default_instance_,
      StateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StateChange));
  Photo_descriptor_ = file->message_type(44);
  static const int Photo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, guid_),
  };
  Photo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Photo_descriptor_,
      Photo::default_instance_,
      Photo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Photo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Photo));
  ShakeScreen_descriptor_ = file->message_type(45);
  static const int ShakeScreen_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, maxamplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, shaketype_),
  };
  ShakeScreen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeScreen_descriptor_,
      ShakeScreen::default_instance_,
      ShakeScreen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeScreen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeScreen));
  ShortcutItem_descriptor_ = file->message_type(46);
  static const int ShortcutItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutItem, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutItem, pos_),
  };
  ShortcutItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShortcutItem_descriptor_,
      ShortcutItem::default_instance_,
      ShortcutItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortcutItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortcutItem));
  QueryShortcut_descriptor_ = file->message_type(47);
  static const int QueryShortcut_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShortcut, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShortcut, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShortcut, list_),
  };
  QueryShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryShortcut_descriptor_,
      QueryShortcut::default_instance_,
      QueryShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryShortcut));
  PutShortcut_descriptor_ = file->message_type(48);
  static const int PutShortcut_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutShortcut, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutShortcut, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutShortcut, item_),
  };
  PutShortcut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutShortcut_descriptor_,
      PutShortcut::default_instance_,
      PutShortcut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutShortcut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutShortcut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutShortcut));
  NpcChangeAngle_descriptor_ = file->message_type(49);
  static const int NpcChangeAngle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, angle_),
  };
  NpcChangeAngle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NpcChangeAngle_descriptor_,
      NpcChangeAngle::default_instance_,
      NpcChangeAngle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NpcChangeAngle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NpcChangeAngle));
  CameraFocus_descriptor_ = file->message_type(50);
  static const int CameraFocus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocus, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocus, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocus, targets_),
  };
  CameraFocus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraFocus_descriptor_,
      CameraFocus::default_instance_,
      CameraFocus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraFocus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraFocus));
  GoToListUserCmd_descriptor_ = file->message_type(51);
  static const int GoToListUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToListUserCmd, mapid_),
  };
  GoToListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToListUserCmd_descriptor_,
      GoToListUserCmd::default_instance_,
      GoToListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToListUserCmd));
  GoToGearUserCmd_descriptor_ = file->message_type(52);
  static const int GoToGearUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, otherids_),
  };
  GoToGearUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToGearUserCmd_descriptor_,
      GoToGearUserCmd::default_instance_,
      GoToGearUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToGearUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToGearUserCmd));
  NewTransMapCmd_descriptor_ = file->message_type(53);
  static const int NewTransMapCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTransMapCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTransMapCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTransMapCmd, mapid_),
  };
  NewTransMapCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewTransMapCmd_descriptor_,
      NewTransMapCmd::default_instance_,
      NewTransMapCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTransMapCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTransMapCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewTransMapCmd));
  DeathTransferListCmd_descriptor_ = file->message_type(54);
  static const int DeathTransferListCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathTransferListCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathTransferListCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathTransferListCmd, npcid_),
  };
  DeathTransferListCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeathTransferListCmd_descriptor_,
      DeathTransferListCmd::default_instance_,
      DeathTransferListCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathTransferListCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeathTransferListCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeathTransferListCmd));
  NewDeathTransferCmd_descriptor_ = file->message_type(55);
  static const int NewDeathTransferCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDeathTransferCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDeathTransferCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDeathTransferCmd, npcid_),
  };
  NewDeathTransferCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewDeathTransferCmd_descriptor_,
      NewDeathTransferCmd::default_instance_,
      NewDeathTransferCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDeathTransferCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewDeathTransferCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewDeathTransferCmd));
  UseDeathTransferCmd_descriptor_ = file->message_type(56);
  static const int UseDeathTransferCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, fromnpcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, tonpcid_),
  };
  UseDeathTransferCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseDeathTransferCmd_descriptor_,
      UseDeathTransferCmd::default_instance_,
      UseDeathTransferCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseDeathTransferCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseDeathTransferCmd));
  FollowerUser_descriptor_ = file->message_type(57);
  static const int FollowerUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, etype_),
  };
  FollowerUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FollowerUser_descriptor_,
      FollowerUser::default_instance_,
      FollowerUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FollowerUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FollowerUser));
  BeFollowUserCmd_descriptor_ = file->message_type(58);
  static const int BeFollowUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, etype_),
  };
  BeFollowUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeFollowUserCmd_descriptor_,
      BeFollowUserCmd::default_instance_,
      BeFollowUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeFollowUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeFollowUserCmd));
  LaboratoryUserCmd_descriptor_ = file->message_type(59);
  static const int LaboratoryUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, curscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, maxscore_),
  };
  LaboratoryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LaboratoryUserCmd_descriptor_,
      LaboratoryUserCmd::default_instance_,
      LaboratoryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaboratoryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LaboratoryUserCmd));
  GotoLaboratoryUserCmd_descriptor_ = file->message_type(60);
  static const int GotoLaboratoryUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotoLaboratoryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotoLaboratoryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotoLaboratoryUserCmd, funid_),
  };
  GotoLaboratoryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GotoLaboratoryUserCmd_descriptor_,
      GotoLaboratoryUserCmd::default_instance_,
      GotoLaboratoryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotoLaboratoryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GotoLaboratoryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GotoLaboratoryUserCmd));
  ExchangeProfession_descriptor_ = file->message_type(61);
  static const int ExchangeProfession_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, guid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, pointattrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, type_),
  };
  ExchangeProfession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeProfession_descriptor_,
      ExchangeProfession::default_instance_,
      ExchangeProfession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeProfession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeProfession));
  Scenery_descriptor_ = file->message_type(62);
  static const int Scenery_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenery, sceneryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenery, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenery, charid_),
  };
  Scenery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Scenery_descriptor_,
      Scenery::default_instance_,
      Scenery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scenery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Scenery));
  SceneryUserCmd_descriptor_ = file->message_type(63);
  static const int SceneryUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, scenerys_),
  };
  SceneryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SceneryUserCmd_descriptor_,
      SceneryUserCmd::default_instance_,
      SceneryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SceneryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SceneryUserCmd));
  GoMapQuestUserCmd_descriptor_ = file->message_type(64);
  static const int GoMapQuestUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapQuestUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapQuestUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapQuestUserCmd, questid_),
  };
  GoMapQuestUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoMapQuestUserCmd_descriptor_,
      GoMapQuestUserCmd::default_instance_,
      GoMapQuestUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapQuestUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapQuestUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoMapQuestUserCmd));
  GoMapFollowUserCmd_descriptor_ = file->message_type(65);
  static const int GoMapFollowUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, charid_),
  };
  GoMapFollowUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoMapFollowUserCmd_descriptor_,
      GoMapFollowUserCmd::default_instance_,
      GoMapFollowUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoMapFollowUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoMapFollowUserCmd));
  UserAutoHitCmd_descriptor_ = file->message_type(66);
  static const int UserAutoHitCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAutoHitCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAutoHitCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAutoHitCmd, charid_),
  };
  UserAutoHitCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAutoHitCmd_descriptor_,
      UserAutoHitCmd::default_instance_,
      UserAutoHitCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAutoHitCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAutoHitCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAutoHitCmd));
  UploadSceneryPhotoUserCmd_descriptor_ = file->message_type(67);
  static const int UploadSceneryPhotoUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, sceneryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, policy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, signature_),
  };
  UploadSceneryPhotoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadSceneryPhotoUserCmd_descriptor_,
      UploadSceneryPhotoUserCmd::default_instance_,
      UploadSceneryPhotoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadSceneryPhotoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadSceneryPhotoUserCmd));
  UpyunUrl_descriptor_ = file->message_type(68);
  static const int UpyunUrl_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunUrl, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunUrl, char_url_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunUrl, acc_url_),
  };
  UpyunUrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpyunUrl_descriptor_,
      UpyunUrl::default_instance_,
      UpyunUrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunUrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunUrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpyunUrl));
  DownloadSceneryPhotoUserCmd_descriptor_ = file->message_type(69);
  static const int DownloadSceneryPhotoUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadSceneryPhotoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadSceneryPhotoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadSceneryPhotoUserCmd, urls_),
  };
  DownloadSceneryPhotoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadSceneryPhotoUserCmd_descriptor_,
      DownloadSceneryPhotoUserCmd::default_instance_,
      DownloadSceneryPhotoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadSceneryPhotoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadSceneryPhotoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadSceneryPhotoUserCmd));
  QueryMapArea_descriptor_ = file->message_type(70);
  static const int QueryMapArea_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMapArea, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMapArea, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMapArea, areas_),
  };
  QueryMapArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMapArea_descriptor_,
      QueryMapArea::default_instance_,
      QueryMapArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMapArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMapArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMapArea));
  NewMapAreaNtf_descriptor_ = file->message_type(71);
  static const int NewMapAreaNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMapAreaNtf, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMapAreaNtf, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMapAreaNtf, area_),
  };
  NewMapAreaNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMapAreaNtf_descriptor_,
      NewMapAreaNtf::default_instance_,
      NewMapAreaNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMapAreaNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMapAreaNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMapAreaNtf));
  BuffForeverCmd_descriptor_ = file->message_type(72);
  static const int BuffForeverCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffForeverCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffForeverCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffForeverCmd, buff_),
  };
  BuffForeverCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffForeverCmd_descriptor_,
      BuffForeverCmd::default_instance_,
      BuffForeverCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffForeverCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffForeverCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffForeverCmd));
  InviteJoinHandsUserCmd_descriptor_ = file->message_type(73);
  static const int InviteJoinHandsUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, sign_),
  };
  InviteJoinHandsUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinHandsUserCmd_descriptor_,
      InviteJoinHandsUserCmd::default_instance_,
      InviteJoinHandsUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinHandsUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinHandsUserCmd));
  BreakUpHandsUserCmd_descriptor_ = file->message_type(74);
  static const int BreakUpHandsUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakUpHandsUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakUpHandsUserCmd, param_),
  };
  BreakUpHandsUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BreakUpHandsUserCmd_descriptor_,
      BreakUpHandsUserCmd::default_instance_,
      BreakUpHandsUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakUpHandsUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BreakUpHandsUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BreakUpHandsUserCmd));
  HandStatusUserCmd_descriptor_ = file->message_type(75);
  static const int HandStatusUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, followid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, type_),
  };
  HandStatusUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandStatusUserCmd_descriptor_,
      HandStatusUserCmd::default_instance_,
      HandStatusUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandStatusUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandStatusUserCmd));
  QueryShow_descriptor_ = file->message_type(76);
  static const int QueryShow_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, expression_),
  };
  QueryShow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryShow_descriptor_,
      QueryShow::default_instance_,
      QueryShow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryShow));
  MusicItem_descriptor_ = file->message_type(77);
  static const int MusicItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, demandtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, musicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, name_),
  };
  MusicItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MusicItem_descriptor_,
      MusicItem::default_instance_,
      MusicItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MusicItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MusicItem));
  QueryMusicList_descriptor_ = file->message_type(78);
  static const int QueryMusicList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, items_),
  };
  QueryMusicList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryMusicList_descriptor_,
      QueryMusicList::default_instance_,
      QueryMusicList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryMusicList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryMusicList));
  DemandMusic_descriptor_ = file->message_type(79);
  static const int DemandMusic_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, musicid_),
  };
  DemandMusic_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DemandMusic_descriptor_,
      DemandMusic::default_instance_,
      DemandMusic_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DemandMusic, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DemandMusic));
  CloseMusicFrame_descriptor_ = file->message_type(80);
  static const int CloseMusicFrame_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMusicFrame, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMusicFrame, param_),
  };
  CloseMusicFrame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseMusicFrame_descriptor_,
      CloseMusicFrame::default_instance_,
      CloseMusicFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMusicFrame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseMusicFrame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseMusicFrame));
  UploadOkSceneryUserCmd_descriptor_ = file->message_type(81);
  static const int UploadOkSceneryUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, sceneryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, time_),
  };
  UploadOkSceneryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadOkSceneryUserCmd_descriptor_,
      UploadOkSceneryUserCmd::default_instance_,
      UploadOkSceneryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadOkSceneryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadOkSceneryUserCmd));
  JoinHandsUserCmd_descriptor_ = file->message_type(82);
  static const int JoinHandsUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, time_),
  };
  JoinHandsUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinHandsUserCmd_descriptor_,
      JoinHandsUserCmd::default_instance_,
      JoinHandsUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinHandsUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinHandsUserCmd));
  TraceItem_descriptor_ = file->message_type(83);
  static const int TraceItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceItem, monsterid_),
  };
  TraceItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraceItem_descriptor_,
      TraceItem::default_instance_,
      TraceItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraceItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraceItem));
  QueryTraceList_descriptor_ = file->message_type(84);
  static const int QueryTraceList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTraceList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTraceList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTraceList, items_),
  };
  QueryTraceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTraceList_descriptor_,
      QueryTraceList::default_instance_,
      QueryTraceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTraceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTraceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTraceList));
  UpdateTraceList_descriptor_ = file->message_type(85);
  static const int UpdateTraceList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, dels_),
  };
  UpdateTraceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateTraceList_descriptor_,
      UpdateTraceList::default_instance_,
      UpdateTraceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateTraceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateTraceList));
  SetDirection_descriptor_ = file->message_type(86);
  static const int SetDirection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDirection, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDirection, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDirection, dir_),
  };
  SetDirection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetDirection_descriptor_,
      SetDirection::default_instance_,
      SetDirection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDirection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetDirection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetDirection));
  BattleTimelenUserCmd_descriptor_ = file->message_type(87);
  static const int BattleTimelenUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, timelen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, musictime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, tutortime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, estatus_),
  };
  BattleTimelenUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleTimelenUserCmd_descriptor_,
      BattleTimelenUserCmd::default_instance_,
      BattleTimelenUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleTimelenUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleTimelenUserCmd));
  SetOptionUserCmd_descriptor_ = file->message_type(88);
  static const int SetOptionUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, fashionhide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, wedding_type_),
  };
  SetOptionUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetOptionUserCmd_descriptor_,
      SetOptionUserCmd::default_instance_,
      SetOptionUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetOptionUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetOptionUserCmd));
  QueryUserInfoUserCmd_descriptor_ = file->message_type(89);
  static const int QueryUserInfoUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, blink_),
  };
  QueryUserInfoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserInfoUserCmd_descriptor_,
      QueryUserInfoUserCmd::default_instance_,
      QueryUserInfoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserInfoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserInfoUserCmd));
  CountDownTickUserCmd_descriptor_ = file->message_type(90);
  static const int CountDownTickUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, extparam_),
  };
  CountDownTickUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountDownTickUserCmd_descriptor_,
      CountDownTickUserCmd::default_instance_,
      CountDownTickUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountDownTickUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountDownTickUserCmd));
  ItemMusicNtfUserCmd_descriptor_ = file->message_type(91);
  static const int ItemMusicNtfUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, starttime_),
  };
  ItemMusicNtfUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemMusicNtfUserCmd_descriptor_,
      ItemMusicNtfUserCmd::default_instance_,
      ItemMusicNtfUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemMusicNtfUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemMusicNtfUserCmd));
  ShakeTreeUserCmd_descriptor_ = file->message_type(92);
  static const int ShakeTreeUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, result_),
  };
  ShakeTreeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShakeTreeUserCmd_descriptor_,
      ShakeTreeUserCmd::default_instance_,
      ShakeTreeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShakeTreeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShakeTreeUserCmd));
  Tree_descriptor_ = file->message_type(93);
  static const int Tree_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, typeid__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, pos_),
  };
  Tree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tree_descriptor_,
      Tree::default_instance_,
      Tree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tree));
  TreeListUserCmd_descriptor_ = file->message_type(94);
  static const int TreeListUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, dels_),
  };
  TreeListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeListUserCmd_descriptor_,
      TreeListUserCmd::default_instance_,
      TreeListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeListUserCmd));
  ActivityNtfUserCmd_descriptor_ = file->message_type(95);
  static const int ActivityNtfUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, progress_),
  };
  ActivityNtfUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityNtfUserCmd_descriptor_,
      ActivityNtfUserCmd::default_instance_,
      ActivityNtfUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityNtfUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityNtfUserCmd));
  ZoneInfo_descriptor_ = file->message_type(96);
  static const int ZoneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, maxbaselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, state_),
  };
  ZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfo_descriptor_,
      ZoneInfo::default_instance_,
      ZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfo));
  RecentZoneInfo_descriptor_ = file->message_type(97);
  static const int RecentZoneInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentZoneInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentZoneInfo, zoneid_),
  };
  RecentZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecentZoneInfo_descriptor_,
      RecentZoneInfo::default_instance_,
      RecentZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecentZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecentZoneInfo));
  QueryZoneStatusUserCmd_descriptor_ = file->message_type(98);
  static const int QueryZoneStatusUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, recents_),
  };
  QueryZoneStatusUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryZoneStatusUserCmd_descriptor_,
      QueryZoneStatusUserCmd::default_instance_,
      QueryZoneStatusUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryZoneStatusUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryZoneStatusUserCmd));
  JumpZoneUserCmd_descriptor_ = file->message_type(99);
  static const int JumpZoneUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, zoneid_),
  };
  JumpZoneUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JumpZoneUserCmd_descriptor_,
      JumpZoneUserCmd::default_instance_,
      JumpZoneUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JumpZoneUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JumpZoneUserCmd));
  ItemImageUserNtfUserCmd_descriptor_ = file->message_type(100);
  static const int ItemImageUserNtfUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemImageUserNtfUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemImageUserNtfUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemImageUserNtfUserCmd, userid_),
  };
  ItemImageUserNtfUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemImageUserNtfUserCmd_descriptor_,
      ItemImageUserNtfUserCmd::default_instance_,
      ItemImageUserNtfUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemImageUserNtfUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemImageUserNtfUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemImageUserNtfUserCmd));
  InviteFollowUserCmd_descriptor_ = file->message_type(101);
  static const int InviteFollowUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, follow_),
  };
  InviteFollowUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFollowUserCmd_descriptor_,
      InviteFollowUserCmd::default_instance_,
      InviteFollowUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFollowUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFollowUserCmd));
  ChangeNameUserCmd_descriptor_ = file->message_type(102);
  static const int ChangeNameUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameUserCmd, name_),
  };
  ChangeNameUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeNameUserCmd_descriptor_,
      ChangeNameUserCmd::default_instance_,
      ChangeNameUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeNameUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeNameUserCmd));
  ChargePlayUserCmd_descriptor_ = file->message_type(103);
  static const int ChargePlayUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePlayUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePlayUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePlayUserCmd, chargeids_),
  };
  ChargePlayUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargePlayUserCmd_descriptor_,
      ChargePlayUserCmd::default_instance_,
      ChargePlayUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePlayUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargePlayUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargePlayUserCmd));
  RequireNpcFuncUserCmd_descriptor_ = file->message_type(104);
  static const int RequireNpcFuncUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, functions_),
  };
  RequireNpcFuncUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequireNpcFuncUserCmd_descriptor_,
      RequireNpcFuncUserCmd::default_instance_,
      RequireNpcFuncUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequireNpcFuncUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequireNpcFuncUserCmd));
  CheckSeatUserCmd_descriptor_ = file->message_type(105);
  static const int CheckSeatUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, success_),
  };
  CheckSeatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckSeatUserCmd_descriptor_,
      CheckSeatUserCmd::default_instance_,
      CheckSeatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckSeatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckSeatUserCmd));
  NtfSeatUserCmd_descriptor_ = file->message_type(106);
  static const int NtfSeatUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, isseatdown_),
  };
  NtfSeatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfSeatUserCmd_descriptor_,
      NtfSeatUserCmd::default_instance_,
      NtfSeatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfSeatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfSeatUserCmd));
  YoyoSeatUserCmd_descriptor_ = file->message_type(107);
  static const int YoyoSeatUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoyoSeatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoyoSeatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoyoSeatUserCmd, guid_),
  };
  YoyoSeatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YoyoSeatUserCmd_descriptor_,
      YoyoSeatUserCmd::default_instance_,
      YoyoSeatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoyoSeatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YoyoSeatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YoyoSeatUserCmd));
  ShowSeatUserCmd_descriptor_ = file->message_type(108);
  static const int ShowSeatUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, show_),
  };
  ShowSeatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowSeatUserCmd_descriptor_,
      ShowSeatUserCmd::default_instance_,
      ShowSeatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowSeatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowSeatUserCmd));
  SetNormalSkillOptionUserCmd_descriptor_ = file->message_type(109);
  static const int SetNormalSkillOptionUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalSkillOptionUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalSkillOptionUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalSkillOptionUserCmd, flag_),
  };
  SetNormalSkillOptionUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetNormalSkillOptionUserCmd_descriptor_,
      SetNormalSkillOptionUserCmd::default_instance_,
      SetNormalSkillOptionUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalSkillOptionUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetNormalSkillOptionUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetNormalSkillOptionUserCmd));
  NewSetOptionUserCmd_descriptor_ = file->message_type(110);
  static const int NewSetOptionUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, flag_),
  };
  NewSetOptionUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewSetOptionUserCmd_descriptor_,
      NewSetOptionUserCmd::default_instance_,
      NewSetOptionUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewSetOptionUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewSetOptionUserCmd));
  UnsolvedSceneryNtfUserCmd_descriptor_ = file->message_type(111);
  static const int UnsolvedSceneryNtfUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedSceneryNtfUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedSceneryNtfUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedSceneryNtfUserCmd, ids_),
  };
  UnsolvedSceneryNtfUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsolvedSceneryNtfUserCmd_descriptor_,
      UnsolvedSceneryNtfUserCmd::default_instance_,
      UnsolvedSceneryNtfUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedSceneryNtfUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedSceneryNtfUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsolvedSceneryNtfUserCmd));
  VisibleNpc_descriptor_ = file->message_type(112);
  static const int VisibleNpc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibleNpc, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibleNpc, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibleNpc, uniqueid_),
  };
  VisibleNpc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VisibleNpc_descriptor_,
      VisibleNpc::default_instance_,
      VisibleNpc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibleNpc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VisibleNpc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VisibleNpc));
  NtfVisibleNpcUserCmd_descriptor_ = file->message_type(113);
  static const int NtfVisibleNpcUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, npcs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, type_),
  };
  NtfVisibleNpcUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfVisibleNpcUserCmd_descriptor_,
      NtfVisibleNpcUserCmd::default_instance_,
      NtfVisibleNpcUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVisibleNpcUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfVisibleNpcUserCmd));
  UpyunAuthorizationCmd_descriptor_ = file->message_type(114);
  static const int UpyunAuthorizationCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunAuthorizationCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunAuthorizationCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunAuthorizationCmd, authvalue_),
  };
  UpyunAuthorizationCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpyunAuthorizationCmd_descriptor_,
      UpyunAuthorizationCmd::default_instance_,
      UpyunAuthorizationCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunAuthorizationCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpyunAuthorizationCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpyunAuthorizationCmd));
  TransformPreDataCmd_descriptor_ = file->message_type(115);
  static const int TransformPreDataCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPreDataCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPreDataCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPreDataCmd, datas_),
  };
  TransformPreDataCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransformPreDataCmd_descriptor_,
      TransformPreDataCmd::default_instance_,
      TransformPreDataCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPreDataCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransformPreDataCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransformPreDataCmd));
  UserRenameCmd_descriptor_ = file->message_type(116);
  static const int UserRenameCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, code_),
  };
  UserRenameCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRenameCmd_descriptor_,
      UserRenameCmd::default_instance_,
      UserRenameCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRenameCmd));
  BuyZenyCmd_descriptor_ = file->message_type(117);
  static const int BuyZenyCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, bcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, zeny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, ret_),
  };
  BuyZenyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyZenyCmd_descriptor_,
      BuyZenyCmd::default_instance_,
      BuyZenyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyZenyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyZenyCmd));
  CallTeamerUserCmd_descriptor_ = file->message_type(118);
  static const int CallTeamerUserCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, pos_),
  };
  CallTeamerUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallTeamerUserCmd_descriptor_,
      CallTeamerUserCmd::default_instance_,
      CallTeamerUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallTeamerUserCmd));
  CallTeamerReplyUserCmd_descriptor_ = file->message_type(119);
  static const int CallTeamerReplyUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, pos_),
  };
  CallTeamerReplyUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallTeamerReplyUserCmd_descriptor_,
      CallTeamerReplyUserCmd::default_instance_,
      CallTeamerReplyUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTeamerReplyUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallTeamerReplyUserCmd));
  SpecialEffectCmd_descriptor_ = file->message_type(120);
  static const int SpecialEffectCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, dramaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, times_),
  };
  SpecialEffectCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SpecialEffectCmd_descriptor_,
      SpecialEffectCmd::default_instance_,
      SpecialEffectCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SpecialEffectCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SpecialEffectCmd));
  MarriageProposalCmd_descriptor_ = file->message_type(121);
  static const int MarriageProposalCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, sign_),
  };
  MarriageProposalCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageProposalCmd_descriptor_,
      MarriageProposalCmd::default_instance_,
      MarriageProposalCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageProposalCmd));
  MarriageProposalReplyCmd_descriptor_ = file->message_type(122);
  static const int MarriageProposalReplyCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, sign_),
  };
  MarriageProposalReplyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageProposalReplyCmd_descriptor_,
      MarriageProposalReplyCmd::default_instance_,
      MarriageProposalReplyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalReplyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageProposalReplyCmd));
  UploadWeddingPhotoUserCmd_descriptor_ = file->message_type(123);
  static const int UploadWeddingPhotoUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, time_),
  };
  UploadWeddingPhotoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UploadWeddingPhotoUserCmd_descriptor_,
      UploadWeddingPhotoUserCmd::default_instance_,
      UploadWeddingPhotoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UploadWeddingPhotoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UploadWeddingPhotoUserCmd));
  MarriageProposalSuccessCmd_descriptor_ = file->message_type(124);
  static const int MarriageProposalSuccessCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, ismaster_),
  };
  MarriageProposalSuccessCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarriageProposalSuccessCmd_descriptor_,
      MarriageProposalSuccessCmd::default_instance_,
      MarriageProposalSuccessCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarriageProposalSuccessCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarriageProposalSuccessCmd));
  InviteeWeddingStartNtfUserCmd_descriptor_ = file->message_type(125);
  static const int InviteeWeddingStartNtfUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteeWeddingStartNtfUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteeWeddingStartNtfUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteeWeddingStartNtfUserCmd, itemguid_),
  };
  InviteeWeddingStartNtfUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteeWeddingStartNtfUserCmd_descriptor_,
      InviteeWeddingStartNtfUserCmd::default_instance_,
      InviteeWeddingStartNtfUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteeWeddingStartNtfUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteeWeddingStartNtfUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteeWeddingStartNtfUserCmd));
  KFCShareUserCmd_descriptor_ = file->message_type(126);
  static const int KFCShareUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KFCShareUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KFCShareUserCmd, param_),
  };
  KFCShareUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KFCShareUserCmd_descriptor_,
      KFCShareUserCmd::default_instance_,
      KFCShareUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KFCShareUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KFCShareUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KFCShareUserCmd));
  CheckRelationUserCmd_descriptor_ = file->message_type(127);
  static const int CheckRelationUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, ret_),
  };
  CheckRelationUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckRelationUserCmd_descriptor_,
      CheckRelationUserCmd::default_instance_,
      CheckRelationUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRelationUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckRelationUserCmd));
  TwinsActionUserCmd_descriptor_ = file->message_type(128);
  static const int TwinsActionUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, actionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, sponsor_),
  };
  TwinsActionUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TwinsActionUserCmd_descriptor_,
      TwinsActionUserCmd::default_instance_,
      TwinsActionUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TwinsActionUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TwinsActionUserCmd));
  ShowServantUserCmd_descriptor_ = file->message_type(129);
  static const int ShowServantUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowServantUserCmd, show_),
  };
  ShowServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShowServantUserCmd_descriptor_,
      ShowServantUserCmd::default_instance_,
      ShowServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShowServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShowServantUserCmd));
  ReplaceServantUserCmd_descriptor_ = file->message_type(130);
  static const int ReplaceServantUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, replace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, servant_),
  };
  ReplaceServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplaceServantUserCmd_descriptor_,
      ReplaceServantUserCmd::default_instance_,
      ReplaceServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplaceServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplaceServantUserCmd));
  ServantService_descriptor_ = file->message_type(131);
  static const int ServantService_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantService, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantService, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantService, type_),
  };
  ServantService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServantService_descriptor_,
      ServantService::default_instance_,
      ServantService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServantService));
  RecommendItemInfo_descriptor_ = file->message_type(132);
  static const int RecommendItemInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, finishtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, realopen_),
  };
  RecommendItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendItemInfo_descriptor_,
      RecommendItemInfo::default_instance_,
      RecommendItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendItemInfo));
  RecommendServantUserCmd_descriptor_ = file->message_type(133);
  static const int RecommendServantUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendServantUserCmd, items_),
  };
  RecommendServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecommendServantUserCmd_descriptor_,
      RecommendServantUserCmd::default_instance_,
      RecommendServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecommendServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecommendServantUserCmd));
  ReceiveServantUserCmd_descriptor_ = file->message_type(134);
  static const int ReceiveServantUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, favorability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, dwid_),
  };
  ReceiveServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveServantUserCmd_descriptor_,
      ReceiveServantUserCmd::default_instance_,
      ReceiveServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveServantUserCmd));
  FavorabilityStatus_descriptor_ = file->message_type(135);
  static const int FavorabilityStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavorabilityStatus, favorability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavorabilityStatus, status_),
  };
  FavorabilityStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FavorabilityStatus_descriptor_,
      FavorabilityStatus::default_instance_,
      FavorabilityStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavorabilityStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FavorabilityStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FavorabilityStatus));
  ServantRewardStatusUserCmd_descriptor_ = file->message_type(136);
  static const int ServantRewardStatusUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, stayfavo_),
  };
  ServantRewardStatusUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServantRewardStatusUserCmd_descriptor_,
      ServantRewardStatusUserCmd::default_instance_,
      ServantRewardStatusUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServantRewardStatusUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServantRewardStatusUserCmd));
  ProfessionInfo_descriptor_ = file->message_type(137);
  static const int ProfessionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, iscurrent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, isbuy_),
  };
  ProfessionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionInfo_descriptor_,
      ProfessionInfo::default_instance_,
      ProfessionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionInfo));
  ProfessionQueryUserCmd_descriptor_ = file->message_type(138);
  static const int ProfessionQueryUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryUserCmd, items_),
  };
  ProfessionQueryUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionQueryUserCmd_descriptor_,
      ProfessionQueryUserCmd::default_instance_,
      ProfessionQueryUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionQueryUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionQueryUserCmd));
  ProfessionBuyUserCmd_descriptor_ = file->message_type(139);
  static const int ProfessionBuyUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, success_),
  };
  ProfessionBuyUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionBuyUserCmd_descriptor_,
      ProfessionBuyUserCmd::default_instance_,
      ProfessionBuyUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionBuyUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionBuyUserCmd));
  ProfessionChangeUserCmd_descriptor_ = file->message_type(140);
  static const int ProfessionChangeUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, branch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, success_),
  };
  ProfessionChangeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionChangeUserCmd_descriptor_,
      ProfessionChangeUserCmd::default_instance_,
      ProfessionChangeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionChangeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionChangeUserCmd));
  AstrolabeProfessionData_descriptor_ = file->message_type(141);
  static const int AstrolabeProfessionData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeProfessionData, stars_),
  };
  AstrolabeProfessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AstrolabeProfessionData_descriptor_,
      AstrolabeProfessionData::default_instance_,
      AstrolabeProfessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeProfessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AstrolabeProfessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AstrolabeProfessionData));
  AttrProfessionData_descriptor_ = file->message_type(142);
  static const int AttrProfessionData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrProfessionData, attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrProfessionData, datas_),
  };
  AttrProfessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrProfessionData_descriptor_,
      AttrProfessionData::default_instance_,
      AttrProfessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrProfessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrProfessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrProfessionData));
  EquipInfo_descriptor_ = file->message_type(143);
  static const int EquipInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, guid_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  EquipPackData_descriptor_ = file->message_type(144);
  static const int EquipPackData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackData, datas_),
  };
  EquipPackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipPackData_descriptor_,
      EquipPackData::default_instance_,
      EquipPackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipPackData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipPackData));
  SkillValidPosData_descriptor_ = file->message_type(145);
  static const int SkillValidPosData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPosData, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPosData, autopos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPosData, extendpos_),
  };
  SkillValidPosData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillValidPosData_descriptor_,
      SkillValidPosData::default_instance_,
      SkillValidPosData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPosData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillValidPosData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillValidPosData));
  SkillProfessionData_descriptor_ = file->message_type(146);
  static const int SkillProfessionData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, left_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, novice_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, beings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, curbeingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, beinginfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, skillpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, shortcut_),
  };
  SkillProfessionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillProfessionData_descriptor_,
      SkillProfessionData::default_instance_,
      SkillProfessionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillProfessionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillProfessionData));
  ProfessionUserInfo_descriptor_ = file->message_type(147);
  static const int ProfessionUserInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, joblv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, recordname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, recordtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, attr_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, equip_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, astrolabe_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, isfirst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, isbuy_),
  };
  ProfessionUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfessionUserInfo_descriptor_,
      ProfessionUserInfo::default_instance_,
      ProfessionUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfessionUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfessionUserInfo));
  SlotInfo_descriptor_ = file->message_type(148);
  static const int SlotInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, costnum_),
  };
  SlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotInfo_descriptor_,
      SlotInfo::default_instance_,
      SlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotInfo));
  UserAstrolMaterialData_descriptor_ = file->message_type(149);
  static const int UserAstrolMaterialData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAstrolMaterialData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAstrolMaterialData, materials_),
  };
  UserAstrolMaterialData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAstrolMaterialData_descriptor_,
      UserAstrolMaterialData::default_instance_,
      UserAstrolMaterialData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAstrolMaterialData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAstrolMaterialData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAstrolMaterialData));
  UpdateRecordInfoUserCmd_descriptor_ = file->message_type(150);
  static const int UpdateRecordInfoUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, delete_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, card_expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, astrol_data_),
  };
  UpdateRecordInfoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRecordInfoUserCmd_descriptor_,
      UpdateRecordInfoUserCmd::default_instance_,
      UpdateRecordInfoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRecordInfoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRecordInfoUserCmd));
  SaveRecordUserCmd_descriptor_ = file->message_type(151);
  static const int SaveRecordUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, record_name_),
  };
  SaveRecordUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveRecordUserCmd_descriptor_,
      SaveRecordUserCmd::default_instance_,
      SaveRecordUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveRecordUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveRecordUserCmd));
  LoadRecordUserCmd_descriptor_ = file->message_type(152);
  static const int LoadRecordUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRecordUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRecordUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRecordUserCmd, slotid_),
  };
  LoadRecordUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadRecordUserCmd_descriptor_,
      LoadRecordUserCmd::default_instance_,
      LoadRecordUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRecordUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadRecordUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadRecordUserCmd));
  ChangeRecordNameUserCmd_descriptor_ = file->message_type(153);
  static const int ChangeRecordNameUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, record_name_),
  };
  ChangeRecordNameUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeRecordNameUserCmd_descriptor_,
      ChangeRecordNameUserCmd::default_instance_,
      ChangeRecordNameUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeRecordNameUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeRecordNameUserCmd));
  BuyRecordSlotUserCmd_descriptor_ = file->message_type(154);
  static const int BuyRecordSlotUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRecordSlotUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRecordSlotUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRecordSlotUserCmd, slotid_),
  };
  BuyRecordSlotUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyRecordSlotUserCmd_descriptor_,
      BuyRecordSlotUserCmd::default_instance_,
      BuyRecordSlotUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRecordSlotUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyRecordSlotUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyRecordSlotUserCmd));
  DeleteRecordUserCmd_descriptor_ = file->message_type(155);
  static const int DeleteRecordUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRecordUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRecordUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRecordUserCmd, slotid_),
  };
  DeleteRecordUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRecordUserCmd_descriptor_,
      DeleteRecordUserCmd::default_instance_,
      DeleteRecordUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRecordUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRecordUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRecordUserCmd));
  UpdateBranchInfoUserCmd_descriptor_ = file->message_type(156);
  static const int UpdateBranchInfoUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, sync_type_),
  };
  UpdateBranchInfoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBranchInfoUserCmd_descriptor_,
      UpdateBranchInfoUserCmd::default_instance_,
      UpdateBranchInfoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBranchInfoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBranchInfoUserCmd));
  EnterCapraActivityCmd_descriptor_ = file->message_type(157);
  static const int EnterCapraActivityCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCapraActivityCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCapraActivityCmd, param_),
  };
  EnterCapraActivityCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterCapraActivityCmd_descriptor_,
      EnterCapraActivityCmd::default_instance_,
      EnterCapraActivityCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCapraActivityCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterCapraActivityCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterCapraActivityCmd));
  InviteWithMeUserCmd_descriptor_ = file->message_type(158);
  static const int InviteWithMeUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, sendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, sign_),
  };
  InviteWithMeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteWithMeUserCmd_descriptor_,
      InviteWithMeUserCmd::default_instance_,
      InviteWithMeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteWithMeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteWithMeUserCmd));
  QueryAltmanKillUserCmd_descriptor_ = file->message_type(159);
  static const int QueryAltmanKillUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAltmanKillUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAltmanKillUserCmd, param_),
  };
  QueryAltmanKillUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryAltmanKillUserCmd_descriptor_,
      QueryAltmanKillUserCmd::default_instance_,
      QueryAltmanKillUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAltmanKillUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryAltmanKillUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryAltmanKillUserCmd));
  BoothInfo_descriptor_ = file->message_type(160);
  static const int BoothInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfo, sign_),
  };
  BoothInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoothInfo_descriptor_,
      BoothInfo::default_instance_,
      BoothInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoothInfo));
  BoothReqUserCmd_descriptor_ = file->message_type(161);
  static const int BoothReqUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, success_),
  };
  BoothReqUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoothReqUserCmd_descriptor_,
      BoothReqUserCmd::default_instance_,
      BoothReqUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothReqUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoothReqUserCmd));
  BoothInfoSyncUserCmd_descriptor_ = file->message_type(162);
  static const int BoothInfoSyncUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, oper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, info_),
  };
  BoothInfoSyncUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoothInfoSyncUserCmd_descriptor_,
      BoothInfoSyncUserCmd::default_instance_,
      BoothInfoSyncUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoothInfoSyncUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoothInfoSyncUserCmd));
  DressUpModelUserCmd_descriptor_ = file->message_type(163);
  static const int DressUpModelUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, value_),
  };
  DressUpModelUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressUpModelUserCmd_descriptor_,
      DressUpModelUserCmd::default_instance_,
      DressUpModelUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpModelUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressUpModelUserCmd));
  DressUpHeadUserCmd_descriptor_ = file->message_type(164);
  static const int DressUpHeadUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, puton_),
  };
  DressUpHeadUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressUpHeadUserCmd_descriptor_,
      DressUpHeadUserCmd::default_instance_,
      DressUpHeadUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpHeadUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressUpHeadUserCmd));
  StageInfo_descriptor_ = file->message_type(165);
  static const int StageInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, usernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, waittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, status_),
  };
  StageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageInfo_descriptor_,
      StageInfo::default_instance_,
      StageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageInfo));
  QueryStageUserCmd_descriptor_ = file->message_type(166);
  static const int QueryStageUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, info_),
  };
  QueryStageUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryStageUserCmd_descriptor_,
      QueryStageUserCmd::default_instance_,
      QueryStageUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryStageUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryStageUserCmd));
  DressUpLineUpUserCmd_descriptor_ = file->message_type(167);
  static const int DressUpLineUpUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, enter_),
  };
  DressUpLineUpUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressUpLineUpUserCmd_descriptor_,
      DressUpLineUpUserCmd::default_instance_,
      DressUpLineUpUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpLineUpUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressUpLineUpUserCmd));
  StageUserDataType_descriptor_ = file->message_type(168);
  static const int StageUserDataType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageUserDataType, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageUserDataType, value_),
  };
  StageUserDataType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StageUserDataType_descriptor_,
      StageUserDataType::default_instance_,
      StageUserDataType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageUserDataType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StageUserDataType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StageUserDataType));
  DressUpStageUserCmd_descriptor_ = file->message_type(169);
  static const int DressUpStageUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, stageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, datas_),
  };
  DressUpStageUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DressUpStageUserCmd_descriptor_,
      DressUpStageUserCmd::default_instance_,
      DressUpStageUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DressUpStageUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DressUpStageUserCmd));
  GoToFunctionMapUserCmd_descriptor_ = file->message_type(170);
  static const int GoToFunctionMapUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToFunctionMapUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToFunctionMapUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToFunctionMapUserCmd, etype_),
  };
  GoToFunctionMapUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoToFunctionMapUserCmd_descriptor_,
      GoToFunctionMapUserCmd::default_instance_,
      GoToFunctionMapUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToFunctionMapUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoToFunctionMapUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoToFunctionMapUserCmd));
  GrowthCurInfo_descriptor_ = file->message_type(171);
  static const int GrowthCurInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthCurInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthCurInfo, groupid_),
  };
  GrowthCurInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthCurInfo_descriptor_,
      GrowthCurInfo::default_instance_,
      GrowthCurInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthCurInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthCurInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthCurInfo));
  GrowthItemInfo_descriptor_ = file->message_type(172);
  static const int GrowthItemInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthItemInfo, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthItemInfo, finishtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthItemInfo, status_),
  };
  GrowthItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthItemInfo_descriptor_,
      GrowthItemInfo::default_instance_,
      GrowthItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthItemInfo));
  GrowthValueInfo_descriptor_ = file->message_type(173);
  static const int GrowthValueInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthValueInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthValueInfo, growth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthValueInfo, everreward_),
  };
  GrowthValueInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthValueInfo_descriptor_,
      GrowthValueInfo::default_instance_,
      GrowthValueInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthValueInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthValueInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthValueInfo));
  GrowthGroupInfo_descriptor_ = file->message_type(174);
  static const int GrowthGroupInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthGroupInfo, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthGroupInfo, valueitems_),
  };
  GrowthGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthGroupInfo_descriptor_,
      GrowthGroupInfo::default_instance_,
      GrowthGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthGroupInfo));
  GrowthServantUserCmd_descriptor_ = file->message_type(175);
  static const int GrowthServantUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, unlockitems_),
  };
  GrowthServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthServantUserCmd_descriptor_,
      GrowthServantUserCmd::default_instance_,
      GrowthServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthServantUserCmd));
  ReceiveGrowthServantUserCmd_descriptor_ = file->message_type(176);
  static const int ReceiveGrowthServantUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, dwvalue_),
  };
  ReceiveGrowthServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveGrowthServantUserCmd_descriptor_,
      ReceiveGrowthServantUserCmd::default_instance_,
      ReceiveGrowthServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveGrowthServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveGrowthServantUserCmd));
  GrowthOpenServantUserCmd_descriptor_ = file->message_type(177);
  static const int GrowthOpenServantUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthOpenServantUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthOpenServantUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthOpenServantUserCmd, groupid_),
  };
  GrowthOpenServantUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowthOpenServantUserCmd_descriptor_,
      GrowthOpenServantUserCmd::default_instance_,
      GrowthOpenServantUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthOpenServantUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowthOpenServantUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowthOpenServantUserCmd));
  CheatTagUserCmd_descriptor_ = file->message_type(178);
  static const int CheatTagUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, frame_),
  };
  CheatTagUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheatTagUserCmd_descriptor_,
      CheatTagUserCmd::default_instance_,
      CheatTagUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheatTagUserCmd));
  CheatTagStatUserCmd_descriptor_ = file->message_type(179);
  static const int CheatTagStatUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagStatUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagStatUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagStatUserCmd, count_),
  };
  CheatTagStatUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheatTagStatUserCmd_descriptor_,
      CheatTagStatUserCmd::default_instance_,
      CheatTagStatUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagStatUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheatTagStatUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheatTagStatUserCmd));
  User2Param_descriptor_ = file->enum_type(0);
  EMessageType_descriptor_ = file->enum_type(1);
  EMessageActOpt_descriptor_ = file->enum_type(2);
  EUserActionType_descriptor_ = file->enum_type(3);
  EReliveType_descriptor_ = file->enum_type(4);
  EEffectOpt_descriptor_ = file->enum_type(5);
  EEffectType_descriptor_ = file->enum_type(6);
  EDressType_descriptor_ = file->enum_type(7);
  PointType_descriptor_ = file->enum_type(8);
  EDbgMsgType_descriptor_ = file->enum_type(9);
  GameTimeOpt_descriptor_ = file->enum_type(10);
  CD_TYPE_descriptor_ = file->enum_type(11);
  EGoToGearType_descriptor_ = file->enum_type(12);
  EFollowType_descriptor_ = file->enum_type(13);
  EAlbumType_descriptor_ = file->enum_type(14);
  EBattleStatus_descriptor_ = file->enum_type(15);
  EQueryType_descriptor_ = file->enum_type(16);
  EFashionHideType_descriptor_ = file->enum_type(17);
  ECountDownType_descriptor_ = file->enum_type(18);
  ETreeStatus_descriptor_ = file->enum_type(19);
  EZoneStatus_descriptor_ = file->enum_type(20);
  EZoneState_descriptor_ = file->enum_type(21);
  EJumpZone_descriptor_ = file->enum_type(22);
  SeatShowType_descriptor_ = file->enum_type(23);
  EOptionType_descriptor_ = file->enum_type(24);
  ERenameErrCode_descriptor_ = file->enum_type(25);
  EProposalReply_descriptor_ = file->enum_type(26);
  ETwinsOperation_descriptor_ = file->enum_type(27);
  EServantService_descriptor_ = file->enum_type(28);
  ERecommendStatus_descriptor_ = file->enum_type(29);
  EProfressionDataType_descriptor_ = file->enum_type(30);
  ESlotType_descriptor_ = file->enum_type(31);
  EBoothOper_descriptor_ = file->enum_type(32);
  EBoothSign_descriptor_ = file->enum_type(33);
  EDressUpStatus_descriptor_ = file->enum_type(34);
  EFuncMapType_descriptor_ = file->enum_type(35);
  EGrowthStatus_descriptor_ = file->enum_type(36);
  EGrowthType_descriptor_ = file->enum_type(37);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneUser2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoCity_descriptor_, &GoCity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgLangParam_descriptor_, &MsgLangParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgParam_descriptor_, &MsgParam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMsg_descriptor_, &SysMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcDataSync_descriptor_, &NpcDataSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserNineSyncCmd_descriptor_, &UserNineSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserActionNtf_descriptor_, &UserActionNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BufferData_descriptor_, &BufferData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserBuffNineSyncCmd_descriptor_, &UserBuffNineSyncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitPosUserCmd_descriptor_, &ExitPosUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Relive_descriptor_, &Relive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VarUpdate_descriptor_, &VarUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TalkInfo_descriptor_, &TalkInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTime_descriptor_, &ServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EffectUserCmd_descriptor_, &EffectUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MenuList_descriptor_, &MenuList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMenu_descriptor_, &NewMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfoNine_descriptor_, &TeamInfoNine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UsePortrait_descriptor_, &UsePortrait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseFrame_descriptor_, &UseFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPortraitFrame_descriptor_, &NewPortraitFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPortraitListUserCmd_descriptor_, &QueryPortraitListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseDressing_descriptor_, &UseDressing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDressing_descriptor_, &NewDressing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressingListUserCmd_descriptor_, &DressingListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddAttrPoint_descriptor_, &AddAttrPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopGotItem_descriptor_, &ShopGotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryShopGotItem_descriptor_, &QueryShopGotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateShopGotItem_descriptor_, &UpdateShopGotItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenUI_descriptor_, &OpenUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DbgSysMsg_descriptor_, &DbgSysMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowTransferCmd_descriptor_, &FollowTransferCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallNpcFuncCmd_descriptor_, &CallNpcFuncCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelShow_descriptor_, &ModelShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoundEffectCmd_descriptor_, &SoundEffectCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PresetMsg_descriptor_, &PresetMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PresetMsgCmd_descriptor_, &PresetMsgCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeBgmCmd_descriptor_, &ChangeBgmCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FighterInfo_descriptor_, &FighterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryFighterInfo_descriptor_, &QueryFighterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameTimeCmd_descriptor_, &GameTimeCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDTimeItem_descriptor_, &CDTimeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDTimeUserCmd_descriptor_, &CDTimeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StateChange_descriptor_, &StateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Photo_descriptor_, &Photo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeScreen_descriptor_, &ShakeScreen::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortcutItem_descriptor_, &ShortcutItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryShortcut_descriptor_, &QueryShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutShortcut_descriptor_, &PutShortcut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NpcChangeAngle_descriptor_, &NpcChangeAngle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraFocus_descriptor_, &CameraFocus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToListUserCmd_descriptor_, &GoToListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToGearUserCmd_descriptor_, &GoToGearUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewTransMapCmd_descriptor_, &NewTransMapCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeathTransferListCmd_descriptor_, &DeathTransferListCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewDeathTransferCmd_descriptor_, &NewDeathTransferCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseDeathTransferCmd_descriptor_, &UseDeathTransferCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FollowerUser_descriptor_, &FollowerUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeFollowUserCmd_descriptor_, &BeFollowUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LaboratoryUserCmd_descriptor_, &LaboratoryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GotoLaboratoryUserCmd_descriptor_, &GotoLaboratoryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeProfession_descriptor_, &ExchangeProfession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Scenery_descriptor_, &Scenery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SceneryUserCmd_descriptor_, &SceneryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoMapQuestUserCmd_descriptor_, &GoMapQuestUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoMapFollowUserCmd_descriptor_, &GoMapFollowUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAutoHitCmd_descriptor_, &UserAutoHitCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadSceneryPhotoUserCmd_descriptor_, &UploadSceneryPhotoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpyunUrl_descriptor_, &UpyunUrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadSceneryPhotoUserCmd_descriptor_, &DownloadSceneryPhotoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMapArea_descriptor_, &QueryMapArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMapAreaNtf_descriptor_, &NewMapAreaNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffForeverCmd_descriptor_, &BuffForeverCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinHandsUserCmd_descriptor_, &InviteJoinHandsUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BreakUpHandsUserCmd_descriptor_, &BreakUpHandsUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandStatusUserCmd_descriptor_, &HandStatusUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryShow_descriptor_, &QueryShow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MusicItem_descriptor_, &MusicItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryMusicList_descriptor_, &QueryMusicList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DemandMusic_descriptor_, &DemandMusic::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseMusicFrame_descriptor_, &CloseMusicFrame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadOkSceneryUserCmd_descriptor_, &UploadOkSceneryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinHandsUserCmd_descriptor_, &JoinHandsUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraceItem_descriptor_, &TraceItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTraceList_descriptor_, &QueryTraceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateTraceList_descriptor_, &UpdateTraceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetDirection_descriptor_, &SetDirection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleTimelenUserCmd_descriptor_, &BattleTimelenUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetOptionUserCmd_descriptor_, &SetOptionUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserInfoUserCmd_descriptor_, &QueryUserInfoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountDownTickUserCmd_descriptor_, &CountDownTickUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemMusicNtfUserCmd_descriptor_, &ItemMusicNtfUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShakeTreeUserCmd_descriptor_, &ShakeTreeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tree_descriptor_, &Tree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeListUserCmd_descriptor_, &TreeListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityNtfUserCmd_descriptor_, &ActivityNtfUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfo_descriptor_, &ZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecentZoneInfo_descriptor_, &RecentZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryZoneStatusUserCmd_descriptor_, &QueryZoneStatusUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JumpZoneUserCmd_descriptor_, &JumpZoneUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemImageUserNtfUserCmd_descriptor_, &ItemImageUserNtfUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFollowUserCmd_descriptor_, &InviteFollowUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeNameUserCmd_descriptor_, &ChangeNameUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargePlayUserCmd_descriptor_, &ChargePlayUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequireNpcFuncUserCmd_descriptor_, &RequireNpcFuncUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckSeatUserCmd_descriptor_, &CheckSeatUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfSeatUserCmd_descriptor_, &NtfSeatUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YoyoSeatUserCmd_descriptor_, &YoyoSeatUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowSeatUserCmd_descriptor_, &ShowSeatUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetNormalSkillOptionUserCmd_descriptor_, &SetNormalSkillOptionUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewSetOptionUserCmd_descriptor_, &NewSetOptionUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsolvedSceneryNtfUserCmd_descriptor_, &UnsolvedSceneryNtfUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VisibleNpc_descriptor_, &VisibleNpc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfVisibleNpcUserCmd_descriptor_, &NtfVisibleNpcUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpyunAuthorizationCmd_descriptor_, &UpyunAuthorizationCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransformPreDataCmd_descriptor_, &TransformPreDataCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRenameCmd_descriptor_, &UserRenameCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyZenyCmd_descriptor_, &BuyZenyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallTeamerUserCmd_descriptor_, &CallTeamerUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallTeamerReplyUserCmd_descriptor_, &CallTeamerReplyUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SpecialEffectCmd_descriptor_, &SpecialEffectCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageProposalCmd_descriptor_, &MarriageProposalCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageProposalReplyCmd_descriptor_, &MarriageProposalReplyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UploadWeddingPhotoUserCmd_descriptor_, &UploadWeddingPhotoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarriageProposalSuccessCmd_descriptor_, &MarriageProposalSuccessCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteeWeddingStartNtfUserCmd_descriptor_, &InviteeWeddingStartNtfUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KFCShareUserCmd_descriptor_, &KFCShareUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckRelationUserCmd_descriptor_, &CheckRelationUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TwinsActionUserCmd_descriptor_, &TwinsActionUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShowServantUserCmd_descriptor_, &ShowServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplaceServantUserCmd_descriptor_, &ReplaceServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServantService_descriptor_, &ServantService::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendItemInfo_descriptor_, &RecommendItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecommendServantUserCmd_descriptor_, &RecommendServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveServantUserCmd_descriptor_, &ReceiveServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FavorabilityStatus_descriptor_, &FavorabilityStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServantRewardStatusUserCmd_descriptor_, &ServantRewardStatusUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionInfo_descriptor_, &ProfessionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionQueryUserCmd_descriptor_, &ProfessionQueryUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionBuyUserCmd_descriptor_, &ProfessionBuyUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionChangeUserCmd_descriptor_, &ProfessionChangeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AstrolabeProfessionData_descriptor_, &AstrolabeProfessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrProfessionData_descriptor_, &AttrProfessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipPackData_descriptor_, &EquipPackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillValidPosData_descriptor_, &SkillValidPosData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillProfessionData_descriptor_, &SkillProfessionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfessionUserInfo_descriptor_, &ProfessionUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotInfo_descriptor_, &SlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAstrolMaterialData_descriptor_, &UserAstrolMaterialData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRecordInfoUserCmd_descriptor_, &UpdateRecordInfoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveRecordUserCmd_descriptor_, &SaveRecordUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadRecordUserCmd_descriptor_, &LoadRecordUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeRecordNameUserCmd_descriptor_, &ChangeRecordNameUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyRecordSlotUserCmd_descriptor_, &BuyRecordSlotUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRecordUserCmd_descriptor_, &DeleteRecordUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBranchInfoUserCmd_descriptor_, &UpdateBranchInfoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterCapraActivityCmd_descriptor_, &EnterCapraActivityCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteWithMeUserCmd_descriptor_, &InviteWithMeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryAltmanKillUserCmd_descriptor_, &QueryAltmanKillUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoothInfo_descriptor_, &BoothInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoothReqUserCmd_descriptor_, &BoothReqUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoothInfoSyncUserCmd_descriptor_, &BoothInfoSyncUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressUpModelUserCmd_descriptor_, &DressUpModelUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressUpHeadUserCmd_descriptor_, &DressUpHeadUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageInfo_descriptor_, &StageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryStageUserCmd_descriptor_, &QueryStageUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressUpLineUpUserCmd_descriptor_, &DressUpLineUpUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StageUserDataType_descriptor_, &StageUserDataType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DressUpStageUserCmd_descriptor_, &DressUpStageUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoToFunctionMapUserCmd_descriptor_, &GoToFunctionMapUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthCurInfo_descriptor_, &GrowthCurInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthItemInfo_descriptor_, &GrowthItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthValueInfo_descriptor_, &GrowthValueInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthGroupInfo_descriptor_, &GrowthGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthServantUserCmd_descriptor_, &GrowthServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveGrowthServantUserCmd_descriptor_, &ReceiveGrowthServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowthOpenServantUserCmd_descriptor_, &GrowthOpenServantUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheatTagUserCmd_descriptor_, &CheatTagUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheatTagStatUserCmd_descriptor_, &CheatTagStatUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneUser2_2eproto() {
  delete GoCity::default_instance_;
  delete GoCity_reflection_;
  delete MsgLangParam::default_instance_;
  delete MsgLangParam_reflection_;
  delete MsgParam::default_instance_;
  delete MsgParam_reflection_;
  delete SysMsg::default_instance_;
  delete SysMsg_reflection_;
  delete NpcDataSync::default_instance_;
  delete NpcDataSync_reflection_;
  delete UserNineSyncCmd::default_instance_;
  delete UserNineSyncCmd_reflection_;
  delete UserActionNtf::default_instance_;
  delete UserActionNtf_reflection_;
  delete BufferData::default_instance_;
  delete BufferData_reflection_;
  delete UserBuffNineSyncCmd::default_instance_;
  delete UserBuffNineSyncCmd_reflection_;
  delete ExitPosUserCmd::default_instance_;
  delete ExitPosUserCmd_reflection_;
  delete Relive::default_instance_;
  delete Relive_reflection_;
  delete VarUpdate::default_instance_;
  delete VarUpdate_reflection_;
  delete TalkInfo::default_instance_;
  delete TalkInfo_reflection_;
  delete ServerTime::default_instance_;
  delete ServerTime_reflection_;
  delete EffectUserCmd::default_instance_;
  delete EffectUserCmd_reflection_;
  delete MenuList::default_instance_;
  delete MenuList_reflection_;
  delete NewMenu::default_instance_;
  delete NewMenu_reflection_;
  delete TeamInfoNine::default_instance_;
  delete TeamInfoNine_reflection_;
  delete UsePortrait::default_instance_;
  delete UsePortrait_reflection_;
  delete UseFrame::default_instance_;
  delete UseFrame_reflection_;
  delete NewPortraitFrame::default_instance_;
  delete NewPortraitFrame_reflection_;
  delete QueryPortraitListUserCmd::default_instance_;
  delete QueryPortraitListUserCmd_reflection_;
  delete UseDressing::default_instance_;
  delete UseDressing_reflection_;
  delete NewDressing::default_instance_;
  delete NewDressing_reflection_;
  delete DressingListUserCmd::default_instance_;
  delete DressingListUserCmd_reflection_;
  delete AddAttrPoint::default_instance_;
  delete AddAttrPoint_reflection_;
  delete ShopGotItem::default_instance_;
  delete ShopGotItem_reflection_;
  delete QueryShopGotItem::default_instance_;
  delete QueryShopGotItem_reflection_;
  delete UpdateShopGotItem::default_instance_;
  delete UpdateShopGotItem_reflection_;
  delete OpenUI::default_instance_;
  delete OpenUI_reflection_;
  delete DbgSysMsg::default_instance_;
  delete DbgSysMsg_reflection_;
  delete FollowTransferCmd::default_instance_;
  delete FollowTransferCmd_reflection_;
  delete CallNpcFuncCmd::default_instance_;
  delete CallNpcFuncCmd_reflection_;
  delete ModelShow::default_instance_;
  delete ModelShow_reflection_;
  delete SoundEffectCmd::default_instance_;
  delete SoundEffectCmd_reflection_;
  delete PresetMsg::default_instance_;
  delete PresetMsg_reflection_;
  delete PresetMsgCmd::default_instance_;
  delete PresetMsgCmd_reflection_;
  delete ChangeBgmCmd::default_instance_;
  delete ChangeBgmCmd_reflection_;
  delete FighterInfo::default_instance_;
  delete FighterInfo_reflection_;
  delete QueryFighterInfo::default_instance_;
  delete QueryFighterInfo_reflection_;
  delete GameTimeCmd::default_instance_;
  delete GameTimeCmd_reflection_;
  delete CDTimeItem::default_instance_;
  delete CDTimeItem_reflection_;
  delete CDTimeUserCmd::default_instance_;
  delete CDTimeUserCmd_reflection_;
  delete StateChange::default_instance_;
  delete StateChange_reflection_;
  delete Photo::default_instance_;
  delete Photo_reflection_;
  delete ShakeScreen::default_instance_;
  delete ShakeScreen_reflection_;
  delete ShortcutItem::default_instance_;
  delete ShortcutItem_reflection_;
  delete QueryShortcut::default_instance_;
  delete QueryShortcut_reflection_;
  delete PutShortcut::default_instance_;
  delete PutShortcut_reflection_;
  delete NpcChangeAngle::default_instance_;
  delete NpcChangeAngle_reflection_;
  delete CameraFocus::default_instance_;
  delete CameraFocus_reflection_;
  delete GoToListUserCmd::default_instance_;
  delete GoToListUserCmd_reflection_;
  delete GoToGearUserCmd::default_instance_;
  delete GoToGearUserCmd_reflection_;
  delete NewTransMapCmd::default_instance_;
  delete NewTransMapCmd_reflection_;
  delete DeathTransferListCmd::default_instance_;
  delete DeathTransferListCmd_reflection_;
  delete NewDeathTransferCmd::default_instance_;
  delete NewDeathTransferCmd_reflection_;
  delete UseDeathTransferCmd::default_instance_;
  delete UseDeathTransferCmd_reflection_;
  delete FollowerUser::default_instance_;
  delete FollowerUser_reflection_;
  delete BeFollowUserCmd::default_instance_;
  delete BeFollowUserCmd_reflection_;
  delete LaboratoryUserCmd::default_instance_;
  delete LaboratoryUserCmd_reflection_;
  delete GotoLaboratoryUserCmd::default_instance_;
  delete GotoLaboratoryUserCmd_reflection_;
  delete ExchangeProfession::default_instance_;
  delete ExchangeProfession_reflection_;
  delete Scenery::default_instance_;
  delete Scenery_reflection_;
  delete SceneryUserCmd::default_instance_;
  delete SceneryUserCmd_reflection_;
  delete GoMapQuestUserCmd::default_instance_;
  delete GoMapQuestUserCmd_reflection_;
  delete GoMapFollowUserCmd::default_instance_;
  delete GoMapFollowUserCmd_reflection_;
  delete UserAutoHitCmd::default_instance_;
  delete UserAutoHitCmd_reflection_;
  delete UploadSceneryPhotoUserCmd::default_instance_;
  delete UploadSceneryPhotoUserCmd_reflection_;
  delete UpyunUrl::default_instance_;
  delete UpyunUrl_reflection_;
  delete DownloadSceneryPhotoUserCmd::default_instance_;
  delete DownloadSceneryPhotoUserCmd_reflection_;
  delete QueryMapArea::default_instance_;
  delete QueryMapArea_reflection_;
  delete NewMapAreaNtf::default_instance_;
  delete NewMapAreaNtf_reflection_;
  delete BuffForeverCmd::default_instance_;
  delete BuffForeverCmd_reflection_;
  delete InviteJoinHandsUserCmd::default_instance_;
  delete InviteJoinHandsUserCmd_reflection_;
  delete BreakUpHandsUserCmd::default_instance_;
  delete BreakUpHandsUserCmd_reflection_;
  delete HandStatusUserCmd::default_instance_;
  delete HandStatusUserCmd_reflection_;
  delete QueryShow::default_instance_;
  delete QueryShow_reflection_;
  delete MusicItem::default_instance_;
  delete MusicItem_reflection_;
  delete QueryMusicList::default_instance_;
  delete QueryMusicList_reflection_;
  delete DemandMusic::default_instance_;
  delete DemandMusic_reflection_;
  delete CloseMusicFrame::default_instance_;
  delete CloseMusicFrame_reflection_;
  delete UploadOkSceneryUserCmd::default_instance_;
  delete UploadOkSceneryUserCmd_reflection_;
  delete JoinHandsUserCmd::default_instance_;
  delete JoinHandsUserCmd_reflection_;
  delete TraceItem::default_instance_;
  delete TraceItem_reflection_;
  delete QueryTraceList::default_instance_;
  delete QueryTraceList_reflection_;
  delete UpdateTraceList::default_instance_;
  delete UpdateTraceList_reflection_;
  delete SetDirection::default_instance_;
  delete SetDirection_reflection_;
  delete BattleTimelenUserCmd::default_instance_;
  delete BattleTimelenUserCmd_reflection_;
  delete SetOptionUserCmd::default_instance_;
  delete SetOptionUserCmd_reflection_;
  delete QueryUserInfoUserCmd::default_instance_;
  delete QueryUserInfoUserCmd_reflection_;
  delete CountDownTickUserCmd::default_instance_;
  delete CountDownTickUserCmd_reflection_;
  delete ItemMusicNtfUserCmd::default_instance_;
  delete ItemMusicNtfUserCmd_reflection_;
  delete ShakeTreeUserCmd::default_instance_;
  delete ShakeTreeUserCmd_reflection_;
  delete Tree::default_instance_;
  delete Tree_reflection_;
  delete TreeListUserCmd::default_instance_;
  delete TreeListUserCmd_reflection_;
  delete ActivityNtfUserCmd::default_instance_;
  delete ActivityNtfUserCmd_reflection_;
  delete ZoneInfo::default_instance_;
  delete ZoneInfo_reflection_;
  delete RecentZoneInfo::default_instance_;
  delete RecentZoneInfo_reflection_;
  delete QueryZoneStatusUserCmd::default_instance_;
  delete QueryZoneStatusUserCmd_reflection_;
  delete JumpZoneUserCmd::default_instance_;
  delete JumpZoneUserCmd_reflection_;
  delete ItemImageUserNtfUserCmd::default_instance_;
  delete ItemImageUserNtfUserCmd_reflection_;
  delete InviteFollowUserCmd::default_instance_;
  delete InviteFollowUserCmd_reflection_;
  delete ChangeNameUserCmd::default_instance_;
  delete ChangeNameUserCmd_reflection_;
  delete ChargePlayUserCmd::default_instance_;
  delete ChargePlayUserCmd_reflection_;
  delete RequireNpcFuncUserCmd::default_instance_;
  delete RequireNpcFuncUserCmd_reflection_;
  delete CheckSeatUserCmd::default_instance_;
  delete CheckSeatUserCmd_reflection_;
  delete NtfSeatUserCmd::default_instance_;
  delete NtfSeatUserCmd_reflection_;
  delete YoyoSeatUserCmd::default_instance_;
  delete YoyoSeatUserCmd_reflection_;
  delete ShowSeatUserCmd::default_instance_;
  delete ShowSeatUserCmd_reflection_;
  delete SetNormalSkillOptionUserCmd::default_instance_;
  delete SetNormalSkillOptionUserCmd_reflection_;
  delete NewSetOptionUserCmd::default_instance_;
  delete NewSetOptionUserCmd_reflection_;
  delete UnsolvedSceneryNtfUserCmd::default_instance_;
  delete UnsolvedSceneryNtfUserCmd_reflection_;
  delete VisibleNpc::default_instance_;
  delete VisibleNpc_reflection_;
  delete NtfVisibleNpcUserCmd::default_instance_;
  delete NtfVisibleNpcUserCmd_reflection_;
  delete UpyunAuthorizationCmd::default_instance_;
  delete UpyunAuthorizationCmd_reflection_;
  delete TransformPreDataCmd::default_instance_;
  delete TransformPreDataCmd_reflection_;
  delete UserRenameCmd::default_instance_;
  delete UserRenameCmd_reflection_;
  delete BuyZenyCmd::default_instance_;
  delete BuyZenyCmd_reflection_;
  delete CallTeamerUserCmd::default_instance_;
  delete CallTeamerUserCmd_reflection_;
  delete CallTeamerReplyUserCmd::default_instance_;
  delete CallTeamerReplyUserCmd_reflection_;
  delete SpecialEffectCmd::default_instance_;
  delete SpecialEffectCmd_reflection_;
  delete MarriageProposalCmd::default_instance_;
  delete MarriageProposalCmd_reflection_;
  delete MarriageProposalReplyCmd::default_instance_;
  delete MarriageProposalReplyCmd_reflection_;
  delete UploadWeddingPhotoUserCmd::default_instance_;
  delete UploadWeddingPhotoUserCmd_reflection_;
  delete MarriageProposalSuccessCmd::default_instance_;
  delete MarriageProposalSuccessCmd_reflection_;
  delete InviteeWeddingStartNtfUserCmd::default_instance_;
  delete InviteeWeddingStartNtfUserCmd_reflection_;
  delete KFCShareUserCmd::default_instance_;
  delete KFCShareUserCmd_reflection_;
  delete CheckRelationUserCmd::default_instance_;
  delete CheckRelationUserCmd_reflection_;
  delete TwinsActionUserCmd::default_instance_;
  delete TwinsActionUserCmd_reflection_;
  delete ShowServantUserCmd::default_instance_;
  delete ShowServantUserCmd_reflection_;
  delete ReplaceServantUserCmd::default_instance_;
  delete ReplaceServantUserCmd_reflection_;
  delete ServantService::default_instance_;
  delete ServantService_reflection_;
  delete RecommendItemInfo::default_instance_;
  delete RecommendItemInfo_reflection_;
  delete RecommendServantUserCmd::default_instance_;
  delete RecommendServantUserCmd_reflection_;
  delete ReceiveServantUserCmd::default_instance_;
  delete ReceiveServantUserCmd_reflection_;
  delete FavorabilityStatus::default_instance_;
  delete FavorabilityStatus_reflection_;
  delete ServantRewardStatusUserCmd::default_instance_;
  delete ServantRewardStatusUserCmd_reflection_;
  delete ProfessionInfo::default_instance_;
  delete ProfessionInfo_reflection_;
  delete ProfessionQueryUserCmd::default_instance_;
  delete ProfessionQueryUserCmd_reflection_;
  delete ProfessionBuyUserCmd::default_instance_;
  delete ProfessionBuyUserCmd_reflection_;
  delete ProfessionChangeUserCmd::default_instance_;
  delete ProfessionChangeUserCmd_reflection_;
  delete AstrolabeProfessionData::default_instance_;
  delete AstrolabeProfessionData_reflection_;
  delete AttrProfessionData::default_instance_;
  delete AttrProfessionData_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete EquipPackData::default_instance_;
  delete EquipPackData_reflection_;
  delete SkillValidPosData::default_instance_;
  delete SkillValidPosData_reflection_;
  delete SkillProfessionData::default_instance_;
  delete SkillProfessionData_reflection_;
  delete ProfessionUserInfo::default_instance_;
  delete ProfessionUserInfo_reflection_;
  delete SlotInfo::default_instance_;
  delete SlotInfo_reflection_;
  delete UserAstrolMaterialData::default_instance_;
  delete UserAstrolMaterialData_reflection_;
  delete UpdateRecordInfoUserCmd::default_instance_;
  delete UpdateRecordInfoUserCmd_reflection_;
  delete SaveRecordUserCmd::default_instance_;
  delete SaveRecordUserCmd_reflection_;
  delete LoadRecordUserCmd::default_instance_;
  delete LoadRecordUserCmd_reflection_;
  delete ChangeRecordNameUserCmd::default_instance_;
  delete ChangeRecordNameUserCmd_reflection_;
  delete BuyRecordSlotUserCmd::default_instance_;
  delete BuyRecordSlotUserCmd_reflection_;
  delete DeleteRecordUserCmd::default_instance_;
  delete DeleteRecordUserCmd_reflection_;
  delete UpdateBranchInfoUserCmd::default_instance_;
  delete UpdateBranchInfoUserCmd_reflection_;
  delete EnterCapraActivityCmd::default_instance_;
  delete EnterCapraActivityCmd_reflection_;
  delete InviteWithMeUserCmd::default_instance_;
  delete InviteWithMeUserCmd_reflection_;
  delete QueryAltmanKillUserCmd::default_instance_;
  delete QueryAltmanKillUserCmd_reflection_;
  delete BoothInfo::default_instance_;
  delete BoothInfo_reflection_;
  delete BoothReqUserCmd::default_instance_;
  delete BoothReqUserCmd_reflection_;
  delete BoothInfoSyncUserCmd::default_instance_;
  delete BoothInfoSyncUserCmd_reflection_;
  delete DressUpModelUserCmd::default_instance_;
  delete DressUpModelUserCmd_reflection_;
  delete DressUpHeadUserCmd::default_instance_;
  delete DressUpHeadUserCmd_reflection_;
  delete StageInfo::default_instance_;
  delete StageInfo_reflection_;
  delete QueryStageUserCmd::default_instance_;
  delete QueryStageUserCmd_reflection_;
  delete DressUpLineUpUserCmd::default_instance_;
  delete DressUpLineUpUserCmd_reflection_;
  delete StageUserDataType::default_instance_;
  delete StageUserDataType_reflection_;
  delete DressUpStageUserCmd::default_instance_;
  delete DressUpStageUserCmd_reflection_;
  delete GoToFunctionMapUserCmd::default_instance_;
  delete GoToFunctionMapUserCmd_reflection_;
  delete GrowthCurInfo::default_instance_;
  delete GrowthCurInfo_reflection_;
  delete GrowthItemInfo::default_instance_;
  delete GrowthItemInfo_reflection_;
  delete GrowthValueInfo::default_instance_;
  delete GrowthValueInfo_reflection_;
  delete GrowthGroupInfo::default_instance_;
  delete GrowthGroupInfo_reflection_;
  delete GrowthServantUserCmd::default_instance_;
  delete GrowthServantUserCmd_reflection_;
  delete ReceiveGrowthServantUserCmd::default_instance_;
  delete ReceiveGrowthServantUserCmd_reflection_;
  delete GrowthOpenServantUserCmd::default_instance_;
  delete GrowthOpenServantUserCmd_reflection_;
  delete CheatTagUserCmd::default_instance_;
  delete CheatTagUserCmd_reflection_;
  delete CheatTagStatUserCmd::default_instance_;
  delete CheatTagStatUserCmd_reflection_;
}

void protobuf_AddDesc_SceneUser2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_Var_2eproto();
  ::Cmd::protobuf_AddDesc_SessionSociality_2eproto();
  ::Cmd::protobuf_AddDesc_SceneSkill_2eproto();
  ::Cmd::protobuf_AddDesc_SceneBeing_2eproto();
  ::Cmd::protobuf_AddDesc_AstrolabeCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020SceneUser2.proto\022\003Cmd\032\nxCmd.proto\032\017Sce"
    "neUser.proto\032\021ProtoCommon.proto\032\tVar.pro"
    "to\032\026SessionSociality.proto\032\020SceneSkill.p"
    "roto\032\020SceneBeing.proto\032\022AstrolabeCmd.pro"
    "to\"~\n\006GoCity\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\024SCENE_USER2_PROTOCMD\0221\n\005param\030\002 \001(\0162\017.C"
    "md.User2Param:\021USER2PARAM_GOCITY\022\020\n\005mapi"
    "d\030\003 \001(\r:\0010\"2\n\014MsgLangParam\022\023\n\010language\030\001"
    " \001(\r:\0010\022\r\n\005param\030\002 \001(\t\"S\n\010MsgParam\022\r\n\005pa"
    "ram\030\001 \001(\t\022\021\n\tsubparams\030\002 \003(\t\022%\n\nlangpara"
    "ms\030\003 \003(\0132\021.Cmd.MsgLangParam\"\222\002\n\006SysMsg\022/"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_P"
    "ROTOCMD\0221\n\005param\030\002 \001(\0162\017.Cmd.User2Param:"
    "\021USER2PARAM_SYSMSG\022\r\n\002id\030\003 \001(\r:\0010\0221\n\004typ"
    "e\030\004 \001(\0162\021.Cmd.EMessageType:\020EMESSAGETYPE"
    "_MIN\022\035\n\006params\030\005 \003(\0132\r.Cmd.MsgParam\0221\n\003a"
    "ct\030\006 \001(\0162\023.Cmd.EMessageActOpt:\017EMESSAGEA"
    "CT_ADD\022\020\n\005delay\030\007 \001(\r:\0010\"\303\001\n\013NpcDataSync"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\026USER2PARAM_NPCDATASYNC\022\017\n\004guid\030\003 \001(\004:"
    "\0010\022\034\n\005attrs\030\004 \003(\0132\r.Cmd.UserAttr\022\034\n\005data"
    "s\030\005 \003(\0132\r.Cmd.UserData\"\310\001\n\017UserNineSyncC"
    "md\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USE"
    "R2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.User2Pa"
    "ram:\027USER2PARAM_USERNINESYNC\022\017\n\004guid\030\003 \001"
    "(\004:\0010\022\034\n\005datas\030\004 \003(\0132\r.Cmd.UserData\022\034\n\005a"
    "ttrs\030\005 \003(\0132\r.Cmd.UserAttr\"\343\001\n\rUserAction"
    "Ntf\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_US"
    "ER2_PROTOCMD\0221\n\005param\030\002 \001(\0162\017.Cmd.User2P"
    "aram:\021USER2PARAM_ACTION\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022\020\n\005value\030\005 \001(\004:\0010\0227\n\004type\030\004 \001(\0162\024.Cmd"
    ".EUserActionType:\023EUSERACTIONTYPE_MIN\022\020\n"
    "\005delay\030\006 \001(\r:\0010\"\213\001\n\nBufferData\022\r\n\002id\030\001 \001"
    "(\r:\0010\022\020\n\005layer\030\002 \001(\r:\0010\022\017\n\004time\030\003 \001(\004:\0010"
    "\022\024\n\006active\030\004 \001(\010:\004true\022\020\n\010fromname\030\005 \001(\t"
    "\022\021\n\006fromid\030\006 \001(\004:\0010\022\020\n\005level\030\007 \001(\r:\0010\"\276\001"
    "\n\023UserBuffNineSyncCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0225\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\025USER2PARAM_BUFFE"
    "RSYNC\022\017\n\004guid\030\003 \001(\004:\0010\022 \n\007updates\030\004 \003(\0132"
    "\017.Cmd.BufferData\022\014\n\004dels\030\005 \003(\r\"\261\001\n\016ExitP"
    "osUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SC"
    "ENE_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd."
    "User2Param:\023USER2PARAM_EXIT_POS\022\032\n\003pos\030\003"
    " \001(\0132\r.Cmd.ScenePos\022\016\n\006exitid\030\004 \001(\r\022\r\n\005m"
    "apid\030\005 \001(\r\"\235\001\n\006Relive\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0221\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\021USER2PARAM_RELIV"
    "E\022/\n\004type\030\003 \001(\0162\020.Cmd.EReliveType:\017ERELI"
    "VETYPE_MIN\"\204\001\n\tVarUpdate\022/\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\024SCENE_USER2_PROTOCMD\022.\n\005par"
    "am\030\002 \001(\0162\017.Cmd.User2Param:\016USER2PARAM_VA"
    "R\022\026\n\004vars\030\003 \003(\0132\010.Cmd.Var\"\305\001\n\010TalkInfo\022/"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_P"
    "ROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.User2Param:"
    "\023USER2PARAM_TALKINFO\022\017\n\004guid\030\003 \001(\004:\0010\022\016\n"
    "\006talkid\030\004 \001(\r\022\023\n\013talkmessage\030\005 \001(\t\022\035\n\006pa"
    "rams\030\006 \003(\0132\r.Cmd.MsgParam\"\205\001\n\nServerTime"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\025USER2PARAM_SERVERTIME\022\017\n\004time\030\003 \001(\004:\001"
    "0\"\321\003\n\rEffectUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\024SCENE_USER2_PROTOCMD\0221\n\005param\030\002 "
    "\001(\0162\017.Cmd.User2Param:\021USER2PARAM_EFFECT\022"
    "8\n\neffecttype\030\003 \001(\0162\020.Cmd.EEffectType:\022E"
    "EFFECTTYPE_NORMAL\022\016\n\006charid\030\004 \001(\004\022\021\n\teff"
    "ectpos\030\005 \001(\r\022\032\n\003pos\030\006 \001(\0132\r.Cmd.ScenePos"
    "\022\016\n\006effect\030\007 \001(\t\022\017\n\004msec\030\010 \001(\r:\0010\022\020\n\005tim"
    "es\030\t \001(\r:\0011\022\020\n\005index\030\n \001(\r:\0011\022-\n\003opt\030\013 \001"
    "(\0162\017.Cmd.EEffectOpt:\017EEFFECTOPT_PLAY\022\026\n\007"
    "posbind\030\014 \001(\010:\005false\022\025\n\006epbind\030\r \001(\010:\005fa"
    "lse\022\020\n\005delay\030\016 \001(\r:\0010\022\r\n\002id\030\017 \001(\004:\0010\022\013\n\003"
    "dir\030\020 \001(\r\022\022\n\007skillid\030\021 \001(\r:\0010\"\213\001\n\010MenuLi"
    "st\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USE"
    "R2_PROTOCMD\022/\n\005param\030\002 \001(\0162\017.Cmd.User2Pa"
    "ram:\017USER2PARAM_MENU\022\014\n\004list\030\003 \003(\r\022\017\n\007de"
    "llist\030\004 \003(\r\"\224\001\n\007NewMenu\022/\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\024SCENE_USER2_PROTOCMD\0222\n\005para"
    "m\030\002 \001(\0162\017.Cmd.User2Param:\022USER2PARAM_NEW"
    "MENU\022\026\n\010animplay\030\003 \001(\010:\004true\022\014\n\004list\030\004 \003"
    "(\r\"\250\001\n\014TeamInfoNine\022/\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\024SCENE_USER2_PROTOCMD\0227\n\005param\030\002 "
    "\001(\0162\017.Cmd.User2Param:\027USER2PARAM_TEAMINF"
    "ONINE\022\021\n\006userid\030\003 \001(\004:\0010\022\r\n\002id\030\004 \001(\r:\0010\022"
    "\014\n\004name\030\005 \001(\t\"\205\001\n\013UsePortrait\022/\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0226"
    "\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\026USER2PAR"
    "AM_USEPORTRAIT\022\r\n\002id\030\003 \001(\r:\0010\"\177\n\010UseFram"
    "e\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER"
    "2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.User2Par"
    "am:\023USER2PARAM_USEFRAME\022\r\n\002id\030\003 \001(\r:\0010\"\241"
    "\001\n\020NewPortraitFrame\022/\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\024SCENE_USER2_PROTOCMD\022;\n\005param\030\002 "
    "\001(\0162\017.Cmd.User2Param:\033USER2PARAM_NEWPORT"
    "RAITFRAME\022\020\n\010portrait\030\003 \003(\r\022\r\n\005frame\030\004 \003"
    "(\r\"\233\001\n\030QueryPortraitListUserCmd\022/\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD"
    "\022<\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\034USER2P"
    "ARAM_QUERYPORTRAITLIST\022\020\n\010portrait\030\003 \003(\r"
    "\"\307\001\n\013UseDressing\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001(\016"
    "2\017.Cmd.User2Param:\026USER2PARAM_USEDRESSIN"
    "G\022\r\n\002id\030\003 \001(\r:\0010\022\021\n\006charid\030\004 \001(\004:\0010\022-\n\004t"
    "ype\030\005 \001(\0162\017.Cmd.EDressType:\016EDRESSTYPE_M"
    "IN\"\267\001\n\013NewDressing\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\026USER2PARAM_NEWDRESS"
    "ING\022-\n\004type\030\003 \001(\0162\017.Cmd.EDressType:\016EDRE"
    "SSTYPE_MIN\022\020\n\010dressids\030\004 \003(\r\"\300\001\n\023Dressin"
    "gListUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\024SCENE_USER2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.C"
    "md.User2Param:\027USER2PARAM_DRESSINGLIST\022-"
    "\n\004type\030\003 \001(\0162\017.Cmd.EDressType:\016EDRESSTYP"
    "E_MIN\022\020\n\010dressids\030\004 \003(\r\"\243\002\n\014AddAttrPoint"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\027USER2PARAM_ADDATTRPOINT\022+\n\004type\030\003 \001(\016"
    "2\016.Cmd.PointType:\rPOINTTYPE_ADD\022\023\n\010strpo"
    "int\030\004 \001(\r:\0010\022\023\n\010intpoint\030\005 \001(\r:\0010\022\023\n\010agi"
    "point\030\006 \001(\r:\0010\022\023\n\010dexpoint\030\007 \001(\r:\0010\022\023\n\010v"
    "itpoint\030\010 \001(\r:\0010\022\023\n\010lukpoint\030\t \001(\r:\0010\".\n"
    "\013ShopGotItem\022\r\n\002id\030\001 \001(\r:\0010\022\020\n\005count\030\002 \001"
    "(\r:\0010\"\360\001\n\020QueryShopGotItem\022/\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022;\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.User2Param:\033USER2PARAM_"
    "QUERYSHOPGOTITEM\022\037\n\005items\030\003 \003(\0132\020.Cmd.Sh"
    "opGotItem\022\'\n\rdiscountitems\030\004 \003(\0132\020.Cmd.S"
    "hopGotItem\022$\n\nlimititems\030\005 \003(\0132\020.Cmd.Sho"
    "pGotItem\"\357\001\n\021UpdateShopGotItem\022/\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022"
    "<\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\034USER2PA"
    "RAM_UPDATESHOPGOTITEM\022\036\n\004item\030\003 \001(\0132\020.Cm"
    "d.ShopGotItem\022&\n\014discountitem\030\004 \001(\0132\020.Cm"
    "d.ShopGotItem\022#\n\tlimititem\030\005 \001(\0132\020.Cmd.S"
    "hopGotItem\"\212\001\n\006OpenUI\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0221\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\021USER2PARAM_OPENU"
    "I\022\r\n\002id\030\003 \001(\r:\0010\022\r\n\002ui\030\004 \001(\r:\0010\"\264\001\n\tDbgS"
    "ysMsg\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_"
    "USER2_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.User"
    "2Param:\024USER2PARAM_DBGSYSMSG\022/\n\004type\030\003 \002"
    "(\0162\020.Cmd.EDbgMsgType:\017EDBGMSGTYPE_MIN\022\017\n"
    "\007content\030\004 \002(\t\"\221\001\n\021FollowTransferCmd\022/\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PRO"
    "TOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\031U"
    "SER2PARAM_FOLLOWTRANSFER\022\020\n\010targetId\030\003 \001"
    "(\004\"\230\001\n\016CallNpcFuncCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0222\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\022USER2PARAM_NPCFU"
    "NC\022\017\n\004type\030\003 \001(\r:\0010\022\020\n\010funparam\030\004 \001(\t\"\221\001"
    "\n\tModelShow\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024"
    "SCENE_USER2_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cm"
    "d.User2Param:\024USER2PARAM_MODELSHOW\022\017\n\004ty"
    "pe\030\003 \001(\r:\0010\022\014\n\004data\030\004 \001(\t\"\326\001\n\016SoundEffec"
    "tCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_U"
    "SER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.User2"
    "Param:\026USER2PARAM_SOUNDEFFECT\022\n\n\002se\030\003 \001("
    "\t\022\032\n\003pos\030\004 \001(\0132\r.Cmd.ScenePos\022\017\n\004msec\030\005 "
    "\001(\r:\0010\022\020\n\005times\030\006 \001(\r:\0011\022\020\n\005delay\030\007 \001(\r:"
    "\0010\"*\n\tPresetMsg\022\020\n\005msgid\030\001 \001(\r:\0010\022\013\n\003msg"
    "\030\002 \001(\t\"\207\001\n\014PresetMsgCmd\022/\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\024SCENE_USER2_PROTOCMD\0228\n\005para"
    "m\030\002 \001(\0162\017.Cmd.User2Param:\030USER2PARAM_PRE"
    "SETCHATMSG\022\014\n\004msgs\030\003 \003(\t\"\305\001\n\014ChangeBgmCm"
    "d\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER"
    "2_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.User2Par"
    "am:\024USER2PARAM_CHANGEBGM\022\013\n\003bgm\030\003 \001(\t\022\022\n"
    "\004play\030\004 \001(\010:\004true\022\020\n\005times\030\005 \001(\r:\0010\022\033\n\004t"
    "ype\030\006 \001(\0162\r.Cmd.EBgmType\"I\n\013FighterInfo\022"
    "\034\n\005datas\030\001 \003(\0132\r.Cmd.UserData\022\034\n\005attrs\030\002"
    " \003(\0132\r.Cmd.UserAttr\"\244\001\n\020QueryFighterInfo"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\033USER2PARAM_QUERYFIGHTERINFO\022\"\n\010fighte"
    "rs\030\003 \003(\0132\020.Cmd.FighterInfo\"\307\001\n\013GameTimeC"
    "md\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USE"
    "R2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.User2Pa"
    "ram:\023USER2PARAM_GAMETIME\0220\n\003opt\030\003 \001(\0162\020."
    "Cmd.GameTimeOpt:\021EGAMETIMEOPT_SYNC\022\016\n\003se"
    "c\030\004 \001(\r:\0011\022\020\n\005speed\030\005 \001(\r:\0011\"B\n\nCDTimeIt"
    "em\022\n\n\002id\030\001 \001(\r\022\014\n\004time\030\002 \001(\004\022\032\n\004type\030\003 \001"
    "(\0162\014.Cmd.CD_TYPE\"\222\001\n\rCDTimeUserCmd\022/\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTO"
    "CMD\0221\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\021USE"
    "R2PARAM_CDTIME\022\035\n\004list\030\003 \003(\0132\017.Cmd.CDTim"
    "eItem\"\261\001\n\013StateChange\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0226\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\026USER2PARAM_STATE"
    "CHANGE\0229\n\006status\030\003 \001(\0162\024.Cmd.ECreatureSt"
    "atus:\023ECREATURESTATUS_MIN\"{\n\005Photo\022/\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTO"
    "CMD\0220\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\020USE"
    "R2PARAM_PHOTO\022\017\n\004guid\030\003 \001(\004:\0010\"\266\001\n\013Shake"
    "Screen\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE"
    "_USER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.Use"
    "r2Param:\026USER2PARAM_SHAKESCREEN\022\027\n\014maxam"
    "plitude\030\003 \001(\r:\0013\022\017\n\004msec\030\004 \001(\r:\0010\022\024\n\tsha"
    "ketype\030\005 \001(\r:\0011\"=\n\014ShortcutItem\022\014\n\004guid\030"
    "\001 \001(\t\022\017\n\004type\030\002 \001(\r:\0010\022\016\n\003pos\030\003 \001(\r:\0010\"\233"
    "\001\n\rQueryShortcut\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024SCENE_USER2_PROTOCMD\0228\n\005param\030\002 \001(\016"
    "2\017.Cmd.User2Param:\030USER2PARAM_QUERYSHORT"
    "CUT\022\037\n\004list\030\003 \003(\0132\021.Cmd.ShortcutItem\"\227\001\n"
    "\013PutShortcut\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.C"
    "md.User2Param:\026USER2PARAM_PUTSHORTCUT\022\037\n"
    "\004item\030\003 \001(\0132\021.Cmd.ShortcutItem\"\256\001\n\016NpcCh"
    "angeAngle\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SC"
    "ENE_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd."
    "User2Param:\023USER2PARAM_NPCANGLE\022\017\n\004guid\030"
    "\003 \001(\004:\0010\022\023\n\010targetid\030\004 \001(\004:\0010\022\020\n\005angle\030\005"
    " \001(\r:\0010\"\207\001\n\013CameraFocus\022/\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\024SCENE_USER2_PROTOCMD\0226\n\005para"
    "m\030\002 \001(\0162\017.Cmd.User2Param:\026USER2PARAM_CAM"
    "ERAFOCUS\022\017\n\007targets\030\003 \003(\004\"\207\001\n\017GoToListUs"
    "erCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_"
    "USER2_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.User"
    "2Param:\024USER2PARAM_GOTO_LIST\022\r\n\005mapid\030\003 "
    "\003(\r\"\273\001\n\017GoToGearUserCmd\022/\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\024SCENE_USER2_PROTOCMD\0224\n\005para"
    "m\030\002 \001(\0162\017.Cmd.User2Param:\024USER2PARAM_GOT"
    "O_GEAR\022\r\n\005mapid\030\003 \001(\r\022 \n\004type\030\004 \001(\0162\022.Cm"
    "d.EGoToGearType\022\020\n\010otherids\030\005 \003(\004\"\210\001\n\016Ne"
    "wTransMapCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.C"
    "md.User2Param:\026USER2PARAM_NEWTRANSMAP\022\r\n"
    "\005mapid\030\003 \003(\r\"\226\001\n\024DeathTransferListCmd\022/\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PR"
    "OTOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\036"
    "USER2PARAM_DEATH_TRANSFER_LIST\022\r\n\005npcId\030"
    "\003 \003(\r\"\224\001\n\023NewDeathTransferCmd\022/\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022="
    "\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\035USER2PAR"
    "AM_NEW_DEATH_TRANSFER\022\r\n\005npcId\030\003 \001(\r\"\237\001\n"
    "\023UseDeathTransferCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\024SCENE_USER2_PROTOCMD\0223\n\005param\030\002"
    " \001(\0162\017.Cmd.User2Param:\023USER2PARAM_TRANSF"
    "ER\022\021\n\tfromNpcId\030\003 \001(\r\022\017\n\007toNpcId\030\004 \001(\r\"\271"
    "\001\n\014FollowerUser\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\024SCENE_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162"
    "\017.Cmd.User2Param:\023USER2PARAM_FOLLOWER\022\021\n"
    "\006userid\030\003 \001(\004:\0010\0220\n\005eType\030\004 \001(\0162\020.Cmd.EF"
    "ollowType:\017EFOLLOWTYPE_MIN\"\274\001\n\017BeFollowU"
    "serCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE"
    "_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.Use"
    "r2Param:\023USER2PARAM_BEFOLLOW\022\021\n\006userid\030\003"
    " \001(\004:\0010\0220\n\005eType\030\004 \001(\0162\020.Cmd.EFollowType"
    ":\017EFOLLOWTYPE_MIN\"\267\001\n\021LaboratoryUserCmd\022"
    "/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_"
    "PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.User2Param"
    ":\025USER2PARAM_LABORATORY\022\020\n\005round\030\003 \001(\r:\001"
    "0\022\023\n\010curscore\030\004 \001(\r:\0010\022\023\n\010maxscore\030\005 \001(\r"
    ":\0010\"\223\001\n\025GotoLaboratoryUserCmd\022/\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022:"
    "\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\032USER2PAR"
    "AM_GOTO_LABORATORY\022\r\n\005funid\030\003 \001(\r\"\253\002\n\022Ex"
    "changeProfession\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024SCENE_USER2_PROTOCMD\022=\n\005param\030\002 \001(\016"
    "2\017.Cmd.User2Param:\035USER2PARAM_EXCHANGEPR"
    "OFESSION\022\017\n\004guid\030\003 \001(\004:\0010\022\034\n\005datas\030\004 \003(\013"
    "2\r.Cmd.UserData\022\034\n\005attrs\030\005 \003(\0132\r.Cmd.Use"
    "rAttr\022!\n\npointattrs\030\006 \003(\0132\r.Cmd.UserAttr"
    "\0225\n\004type\030\007 \001(\0162\031.Cmd.EProfressionDataTyp"
    "e:\014ETypeAdvance\"E\n\007Scenery\022\024\n\tsceneryid\030"
    "\001 \001(\r:\0010\022\021\n\006anglez\030\002 \001(\r:\0010\022\021\n\006charid\030\003 "
    "\001(\004:\0010\"\247\001\n\016SceneryUserCmd\022/\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\024SCENE_USER2_PROTOCMD\0222\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.User2Param:\022USER2PARAM_S"
    "CENERY\022\020\n\005mapid\030\003 \001(\r:\0010\022\036\n\010scenerys\030\004 \003"
    "(\0132\014.Cmd.Scenery\"\220\001\n\021GoMapQuestUserCmd\022/"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_P"
    "ROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.User2Param:"
    "\026USER2PARAM_GOMAP_QUEST\022\022\n\007questid\030\003 \001(\r"
    ":\0010\"\243\001\n\022GoMapFollowUserCmd\022/\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0227\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.User2Param:\027USER2PARAM_"
    "GOMAP_FOLLOW\022\020\n\005mapid\030\003 \001(\r:\0010\022\021\n\006charid"
    "\030\004 \001(\004:\0010\"\210\001\n\016UserAutoHitCmd\022/\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0222\n"
    "\005param\030\002 \001(\0162\017.Cmd.User2Param:\022USER2PARA"
    "M_AUTOHIT\022\021\n\006charid\030\003 \001(\004:\0010\"\366\001\n\031UploadS"
    "ceneryPhotoUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\022\?\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\037USER2PARAM_UPLOAD_S"
    "CENERY_PHOTO\0221\n\004type\030\003 \001(\0162\017.Cmd.EAlbumT"
    "ype:\022EALBUMTYPE_SCENERY\022\021\n\tsceneryid\030\004 \001"
    "(\r\022\016\n\006policy\030\005 \001(\t\022\021\n\tsignature\030\006 \001(\t\"`\n"
    "\010UpyunUrl\0221\n\004type\030\001 \001(\0162\017.Cmd.EAlbumType"
    ":\022EALBUMTYPE_SCENERY\022\020\n\010char_url\030\002 \001(\t\022\017"
    "\n\007acc_url\030\003 \001(\t\"\256\001\n\033DownloadSceneryPhoto"
    "UserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCEN"
    "E_USER2_PROTOCMD\022A\n\005param\030\002 \001(\0162\017.Cmd.Us"
    "er2Param:!USER2PARAM_DOWNLOAD_SCENERY_PH"
    "OTO\022\033\n\004urls\030\003 \003(\0132\r.Cmd.UpyunUrl\"\210\001\n\014Que"
    "ryMapArea\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SC"
    "ENE_USER2_PROTOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd."
    "User2Param:\030USER2PARAM_QUERY_MAPAREA\022\r\n\005"
    "areas\030\003 \003(\r\"\211\001\n\rNewMapAreaNtf\022/\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0226"
    "\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\026USER2PAR"
    "AM_NEW_MAPAREA\022\017\n\004area\030\003 \001(\r:\0010\"\231\001\n\016Buff"
    "ForeverCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024S"
    "CENE_USER2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd"
    ".User2Param:\027USER2PARAM_FOREVER_BUFF\022\035\n\004"
    "buff\030\003 \003(\0132\017.Cmd.BufferData\"\342\001\n\026InviteJo"
    "inHandsUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\024SCENE_USER2_PROTOCMD\022<\n\005param\030\002 \001(\0162\017"
    ".Cmd.User2Param:\034USER2PARAM_INVITE_JOIN_"
    "HANDS\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\010masterid\030\004 \001"
    "(\004:\0010\022\017\n\004time\030\005 \001(\r:\0010\022\022\n\nmastername\030\006 \001"
    "(\t\022\014\n\004sign\030\007 \001(\014\"\201\001\n\023BreakUpHandsUserCmd"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\031USER2PARAM_BREAK_UP_HANDS\"\313\001\n\021HandSta"
    "tusUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024S"
    "CENE_USER2_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd"
    ".User2Param:\025USER2PARAM_HANDSTATUS\022\023\n\005bu"
    "ild\030\003 \001(\010:\004true\022\023\n\010masterid\030\004 \001(\004:\0010\022\023\n\010"
    "followid\030\005 \001(\004:\0010\022\017\n\004type\030\006 \001(\r:\0010\"\233\001\n\tQ"
    "ueryShow\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCE"
    "NE_USER2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.U"
    "ser2Param:\027USER2PARAM_QUERY_ACTION\022\020\n\010ac"
    "tionid\030\003 \003(\r\022\022\n\nexpression\030\004 \003(\r\"\270\001\n\tMus"
    "icItem\022\021\n\006charid\030\001 \001(\004:\0010\022\025\n\ndemandtime\030"
    "\002 \001(\r:\0010\022\020\n\005mapid\030\003 \001(\r:\0010\022\020\n\005npcid\030\004 \001("
    "\r:\0010\022\022\n\007musicid\030\005 \001(\r:\0010\022\024\n\tstarttime\030\006 "
    "\001(\r:\0010\022\022\n\007endtime\030\007 \001(\r:\0010\022\021\n\006status\030\010 \001"
    "(\r:\0010\022\014\n\004name\030\t \001(\t\"\251\001\n\016QueryMusicList\022/"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_P"
    "ROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.User2Param:"
    "\025USER2PARAM_MUSIC_LIST\022\020\n\005npcid\030\003 \001(\004:\0010"
    "\022\035\n\005items\030\004 \003(\0132\016.Cmd.MusicItem\"\235\001\n\013Dema"
    "ndMusic\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCEN"
    "E_USER2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.Us"
    "er2Param:\027USER2PARAM_MUSIC_DEMAND\022\020\n\005npc"
    "id\030\003 \001(\004:\0010\022\022\n\007musicid\030\004 \001(\r:\0010\"z\n\017Close"
    "MusicFrame\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024S"
    "CENE_USER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd"
    ".User2Param:\026USER2PARAM_MUSIC_CLOSE\"\324\001\n\026"
    "UploadOkSceneryUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\024SCENE_USER2_PROTOCMD\022<\n\005param"
    "\030\002 \001(\0162\017.Cmd.User2Param:\034USER2PARAM_UPLO"
    "AD_OK_SCENERY\022\024\n\tsceneryid\030\003 \001(\r:\0010\022\021\n\006s"
    "tatus\030\004 \001(\r:\0010\022\021\n\006anglez\030\005 \001(\r:\0010\022\017\n\004tim"
    "e\030\006 \001(\r:\0010\"\256\001\n\020JoinHandsUserCmd\022/\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD"
    "\0225\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\025USER2P"
    "ARAM_JOIN_HANDS\022\023\n\010masterid\030\003 \001(\004:\0010\022\014\n\004"
    "sign\030\004 \001(\t\022\017\n\004time\030\005 \001(\r:\0010\"4\n\tTraceItem"
    "\022\021\n\006itemid\030\001 \001(\r:\0010\022\024\n\tmonsterid\030\002 \001(\r:\001"
    "0\"\235\001\n\016QueryTraceList\022/\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\024SCENE_USER2_PROTOCMD\022;\n\005param\030\002"
    " \001(\0162\017.Cmd.User2Param:\033USER2PARAM_QUERY_"
    "TRACE_LIST\022\035\n\005items\030\003 \003(\0132\016.Cmd.TraceIte"
    "m\"\257\001\n\017UpdateTraceList\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\022<\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\034USER2PARAM_UPDAT"
    "E_TRACE_LIST\022\037\n\007updates\030\003 \003(\0132\016.Cmd.Trac"
    "eItem\022\014\n\004dels\030\004 \003(\r\"\211\001\n\014SetDirection\022/\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PRO"
    "TOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\030U"
    "SER2PARAM_SET_DIRECTION\022\016\n\003dir\030\003 \001(\r:\0010\""
    "\232\002\n\024BattleTimelenUserCmd\022/\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\024SCENE_USER2_PROTOCMD\022B\n\005par"
    "am\030\002 \001(\0162\017.Cmd.User2Param:\"USER2PARAM_BA"
    "TTLE_TIMELEN_USER_CMD\022\022\n\007timelen\030\003 \001(\r:\001"
    "0\022\024\n\ttotaltime\030\004 \001(\r:\0010\022\024\n\tmusictime\030\005 \001"
    "(\r:\0010\022\024\n\ttutortime\030\006 \001(\r:\0010\0227\n\007estatus\030\007"
    " \001(\0162\022.Cmd.EBattleStatus:\022EBATTLESTATUS_"
    "EASY\"\367\001\n\020SetOptionUserCmd\022/\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\024SCENE_USER2_PROTOCMD\0224\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.User2Param:\024USER2PARAM_S"
    "ETOPTION\022-\n\004type\030\003 \001(\0162\017.Cmd.EQueryType:"
    "\016EQUERYTYPE_MIN\022\026\n\013fashionhide\030\004 \001(\r:\0010\022"
    "5\n\014wedding_type\030\005 \001(\0162\017.Cmd.EQueryType:\016"
    "EQUERYTYPE_MIN\"\275\001\n\024QueryUserInfoUserCmd\022"
    "/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_"
    "PROTOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd.User2Param"
    ":\030USER2PARAM_QUERYUSERINFO\022\021\n\006charid\030\003 \001"
    "(\004:\0010\022\021\n\006teamid\030\004 \001(\004:\0010\022\024\n\005blink\030\005 \001(\010:"
    "\005false\"\341\001\n\024CountDownTickUserCmd\022/\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD"
    "\0229\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\031USER2P"
    "ARAM_COUNTDOWN_TICK\022!\n\004type\030\003 \001(\0162\023.Cmd."
    "ECountDownType\022\014\n\004tick\030\004 \001(\r\022\014\n\004time\030\005 \001"
    "(\r\022\014\n\004sign\030\006 \001(\t\022\020\n\010extparam\030\007 \001(\r\"\256\001\n\023I"
    "temMusicNtfUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\0229\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\031USER2PARAM_ITEM_MUS"
    "IC_NTF\022\013\n\003add\030\003 \001(\010\022\013\n\003uri\030\004 \001(\t\022\021\n\tstar"
    "ttime\030\005 \001(\r\"\276\001\n\020ShakeTreeUserCmd\022/\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCM"
    "D\0224\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\024USER2"
    "PARAM_SHAKETREE\022\020\n\005npcid\030\003 \001(\004:\0010\0221\n\006res"
    "ult\030\004 \001(\0162\020.Cmd.ETreeStatus:\017ETREESTATUS"
    "_MIN\"D\n\004Tree\022\r\n\002id\030\001 \001(\004:\0010\022\021\n\006typeid\030\002 "
    "\001(\r:\0010\022\032\n\003pos\030\003 \001(\0132\r.Cmd.ScenePos\"\241\001\n\017T"
    "reeListUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\024SCENE_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017"
    ".Cmd.User2Param:\023USER2PARAM_TREELIST\022\032\n\007"
    "updates\030\003 \003(\0132\t.Cmd.Tree\022\014\n\004dels\030\004 \003(\004\"\302"
    "\001\n\022ActivityNtfUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0227\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\027USER2PARAM_ACTIV"
    "ITY_NTF\022\n\n\002id\030\003 \001(\r\022\020\n\005mapid\030\004 \001(\r:\0010\022\022\n"
    "\007endtime\030\005 \001(\r:\0010\022\020\n\010progress\030\006 \001(\r\"\226\001\n\010"
    "ZoneInfo\022\021\n\006zoneid\030\001 \001(\r:\0010\022\024\n\tmaxbaselv"
    "\030\002 \001(\r:\0010\0221\n\006status\030\003 \001(\0162\020.Cmd.EZoneSta"
    "tus:\017EZONESTATUS_MIN\022.\n\005state\030\004 \001(\0162\017.Cm"
    "d.EZoneState:\016EZONESTATE_MIN\"P\n\016RecentZo"
    "neInfo\022+\n\004type\030\001 \001(\0162\016.Cmd.EJumpZone:\rEJ"
    "UMPZONE_MIN\022\021\n\006zoneid\030\002 \001(\r:\0010\"\312\001\n\026Query"
    "ZoneStatusUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\024SCENE_USER2_PROTOCMD\022;\n\005param\030\002 \001("
    "\0162\017.Cmd.User2Param:\033USER2PARAM_QUERY_ZON"
    "ESTATUS\022\034\n\005infos\030\003 \003(\0132\r.Cmd.ZoneInfo\022$\n"
    "\007recents\030\004 \003(\0132\023.Cmd.RecentZoneInfo\"\235\001\n\017"
    "JumpZoneUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\024SCENE_USER2_PROTOCMD\0224\n\005param\030\002 \001(\0162"
    "\017.Cmd.User2Param:\024USER2PARAM_JUMP_ZONE\022\020"
    "\n\005npcid\030\003 \001(\004:\0010\022\021\n\006zoneid\030\004 \001(\r:\0010\"\234\001\n\027"
    "ItemImageUserNtfUserCmd\022/\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\024SCENE_USER2_PROTOCMD\022=\n\005para"
    "m\030\002 \001(\0162\017.Cmd.User2Param:\035USER2PARAM_ITE"
    "MIMAGE_USER_NTF\022\021\n\006userid\030\003 \001(\004:\0010\"\250\001\n\023I"
    "nviteFollowUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\0227\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\027USER2PARAM_INVITEFO"
    "LLOW\022\021\n\006charid\030\003 \001(\004:\0010\022\024\n\006follow\030\004 \001(\010:"
    "\004true\"\211\001\n\021ChangeNameUserCmd\022/\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0225\n\005"
    "param\030\002 \001(\0162\017.Cmd.User2Param:\025USER2PARAM"
    "_CHANGENAME\022\014\n\004name\030\003 \001(\t\"\216\001\n\021ChargePlay"
    "UserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCEN"
    "E_USER2_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.Us"
    "er2Param:\025USER2PARAM_CHARGEPLAY\022\021\n\tcharg"
    "eids\030\003 \003(\r\"\250\001\n\025RequireNpcFuncUserCmd\022/\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PRO"
    "TOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\031U"
    "SER2PARAM_REQUIRENPCFUNC\022\020\n\005npcid\030\003 \001(\r:"
    "\0010\022\021\n\tfunctions\030\004 \003(\t\"\236\001\n\020CheckSeatUserC"
    "md\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USE"
    "R2_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.User2Pa"
    "ram:\025USER2PARAM_CHECK_SEAT\022\021\n\006seatid\030\003 \001"
    "(\r:\0010\022\017\n\007success\030\004 \001(\010\"\252\001\n\016NtfSeatUserCm"
    "d\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER"
    "2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd.User2Par"
    "am:\023USER2PARAM_NTF_SEAT\022\016\n\006charid\030\003 \001(\004\022"
    "\016\n\006seatid\030\004 \001(\r\022\022\n\nisseatdown\030\005 \001(\010\"\211\001\n\017"
    "YoyoSeatUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\024SCENE_USER2_PROTOCMD\0224\n\005param\030\002 \001(\0162"
    "\017.Cmd.User2Param:\024USER2PARAM_YOYO_SEAT\022\017"
    "\n\004guid\030\003 \001(\004:\0010\"\274\001\n\017ShowSeatUserCmd\022/\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROT"
    "OCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\024US"
    "ER2PARAM_SHOW_SEAT\022\016\n\006seatid\030\003 \003(\r\0222\n\004sh"
    "ow\030\004 \001(\0162\021.Cmd.SeatShowType:\021SEAT_SHOW_V"
    "ISIBLE\"\237\001\n\033SetNormalSkillOptionUserCmd\022/"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_P"
    "ROTOCMD\022A\n\005param\030\002 \001(\0162\017.Cmd.User2Param:"
    "!USER2PARAM_SET_NORMALSKILL_OPTION\022\014\n\004fl"
    "ag\030\003 \001(\r\"\257\001\n\023NewSetOptionUserCmd\022/\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCM"
    "D\0229\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\031USER2"
    "PARAM_NEW_SET_OPTION\022\036\n\004type\030\003 \001(\0162\020.Cmd"
    ".EOptionType\022\014\n\004flag\030\004 \001(\r\"\232\001\n\031UnsolvedS"
    "ceneryNtfUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024SCENE_USER2_PROTOCMD\022\?\n\005param\030\002 \001(\016"
    "2\017.Cmd.User2Param:\037USER2PARAM_UNSOLVED_S"
    "CENERY_NTF\022\013\n\003ids\030\003 \003(\r\"O\n\nVisibleNpc\022\020\n"
    "\005npcid\030\001 \001(\r:\0010\022\032\n\003pos\030\002 \001(\0132\r.Cmd.Scene"
    "Pos\022\023\n\010uniqueid\030\003 \001(\004:\0010\"\262\001\n\024NtfVisibleN"
    "pcUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SC"
    "ENE_USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd."
    "User2Param:\031USER2PARAM_NTF_VISIBLENPC\022\035\n"
    "\004npcs\030\003 \003(\0132\017.Cmd.VisibleNpc\022\017\n\004type\030\004 \001"
    "(\r:\0010\"\233\001\n\025UpyunAuthorizationCmd\022/\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD"
    "\022>\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\036USER2P"
    "ARAM_UPYUN_AUTHORIZATION\022\021\n\tauthvalue\030\003 "
    "\001(\t\"\242\001\n\023TransformPreDataCmd\022/\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022<\n\005"
    "param\030\002 \001(\0162\017.Cmd.User2Param:\034USER2PARAM"
    "_TRANSFORM_PREDATA\022\034\n\005datas\030\003 \003(\0132\r.Cmd."
    "UserData\"\272\001\n\rUserRenameCmd\022/\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0226\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.User2Param:\026USER2PARAM_"
    "USER_RENAME\022\014\n\004name\030\003 \001(\t\0222\n\004code\030\004 \001(\0162"
    "\023.Cmd.ERenameErrCode:\017ERENAME_SUCCESS\"\234\001"
    "\n\nBuyZenyCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\024SCENE_USER2_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.C"
    "md.User2Param:\023USER2PARAM_BUY_ZENY\022\r\n\005bc"
    "oin\030\003 \001(\r\022\014\n\004zeny\030\004 \001(\004\022\013\n\003ret\030\005 \001(\010\"\360\001\n"
    "\021CallTeamerUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\026USER2PARAM_CALL_TEA"
    "MER\022\023\n\010masterid\030\003 \001(\004:\0010\022\014\n\004sign\030\004 \001(\t\022\017"
    "\n\004time\030\005 \001(\r:\0010\022\020\n\010username\030\006 \001(\t\022\020\n\005map"
    "id\030\007 \001(\r:\0010\022\032\n\003pos\030\010 \001(\0132\r.Cmd.ScenePos\""
    "\350\001\n\026CallTeamerReplyUserCmd\022/\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022;\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.User2Param:\033USER2PARAM_"
    "CALL_TEAMER_JOIN\022\023\n\010masterid\030\003 \001(\004:\0010\022\014\n"
    "\004sign\030\004 \001(\t\022\017\n\004time\030\005 \001(\r:\0010\022\020\n\005mapid\030\006 "
    "\001(\r:\0010\022\032\n\003pos\030\007 \001(\0132\r.Cmd.ScenePos\"\264\001\n\020S"
    "pecialEffectCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\024SCENE_USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162"
    "\017.Cmd.User2Param:\031USER2PARAM_SPECIAL_EFF"
    "ECT\022\017\n\007dramaid\030\003 \001(\r\022\021\n\tstarttime\030\004 \001(\r\022"
    "\020\n\005times\030\005 \001(\r:\0010\"\337\001\n\023MarriageProposalCm"
    "d\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER"
    "2_PROTOCMD\022<\n\005param\030\002 \001(\0162\017.Cmd.User2Par"
    "am:\034USER2PARAM_MARRIAGE_PROPOSAL\022\023\n\010mast"
    "erid\030\003 \001(\004:\0010\022\021\n\006itemid\030\004 \001(\r:\0010\022\017\n\004time"
    "\030\005 \001(\r:\0010\022\022\n\nmastername\030\006 \001(\t\022\014\n\004sign\030\007 "
    "\001(\014\"\373\001\n\030MarriageProposalReplyCmd\022/\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCM"
    "D\022B\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\"USER2"
    "PARAM_MARRIAGE_PROPOSAL_REPLY\022\023\n\010masteri"
    "d\030\003 \001(\004:\0010\0226\n\005reply\030\004 \001(\0162\023.Cmd.EProposa"
    "lReply:\022EPROPOSALREPLY_YES\022\017\n\004time\030\005 \001(\r"
    ":\0010\022\014\n\004sign\030\006 \001(\t\"\302\001\n\031UploadWeddingPhoto"
    "UserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCEN"
    "E_USER2_PROTOCMD\022\?\n\005param\030\002 \001(\0162\017.Cmd.Us"
    "er2Param:\037USER2PARAM_UPLOAD_WEDDING_PHOT"
    "O\022\020\n\010itemguid\030\003 \001(\t\022\020\n\005index\030\004 \001(\r:\0010\022\017\n"
    "\004time\030\005 \001(\r:\0010\"\276\001\n\032MarriageProposalSucce"
    "ssCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_"
    "USER2_PROTOCMD\022D\n\005param\030\002 \001(\0162\017.Cmd.User"
    "2Param:$USER2PARAM_MARRIAGE_PROPOSAL_SUC"
    "CESS\022\021\n\006charid\030\003 \001(\004:\0010\022\026\n\010ismaster\030\004 \001("
    "\010:\004true\"\250\001\n\035InviteeWeddingStartNtfUserCm"
    "d\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER"
    "2_PROTOCMD\022D\n\005param\030\002 \001(\0162\017.Cmd.User2Par"
    "am:$USER2PARAM_INVITEE_WEDDING_START_NTF"
    "\022\020\n\010itemguid\030\003 \001(\t\"x\n\017KFCShareUserCmd\022/\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PR"
    "OTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\024"
    "USER2PARAM_KFC_SHARE\"\343\001\n\024CheckRelationUs"
    "erCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_"
    "USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.User"
    "2Param:\031USER2PARAM_CHECK_RELATION\022\021\n\006cha"
    "rid\030\003 \001(\004:\0010\0228\n\005etype\030\004 \001(\0162\024.Cmd.ESocia"
    "lRelation:\023ESOCIALRELATION_MIN\022\022\n\003ret\030\005 "
    "\001(\010:\005false\"\370\001\n\022TwinsActionUserCmd\022/\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOC"
    "MD\0227\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\027USER"
    "2PARAM_TWINS_ACTION\022\021\n\006userid\030\003 \001(\004:\0010\022\023"
    "\n\010actionid\030\004 \001(\r:\0010\0229\n\005etype\030\005 \001(\0162\024.Cmd"
    ".ETwinsOperation:\024ETWINS_OPERATION_MIN\022\025"
    "\n\007sponsor\030\006 \001(\010:\004true\"\214\001\n\022ShowServantUse"
    "rCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_U"
    "SER2_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.User2"
    "Param:\027USER2PARAM_SERVANT_SHOW\022\014\n\004show\030\003"
    " \001(\010\"\251\001\n\025ReplaceServantUserCmd\022/\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022"
    ":\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\032USER2PA"
    "RAM_SERVANT_REPLACE\022\017\n\007replace\030\003 \001(\010\022\022\n\007"
    "servant\030\004 \001(\r:\0010\"\275\001\n\016ServantService\022/\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROT"
    "OCMD\022:\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\032US"
    "ER2PARAM_SERVANT_SERVICE\022>\n\004type\030\003 \001(\0162\024"
    ".Cmd.EServantService:\032ESERVANT_SERVICE_R"
    "ECOMMEND\"\223\001\n\021RecommendItemInfo\022\017\n\004dwid\030\001"
    " \001(\r:\0010\022\026\n\013finishtimes\030\002 \001(\r:\0010\022<\n\006statu"
    "s\030\003 \001(\0162\025.Cmd.ERecommendStatus:\025ERECOMME"
    "ND_STATUS_MIN\022\027\n\010realopen\030\004 \001(\010:\005false\"\257"
    "\001\n\027RecommendServantUserCmd\022/\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022<\n\005p"
    "aram\030\002 \001(\0162\017.Cmd.User2Param:\034USER2PARAM_"
    "SERVANT_RECOMMEND\022%\n\005items\030\003 \003(\0132\026.Cmd.R"
    "ecommendItemInfo\"\257\001\n\025ReceiveServantUserC"
    "md\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USE"
    "R2_PROTOCMD\022:\n\005param\030\002 \001(\0162\017.Cmd.User2Pa"
    "ram:\032USER2PARAM_SERVANT_RECEIVE\022\033\n\014favor"
    "ability\030\003 \001(\010:\005false\022\014\n\004dwid\030\004 \001(\r\"@\n\022Fa"
    "vorabilityStatus\022\027\n\014favorability\030\001 \001(\r:\001"
    "0\022\021\n\006status\030\002 \001(\r:\0010\"\314\001\n\032ServantRewardSt"
    "atusUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024"
    "SCENE_USER2_PROTOCMD\022@\n\005param\030\002 \001(\0162\017.Cm"
    "d.User2Param: USER2PARAM_SERVANT_REWARD_"
    "STATUS\022&\n\005items\030\003 \003(\0132\027.Cmd.Favorability"
    "Status\022\023\n\010stayfavo\030\004 \001(\r:\0010\"s\n\016Professio"
    "nInfo\022\016\n\006branch\030\001 \001(\r\022\022\n\nprofession\030\002 \001("
    "\r\022\r\n\005joblv\030\003 \001(\r\022\030\n\tiscurrent\030\004 \001(\010:\005fal"
    "se\022\024\n\005isbuy\030\005 \001(\010:\005false\"\252\001\n\026ProfessionQ"
    "ueryUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024"
    "SCENE_USER2_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cm"
    "d.User2Param:\033USER2PARAM_PROFESSION_QUER"
    "Y\022\"\n\005items\030\003 \003(\0132\023.Cmd.ProfessionInfo\"\251\001"
    "\n\024ProfessionBuyUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\024SCENE_USER2_PROTOCMD\0229\n\005param"
    "\030\002 \001(\0162\017.Cmd.User2Param:\031USER2PARAM_PROF"
    "ESSION_BUY\022\016\n\006branch\030\003 \001(\r\022\025\n\007success\030\004 "
    "\001(\010:\004true\"\257\001\n\027ProfessionChangeUserCmd\022/\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PR"
    "OTOCMD\022<\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\034"
    "USER2PARAM_PROFESSION_CHANGE\022\016\n\006branch\030\003"
    " \001(\r\022\025\n\007success\030\004 \001(\010:\004true\"(\n\027Astrolabe"
    "ProfessionData\022\r\n\005stars\030\002 \003(\r\"P\n\022AttrPro"
    "fessionData\022\034\n\005attrs\030\001 \003(\0132\r.Cmd.UserAtt"
    "r\022\034\n\005datas\030\002 \003(\0132\r.Cmd.UserData\"7\n\tEquip"
    "Info\022\013\n\003pos\030\001 \001(\r\022\017\n\007type_id\030\002 \001(\r\022\014\n\004gu"
    "id\030\003 \001(\t\"<\n\rEquipPackData\022\014\n\004type\030\001 \001(\r\022"
    "\035\n\005datas\030\002 \003(\0132\016.Cmd.EquipInfo\"D\n\021SkillV"
    "alidPosData\022\013\n\003pos\030\001 \003(\r\022\017\n\007autopos\030\002 \003("
    "\r\022\021\n\textendpos\030\003 \003(\r\"\232\002\n\023SkillProfession"
    "Data\022\022\n\nleft_point\030\001 \001(\r\022\035\n\005datas\030\002 \003(\0132"
    "\016.Cmd.SkillData\022#\n\013novice_data\030\003 \001(\0132\016.C"
    "md.SkillData\022#\n\006beings\030\004 \003(\0132\023.Cmd.Being"
    "SkillData\022\022\n\ncurbeingid\030\005 \001(\r\022\"\n\nbeingin"
    "fos\030\006 \003(\0132\016.Cmd.BeingInfo\022(\n\010skillpos\030\007 "
    "\001(\0132\026.Cmd.SkillValidPosData\022$\n\010shortcut\030"
    "\010 \001(\0132\022.Cmd.SkillValidPos\"\276\003\n\022Profession"
    "UserInfo\022\n\n\002id\030\001 \001(\r\022\022\n\nprofession\030\002 \001(\r"
    "\022\020\n\005joblv\030\003 \001(\r:\0010\022\021\n\006jobexp\030\004 \001(\r:\0010\0224\n"
    "\004type\030\005 \001(\0162\031.Cmd.EProfressionDataType:\013"
    "ETypeBranch\022\022\n\nrecordname\030\006 \001(\t\022\022\n\nrecor"
    "dtime\030\007 \001(\r\022\016\n\006charid\030\010 \001(\004\022\020\n\010charname\030"
    "\t \001(\t\022*\n\tattr_data\030\n \001(\0132\027.Cmd.AttrProfe"
    "ssionData\022&\n\nequip_data\030\013 \003(\0132\022.Cmd.Equi"
    "pPackData\0224\n\016astrolabe_data\030\014 \001(\0132\034.Cmd."
    "AstrolabeProfessionData\022,\n\nskill_data\030\r "
    "\001(\0132\030.Cmd.SkillProfessionData\022\025\n\007isfirst"
    "\030\016 \001(\010:\004true\022\024\n\005isbuy\030\017 \001(\010:\005false\"{\n\010Sl"
    "otInfo\022\n\n\002id\030\001 \001(\r\022+\n\004type\030\002 \001(\0162\016.Cmd.E"
    "SlotType:\rESLOT_DEFAULT\022\025\n\006active\030\003 \001(\010:"
    "\005false\022\016\n\006costid\030\004 \001(\r\022\017\n\007costnum\030\005 \001(\r\""
    "S\n\026UserAstrolMaterialData\022\016\n\006charid\030\001 \001("
    "\004\022)\n\tmaterials\030\002 \003(\0132\026.Cmd.AstrolabeCost"
    "Data\"\260\002\n\027UpdateRecordInfoUserCmd\022/\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCM"
    "D\022=\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\035USER2"
    "PARAM_UPDATE_RECORD_INFO\022\034\n\005slots\030\003 \003(\0132"
    "\r.Cmd.SlotInfo\022(\n\007records\030\004 \003(\0132\027.Cmd.Pr"
    "ofessionUserInfo\022\022\n\ndelete_ids\030\005 \003(\r\022\027\n\017"
    "card_expiretime\030\006 \001(\r\0220\n\013astrol_data\030\007 \003"
    "(\0132\033.Cmd.UserAstrolMaterialData\"\241\001\n\021Save"
    "RecordUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001(\0162\017."
    "Cmd.User2Param:\026USER2PARAM_SAVE_RECORD\022\016"
    "\n\006slotid\030\003 \001(\r\022\023\n\013record_name\030\004 \001(\t\"\214\001\n\021"
    "LoadRecordUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\024SCENE_USER2_PROTOCMD\0226\n\005param\030\002 \001("
    "\0162\017.Cmd.User2Param:\026USER2PARAM_LOAD_RECO"
    "RD\022\016\n\006slotid\030\003 \001(\r\"\256\001\n\027ChangeRecordNameU"
    "serCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE"
    "_USER2_PROTOCMD\022=\n\005param\030\002 \001(\0162\017.Cmd.Use"
    "r2Param:\035USER2PARAM_CHANGE_RECORD_NAME\022\016"
    "\n\006slotid\030\003 \001(\r\022\023\n\013record_name\030\004 \001(\t\"\223\001\n\024"
    "BuyRecordSlotUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\024SCENE_USER2_PROTOCMD\022:\n\005param\030\002"
    " \001(\0162\017.Cmd.User2Param:\032USER2PARAM_BUY_RE"
    "CORD_SLOT\022\016\n\006slotid\030\003 \001(\r\"\220\001\n\023DeleteReco"
    "rdUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SC"
    "ENE_USER2_PROTOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd."
    "User2Param:\030USER2PARAM_DELETE_RECORD\022\016\n\006"
    "slotid\030\003 \001(\r\"\307\001\n\027UpdateBranchInfoUserCmd"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\022=\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\035USER2PARAM_UPDATE_BRANCH_INFO\022&\n\005data"
    "s\030\003 \003(\0132\027.Cmd.ProfessionUserInfo\022\024\n\tsync"
    "_type\030\004 \001(\r:\0010\"\211\001\n\025EnterCapraActivityCmd"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\022\?\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\037USER2PARAM_ENTER_CAPRA_ACTIVITY\"\311\001\n\023I"
    "nviteWithMeUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\024SCENE_USER2_PROTOCMD\0229\n\005param\030\002 \001"
    "(\0162\017.Cmd.User2Param:\031USER2PARAM_INVITE_W"
    "ITH_ME\022\021\n\006sendid\030\003 \001(\004:\0010\022\017\n\004time\030\004 \001(\r:"
    "\0010\022\024\n\005reply\030\005 \001(\010:\005false\022\014\n\004sign\030\006 \001(\014\"\207"
    "\001\n\026QueryAltmanKillUserCmd\022/\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\024SCENE_USER2_PROTOCMD\022<\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.User2Param:\034USER2PARAM_Q"
    "UERY_ALTMAN_KILL\"8\n\tBoothInfo\022\014\n\004name\030\001 "
    "\001(\t\022\035\n\004sign\030\002 \001(\0162\017.Cmd.EBoothSign\"\322\001\n\017B"
    "oothReqUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\024SCENE_USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162\017"
    ".Cmd.User2Param:\031USER2PARAM_USER_BOOTH_R"
    "EQ\022\014\n\004name\030\003 \001(\t\022.\n\004oper\030\004 \001(\0162\017.Cmd.EBo"
    "othOper:\017EBOOTHOPER_OPEN\022\025\n\007success\030\005 \001("
    "\010:\004true\"\341\001\n\024BoothInfoSyncUserCmd\022/\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCM"
    "D\022:\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\032USER2"
    "PARAM_BOOTH_INFO_SYNC\022\016\n\006charid\030\003 \001(\004\022.\n"
    "\004oper\030\004 \001(\0162\017.Cmd.EBoothOper:\017EBOOTHOPER"
    "_OPEN\022\034\n\004info\030\005 \001(\0132\016.Cmd.BoothInfo\"\333\001\n\023"
    "DressUpModelUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\024SCENE_USER2_PROTOCMD\0228\n\005param\030\002 "
    "\001(\0162\017.Cmd.User2Param:\030USER2PARAM_DRESSUP"
    "_MODEL\022\022\n\007stageid\030\003 \001(\r:\0010\0223\n\004type\030\004 \001(\016"
    "2\022.Cmd.EUserDataType:\021EUSERDATATYPE_MIN\022"
    "\020\n\005value\030\005 \001(\r:\0010\"\332\001\n\022DressUpHeadUserCmd"
    "\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2"
    "_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.User2Para"
    "m:\027USER2PARAM_DRESSUP_HEAD\0223\n\004type\030\003 \001(\016"
    "2\022.Cmd.EUserDataType:\021EUSERDATATYPE_MIN\022"
    "\020\n\005value\030\004 \001(\r:\0010\022\023\n\005puton\030\005 \001(\010:\004true\"["
    "\n\tStageInfo\022\022\n\007stageid\030\001 \001(\r:\0010\022\022\n\007usern"
    "um\030\002 \001(\r:\0010\022\023\n\010waittime\030\003 \001(\r:\0010\022\021\n\006stat"
    "us\030\004 \001(\r:\0010\"\256\001\n\021QueryStageUserCmd\022/\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\024SCENE_USER2_PROTOC"
    "MD\0226\n\005param\030\002 \001(\0162\017.Cmd.User2Param:\026USER"
    "2PARAM_QUERY_STAGE\022\022\n\007stageid\030\003 \001(\r:\0010\022\034"
    "\n\004info\030\004 \003(\0132\016.Cmd.StageInfo\"\275\001\n\024DressUp"
    "LineUpUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\024SCENE_USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162\017."
    "Cmd.User2Param:\031USER2PARAM_DRESSUP_LINEU"
    "P\022\022\n\007stageid\030\003 \001(\r:\0010\022\017\n\004mode\030\004 \001(\r:\0010\022\024"
    "\n\005enter\030\005 \001(\010:\005false\"Z\n\021StageUserDataTyp"
    "e\0223\n\004type\030\001 \001(\0162\022.Cmd.EUserDataType:\021EUS"
    "ERDATATYPE_MIN\022\020\n\005value\030\002 \001(\r:\0010\"\313\001\n\023Dre"
    "ssUpStageUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\024SCENE_USER2_PROTOCMD\0228\n\005param\030\002 \001(\016"
    "2\017.Cmd.User2Param:\030USER2PARAM_DRESSUP_ST"
    "AGE\022\016\n\006userid\030\003 \003(\004\022\022\n\007stageid\030\004 \001(\r:\0010\022"
    "%\n\005datas\030\005 \003(\0132\026.Cmd.StageUserDataType\"\244"
    "\001\n\026GoToFunctionMapUserCmd\022/\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\024SCENE_USER2_PROTOCMD\0227\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.User2Param:\027USER2PARAM_G"
    "OTO_FUNCMAP\022 \n\005etype\030\003 \002(\0162\021.Cmd.EFuncMa"
    "pType\"V\n\rGrowthCurInfo\0221\n\004type\030\001 \001(\0162\020.C"
    "md.EGrowthType:\021EGROWTH_TYPE_STEP\022\022\n\007gro"
    "upid\030\002 \001(\r:\0010\"q\n\016GrowthItemInfo\022\017\n\004dwid\030"
    "\001 \001(\r:\0010\022\026\n\013finishtimes\030\002 \001(\r:\0010\0226\n\006stat"
    "us\030\003 \001(\0162\022.Cmd.EGrowthStatus:\022EGROWTH_ST"
    "ATUS_MIN\"L\n\017GrowthValueInfo\022\022\n\007groupid\030\001"
    " \001(\r:\0010\022\021\n\006growth\030\002 \001(\r:\0010\022\022\n\neverreward"
    "\030\003 \003(\r\"_\n\017GrowthGroupInfo\022\"\n\005items\030\001 \003(\013"
    "2\023.Cmd.GrowthItemInfo\022(\n\nvalueitems\030\002 \001("
    "\0132\024.Cmd.GrowthValueInfo\"\274\001\n\024GrowthServan"
    "tUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCE"
    "NE_USER2_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd.U"
    "ser2Param:\031USER2PARAM_SERVANT_GROWTH\022#\n\005"
    "datas\030\003 \003(\0132\024.Cmd.GrowthGroupInfo\022\023\n\013unl"
    "ockitems\030\004 \003(\r\"\266\001\n\033ReceiveGrowthServantU"
    "serCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\024SCENE"
    "_USER2_PROTOCMD\022A\n\005param\030\002 \001(\0162\017.Cmd.Use"
    "r2Param:!USER2PARAM_SERVANT_RECEIVE_GROW"
    "TH\022\017\n\004dwid\030\003 \001(\r:\0010\022\022\n\007dwvalue\030\004 \001(\r:\0010\""
    "\237\001\n\030GrowthOpenServantUserCmd\022/\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\022>\n"
    "\005param\030\002 \001(\0162\017.Cmd.User2Param:\036USER2PARA"
    "M_SERVANT_GROWTH_OPEN\022\022\n\007groupid\030\003 \001(\r:\001"
    "0\"\237\001\n\017CheatTagUserCmd\022/\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\024SCENE_USER2_PROTOCMD\0224\n\005param\030"
    "\002 \001(\0162\017.Cmd.User2Param:\024USER2PARAM_CHEAT"
    "_TAG\022\023\n\010interval\030\003 \001(\r:\0010\022\020\n\005frame\030\004 \001(\r"
    ":\0010\"\223\001\n\023CheatTagStatUserCmd\022/\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\024SCENE_USER2_PROTOCMD\0229\n\005"
    "param\030\002 \001(\0162\017.Cmd.User2Param:\031USER2PARAM"
    "_CHEAT_TAG_STAT\022\020\n\005count\030\003 \001(\r:\0010*\204\"\n\nUs"
    "er2Param\022\025\n\021USER2PARAM_GOCITY\020\001\022\025\n\021USER2"
    "PARAM_SYSMSG\020\002\022\032\n\026USER2PARAM_NPCDATASYNC"
    "\020\003\022\033\n\027USER2PARAM_USERNINESYNC\020\004\022\025\n\021USER2"
    "PARAM_ACTION\020\005\022\031\n\025USER2PARAM_BUFFERSYNC\020"
    "\006\022\027\n\023USER2PARAM_EXIT_POS\020\007\022\025\n\021USER2PARAM"
    "_RELIVE\020\010\022\022\n\016USER2PARAM_VAR\020\t\022\027\n\023USER2PA"
    "RAM_TALKINFO\020\n\022\031\n\025USER2PARAM_SERVERTIME\020"
    "\013\022\032\n\026USER2PARAM_NEWTRANSMAP\020\014\022\025\n\021USER2PA"
    "RAM_EFFECT\020\016\022\023\n\017USER2PARAM_MENU\020\017\022\026\n\022USE"
    "R2PARAM_NEWMENU\020\020\022\033\n\027USER2PARAM_TEAMINFO"
    "NINE\020\021\022\032\n\026USER2PARAM_USEPORTRAIT\020\022\022\027\n\023US"
    "ER2PARAM_USEFRAME\020\023\022\037\n\033USER2PARAM_NEWPOR"
    "TRAITFRAME\020\024\022 \n\034USER2PARAM_QUERYPORTRAIT"
    "LIST\020\030\022\033\n\027USER2PARAM_ADDATTRPOINT\020\025\022\037\n\033U"
    "SER2PARAM_QUERYSHOPGOTITEM\020\026\022 \n\034USER2PAR"
    "AM_UPDATESHOPGOTITEM\020\027\022\032\n\026USER2PARAM_USE"
    "DRESSING\020\031\022\032\n\026USER2PARAM_NEWDRESSING\020\032\022\033"
    "\n\027USER2PARAM_DRESSINGLIST\020\033\022\025\n\021USER2PARA"
    "M_OPENUI\020\035\022\030\n\024USER2PARAM_DBGSYSMSG\020\036\022\035\n\031"
    "USER2PARAM_FOLLOWTRANSFER\020 \022\026\n\022USER2PARA"
    "M_NPCFUNC\020!\022\030\n\024USER2PARAM_MODELSHOW\020\"\022\032\n"
    "\026USER2PARAM_SOUNDEFFECT\020#\022\034\n\030USER2PARAM_"
    "PRESETCHATMSG\020$\022\030\n\024USER2PARAM_CHANGEBGM\020"
    "%\022\037\n\033USER2PARAM_QUERYFIGHTERINFO\020&\022\027\n\023US"
    "ER2PARAM_GAMETIME\020(\022\025\n\021USER2PARAM_CDTIME"
    "\020)\022\032\n\026USER2PARAM_STATECHANGE\020*\022\024\n\020USER2P"
    "ARAM_PHOTO\020,\022\032\n\026USER2PARAM_SHAKESCREEN\020-"
    "\022\034\n\030USER2PARAM_QUERYSHORTCUT\020/\022\032\n\026USER2P"
    "ARAM_PUTSHORTCUT\0200\022\027\n\023USER2PARAM_NPCANGL"
    "E\0201\022\032\n\026USER2PARAM_CAMERAFOCUS\0202\022\030\n\024USER2"
    "PARAM_GOTO_LIST\0203\022\030\n\024USER2PARAM_GOTO_GEA"
    "R\0204\022\027\n\023USER2PARAM_FOLLOWER\0205\022\031\n\025USER2PAR"
    "AM_LABORATORY\0206\022!\n\035USER2PARAM_EXCHANGEPR"
    "OFESSION\0208\022\036\n\032USER2PARAM_GOTO_LABORATORY"
    "\0209\022\026\n\022USER2PARAM_SCENERY\020:\022\032\n\026USER2PARAM"
    "_GOMAP_QUEST\020;\022\033\n\027USER2PARAM_GOMAP_FOLLO"
    "W\020<\022\026\n\022USER2PARAM_AUTOHIT\020=\022#\n\037USER2PARA"
    "M_UPLOAD_SCENERY_PHOTO\020>\022\034\n\030USER2PARAM_Q"
    "UERY_MAPAREA\020\?\022\032\n\026USER2PARAM_NEW_MAPAREA"
    "\020@\022\033\n\027USER2PARAM_FOREVER_BUFF\020B\022 \n\034USER2"
    "PARAM_INVITE_JOIN_HANDS\020C\022\035\n\031USER2PARAM_"
    "BREAK_UP_HANDS\020D\022\033\n\027USER2PARAM_QUERY_ACT"
    "ION\020E\022\031\n\025USER2PARAM_MUSIC_LIST\020F\022\033\n\027USER"
    "2PARAM_MUSIC_DEMAND\020G\022\032\n\026USER2PARAM_MUSI"
    "C_CLOSE\020H\022 \n\034USER2PARAM_UPLOAD_OK_SCENER"
    "Y\020I\022\031\n\025USER2PARAM_JOIN_HANDS\020J\022\037\n\033USER2P"
    "ARAM_QUERY_TRACE_LIST\020K\022 \n\034USER2PARAM_UP"
    "DATE_TRACE_LIST\020L\022\034\n\030USER2PARAM_SET_DIRE"
    "CTION\020M\022%\n!USER2PARAM_DOWNLOAD_SCENERY_P"
    "HOTO\020P\022&\n\"USER2PARAM_BATTLE_TIMELEN_USER"
    "_CMD\020R\022\030\n\024USER2PARAM_SETOPTION\020S\022\034\n\030USER"
    "2PARAM_QUERYUSERINFO\020T\022\035\n\031USER2PARAM_COU"
    "NTDOWN_TICK\020U\022\035\n\031USER2PARAM_ITEM_MUSIC_N"
    "TF\020V\022\030\n\024USER2PARAM_SHAKETREE\020W\022\027\n\023USER2P"
    "ARAM_TREELIST\020X\022\033\n\027USER2PARAM_ACTIVITY_N"
    "TF\020Y\022\037\n\033USER2PARAM_QUERY_ZONESTATUS\020[\022\030\n"
    "\024USER2PARAM_JUMP_ZONE\020\\\022!\n\035USER2PARAM_IT"
    "EMIMAGE_USER_NTF\020]\022\031\n\025USER2PARAM_HANDSTA"
    "TUS\020_\022\027\n\023USER2PARAM_BEFOLLOW\020`\022\033\n\027USER2P"
    "ARAM_INVITEFOLLOW\020a\022\031\n\025USER2PARAM_CHANGE"
    "NAME\020b\022\031\n\025USER2PARAM_CHARGEPLAY\020c\022\035\n\031USE"
    "R2PARAM_REQUIRENPCFUNC\020d\022\031\n\025USER2PARAM_C"
    "HECK_SEAT\020e\022\027\n\023USER2PARAM_NTF_SEAT\020f\022%\n!"
    "USER2PARAM_SET_NORMALSKILL_OPTION\020g\022#\n\037U"
    "SER2PARAM_UNSOLVED_SCENERY_NTF\020h\022\035\n\031USER"
    "2PARAM_NTF_VISIBLENPC\020i\022\035\n\031USER2PARAM_NE"
    "W_SET_OPTION\020j\022\"\n\036USER2PARAM_UPYUN_AUTHO"
    "RIZATION\020k\022 \n\034USER2PARAM_TRANSFORM_PREDA"
    "TA\020l\022\032\n\026USER2PARAM_USER_RENAME\020m\022#\n\037USER"
    "2PARAM_ENTER_CAPRA_ACTIVITY\020n\022\027\n\023USER2PA"
    "RAM_BUY_ZENY\020o\022\032\n\026USER2PARAM_CALL_TEAMER"
    "\020p\022\037\n\033USER2PARAM_CALL_TEAMER_JOIN\020q\022\030\n\024U"
    "SER2PARAM_YOYO_SEAT\020r\022\030\n\024USER2PARAM_SHOW"
    "_SEAT\020s\022\035\n\031USER2PARAM_SPECIAL_EFFECT\020t\022 "
    "\n\034USER2PARAM_MARRIAGE_PROPOSAL\020u\022&\n\"USER"
    "2PARAM_MARRIAGE_PROPOSAL_REPLY\020v\022#\n\037USER"
    "2PARAM_UPLOAD_WEDDING_PHOTO\020w\022(\n$USER2PA"
    "RAM_MARRIAGE_PROPOSAL_SUCCESS\020x\022(\n$USER2"
    "PARAM_INVITEE_WEDDING_START_NTF\020y\022\033\n\027USE"
    "R2PARAM_SERVANT_SHOW\020z\022\036\n\032USER2PARAM_SER"
    "VANT_REPLACE\020{\022\036\n\032USER2PARAM_SERVANT_SER"
    "VICE\020|\022 \n\034USER2PARAM_SERVANT_RECOMMEND\020}"
    "\022\036\n\032USER2PARAM_SERVANT_RECEIVE\020~\022$\n USER"
    "2PARAM_SERVANT_REWARD_STATUS\020\177\022\031\n\024USER2P"
    "ARAM_KFC_SHARE\020\200\001\022\034\n\027USER2PARAM_TWINS_AC"
    "TION\020\201\001\022\036\n\031USER2PARAM_CHECK_RELATION\020\202\001\022"
    " \n\033USER2PARAM_PROFESSION_QUERY\020\203\001\022\036\n\031USE"
    "R2PARAM_PROFESSION_BUY\020\204\001\022!\n\034USER2PARAM_"
    "PROFESSION_CHANGE\020\205\001\022\"\n\035USER2PARAM_UPDAT"
    "E_RECORD_INFO\020\206\001\022\033\n\026USER2PARAM_SAVE_RECO"
    "RD\020\207\001\022\033\n\026USER2PARAM_LOAD_RECORD\020\210\001\022\"\n\035US"
    "ER2PARAM_CHANGE_RECORD_NAME\020\211\001\022\037\n\032USER2P"
    "ARAM_BUY_RECORD_SLOT\020\212\001\022\035\n\030USER2PARAM_DE"
    "LETE_RECORD\020\213\001\022\"\n\035USER2PARAM_UPDATE_BRAN"
    "CH_INFO\020\214\001\022\034\n\027USER2PARAM_GOTO_FUNCMAP\020\215\001"
    "\022\036\n\031USER2PARAM_INVITE_WITH_ME\020\216\001\022!\n\034USER"
    "2PARAM_QUERY_ALTMAN_KILL\020\217\001\022\036\n\031USER2PARA"
    "M_USER_BOOTH_REQ\020\220\001\022\037\n\032USER2PARAM_BOOTH_"
    "INFO_SYNC\020\221\001\022\035\n\030USER2PARAM_DRESSUP_MODEL"
    "\020\222\001\022\034\n\027USER2PARAM_DRESSUP_HEAD\020\223\001\022\033\n\026USE"
    "R2PARAM_QUERY_STAGE\020\224\001\022\036\n\031USER2PARAM_DRE"
    "SSUP_LINEUP\020\225\001\022\035\n\030USER2PARAM_DRESSUP_STA"
    "GE\020\226\001\022#\n\036USER2PARAM_DEATH_TRANSFER_LIST\020"
    "\227\001\022\"\n\035USER2PARAM_NEW_DEATH_TRANSFER\020\230\001\022\030"
    "\n\023USER2PARAM_TRANSFER\020\231\001\022\036\n\031USER2PARAM_S"
    "ERVANT_GROWTH\020\232\001\022&\n!USER2PARAM_SERVANT_R"
    "ECEIVE_GROWTH\020\233\001\022#\n\036USER2PARAM_SERVANT_G"
    "ROWTH_OPEN\020\234\001\022\031\n\024USER2PARAM_CHEAT_TAG\020\235\001"
    "\022\036\n\031USER2PARAM_CHEAT_TAG_STAT\020\236\001*\313\001\n\014EMe"
    "ssageType\022\024\n\020EMESSAGETYPE_MIN\020\000\022\026\n\022EMESS"
    "AGETYPE_FRAME\020\001\022\027\n\023EMESSAGETYPE_GETEXP\020\002"
    "\022\032\n\026EMESSAGETYPE_TIME_DOWN\020\003\022$\n EMESSAGE"
    "TYPE_TIME_DOWN_NOT_CLEAR\020\004\022\034\n\030EMESSAGETY"
    "PE_MIDDLE_SHOW\020\005\022\024\n\020EMESSAGETYPE_MAX\020\006*:"
    "\n\016EMessageActOpt\022\023\n\017EMESSAGEACT_ADD\020\001\022\023\n"
    "\017EMESSAGEACT_DEL\020\002*\225\002\n\017EUserActionType\022\027"
    "\n\023EUSERACTIONTYPE_MIN\020\000\022\031\n\025EUSERACTIONTY"
    "PE_ADDHP\020\001\022\032\n\026EUSERACTIONTYPE_REFINE\020\002\022\036"
    "\n\032EUSERACTIONTYPE_EXPRESSION\020\003\022\032\n\026EUSERA"
    "CTIONTYPE_MOTION\020\004\022\037\n\033EUSERACTIONTYPE_GE"
    "AR_ACTION\020\005\022 \n\034EUSERACTIONTYPE_NORMALMOT"
    "ION\020\006\022\032\n\026EUSERACTIONTYPE_DIALOG\020\007\022\027\n\023EUS"
    "ERACTIONTYPE_MAX\020\010*\306\001\n\013EReliveType\022\023\n\017ER"
    "ELIVETYPE_MIN\020\000\022\026\n\022ERELIVETYPE_RETURN\020\001\022"
    "\025\n\021ERELIVETYPE_MONEY\020\002\022\024\n\020ERELIVETYPE_RA"
    "ND\020\003\022\032\n\026ERELIVETYPE_RETURNSAVE\020\004\022\025\n\021EREL"
    "IVETYPE_SKILL\020\005\022\025\n\021ERELIVETYPE_TOWER\020\006\022\023"
    "\n\017ERELIVETYPE_MAX\020\007*M\n\nEEffectOpt\022\023\n\017EEF"
    "FECTOPT_PLAY\020\001\022\023\n\017EEFFECTOPT_STOP\020\002\022\025\n\021E"
    "EFFECTOPT_DELETE\020\003*\225\001\n\013EEffectType\022\026\n\022EE"
    "FFECTTYPE_NORMAL\020\001\022\033\n\027EEFFECTTYPE_ACCEPT"
    "QUEST\020\002\022\033\n\027EEFFECTTYPE_FINISHQUEST\020\003\022\027\n\023"
    "EEFFECTTYPE_MVPSHOW\020\004\022\033\n\027EEFFECTTYPE_SCE"
    "NEEFFECT\020\005*\215\001\n\nEDressType\022\022\n\016EDRESSTYPE_"
    "MIN\020\000\022\023\n\017EDRESSTYPE_HAIR\020\001\022\030\n\024EDRESSTYPE"
    "_HAIRCOLOR\020\002\022\022\n\016EDRESSTYPE_EYE\020\003\022\024\n\020EDRE"
    "SSTYPE_CLOTH\020\004\022\022\n\016EDRESSTYPE_MAX\020\005*3\n\tPo"
    "intType\022\021\n\rPOINTTYPE_ADD\020\001\022\023\n\017POINTTYPE_"
    "RESET\020\002*8\n\013EDbgMsgType\022\023\n\017EDBGMSGTYPE_MI"
    "N\020\000\022\024\n\020EDBGMSGTYPE_TEST\020\001*=\n\013GameTimeOpt"
    "\022\025\n\021EGAMETIMEOPT_SYNC\020\001\022\027\n\023EGAMETIMEOPT_"
    "ADJUST\020\002*F\n\007CD_TYPE\022\021\n\rCD_TYPE_SKILL\020\000\022\020"
    "\n\014CD_TYPE_ITEM\020\001\022\026\n\022CD_TYPE_SKILLDEALY\020\002"
    "*q\n\rEGoToGearType\022\030\n\024EGoToGearType_Singl"
    "e\020\001\022\026\n\022EGoToGearType_Hand\020\002\022\026\n\022EGoToGear"
    "Type_Team\020\003\022\026\n\022EGoToGearType_Free\020\004*\201\001\n\013"
    "EFollowType\022\023\n\017EFOLLOWTYPE_MIN\020\000\022\024\n\020EFOL"
    "LOWTYPE_HAND\020\001\022\025\n\021EFOLLOWTYPE_BREAK\020\005\022\033\n"
    "\027EFOLLOWTYPE_TWINSACTION\020\006\022\023\n\017EFOLLOWTYP"
    "E_MAX\020\007*\225\001\n\nEAlbumType\022\022\n\016EALBUMTYPE_MIN"
    "\020\000\022\026\n\022EALBUMTYPE_SCENERY\020\001\022\024\n\020EALBUMTYPE"
    "_PHOTO\020\002\022\031\n\025EALBUMTYPE_GUILD_ICON\020\003\022\026\n\022E"
    "ALBUMTYPE_WEDDING\020\004\022\022\n\016EALBUMTYPE_MAX\020\005*"
    "]\n\rEBattleStatus\022\026\n\022EBATTLESTATUS_EASY\020\001"
    "\022\027\n\023EBATTLESTATUS_TIRED\020\002\022\033\n\027EBATTLESTAT"
    "US_HIGHTIRED\020\003*\316\001\n\nEQueryType\022\022\n\016EQUERYT"
    "YPE_MIN\020\000\022\022\n\016EQUERYTYPE_ALL\020\001\022\025\n\021EQUERYT"
    "YPE_FRIEND\020\002\022\024\n\020EQUERYTYPE_CLOSE\020\003\022\032\n\026EQ"
    "UERYTYPE_WEDDING_ALL\020\004\022\035\n\031EQUERYTYPE_WED"
    "DING_FRIEND\020\005\022\034\n\030EQUERYTYPE_WEDDING_CLOS"
    "E\020\006\022\022\n\016EQUERYTYPE_MAX\020\007*\317\001\n\020EFashionHide"
    "Type\022\031\n\025EFASHIONHIDETYPE_HEAD\020\000\022\031\n\025EFASH"
    "IONHIDETYPE_BACK\020\001\022\031\n\025EFASHIONHIDETYPE_F"
    "ACE\020\002\022\031\n\025EFASHIONHIDETYPE_TAIL\020\003\022\032\n\026EFAS"
    "HIONHIDETYPE_MOUTH\020\004\022\031\n\025EFASHIONHIDETYPE"
    "_BODY\020\005\022\030\n\024EFASHIONHIDETYPE_MAX\020\006*^\n\016ECo"
    "untDownType\022\027\n\023ECOUNTDOWNTYPE_DOJO\020\001\022\030\n\024"
    "ECOUNTDOWNTYPE_TOWER\020\002\022\031\n\025ECOUNTDOWNTYPE"
    "_ALTMAN\020\003*\226\001\n\013ETreeStatus\022\023\n\017ETREESTATUS"
    "_MIN\020\000\022\026\n\022ETREESTATUS_NORMAL\020\001\022\027\n\023ETREES"
    "TATUS_MONSTER\020\002\022\026\n\022ETREESTATUS_REWARD\020\003\022"
    "\024\n\020ETREESTATUS_DEAD\020\004\022\023\n\017ETREESTATUS_MAX"
    "\020\005*}\n\013EZoneStatus\022\023\n\017EZONESTATUS_MIN\020\000\022\024"
    "\n\020EZONESTATUS_FREE\020\001\022\024\n\020EZONESTATUS_BUSY"
    "\020\002\022\030\n\024EZONESTATUS_VERYBUSY\020\003\022\023\n\017EZONESTA"
    "TUS_MAX\020\004*`\n\nEZoneState\022\022\n\016EZONESTATE_MI"
    "N\020\000\022\023\n\017EZONESTATE_FULL\020\001\022\025\n\021EZONESTATE_N"
    "OFULL\020\002\022\022\n\016EZONESTATE_MAX\020\003*n\n\tEJumpZone"
    "\022\021\n\rEJUMPZONE_MIN\020\000\022\023\n\017EJUMPZONE_GUILD\020\001"
    "\022\022\n\016EJUMPZONE_TEAM\020\002\022\022\n\016EJUMPZONE_USER\020\003"
    "\022\021\n\rEJUMPZONE_MAX\020\004*>\n\014SeatShowType\022\025\n\021S"
    "EAT_SHOW_VISIBLE\020\000\022\027\n\023SEAT_SHOW_INVISIBL"
    "E\020\001*\277\002\n\013EOptionType\022\033\n\027EOPTIONTYPE_USE_S"
    "AVE_HP\020\000\022\033\n\027EOPTIONTYPE_USE_SAVE_SP\020\001\022\030\n"
    "\024EOPTIONTYPE_USE_SLIM\020\002\022 \n\034EOPTIONTYPE_L"
    "OTTERY_CNT_HEAD\020\003\022!\n\035EOPTIONTYPE_LOTTERY"
    "_CNT_EQUIP\020\004\022 \n\034EOPTIONTYPE_LOTTERY_CNT_"
    "CARD\020\005\022!\n\035EOPTIONTYPE_LOTTERY_CNT_MAGIC\020"
    "\006\022 \n\034EOPTIONTYPE_LOTTERY_CNT_GIVE\020\007\022\033\n\027E"
    "OPTIONTYPE_USE_PETTALK\020\010\022\023\n\017EOPTIONTYPE_"
    "MAX\020\?*K\n\016ERenameErrCode\022\023\n\017ERENAME_SUCCE"
    "SS\020\000\022\016\n\nERENAME_CD\020\001\022\024\n\020ERENAME_CONFLICT"
    "\020\002*w\n\016EProposalReply\022\026\n\022EPROPOSALREPLY_Y"
    "ES\020\000\022\025\n\021EPROPOSALREPLY_NO\020\001\022\033\n\027EPROPOSAL"
    "REPLY_OUTRANGE\020\002\022\031\n\025EPROPOSALREPLY_CANCE"
    "L\020\003*\277\001\n\017ETwinsOperation\022\030\n\024ETWINS_OPERAT"
    "ION_MIN\020\000\022\034\n\030ETWINS_OPERATION_SPONSOR\020\001\022"
    "\034\n\030ETWINS_OPERATION_REQUEST\020\002\022\032\n\026ETWINS_"
    "OPERATION_AGREE\020\003\022\035\n\031ETWINS_OPERATION_DI"
    "SAGREE\020\004\022\033\n\027ETWINS_OPERATION_COMMIT\020\005*\265\001"
    "\n\017EServantService\022\036\n\032ESERVANT_SERVICE_RE"
    "COMMEND\020\001\022\"\n\036ESERVANT_SERVICE_FINANCE_TH"
    "REE\020\002\022\"\n\036ESERVANT_SERVICE_FINANCE_SEVEN\020"
    "\003\022\034\n\030ESERVANT_SERVICE_UPGRADE\020\004\022\034\n\030ESERV"
    "ANT_SERVICE_SPECIAL\020\005*\204\001\n\020ERecommendStat"
    "us\022\031\n\025ERECOMMEND_STATUS_MIN\020\000\022\030\n\024ERECOMM"
    "END_STATUS_GO\020\001\022\035\n\031ERECOMMEND_STATUS_REC"
    "EIVE\020\002\022\034\n\030ERECOMMEND_STATUS_FINISH\020\003*J\n\024"
    "EProfressionDataType\022\020\n\014ETypeAdvance\020\000\022\017"
    "\n\013ETypeBranch\020\001\022\017\n\013ETypeRecord\020\002*C\n\tESlo"
    "tType\022\021\n\rESLOT_DEFAULT\020\001\022\r\n\tESLOT_BUY\020\002\022"
    "\024\n\020ESLOT_MONTH_CARD\020\003*N\n\nEBoothOper\022\023\n\017E"
    "BOOTHOPER_OPEN\020\000\022\024\n\020EBOOTHOPER_CLOSE\020\001\022\025"
    "\n\021EBOOTHOPER_UPDATE\020\002*\220\001\n\nEBoothSign\022\024\n\020"
    "EBOOTHSIGN_WHITE\020\000\022\024\n\020EBOOTHSIGN_GREEN\020\001"
    "\022\023\n\017EBOOTHSIGN_BLUE\020\002\022\025\n\021EBOOTHSIGN_PURP"
    "LE\020\003\022\025\n\021EBOOTHSIGN_ORANGE\020\004\022\023\n\017EBOOTHSIG"
    "N_PINK\020\005*H\n\016EDressUpStatus\022\020\n\014EDRESSUP_M"
    "IN\020\000\022\021\n\rEDRESSUP_WAIT\020\001\022\021\n\rEDRESSUP_SHOW"
    "\020\002*&\n\014EFuncMapType\022\026\n\022EFUNCMAPTYPE_POLLY"
    "\020\001*u\n\rEGrowthStatus\022\026\n\022EGROWTH_STATUS_MI"
    "N\020\000\022\025\n\021EGROWTH_STATUS_GO\020\001\022\032\n\026EGROWTH_ST"
    "ATUS_RECEIVE\020\002\022\031\n\025EGROWTH_STATUS_FINISH\020"
    "\003*O\n\013EGrowthType\022\024\n\020EGROWTH_TYPE_MIN\020\000\022\025"
    "\n\021EGROWTH_TYPE_STEP\020\001\022\023\n\017EGROWTH_TYPE_EP"
    "\020\002", 39122);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneUser2.proto", &protobuf_RegisterTypes);
  GoCity::default_instance_ = new GoCity();
  MsgLangParam::default_instance_ = new MsgLangParam();
  MsgParam::default_instance_ = new MsgParam();
  SysMsg::default_instance_ = new SysMsg();
  NpcDataSync::default_instance_ = new NpcDataSync();
  UserNineSyncCmd::default_instance_ = new UserNineSyncCmd();
  UserActionNtf::default_instance_ = new UserActionNtf();
  BufferData::default_instance_ = new BufferData();
  UserBuffNineSyncCmd::default_instance_ = new UserBuffNineSyncCmd();
  ExitPosUserCmd::default_instance_ = new ExitPosUserCmd();
  Relive::default_instance_ = new Relive();
  VarUpdate::default_instance_ = new VarUpdate();
  TalkInfo::default_instance_ = new TalkInfo();
  ServerTime::default_instance_ = new ServerTime();
  EffectUserCmd::default_instance_ = new EffectUserCmd();
  MenuList::default_instance_ = new MenuList();
  NewMenu::default_instance_ = new NewMenu();
  TeamInfoNine::default_instance_ = new TeamInfoNine();
  UsePortrait::default_instance_ = new UsePortrait();
  UseFrame::default_instance_ = new UseFrame();
  NewPortraitFrame::default_instance_ = new NewPortraitFrame();
  QueryPortraitListUserCmd::default_instance_ = new QueryPortraitListUserCmd();
  UseDressing::default_instance_ = new UseDressing();
  NewDressing::default_instance_ = new NewDressing();
  DressingListUserCmd::default_instance_ = new DressingListUserCmd();
  AddAttrPoint::default_instance_ = new AddAttrPoint();
  ShopGotItem::default_instance_ = new ShopGotItem();
  QueryShopGotItem::default_instance_ = new QueryShopGotItem();
  UpdateShopGotItem::default_instance_ = new UpdateShopGotItem();
  OpenUI::default_instance_ = new OpenUI();
  DbgSysMsg::default_instance_ = new DbgSysMsg();
  FollowTransferCmd::default_instance_ = new FollowTransferCmd();
  CallNpcFuncCmd::default_instance_ = new CallNpcFuncCmd();
  ModelShow::default_instance_ = new ModelShow();
  SoundEffectCmd::default_instance_ = new SoundEffectCmd();
  PresetMsg::default_instance_ = new PresetMsg();
  PresetMsgCmd::default_instance_ = new PresetMsgCmd();
  ChangeBgmCmd::default_instance_ = new ChangeBgmCmd();
  FighterInfo::default_instance_ = new FighterInfo();
  QueryFighterInfo::default_instance_ = new QueryFighterInfo();
  GameTimeCmd::default_instance_ = new GameTimeCmd();
  CDTimeItem::default_instance_ = new CDTimeItem();
  CDTimeUserCmd::default_instance_ = new CDTimeUserCmd();
  StateChange::default_instance_ = new StateChange();
  Photo::default_instance_ = new Photo();
  ShakeScreen::default_instance_ = new ShakeScreen();
  ShortcutItem::default_instance_ = new ShortcutItem();
  QueryShortcut::default_instance_ = new QueryShortcut();
  PutShortcut::default_instance_ = new PutShortcut();
  NpcChangeAngle::default_instance_ = new NpcChangeAngle();
  CameraFocus::default_instance_ = new CameraFocus();
  GoToListUserCmd::default_instance_ = new GoToListUserCmd();
  GoToGearUserCmd::default_instance_ = new GoToGearUserCmd();
  NewTransMapCmd::default_instance_ = new NewTransMapCmd();
  DeathTransferListCmd::default_instance_ = new DeathTransferListCmd();
  NewDeathTransferCmd::default_instance_ = new NewDeathTransferCmd();
  UseDeathTransferCmd::default_instance_ = new UseDeathTransferCmd();
  FollowerUser::default_instance_ = new FollowerUser();
  BeFollowUserCmd::default_instance_ = new BeFollowUserCmd();
  LaboratoryUserCmd::default_instance_ = new LaboratoryUserCmd();
  GotoLaboratoryUserCmd::default_instance_ = new GotoLaboratoryUserCmd();
  ExchangeProfession::default_instance_ = new ExchangeProfession();
  Scenery::default_instance_ = new Scenery();
  SceneryUserCmd::default_instance_ = new SceneryUserCmd();
  GoMapQuestUserCmd::default_instance_ = new GoMapQuestUserCmd();
  GoMapFollowUserCmd::default_instance_ = new GoMapFollowUserCmd();
  UserAutoHitCmd::default_instance_ = new UserAutoHitCmd();
  UploadSceneryPhotoUserCmd::default_instance_ = new UploadSceneryPhotoUserCmd();
  UpyunUrl::default_instance_ = new UpyunUrl();
  DownloadSceneryPhotoUserCmd::default_instance_ = new DownloadSceneryPhotoUserCmd();
  QueryMapArea::default_instance_ = new QueryMapArea();
  NewMapAreaNtf::default_instance_ = new NewMapAreaNtf();
  BuffForeverCmd::default_instance_ = new BuffForeverCmd();
  InviteJoinHandsUserCmd::default_instance_ = new InviteJoinHandsUserCmd();
  BreakUpHandsUserCmd::default_instance_ = new BreakUpHandsUserCmd();
  HandStatusUserCmd::default_instance_ = new HandStatusUserCmd();
  QueryShow::default_instance_ = new QueryShow();
  MusicItem::default_instance_ = new MusicItem();
  QueryMusicList::default_instance_ = new QueryMusicList();
  DemandMusic::default_instance_ = new DemandMusic();
  CloseMusicFrame::default_instance_ = new CloseMusicFrame();
  UploadOkSceneryUserCmd::default_instance_ = new UploadOkSceneryUserCmd();
  JoinHandsUserCmd::default_instance_ = new JoinHandsUserCmd();
  TraceItem::default_instance_ = new TraceItem();
  QueryTraceList::default_instance_ = new QueryTraceList();
  UpdateTraceList::default_instance_ = new UpdateTraceList();
  SetDirection::default_instance_ = new SetDirection();
  BattleTimelenUserCmd::default_instance_ = new BattleTimelenUserCmd();
  SetOptionUserCmd::default_instance_ = new SetOptionUserCmd();
  QueryUserInfoUserCmd::default_instance_ = new QueryUserInfoUserCmd();
  CountDownTickUserCmd::default_instance_ = new CountDownTickUserCmd();
  ItemMusicNtfUserCmd::default_instance_ = new ItemMusicNtfUserCmd();
  ShakeTreeUserCmd::default_instance_ = new ShakeTreeUserCmd();
  Tree::default_instance_ = new Tree();
  TreeListUserCmd::default_instance_ = new TreeListUserCmd();
  ActivityNtfUserCmd::default_instance_ = new ActivityNtfUserCmd();
  ZoneInfo::default_instance_ = new ZoneInfo();
  RecentZoneInfo::default_instance_ = new RecentZoneInfo();
  QueryZoneStatusUserCmd::default_instance_ = new QueryZoneStatusUserCmd();
  JumpZoneUserCmd::default_instance_ = new JumpZoneUserCmd();
  ItemImageUserNtfUserCmd::default_instance_ = new ItemImageUserNtfUserCmd();
  InviteFollowUserCmd::default_instance_ = new InviteFollowUserCmd();
  ChangeNameUserCmd::default_instance_ = new ChangeNameUserCmd();
  ChargePlayUserCmd::default_instance_ = new ChargePlayUserCmd();
  RequireNpcFuncUserCmd::default_instance_ = new RequireNpcFuncUserCmd();
  CheckSeatUserCmd::default_instance_ = new CheckSeatUserCmd();
  NtfSeatUserCmd::default_instance_ = new NtfSeatUserCmd();
  YoyoSeatUserCmd::default_instance_ = new YoyoSeatUserCmd();
  ShowSeatUserCmd::default_instance_ = new ShowSeatUserCmd();
  SetNormalSkillOptionUserCmd::default_instance_ = new SetNormalSkillOptionUserCmd();
  NewSetOptionUserCmd::default_instance_ = new NewSetOptionUserCmd();
  UnsolvedSceneryNtfUserCmd::default_instance_ = new UnsolvedSceneryNtfUserCmd();
  VisibleNpc::default_instance_ = new VisibleNpc();
  NtfVisibleNpcUserCmd::default_instance_ = new NtfVisibleNpcUserCmd();
  UpyunAuthorizationCmd::default_instance_ = new UpyunAuthorizationCmd();
  TransformPreDataCmd::default_instance_ = new TransformPreDataCmd();
  UserRenameCmd::default_instance_ = new UserRenameCmd();
  BuyZenyCmd::default_instance_ = new BuyZenyCmd();
  CallTeamerUserCmd::default_instance_ = new CallTeamerUserCmd();
  CallTeamerReplyUserCmd::default_instance_ = new CallTeamerReplyUserCmd();
  SpecialEffectCmd::default_instance_ = new SpecialEffectCmd();
  MarriageProposalCmd::default_instance_ = new MarriageProposalCmd();
  MarriageProposalReplyCmd::default_instance_ = new MarriageProposalReplyCmd();
  UploadWeddingPhotoUserCmd::default_instance_ = new UploadWeddingPhotoUserCmd();
  MarriageProposalSuccessCmd::default_instance_ = new MarriageProposalSuccessCmd();
  InviteeWeddingStartNtfUserCmd::default_instance_ = new InviteeWeddingStartNtfUserCmd();
  KFCShareUserCmd::default_instance_ = new KFCShareUserCmd();
  CheckRelationUserCmd::default_instance_ = new CheckRelationUserCmd();
  TwinsActionUserCmd::default_instance_ = new TwinsActionUserCmd();
  ShowServantUserCmd::default_instance_ = new ShowServantUserCmd();
  ReplaceServantUserCmd::default_instance_ = new ReplaceServantUserCmd();
  ServantService::default_instance_ = new ServantService();
  RecommendItemInfo::default_instance_ = new RecommendItemInfo();
  RecommendServantUserCmd::default_instance_ = new RecommendServantUserCmd();
  ReceiveServantUserCmd::default_instance_ = new ReceiveServantUserCmd();
  FavorabilityStatus::default_instance_ = new FavorabilityStatus();
  ServantRewardStatusUserCmd::default_instance_ = new ServantRewardStatusUserCmd();
  ProfessionInfo::default_instance_ = new ProfessionInfo();
  ProfessionQueryUserCmd::default_instance_ = new ProfessionQueryUserCmd();
  ProfessionBuyUserCmd::default_instance_ = new ProfessionBuyUserCmd();
  ProfessionChangeUserCmd::default_instance_ = new ProfessionChangeUserCmd();
  AstrolabeProfessionData::default_instance_ = new AstrolabeProfessionData();
  AttrProfessionData::default_instance_ = new AttrProfessionData();
  EquipInfo::default_instance_ = new EquipInfo();
  EquipPackData::default_instance_ = new EquipPackData();
  SkillValidPosData::default_instance_ = new SkillValidPosData();
  SkillProfessionData::default_instance_ = new SkillProfessionData();
  ProfessionUserInfo::default_instance_ = new ProfessionUserInfo();
  SlotInfo::default_instance_ = new SlotInfo();
  UserAstrolMaterialData::default_instance_ = new UserAstrolMaterialData();
  UpdateRecordInfoUserCmd::default_instance_ = new UpdateRecordInfoUserCmd();
  SaveRecordUserCmd::default_instance_ = new SaveRecordUserCmd();
  LoadRecordUserCmd::default_instance_ = new LoadRecordUserCmd();
  ChangeRecordNameUserCmd::default_instance_ = new ChangeRecordNameUserCmd();
  BuyRecordSlotUserCmd::default_instance_ = new BuyRecordSlotUserCmd();
  DeleteRecordUserCmd::default_instance_ = new DeleteRecordUserCmd();
  UpdateBranchInfoUserCmd::default_instance_ = new UpdateBranchInfoUserCmd();
  EnterCapraActivityCmd::default_instance_ = new EnterCapraActivityCmd();
  InviteWithMeUserCmd::default_instance_ = new InviteWithMeUserCmd();
  QueryAltmanKillUserCmd::default_instance_ = new QueryAltmanKillUserCmd();
  BoothInfo::default_instance_ = new BoothInfo();
  BoothReqUserCmd::default_instance_ = new BoothReqUserCmd();
  BoothInfoSyncUserCmd::default_instance_ = new BoothInfoSyncUserCmd();
  DressUpModelUserCmd::default_instance_ = new DressUpModelUserCmd();
  DressUpHeadUserCmd::default_instance_ = new DressUpHeadUserCmd();
  StageInfo::default_instance_ = new StageInfo();
  QueryStageUserCmd::default_instance_ = new QueryStageUserCmd();
  DressUpLineUpUserCmd::default_instance_ = new DressUpLineUpUserCmd();
  StageUserDataType::default_instance_ = new StageUserDataType();
  DressUpStageUserCmd::default_instance_ = new DressUpStageUserCmd();
  GoToFunctionMapUserCmd::default_instance_ = new GoToFunctionMapUserCmd();
  GrowthCurInfo::default_instance_ = new GrowthCurInfo();
  GrowthItemInfo::default_instance_ = new GrowthItemInfo();
  GrowthValueInfo::default_instance_ = new GrowthValueInfo();
  GrowthGroupInfo::default_instance_ = new GrowthGroupInfo();
  GrowthServantUserCmd::default_instance_ = new GrowthServantUserCmd();
  ReceiveGrowthServantUserCmd::default_instance_ = new ReceiveGrowthServantUserCmd();
  GrowthOpenServantUserCmd::default_instance_ = new GrowthOpenServantUserCmd();
  CheatTagUserCmd::default_instance_ = new CheatTagUserCmd();
  CheatTagStatUserCmd::default_instance_ = new CheatTagStatUserCmd();
  GoCity::default_instance_->InitAsDefaultInstance();
  MsgLangParam::default_instance_->InitAsDefaultInstance();
  MsgParam::default_instance_->InitAsDefaultInstance();
  SysMsg::default_instance_->InitAsDefaultInstance();
  NpcDataSync::default_instance_->InitAsDefaultInstance();
  UserNineSyncCmd::default_instance_->InitAsDefaultInstance();
  UserActionNtf::default_instance_->InitAsDefaultInstance();
  BufferData::default_instance_->InitAsDefaultInstance();
  UserBuffNineSyncCmd::default_instance_->InitAsDefaultInstance();
  ExitPosUserCmd::default_instance_->InitAsDefaultInstance();
  Relive::default_instance_->InitAsDefaultInstance();
  VarUpdate::default_instance_->InitAsDefaultInstance();
  TalkInfo::default_instance_->InitAsDefaultInstance();
  ServerTime::default_instance_->InitAsDefaultInstance();
  EffectUserCmd::default_instance_->InitAsDefaultInstance();
  MenuList::default_instance_->InitAsDefaultInstance();
  NewMenu::default_instance_->InitAsDefaultInstance();
  TeamInfoNine::default_instance_->InitAsDefaultInstance();
  UsePortrait::default_instance_->InitAsDefaultInstance();
  UseFrame::default_instance_->InitAsDefaultInstance();
  NewPortraitFrame::default_instance_->InitAsDefaultInstance();
  QueryPortraitListUserCmd::default_instance_->InitAsDefaultInstance();
  UseDressing::default_instance_->InitAsDefaultInstance();
  NewDressing::default_instance_->InitAsDefaultInstance();
  DressingListUserCmd::default_instance_->InitAsDefaultInstance();
  AddAttrPoint::default_instance_->InitAsDefaultInstance();
  ShopGotItem::default_instance_->InitAsDefaultInstance();
  QueryShopGotItem::default_instance_->InitAsDefaultInstance();
  UpdateShopGotItem::default_instance_->InitAsDefaultInstance();
  OpenUI::default_instance_->InitAsDefaultInstance();
  DbgSysMsg::default_instance_->InitAsDefaultInstance();
  FollowTransferCmd::default_instance_->InitAsDefaultInstance();
  CallNpcFuncCmd::default_instance_->InitAsDefaultInstance();
  ModelShow::default_instance_->InitAsDefaultInstance();
  SoundEffectCmd::default_instance_->InitAsDefaultInstance();
  PresetMsg::default_instance_->InitAsDefaultInstance();
  PresetMsgCmd::default_instance_->InitAsDefaultInstance();
  ChangeBgmCmd::default_instance_->InitAsDefaultInstance();
  FighterInfo::default_instance_->InitAsDefaultInstance();
  QueryFighterInfo::default_instance_->InitAsDefaultInstance();
  GameTimeCmd::default_instance_->InitAsDefaultInstance();
  CDTimeItem::default_instance_->InitAsDefaultInstance();
  CDTimeUserCmd::default_instance_->InitAsDefaultInstance();
  StateChange::default_instance_->InitAsDefaultInstance();
  Photo::default_instance_->InitAsDefaultInstance();
  ShakeScreen::default_instance_->InitAsDefaultInstance();
  ShortcutItem::default_instance_->InitAsDefaultInstance();
  QueryShortcut::default_instance_->InitAsDefaultInstance();
  PutShortcut::default_instance_->InitAsDefaultInstance();
  NpcChangeAngle::default_instance_->InitAsDefaultInstance();
  CameraFocus::default_instance_->InitAsDefaultInstance();
  GoToListUserCmd::default_instance_->InitAsDefaultInstance();
  GoToGearUserCmd::default_instance_->InitAsDefaultInstance();
  NewTransMapCmd::default_instance_->InitAsDefaultInstance();
  DeathTransferListCmd::default_instance_->InitAsDefaultInstance();
  NewDeathTransferCmd::default_instance_->InitAsDefaultInstance();
  UseDeathTransferCmd::default_instance_->InitAsDefaultInstance();
  FollowerUser::default_instance_->InitAsDefaultInstance();
  BeFollowUserCmd::default_instance_->InitAsDefaultInstance();
  LaboratoryUserCmd::default_instance_->InitAsDefaultInstance();
  GotoLaboratoryUserCmd::default_instance_->InitAsDefaultInstance();
  ExchangeProfession::default_instance_->InitAsDefaultInstance();
  Scenery::default_instance_->InitAsDefaultInstance();
  SceneryUserCmd::default_instance_->InitAsDefaultInstance();
  GoMapQuestUserCmd::default_instance_->InitAsDefaultInstance();
  GoMapFollowUserCmd::default_instance_->InitAsDefaultInstance();
  UserAutoHitCmd::default_instance_->InitAsDefaultInstance();
  UploadSceneryPhotoUserCmd::default_instance_->InitAsDefaultInstance();
  UpyunUrl::default_instance_->InitAsDefaultInstance();
  DownloadSceneryPhotoUserCmd::default_instance_->InitAsDefaultInstance();
  QueryMapArea::default_instance_->InitAsDefaultInstance();
  NewMapAreaNtf::default_instance_->InitAsDefaultInstance();
  BuffForeverCmd::default_instance_->InitAsDefaultInstance();
  InviteJoinHandsUserCmd::default_instance_->InitAsDefaultInstance();
  BreakUpHandsUserCmd::default_instance_->InitAsDefaultInstance();
  HandStatusUserCmd::default_instance_->InitAsDefaultInstance();
  QueryShow::default_instance_->InitAsDefaultInstance();
  MusicItem::default_instance_->InitAsDefaultInstance();
  QueryMusicList::default_instance_->InitAsDefaultInstance();
  DemandMusic::default_instance_->InitAsDefaultInstance();
  CloseMusicFrame::default_instance_->InitAsDefaultInstance();
  UploadOkSceneryUserCmd::default_instance_->InitAsDefaultInstance();
  JoinHandsUserCmd::default_instance_->InitAsDefaultInstance();
  TraceItem::default_instance_->InitAsDefaultInstance();
  QueryTraceList::default_instance_->InitAsDefaultInstance();
  UpdateTraceList::default_instance_->InitAsDefaultInstance();
  SetDirection::default_instance_->InitAsDefaultInstance();
  BattleTimelenUserCmd::default_instance_->InitAsDefaultInstance();
  SetOptionUserCmd::default_instance_->InitAsDefaultInstance();
  QueryUserInfoUserCmd::default_instance_->InitAsDefaultInstance();
  CountDownTickUserCmd::default_instance_->InitAsDefaultInstance();
  ItemMusicNtfUserCmd::default_instance_->InitAsDefaultInstance();
  ShakeTreeUserCmd::default_instance_->InitAsDefaultInstance();
  Tree::default_instance_->InitAsDefaultInstance();
  TreeListUserCmd::default_instance_->InitAsDefaultInstance();
  ActivityNtfUserCmd::default_instance_->InitAsDefaultInstance();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  RecentZoneInfo::default_instance_->InitAsDefaultInstance();
  QueryZoneStatusUserCmd::default_instance_->InitAsDefaultInstance();
  JumpZoneUserCmd::default_instance_->InitAsDefaultInstance();
  ItemImageUserNtfUserCmd::default_instance_->InitAsDefaultInstance();
  InviteFollowUserCmd::default_instance_->InitAsDefaultInstance();
  ChangeNameUserCmd::default_instance_->InitAsDefaultInstance();
  ChargePlayUserCmd::default_instance_->InitAsDefaultInstance();
  RequireNpcFuncUserCmd::default_instance_->InitAsDefaultInstance();
  CheckSeatUserCmd::default_instance_->InitAsDefaultInstance();
  NtfSeatUserCmd::default_instance_->InitAsDefaultInstance();
  YoyoSeatUserCmd::default_instance_->InitAsDefaultInstance();
  ShowSeatUserCmd::default_instance_->InitAsDefaultInstance();
  SetNormalSkillOptionUserCmd::default_instance_->InitAsDefaultInstance();
  NewSetOptionUserCmd::default_instance_->InitAsDefaultInstance();
  UnsolvedSceneryNtfUserCmd::default_instance_->InitAsDefaultInstance();
  VisibleNpc::default_instance_->InitAsDefaultInstance();
  NtfVisibleNpcUserCmd::default_instance_->InitAsDefaultInstance();
  UpyunAuthorizationCmd::default_instance_->InitAsDefaultInstance();
  TransformPreDataCmd::default_instance_->InitAsDefaultInstance();
  UserRenameCmd::default_instance_->InitAsDefaultInstance();
  BuyZenyCmd::default_instance_->InitAsDefaultInstance();
  CallTeamerUserCmd::default_instance_->InitAsDefaultInstance();
  CallTeamerReplyUserCmd::default_instance_->InitAsDefaultInstance();
  SpecialEffectCmd::default_instance_->InitAsDefaultInstance();
  MarriageProposalCmd::default_instance_->InitAsDefaultInstance();
  MarriageProposalReplyCmd::default_instance_->InitAsDefaultInstance();
  UploadWeddingPhotoUserCmd::default_instance_->InitAsDefaultInstance();
  MarriageProposalSuccessCmd::default_instance_->InitAsDefaultInstance();
  InviteeWeddingStartNtfUserCmd::default_instance_->InitAsDefaultInstance();
  KFCShareUserCmd::default_instance_->InitAsDefaultInstance();
  CheckRelationUserCmd::default_instance_->InitAsDefaultInstance();
  TwinsActionUserCmd::default_instance_->InitAsDefaultInstance();
  ShowServantUserCmd::default_instance_->InitAsDefaultInstance();
  ReplaceServantUserCmd::default_instance_->InitAsDefaultInstance();
  ServantService::default_instance_->InitAsDefaultInstance();
  RecommendItemInfo::default_instance_->InitAsDefaultInstance();
  RecommendServantUserCmd::default_instance_->InitAsDefaultInstance();
  ReceiveServantUserCmd::default_instance_->InitAsDefaultInstance();
  FavorabilityStatus::default_instance_->InitAsDefaultInstance();
  ServantRewardStatusUserCmd::default_instance_->InitAsDefaultInstance();
  ProfessionInfo::default_instance_->InitAsDefaultInstance();
  ProfessionQueryUserCmd::default_instance_->InitAsDefaultInstance();
  ProfessionBuyUserCmd::default_instance_->InitAsDefaultInstance();
  ProfessionChangeUserCmd::default_instance_->InitAsDefaultInstance();
  AstrolabeProfessionData::default_instance_->InitAsDefaultInstance();
  AttrProfessionData::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  EquipPackData::default_instance_->InitAsDefaultInstance();
  SkillValidPosData::default_instance_->InitAsDefaultInstance();
  SkillProfessionData::default_instance_->InitAsDefaultInstance();
  ProfessionUserInfo::default_instance_->InitAsDefaultInstance();
  SlotInfo::default_instance_->InitAsDefaultInstance();
  UserAstrolMaterialData::default_instance_->InitAsDefaultInstance();
  UpdateRecordInfoUserCmd::default_instance_->InitAsDefaultInstance();
  SaveRecordUserCmd::default_instance_->InitAsDefaultInstance();
  LoadRecordUserCmd::default_instance_->InitAsDefaultInstance();
  ChangeRecordNameUserCmd::default_instance_->InitAsDefaultInstance();
  BuyRecordSlotUserCmd::default_instance_->InitAsDefaultInstance();
  DeleteRecordUserCmd::default_instance_->InitAsDefaultInstance();
  UpdateBranchInfoUserCmd::default_instance_->InitAsDefaultInstance();
  EnterCapraActivityCmd::default_instance_->InitAsDefaultInstance();
  InviteWithMeUserCmd::default_instance_->InitAsDefaultInstance();
  QueryAltmanKillUserCmd::default_instance_->InitAsDefaultInstance();
  BoothInfo::default_instance_->InitAsDefaultInstance();
  BoothReqUserCmd::default_instance_->InitAsDefaultInstance();
  BoothInfoSyncUserCmd::default_instance_->InitAsDefaultInstance();
  DressUpModelUserCmd::default_instance_->InitAsDefaultInstance();
  DressUpHeadUserCmd::default_instance_->InitAsDefaultInstance();
  StageInfo::default_instance_->InitAsDefaultInstance();
  QueryStageUserCmd::default_instance_->InitAsDefaultInstance();
  DressUpLineUpUserCmd::default_instance_->InitAsDefaultInstance();
  StageUserDataType::default_instance_->InitAsDefaultInstance();
  DressUpStageUserCmd::default_instance_->InitAsDefaultInstance();
  GoToFunctionMapUserCmd::default_instance_->InitAsDefaultInstance();
  GrowthCurInfo::default_instance_->InitAsDefaultInstance();
  GrowthItemInfo::default_instance_->InitAsDefaultInstance();
  GrowthValueInfo::default_instance_->InitAsDefaultInstance();
  GrowthGroupInfo::default_instance_->InitAsDefaultInstance();
  GrowthServantUserCmd::default_instance_->InitAsDefaultInstance();
  ReceiveGrowthServantUserCmd::default_instance_->InitAsDefaultInstance();
  GrowthOpenServantUserCmd::default_instance_->InitAsDefaultInstance();
  CheatTagUserCmd::default_instance_->InitAsDefaultInstance();
  CheatTagStatUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneUser2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneUser2_2eproto {
  StaticDescriptorInitializer_SceneUser2_2eproto() {
    protobuf_AddDesc_SceneUser2_2eproto();
  }
} static_descriptor_initializer_SceneUser2_2eproto_;
const ::google::protobuf::EnumDescriptor* User2Param_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return User2Param_descriptor_;
}
bool User2Param_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 40:
    case 41:
    case 42:
    case 44:
    case 45:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 80:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 91:
    case 92:
    case 93:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMessageType_descriptor_;
}
bool EMessageType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EMessageActOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EMessageActOpt_descriptor_;
}
bool EMessageActOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUserActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUserActionType_descriptor_;
}
bool EUserActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReliveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReliveType_descriptor_;
}
bool EReliveType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEffectOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEffectOpt_descriptor_;
}
bool EEffectOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEffectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEffectType_descriptor_;
}
bool EEffectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDressType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDressType_descriptor_;
}
bool EDressType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointType_descriptor_;
}
bool PointType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDbgMsgType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDbgMsgType_descriptor_;
}
bool EDbgMsgType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GameTimeOpt_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTimeOpt_descriptor_;
}
bool GameTimeOpt_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CD_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CD_TYPE_descriptor_;
}
bool CD_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGoToGearType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGoToGearType_descriptor_;
}
bool EGoToGearType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFollowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFollowType_descriptor_;
}
bool EFollowType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAlbumType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAlbumType_descriptor_;
}
bool EAlbumType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBattleStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBattleStatus_descriptor_;
}
bool EBattleStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EQueryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EQueryType_descriptor_;
}
bool EQueryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFashionHideType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFashionHideType_descriptor_;
}
bool EFashionHideType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECountDownType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECountDownType_descriptor_;
}
bool ECountDownType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETreeStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETreeStatus_descriptor_;
}
bool ETreeStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EZoneStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EZoneStatus_descriptor_;
}
bool EZoneStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EZoneState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EZoneState_descriptor_;
}
bool EZoneState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EJumpZone_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EJumpZone_descriptor_;
}
bool EJumpZone_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SeatShowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeatShowType_descriptor_;
}
bool SeatShowType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EOptionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EOptionType_descriptor_;
}
bool EOptionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 63:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERenameErrCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERenameErrCode_descriptor_;
}
bool ERenameErrCode_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProposalReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProposalReply_descriptor_;
}
bool EProposalReply_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETwinsOperation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETwinsOperation_descriptor_;
}
bool ETwinsOperation_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EServantService_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EServantService_descriptor_;
}
bool EServantService_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERecommendStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ERecommendStatus_descriptor_;
}
bool ERecommendStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EProfressionDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EProfressionDataType_descriptor_;
}
bool EProfressionDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESlotType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESlotType_descriptor_;
}
bool ESlotType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBoothOper_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBoothOper_descriptor_;
}
bool EBoothOper_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBoothSign_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBoothSign_descriptor_;
}
bool EBoothSign_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDressUpStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDressUpStatus_descriptor_;
}
bool EDressUpStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFuncMapType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFuncMapType_descriptor_;
}
bool EFuncMapType_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGrowthStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGrowthStatus_descriptor_;
}
bool EGrowthStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGrowthType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGrowthType_descriptor_;
}
bool EGrowthType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GoCity::kCmdFieldNumber;
const int GoCity::kParamFieldNumber;
const int GoCity::kMapidFieldNumber;
#endif  // !_MSC_VER

GoCity::GoCity()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoCity)
}

void GoCity::InitAsDefaultInstance() {
}

GoCity::GoCity(const GoCity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoCity)
}

void GoCity::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 1;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoCity::~GoCity() {
  // @@protoc_insertion_point(destructor:Cmd.GoCity)
  SharedDtor();
}

void GoCity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoCity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoCity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoCity_descriptor_;
}

const GoCity& GoCity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoCity* GoCity::default_instance_ = NULL;

GoCity* GoCity::New() const {
  return new GoCity;
}

void GoCity::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 1;
    mapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoCity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoCity)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoCity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoCity)
  return false;
#undef DO_
}

void GoCity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoCity)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoCity)
}

::google::protobuf::uint8* GoCity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoCity)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoCity)
  return target;
}

int GoCity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOCITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoCity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoCity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoCity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoCity::MergeFrom(const GoCity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoCity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoCity::CopyFrom(const GoCity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoCity::IsInitialized() const {

  return true;
}

void GoCity::Swap(GoCity* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoCity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoCity_descriptor_;
  metadata.reflection = GoCity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgLangParam::kLanguageFieldNumber;
const int MsgLangParam::kParamFieldNumber;
#endif  // !_MSC_VER

MsgLangParam::MsgLangParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MsgLangParam)
}

void MsgLangParam::InitAsDefaultInstance() {
}

MsgLangParam::MsgLangParam(const MsgLangParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MsgLangParam)
}

void MsgLangParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  language_ = 0u;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgLangParam::~MsgLangParam() {
  // @@protoc_insertion_point(destructor:Cmd.MsgLangParam)
  SharedDtor();
}

void MsgLangParam::SharedDtor() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void MsgLangParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgLangParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgLangParam_descriptor_;
}

const MsgLangParam& MsgLangParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MsgLangParam* MsgLangParam::default_instance_ = NULL;

MsgLangParam* MsgLangParam::New() const {
  return new MsgLangParam;
}

void MsgLangParam::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    language_ = 0u;
    if (has_param()) {
      if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        param_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgLangParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MsgLangParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
          set_has_language();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // optional string param = 2;
      case 2: {
        if (tag == 18) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MsgLangParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MsgLangParam)
  return false;
#undef DO_
}

void MsgLangParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MsgLangParam)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MsgLangParam)
}

::google::protobuf::uint8* MsgLangParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MsgLangParam)
  // optional uint32 language = 1 [default = 0];
  if (has_language()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MsgLangParam)
  return target;
}

int MsgLangParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 language = 1 [default = 0];
    if (has_language()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional string param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgLangParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgLangParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgLangParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgLangParam::MergeFrom(const MsgLangParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_language()) {
      set_language(from.language());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgLangParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgLangParam::CopyFrom(const MsgLangParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLangParam::IsInitialized() const {

  return true;
}

void MsgLangParam::Swap(MsgLangParam* other) {
  if (other != this) {
    std::swap(language_, other->language_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgLangParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgLangParam_descriptor_;
  metadata.reflection = MsgLangParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgParam::kParamFieldNumber;
const int MsgParam::kSubparamsFieldNumber;
const int MsgParam::kLangparamsFieldNumber;
#endif  // !_MSC_VER

MsgParam::MsgParam()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MsgParam)
}

void MsgParam::InitAsDefaultInstance() {
}

MsgParam::MsgParam(const MsgParam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MsgParam)
}

void MsgParam::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  param_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgParam::~MsgParam() {
  // @@protoc_insertion_point(destructor:Cmd.MsgParam)
  SharedDtor();
}

void MsgParam::SharedDtor() {
  if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete param_;
  }
  if (this != default_instance_) {
  }
}

void MsgParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgParam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgParam_descriptor_;
}

const MsgParam& MsgParam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MsgParam* MsgParam::default_instance_ = NULL;

MsgParam* MsgParam::New() const {
  return new MsgParam;
}

void MsgParam::Clear() {
  if (has_param()) {
    if (param_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      param_->clear();
    }
  }
  subparams_.Clear();
  langparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MsgParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string param = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param().data(), this->param().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "param");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subparams;
        break;
      }

      // repeated string subparams = 2;
      case 2: {
        if (tag == 18) {
         parse_subparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subparams(this->subparams_size() - 1).data(),
            this->subparams(this->subparams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "subparams");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subparams;
        if (input->ExpectTag(26)) goto parse_langparams;
        break;
      }

      // repeated .Cmd.MsgLangParam langparams = 3;
      case 3: {
        if (tag == 26) {
         parse_langparams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_langparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_langparams;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MsgParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MsgParam)
  return false;
#undef DO_
}

void MsgParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MsgParam)
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->param(), output);
  }

  // repeated string subparams = 2;
  for (int i = 0; i < this->subparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->subparams(i).data(), this->subparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "subparams");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subparams(i), output);
  }

  // repeated .Cmd.MsgLangParam langparams = 3;
  for (int i = 0; i < this->langparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->langparams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MsgParam)
}

::google::protobuf::uint8* MsgParam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MsgParam)
  // optional string param = 1;
  if (has_param()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param().data(), this->param().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "param");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->param(), target);
  }

  // repeated string subparams = 2;
  for (int i = 0; i < this->subparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subparams(i).data(), this->subparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "subparams");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->subparams(i), target);
  }

  // repeated .Cmd.MsgLangParam langparams = 3;
  for (int i = 0; i < this->langparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->langparams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MsgParam)
  return target;
}

int MsgParam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string param = 1;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param());
    }

  }
  // repeated string subparams = 2;
  total_size += 1 * this->subparams_size();
  for (int i = 0; i < this->subparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subparams(i));
  }

  // repeated .Cmd.MsgLangParam langparams = 3;
  total_size += 1 * this->langparams_size();
  for (int i = 0; i < this->langparams_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->langparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgParam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgParam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgParam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgParam::MergeFrom(const MsgParam& from) {
  GOOGLE_CHECK_NE(&from, this);
  subparams_.MergeFrom(from.subparams_);
  langparams_.MergeFrom(from.langparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgParam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgParam::CopyFrom(const MsgParam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgParam::IsInitialized() const {

  return true;
}

void MsgParam::Swap(MsgParam* other) {
  if (other != this) {
    std::swap(param_, other->param_);
    subparams_.Swap(&other->subparams_);
    langparams_.Swap(&other->langparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgParam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgParam_descriptor_;
  metadata.reflection = MsgParam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMsg::kCmdFieldNumber;
const int SysMsg::kParamFieldNumber;
const int SysMsg::kIdFieldNumber;
const int SysMsg::kTypeFieldNumber;
const int SysMsg::kParamsFieldNumber;
const int SysMsg::kActFieldNumber;
const int SysMsg::kDelayFieldNumber;
#endif  // !_MSC_VER

SysMsg::SysMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SysMsg)
}

void SysMsg::InitAsDefaultInstance() {
}

SysMsg::SysMsg(const SysMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SysMsg)
}

void SysMsg::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 2;
  id_ = 0u;
  type_ = 0;
  act_ = 1;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMsg::~SysMsg() {
  // @@protoc_insertion_point(destructor:Cmd.SysMsg)
  SharedDtor();
}

void SysMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMsg_descriptor_;
}

const SysMsg& SysMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SysMsg* SysMsg::default_instance_ = NULL;

SysMsg* SysMsg::New() const {
  return new SysMsg;
}

void SysMsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SysMsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 111) {
    ZR_(id_, type_);
    cmd_ = 9;
    param_ = 2;
    act_ = 1;
    delay_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SysMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMessageType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated .Cmd.MsgParam params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectTag(48)) goto parse_act;
        break;
      }

      // optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
      case 6: {
        if (tag == 48) {
         parse_act:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EMessageActOpt_IsValid(value)) {
            set_act(static_cast< ::Cmd::EMessageActOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SysMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SysMsg)
  return false;
#undef DO_
}

void SysMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SysMsg)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated .Cmd.MsgParam params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(i), output);
  }

  // optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->act(), output);
  }

  // optional uint32 delay = 7 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SysMsg)
}

::google::protobuf::uint8* SysMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SysMsg)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated .Cmd.MsgParam params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(i), target);
  }

  // optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->act(), target);
  }

  // optional uint32 delay = 7 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SysMsg)
  return target;
}

int SysMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SYSMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Cmd.EMessageType type = 4 [default = EMESSAGETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.EMessageActOpt act = 6 [default = EMESSAGEACT_ADD];
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->act());
    }

    // optional uint32 delay = 7 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  // repeated .Cmd.MsgParam params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMsg::MergeFrom(const SysMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMsg::CopyFrom(const SysMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMsg::IsInitialized() const {

  return true;
}

void SysMsg::Swap(SysMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    params_.Swap(&other->params_);
    std::swap(act_, other->act_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMsg_descriptor_;
  metadata.reflection = SysMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcDataSync::kCmdFieldNumber;
const int NpcDataSync::kParamFieldNumber;
const int NpcDataSync::kGuidFieldNumber;
const int NpcDataSync::kAttrsFieldNumber;
const int NpcDataSync::kDatasFieldNumber;
#endif  // !_MSC_VER

NpcDataSync::NpcDataSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NpcDataSync)
}

void NpcDataSync::InitAsDefaultInstance() {
}

NpcDataSync::NpcDataSync(const NpcDataSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NpcDataSync)
}

void NpcDataSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 3;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcDataSync::~NpcDataSync() {
  // @@protoc_insertion_point(destructor:Cmd.NpcDataSync)
  SharedDtor();
}

void NpcDataSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcDataSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcDataSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcDataSync_descriptor_;
}

const NpcDataSync& NpcDataSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NpcDataSync* NpcDataSync::default_instance_ = NULL;

NpcDataSync* NpcDataSync::New() const {
  return new NpcDataSync;
}

void NpcDataSync::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 3;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  attrs_.Clear();
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcDataSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NpcDataSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 4;
      case 4: {
        if (tag == 34) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_attrs;
        if (input->ExpectTag(42)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 5;
      case 5: {
        if (tag == 42) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NpcDataSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NpcDataSync)
  return false;
#undef DO_
}

void NpcDataSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NpcDataSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attrs(i), output);
  }

  // repeated .Cmd.UserData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NpcDataSync)
}

::google::protobuf::uint8* NpcDataSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NpcDataSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.UserAttr attrs = 4;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attrs(i), target);
  }

  // repeated .Cmd.UserData datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NpcDataSync)
  return target;
}

int NpcDataSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCDATASYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .Cmd.UserAttr attrs = 4;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.UserData datas = 5;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcDataSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcDataSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcDataSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcDataSync::MergeFrom(const NpcDataSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcDataSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcDataSync::CopyFrom(const NpcDataSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcDataSync::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void NpcDataSync::Swap(NpcDataSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    attrs_.Swap(&other->attrs_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcDataSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcDataSync_descriptor_;
  metadata.reflection = NpcDataSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserNineSyncCmd::kCmdFieldNumber;
const int UserNineSyncCmd::kParamFieldNumber;
const int UserNineSyncCmd::kGuidFieldNumber;
const int UserNineSyncCmd::kDatasFieldNumber;
const int UserNineSyncCmd::kAttrsFieldNumber;
#endif  // !_MSC_VER

UserNineSyncCmd::UserNineSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserNineSyncCmd)
}

void UserNineSyncCmd::InitAsDefaultInstance() {
}

UserNineSyncCmd::UserNineSyncCmd(const UserNineSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserNineSyncCmd)
}

void UserNineSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 4;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserNineSyncCmd::~UserNineSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserNineSyncCmd)
  SharedDtor();
}

void UserNineSyncCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserNineSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserNineSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserNineSyncCmd_descriptor_;
}

const UserNineSyncCmd& UserNineSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserNineSyncCmd* UserNineSyncCmd::default_instance_ = NULL;

UserNineSyncCmd* UserNineSyncCmd::New() const {
  return new UserNineSyncCmd;
}

void UserNineSyncCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 4;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  datas_.Clear();
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserNineSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserNineSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectTag(42)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 5;
      case 5: {
        if (tag == 42) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserNineSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserNineSyncCmd)
  return false;
#undef DO_
}

void UserNineSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserNineSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.UserData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserNineSyncCmd)
}

::google::protobuf::uint8* UserNineSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserNineSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.UserData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserNineSyncCmd)
  return target;
}

int UserNineSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USERNINESYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .Cmd.UserData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 5;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserNineSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserNineSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserNineSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserNineSyncCmd::MergeFrom(const UserNineSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserNineSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserNineSyncCmd::CopyFrom(const UserNineSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserNineSyncCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void UserNineSyncCmd::Swap(UserNineSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserNineSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserNineSyncCmd_descriptor_;
  metadata.reflection = UserNineSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserActionNtf::kCmdFieldNumber;
const int UserActionNtf::kParamFieldNumber;
const int UserActionNtf::kCharidFieldNumber;
const int UserActionNtf::kValueFieldNumber;
const int UserActionNtf::kTypeFieldNumber;
const int UserActionNtf::kDelayFieldNumber;
#endif  // !_MSC_VER

UserActionNtf::UserActionNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserActionNtf)
}

void UserActionNtf::InitAsDefaultInstance() {
}

UserActionNtf::UserActionNtf(const UserActionNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserActionNtf)
}

void UserActionNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 5;
  charid_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserActionNtf::~UserActionNtf() {
  // @@protoc_insertion_point(destructor:Cmd.UserActionNtf)
  SharedDtor();
}

void UserActionNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserActionNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserActionNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserActionNtf_descriptor_;
}

const UserActionNtf& UserActionNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserActionNtf* UserActionNtf::default_instance_ = NULL;

UserActionNtf* UserActionNtf::New() const {
  return new UserActionNtf;
}

void UserActionNtf::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserActionNtf*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, delay_);
    cmd_ = 9;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserActionNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserActionNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserActionType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserActionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint64 value = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserActionNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserActionNtf)
  return false;
#undef DO_
}

void UserActionNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserActionNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint64 value = 5 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->value(), output);
  }

  // optional uint32 delay = 6 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserActionNtf)
}

::google::protobuf::uint8* UserActionNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserActionNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint64 value = 5 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->value(), target);
  }

  // optional uint32 delay = 6 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserActionNtf)
  return target;
}

int UserActionNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 value = 5 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

    // optional .Cmd.EUserActionType type = 4 [default = EUSERACTIONTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 delay = 6 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserActionNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserActionNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserActionNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserActionNtf::MergeFrom(const UserActionNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserActionNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserActionNtf::CopyFrom(const UserActionNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserActionNtf::IsInitialized() const {

  return true;
}

void UserActionNtf::Swap(UserActionNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(value_, other->value_);
    std::swap(type_, other->type_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserActionNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserActionNtf_descriptor_;
  metadata.reflection = UserActionNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BufferData::kIdFieldNumber;
const int BufferData::kLayerFieldNumber;
const int BufferData::kTimeFieldNumber;
const int BufferData::kActiveFieldNumber;
const int BufferData::kFromnameFieldNumber;
const int BufferData::kFromidFieldNumber;
const int BufferData::kLevelFieldNumber;
#endif  // !_MSC_VER

BufferData::BufferData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BufferData)
}

void BufferData::InitAsDefaultInstance() {
}

BufferData::BufferData(const BufferData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BufferData)
}

void BufferData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  layer_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  active_ = true;
  fromname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fromid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BufferData::~BufferData() {
  // @@protoc_insertion_point(destructor:Cmd.BufferData)
  SharedDtor();
}

void BufferData::SharedDtor() {
  if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fromname_;
  }
  if (this != default_instance_) {
  }
}

void BufferData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BufferData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BufferData_descriptor_;
}

const BufferData& BufferData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BufferData* BufferData::default_instance_ = NULL;

BufferData* BufferData::New() const {
  return new BufferData;
}

void BufferData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BufferData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(id_, time_);
    ZR_(level_, fromid_);
    active_ = true;
    if (has_fromname()) {
      if (fromname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fromname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BufferData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BufferData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_active;
        break;
      }

      // optional bool active = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_fromname;
        break;
      }

      // optional string fromname = 5;
      case 5: {
        if (tag == 42) {
         parse_fromname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fromname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fromname().data(), this->fromname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fromname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_fromid;
        break;
      }

      // optional uint64 fromid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_fromid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BufferData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BufferData)
  return false;
#undef DO_
}

void BufferData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BufferData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 layer = 2 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional bool active = 4 [default = true];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->active(), output);
  }

  // optional string fromname = 5;
  if (has_fromname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fromname(), output);
  }

  // optional uint64 fromid = 6 [default = 0];
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fromid(), output);
  }

  // optional uint32 level = 7 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BufferData)
}

::google::protobuf::uint8* BufferData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BufferData)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 layer = 2 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional bool active = 4 [default = true];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->active(), target);
  }

  // optional string fromname = 5;
  if (has_fromname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fromname().data(), this->fromname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fromname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fromname(), target);
  }

  // optional uint64 fromid = 6 [default = 0];
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fromid(), target);
  }

  // optional uint32 level = 7 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BufferData)
  return target;
}

int BufferData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 layer = 2 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint64 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional bool active = 4 [default = true];
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional string fromname = 5;
    if (has_fromname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fromname());
    }

    // optional uint64 fromid = 6 [default = 0];
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromid());
    }

    // optional uint32 level = 7 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BufferData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BufferData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BufferData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BufferData::MergeFrom(const BufferData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_fromname()) {
      set_fromname(from.fromname());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BufferData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferData::CopyFrom(const BufferData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferData::IsInitialized() const {

  return true;
}

void BufferData::Swap(BufferData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(layer_, other->layer_);
    std::swap(time_, other->time_);
    std::swap(active_, other->active_);
    std::swap(fromname_, other->fromname_);
    std::swap(fromid_, other->fromid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BufferData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BufferData_descriptor_;
  metadata.reflection = BufferData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserBuffNineSyncCmd::kCmdFieldNumber;
const int UserBuffNineSyncCmd::kParamFieldNumber;
const int UserBuffNineSyncCmd::kGuidFieldNumber;
const int UserBuffNineSyncCmd::kUpdatesFieldNumber;
const int UserBuffNineSyncCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

UserBuffNineSyncCmd::UserBuffNineSyncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserBuffNineSyncCmd)
}

void UserBuffNineSyncCmd::InitAsDefaultInstance() {
}

UserBuffNineSyncCmd::UserBuffNineSyncCmd(const UserBuffNineSyncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserBuffNineSyncCmd)
}

void UserBuffNineSyncCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 6;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBuffNineSyncCmd::~UserBuffNineSyncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserBuffNineSyncCmd)
  SharedDtor();
}

void UserBuffNineSyncCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserBuffNineSyncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBuffNineSyncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBuffNineSyncCmd_descriptor_;
}

const UserBuffNineSyncCmd& UserBuffNineSyncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserBuffNineSyncCmd* UserBuffNineSyncCmd::default_instance_ = NULL;

UserBuffNineSyncCmd* UserBuffNineSyncCmd::New() const {
  return new UserBuffNineSyncCmd;
}

void UserBuffNineSyncCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 6;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserBuffNineSyncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserBuffNineSyncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.BufferData updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint32 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserBuffNineSyncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserBuffNineSyncCmd)
  return false;
#undef DO_
}

void UserBuffNineSyncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserBuffNineSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.BufferData updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint32 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserBuffNineSyncCmd)
}

::google::protobuf::uint8* UserBuffNineSyncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserBuffNineSyncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.BufferData updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint32 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserBuffNineSyncCmd)
  return target;
}

int UserBuffNineSyncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUFFERSYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  // repeated .Cmd.BufferData updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint32 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBuffNineSyncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserBuffNineSyncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserBuffNineSyncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserBuffNineSyncCmd::MergeFrom(const UserBuffNineSyncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserBuffNineSyncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBuffNineSyncCmd::CopyFrom(const UserBuffNineSyncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBuffNineSyncCmd::IsInitialized() const {

  return true;
}

void UserBuffNineSyncCmd::Swap(UserBuffNineSyncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserBuffNineSyncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBuffNineSyncCmd_descriptor_;
  metadata.reflection = UserBuffNineSyncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitPosUserCmd::kCmdFieldNumber;
const int ExitPosUserCmd::kParamFieldNumber;
const int ExitPosUserCmd::kPosFieldNumber;
const int ExitPosUserCmd::kExitidFieldNumber;
const int ExitPosUserCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

ExitPosUserCmd::ExitPosUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitPosUserCmd)
}

void ExitPosUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ExitPosUserCmd::ExitPosUserCmd(const ExitPosUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitPosUserCmd)
}

void ExitPosUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 7;
  pos_ = NULL;
  exitid_ = 0u;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitPosUserCmd::~ExitPosUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExitPosUserCmd)
  SharedDtor();
}

void ExitPosUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ExitPosUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitPosUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitPosUserCmd_descriptor_;
}

const ExitPosUserCmd& ExitPosUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ExitPosUserCmd* ExitPosUserCmd::default_instance_ = NULL;

ExitPosUserCmd* ExitPosUserCmd::New() const {
  return new ExitPosUserCmd;
}

void ExitPosUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitPosUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(exitid_, mapid_);
    cmd_ = 9;
    param_ = 7;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitPosUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitPosUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_exitid;
        break;
      }

      // optional uint32 exitid = 4;
      case 4: {
        if (tag == 32) {
         parse_exitid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exitid_)));
          set_has_exitid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5;
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitPosUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitPosUserCmd)
  return false;
#undef DO_
}

void ExitPosUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint32 exitid = 4;
  if (has_exitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exitid(), output);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitPosUserCmd)
}

::google::protobuf::uint8* ExitPosUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitPosUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint32 exitid = 4;
  if (has_exitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exitid(), target);
  }

  // optional uint32 mapid = 5;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitPosUserCmd)
  return target;
}

int ExitPosUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXIT_POS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 exitid = 4;
    if (has_exitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exitid());
    }

    // optional uint32 mapid = 5;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitPosUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitPosUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitPosUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitPosUserCmd::MergeFrom(const ExitPosUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_exitid()) {
      set_exitid(from.exitid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitPosUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitPosUserCmd::CopyFrom(const ExitPosUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitPosUserCmd::IsInitialized() const {

  return true;
}

void ExitPosUserCmd::Swap(ExitPosUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(exitid_, other->exitid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitPosUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitPosUserCmd_descriptor_;
  metadata.reflection = ExitPosUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Relive::kCmdFieldNumber;
const int Relive::kParamFieldNumber;
const int Relive::kTypeFieldNumber;
#endif  // !_MSC_VER

Relive::Relive()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Relive)
}

void Relive::InitAsDefaultInstance() {
}

Relive::Relive(const Relive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Relive)
}

void Relive::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 8;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relive::~Relive() {
  // @@protoc_insertion_point(destructor:Cmd.Relive)
  SharedDtor();
}

void Relive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relive_descriptor_;
}

const Relive& Relive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

Relive* Relive::default_instance_ = NULL;

Relive* Relive::New() const {
  return new Relive;
}

void Relive::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 8;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Relive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Relive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EReliveType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EReliveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Relive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Relive)
  return false;
#undef DO_
}

void Relive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Relive)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Relive)
}

::google::protobuf::uint8* Relive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Relive)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Relive)
  return target;
}

int Relive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_RELIVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EReliveType type = 3 [default = ERELIVETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Relive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Relive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Relive::MergeFrom(const Relive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Relive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relive::CopyFrom(const Relive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relive::IsInitialized() const {

  return true;
}

void Relive::Swap(Relive* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Relive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relive_descriptor_;
  metadata.reflection = Relive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VarUpdate::kCmdFieldNumber;
const int VarUpdate::kParamFieldNumber;
const int VarUpdate::kVarsFieldNumber;
#endif  // !_MSC_VER

VarUpdate::VarUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.VarUpdate)
}

void VarUpdate::InitAsDefaultInstance() {
}

VarUpdate::VarUpdate(const VarUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.VarUpdate)
}

void VarUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VarUpdate::~VarUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.VarUpdate)
  SharedDtor();
}

void VarUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VarUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VarUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VarUpdate_descriptor_;
}

const VarUpdate& VarUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

VarUpdate* VarUpdate::default_instance_ = NULL;

VarUpdate* VarUpdate::New() const {
  return new VarUpdate;
}

void VarUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 9;
  }
  vars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VarUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.VarUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        break;
      }

      // repeated .Cmd.Var vars = 3;
      case 3: {
        if (tag == 26) {
         parse_vars:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vars()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.VarUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.VarUpdate)
  return false;
#undef DO_
}

void VarUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.VarUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.Var vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.VarUpdate)
}

::google::protobuf::uint8* VarUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.VarUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.Var vars = 3;
  for (int i = 0; i < this->vars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.VarUpdate)
  return target;
}

int VarUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_VAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.Var vars = 3;
  total_size += 1 * this->vars_size();
  for (int i = 0; i < this->vars_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vars(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VarUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VarUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VarUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VarUpdate::MergeFrom(const VarUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  vars_.MergeFrom(from.vars_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VarUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VarUpdate::CopyFrom(const VarUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VarUpdate::IsInitialized() const {

  return true;
}

void VarUpdate::Swap(VarUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    vars_.Swap(&other->vars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VarUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VarUpdate_descriptor_;
  metadata.reflection = VarUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TalkInfo::kCmdFieldNumber;
const int TalkInfo::kParamFieldNumber;
const int TalkInfo::kGuidFieldNumber;
const int TalkInfo::kTalkidFieldNumber;
const int TalkInfo::kTalkmessageFieldNumber;
const int TalkInfo::kParamsFieldNumber;
#endif  // !_MSC_VER

TalkInfo::TalkInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TalkInfo)
}

void TalkInfo::InitAsDefaultInstance() {
}

TalkInfo::TalkInfo(const TalkInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TalkInfo)
}

void TalkInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 10;
  guid_ = GOOGLE_ULONGLONG(0);
  talkid_ = 0u;
  talkmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TalkInfo::~TalkInfo() {
  // @@protoc_insertion_point(destructor:Cmd.TalkInfo)
  SharedDtor();
}

void TalkInfo::SharedDtor() {
  if (talkmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete talkmessage_;
  }
  if (this != default_instance_) {
  }
}

void TalkInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TalkInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TalkInfo_descriptor_;
}

const TalkInfo& TalkInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TalkInfo* TalkInfo::default_instance_ = NULL;

TalkInfo* TalkInfo::New() const {
  return new TalkInfo;
}

void TalkInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 10;
    guid_ = GOOGLE_ULONGLONG(0);
    talkid_ = 0u;
    if (has_talkmessage()) {
      if (talkmessage_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        talkmessage_->clear();
      }
    }
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TalkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TalkInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_talkid;
        break;
      }

      // optional uint32 talkid = 4;
      case 4: {
        if (tag == 32) {
         parse_talkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkid_)));
          set_has_talkid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_talkmessage;
        break;
      }

      // optional string talkmessage = 5;
      case 5: {
        if (tag == 42) {
         parse_talkmessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_talkmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->talkmessage().data(), this->talkmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "talkmessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        break;
      }

      // repeated .Cmd.MsgParam params = 6;
      case 6: {
        if (tag == 50) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TalkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TalkInfo)
  return false;
#undef DO_
}

void TalkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TalkInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // optional uint32 talkid = 4;
  if (has_talkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->talkid(), output);
  }

  // optional string talkmessage = 5;
  if (has_talkmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmessage().data(), this->talkmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->talkmessage(), output);
  }

  // repeated .Cmd.MsgParam params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TalkInfo)
}

::google::protobuf::uint8* TalkInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TalkInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // optional uint32 talkid = 4;
  if (has_talkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->talkid(), target);
  }

  // optional string talkmessage = 5;
  if (has_talkmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->talkmessage().data(), this->talkmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "talkmessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->talkmessage(), target);
  }

  // repeated .Cmd.MsgParam params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TalkInfo)
  return target;
}

int TalkInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TALKINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint32 talkid = 4;
    if (has_talkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkid());
    }

    // optional string talkmessage = 5;
    if (has_talkmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->talkmessage());
    }

  }
  // repeated .Cmd.MsgParam params = 6;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TalkInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TalkInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TalkInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TalkInfo::MergeFrom(const TalkInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_talkid()) {
      set_talkid(from.talkid());
    }
    if (from.has_talkmessage()) {
      set_talkmessage(from.talkmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TalkInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TalkInfo::CopyFrom(const TalkInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TalkInfo::IsInitialized() const {

  return true;
}

void TalkInfo::Swap(TalkInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(talkid_, other->talkid_);
    std::swap(talkmessage_, other->talkmessage_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TalkInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TalkInfo_descriptor_;
  metadata.reflection = TalkInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTime::kCmdFieldNumber;
const int ServerTime::kParamFieldNumber;
const int ServerTime::kTimeFieldNumber;
#endif  // !_MSC_VER

ServerTime::ServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerTime)
}

void ServerTime::InitAsDefaultInstance() {
}

ServerTime::ServerTime(const ServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerTime)
}

void ServerTime::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 11;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTime::~ServerTime() {
  // @@protoc_insertion_point(destructor:Cmd.ServerTime)
  SharedDtor();
}

void ServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTime_descriptor_;
}

const ServerTime& ServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ServerTime* ServerTime::default_instance_ = NULL;

ServerTime* ServerTime::New() const {
  return new ServerTime;
}

void ServerTime::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 11;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerTime)
  return false;
#undef DO_
}

void ServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerTime)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerTime)
}

::google::protobuf::uint8* ServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerTime)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerTime)
  return target;
}

int ServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVERTIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTime::MergeFrom(const ServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTime::CopyFrom(const ServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTime::IsInitialized() const {

  return true;
}

void ServerTime::Swap(ServerTime* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTime_descriptor_;
  metadata.reflection = ServerTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EffectUserCmd::kCmdFieldNumber;
const int EffectUserCmd::kParamFieldNumber;
const int EffectUserCmd::kEffecttypeFieldNumber;
const int EffectUserCmd::kCharidFieldNumber;
const int EffectUserCmd::kEffectposFieldNumber;
const int EffectUserCmd::kPosFieldNumber;
const int EffectUserCmd::kEffectFieldNumber;
const int EffectUserCmd::kMsecFieldNumber;
const int EffectUserCmd::kTimesFieldNumber;
const int EffectUserCmd::kIndexFieldNumber;
const int EffectUserCmd::kOptFieldNumber;
const int EffectUserCmd::kPosbindFieldNumber;
const int EffectUserCmd::kEpbindFieldNumber;
const int EffectUserCmd::kDelayFieldNumber;
const int EffectUserCmd::kIdFieldNumber;
const int EffectUserCmd::kDirFieldNumber;
const int EffectUserCmd::kSkillidFieldNumber;
#endif  // !_MSC_VER

EffectUserCmd::EffectUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EffectUserCmd)
}

void EffectUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

EffectUserCmd::EffectUserCmd(const EffectUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EffectUserCmd)
}

void EffectUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 14;
  effecttype_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  effectpos_ = 0u;
  pos_ = NULL;
  effect_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msec_ = 0u;
  times_ = 1u;
  index_ = 1u;
  opt_ = 1;
  posbind_ = false;
  epbind_ = false;
  delay_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  dir_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EffectUserCmd::~EffectUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EffectUserCmd)
  SharedDtor();
}

void EffectUserCmd::SharedDtor() {
  if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete effect_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void EffectUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EffectUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EffectUserCmd_descriptor_;
}

const EffectUserCmd& EffectUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

EffectUserCmd* EffectUserCmd::default_instance_ = NULL;

EffectUserCmd* EffectUserCmd::New() const {
  return new EffectUserCmd;
}

void EffectUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EffectUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    cmd_ = 9;
    param_ = 14;
    effecttype_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    effectpos_ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    if (has_effect()) {
      if (effect_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        effect_->clear();
      }
    }
    msec_ = 0u;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(posbind_, dir_);
    times_ = 1u;
    index_ = 1u;
    opt_ = 1;
  }
  skillid_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EffectUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EffectUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_effecttype;
        break;
      }

      // optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
      case 3: {
        if (tag == 24) {
         parse_effecttype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEffectType_IsValid(value)) {
            set_effecttype(static_cast< ::Cmd::EEffectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_effectpos;
        break;
      }

      // optional uint32 effectpos = 5;
      case 5: {
        if (tag == 40) {
         parse_effectpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectpos_)));
          set_has_effectpos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 6;
      case 6: {
        if (tag == 50) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_effect;
        break;
      }

      // optional string effect = 7;
      case 7: {
        if (tag == 58) {
         parse_effect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_effect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->effect().data(), this->effect().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "effect");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_msec;
        break;
      }

      // optional uint32 msec = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_)));
          set_has_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_times;
        break;
      }

      // optional uint32 times = 9 [default = 1];
      case 9: {
        if (tag == 72) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_index;
        break;
      }

      // optional uint32 index = 10 [default = 1];
      case 10: {
        if (tag == 80) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_opt;
        break;
      }

      // optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
      case 11: {
        if (tag == 88) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEffectOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::EEffectOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(11, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_posbind;
        break;
      }

      // optional bool posbind = 12 [default = false];
      case 12: {
        if (tag == 96) {
         parse_posbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &posbind_)));
          set_has_posbind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_epbind;
        break;
      }

      // optional bool epbind = 13 [default = false];
      case 13: {
        if (tag == 104) {
         parse_epbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &epbind_)));
          set_has_epbind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_id;
        break;
      }

      // optional uint64 id = 15 [default = 0];
      case 15: {
        if (tag == 120) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 16;
      case 16: {
        if (tag == 128) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_skillid;
        break;
      }

      // optional uint32 skillid = 17 [default = 0];
      case 17: {
        if (tag == 136) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EffectUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EffectUserCmd)
  return false;
#undef DO_
}

void EffectUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EffectUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
  if (has_effecttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->effecttype(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 effectpos = 5;
  if (has_effectpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->effectpos(), output);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pos(), output);
  }

  // optional string effect = 7;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effect");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->effect(), output);
  }

  // optional uint32 msec = 8 [default = 0];
  if (has_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->msec(), output);
  }

  // optional uint32 times = 9 [default = 1];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->times(), output);
  }

  // optional uint32 index = 10 [default = 1];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->index(), output);
  }

  // optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->opt(), output);
  }

  // optional bool posbind = 12 [default = false];
  if (has_posbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->posbind(), output);
  }

  // optional bool epbind = 13 [default = false];
  if (has_epbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->epbind(), output);
  }

  // optional uint32 delay = 14 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->delay(), output);
  }

  // optional uint64 id = 15 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->id(), output);
  }

  // optional uint32 dir = 16;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->dir(), output);
  }

  // optional uint32 skillid = 17 [default = 0];
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EffectUserCmd)
}

::google::protobuf::uint8* EffectUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EffectUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
  if (has_effecttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->effecttype(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 effectpos = 5;
  if (has_effectpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->effectpos(), target);
  }

  // optional .Cmd.ScenePos pos = 6;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pos(), target);
  }

  // optional string effect = 7;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->effect().data(), this->effect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "effect");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->effect(), target);
  }

  // optional uint32 msec = 8 [default = 0];
  if (has_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->msec(), target);
  }

  // optional uint32 times = 9 [default = 1];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->times(), target);
  }

  // optional uint32 index = 10 [default = 1];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->index(), target);
  }

  // optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      11, this->opt(), target);
  }

  // optional bool posbind = 12 [default = false];
  if (has_posbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->posbind(), target);
  }

  // optional bool epbind = 13 [default = false];
  if (has_epbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->epbind(), target);
  }

  // optional uint32 delay = 14 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->delay(), target);
  }

  // optional uint64 id = 15 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->id(), target);
  }

  // optional uint32 dir = 16;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->dir(), target);
  }

  // optional uint32 skillid = 17 [default = 0];
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EffectUserCmd)
  return target;
}

int EffectUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EEffectType effecttype = 3 [default = EEFFECTTYPE_NORMAL];
    if (has_effecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->effecttype());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 effectpos = 5;
    if (has_effectpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectpos());
    }

    // optional .Cmd.ScenePos pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional string effect = 7;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->effect());
    }

    // optional uint32 msec = 8 [default = 0];
    if (has_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 times = 9 [default = 1];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 index = 10 [default = 1];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional .Cmd.EEffectOpt opt = 11 [default = EEFFECTOPT_PLAY];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional bool posbind = 12 [default = false];
    if (has_posbind()) {
      total_size += 1 + 1;
    }

    // optional bool epbind = 13 [default = false];
    if (has_epbind()) {
      total_size += 1 + 1;
    }

    // optional uint32 delay = 14 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint64 id = 15 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 dir = 16;
    if (has_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 skillid = 17 [default = 0];
    if (has_skillid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EffectUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EffectUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EffectUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EffectUserCmd::MergeFrom(const EffectUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_effecttype()) {
      set_effecttype(from.effecttype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_effectpos()) {
      set_effectpos(from.effectpos());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_msec()) {
      set_msec(from.msec());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_posbind()) {
      set_posbind(from.posbind());
    }
    if (from.has_epbind()) {
      set_epbind(from.epbind());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EffectUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EffectUserCmd::CopyFrom(const EffectUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EffectUserCmd::IsInitialized() const {

  return true;
}

void EffectUserCmd::Swap(EffectUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(effecttype_, other->effecttype_);
    std::swap(charid_, other->charid_);
    std::swap(effectpos_, other->effectpos_);
    std::swap(pos_, other->pos_);
    std::swap(effect_, other->effect_);
    std::swap(msec_, other->msec_);
    std::swap(times_, other->times_);
    std::swap(index_, other->index_);
    std::swap(opt_, other->opt_);
    std::swap(posbind_, other->posbind_);
    std::swap(epbind_, other->epbind_);
    std::swap(delay_, other->delay_);
    std::swap(id_, other->id_);
    std::swap(dir_, other->dir_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EffectUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EffectUserCmd_descriptor_;
  metadata.reflection = EffectUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MenuList::kCmdFieldNumber;
const int MenuList::kParamFieldNumber;
const int MenuList::kListFieldNumber;
const int MenuList::kDellistFieldNumber;
#endif  // !_MSC_VER

MenuList::MenuList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MenuList)
}

void MenuList::InitAsDefaultInstance() {
}

MenuList::MenuList(const MenuList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MenuList)
}

void MenuList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 15;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MenuList::~MenuList() {
  // @@protoc_insertion_point(destructor:Cmd.MenuList)
  SharedDtor();
}

void MenuList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MenuList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MenuList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MenuList_descriptor_;
}

const MenuList& MenuList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MenuList* MenuList::default_instance_ = NULL;

MenuList* MenuList::New() const {
  return new MenuList;
}

void MenuList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 15;
  }
  list_.Clear();
  dellist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MenuList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MenuList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list;
        break;
      }

      // repeated uint32 list = 3;
      case 3: {
        if (tag == 24) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_list())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_list;
        if (input->ExpectTag(32)) goto parse_dellist;
        break;
      }

      // repeated uint32 dellist = 4;
      case 4: {
        if (tag == 32) {
         parse_dellist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dellist())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dellist())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dellist;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MenuList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MenuList)
  return false;
#undef DO_
}

void MenuList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MenuList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->list(i), output);
  }

  // repeated uint32 dellist = 4;
  for (int i = 0; i < this->dellist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dellist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MenuList)
}

::google::protobuf::uint8* MenuList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MenuList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->list(i), target);
  }

  // repeated uint32 dellist = 4;
  for (int i = 0; i < this->dellist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dellist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MenuList)
  return target;
}

int MenuList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MENU];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  // repeated uint32 dellist = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dellist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dellist(i));
    }
    total_size += 1 * this->dellist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MenuList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MenuList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MenuList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MenuList::MergeFrom(const MenuList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  dellist_.MergeFrom(from.dellist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MenuList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MenuList::CopyFrom(const MenuList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MenuList::IsInitialized() const {

  return true;
}

void MenuList::Swap(MenuList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    dellist_.Swap(&other->dellist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MenuList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MenuList_descriptor_;
  metadata.reflection = MenuList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewMenu::kCmdFieldNumber;
const int NewMenu::kParamFieldNumber;
const int NewMenu::kAnimplayFieldNumber;
const int NewMenu::kListFieldNumber;
#endif  // !_MSC_VER

NewMenu::NewMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewMenu)
}

void NewMenu::InitAsDefaultInstance() {
}

NewMenu::NewMenu(const NewMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewMenu)
}

void NewMenu::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 16;
  animplay_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMenu::~NewMenu() {
  // @@protoc_insertion_point(destructor:Cmd.NewMenu)
  SharedDtor();
}

void NewMenu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMenu_descriptor_;
}

const NewMenu& NewMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewMenu* NewMenu::default_instance_ = NULL;

NewMenu* NewMenu::New() const {
  return new NewMenu;
}

void NewMenu::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 16;
    animplay_ = true;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewMenu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_animplay;
        break;
      }

      // optional bool animplay = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_animplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &animplay_)));
          set_has_animplay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_list;
        break;
      }

      // repeated uint32 list = 4;
      case 4: {
        if (tag == 32) {
         parse_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_list())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_list())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewMenu)
  return false;
#undef DO_
}

void NewMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewMenu)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool animplay = 3 [default = true];
  if (has_animplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->animplay(), output);
  }

  // repeated uint32 list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewMenu)
}

::google::protobuf::uint8* NewMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewMenu)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool animplay = 3 [default = true];
  if (has_animplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->animplay(), target);
  }

  // repeated uint32 list = 4;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewMenu)
  return target;
}

int NewMenu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWMENU];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool animplay = 3 [default = true];
    if (has_animplay()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 list = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->list(i));
    }
    total_size += 1 * this->list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewMenu::MergeFrom(const NewMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_animplay()) {
      set_animplay(from.animplay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMenu::CopyFrom(const NewMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMenu::IsInitialized() const {

  return true;
}

void NewMenu::Swap(NewMenu* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(animplay_, other->animplay_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMenu_descriptor_;
  metadata.reflection = NewMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfoNine::kCmdFieldNumber;
const int TeamInfoNine::kParamFieldNumber;
const int TeamInfoNine::kUseridFieldNumber;
const int TeamInfoNine::kIdFieldNumber;
const int TeamInfoNine::kNameFieldNumber;
#endif  // !_MSC_VER

TeamInfoNine::TeamInfoNine()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamInfoNine)
}

void TeamInfoNine::InitAsDefaultInstance() {
}

TeamInfoNine::TeamInfoNine(const TeamInfoNine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamInfoNine)
}

void TeamInfoNine::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 17;
  userid_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfoNine::~TeamInfoNine() {
  // @@protoc_insertion_point(destructor:Cmd.TeamInfoNine)
  SharedDtor();
}

void TeamInfoNine::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfoNine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfoNine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfoNine_descriptor_;
}

const TeamInfoNine& TeamInfoNine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TeamInfoNine* TeamInfoNine::default_instance_ = NULL;

TeamInfoNine* TeamInfoNine::New() const {
  return new TeamInfoNine;
}

void TeamInfoNine::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 17;
    userid_ = GOOGLE_ULONGLONG(0);
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfoNine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamInfoNine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamInfoNine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamInfoNine)
  return false;
#undef DO_
}

void TeamInfoNine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamInfoNine)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamInfoNine)
}

::google::protobuf::uint8* TeamInfoNine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamInfoNine)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamInfoNine)
  return target;
}

int TeamInfoNine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TEAMINFONINE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfoNine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfoNine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfoNine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfoNine::MergeFrom(const TeamInfoNine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfoNine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfoNine::CopyFrom(const TeamInfoNine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfoNine::IsInitialized() const {

  return true;
}

void TeamInfoNine::Swap(TeamInfoNine* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfoNine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfoNine_descriptor_;
  metadata.reflection = TeamInfoNine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UsePortrait::kCmdFieldNumber;
const int UsePortrait::kParamFieldNumber;
const int UsePortrait::kIdFieldNumber;
#endif  // !_MSC_VER

UsePortrait::UsePortrait()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UsePortrait)
}

void UsePortrait::InitAsDefaultInstance() {
}

UsePortrait::UsePortrait(const UsePortrait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UsePortrait)
}

void UsePortrait::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 18;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UsePortrait::~UsePortrait() {
  // @@protoc_insertion_point(destructor:Cmd.UsePortrait)
  SharedDtor();
}

void UsePortrait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UsePortrait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UsePortrait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UsePortrait_descriptor_;
}

const UsePortrait& UsePortrait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UsePortrait* UsePortrait::default_instance_ = NULL;

UsePortrait* UsePortrait::New() const {
  return new UsePortrait;
}

void UsePortrait::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 18;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UsePortrait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UsePortrait)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UsePortrait)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UsePortrait)
  return false;
#undef DO_
}

void UsePortrait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UsePortrait)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UsePortrait)
}

::google::protobuf::uint8* UsePortrait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UsePortrait)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UsePortrait)
  return target;
}

int UsePortrait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEPORTRAIT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UsePortrait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UsePortrait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UsePortrait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UsePortrait::MergeFrom(const UsePortrait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UsePortrait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UsePortrait::CopyFrom(const UsePortrait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsePortrait::IsInitialized() const {

  return true;
}

void UsePortrait::Swap(UsePortrait* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UsePortrait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UsePortrait_descriptor_;
  metadata.reflection = UsePortrait_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseFrame::kCmdFieldNumber;
const int UseFrame::kParamFieldNumber;
const int UseFrame::kIdFieldNumber;
#endif  // !_MSC_VER

UseFrame::UseFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseFrame)
}

void UseFrame::InitAsDefaultInstance() {
}

UseFrame::UseFrame(const UseFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseFrame)
}

void UseFrame::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 19;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseFrame::~UseFrame() {
  // @@protoc_insertion_point(destructor:Cmd.UseFrame)
  SharedDtor();
}

void UseFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseFrame_descriptor_;
}

const UseFrame& UseFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UseFrame* UseFrame::default_instance_ = NULL;

UseFrame* UseFrame::New() const {
  return new UseFrame;
}

void UseFrame::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 19;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseFrame)
  return false;
#undef DO_
}

void UseFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseFrame)
}

::google::protobuf::uint8* UseFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseFrame)
  return target;
}

int UseFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEFRAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseFrame::MergeFrom(const UseFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseFrame::CopyFrom(const UseFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseFrame::IsInitialized() const {

  return true;
}

void UseFrame::Swap(UseFrame* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseFrame_descriptor_;
  metadata.reflection = UseFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPortraitFrame::kCmdFieldNumber;
const int NewPortraitFrame::kParamFieldNumber;
const int NewPortraitFrame::kPortraitFieldNumber;
const int NewPortraitFrame::kFrameFieldNumber;
#endif  // !_MSC_VER

NewPortraitFrame::NewPortraitFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewPortraitFrame)
}

void NewPortraitFrame::InitAsDefaultInstance() {
}

NewPortraitFrame::NewPortraitFrame(const NewPortraitFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewPortraitFrame)
}

void NewPortraitFrame::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 20;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPortraitFrame::~NewPortraitFrame() {
  // @@protoc_insertion_point(destructor:Cmd.NewPortraitFrame)
  SharedDtor();
}

void NewPortraitFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewPortraitFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPortraitFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPortraitFrame_descriptor_;
}

const NewPortraitFrame& NewPortraitFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewPortraitFrame* NewPortraitFrame::default_instance_ = NULL;

NewPortraitFrame* NewPortraitFrame::New() const {
  return new NewPortraitFrame;
}

void NewPortraitFrame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 20;
  }
  portrait_.Clear();
  frame_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPortraitFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewPortraitFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        break;
      }

      // repeated uint32 portrait = 3;
      case 3: {
        if (tag == 24) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_portrait())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_portrait())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // repeated uint32 frame = 4;
      case 4: {
        if (tag == 32) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_frame())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_frame())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewPortraitFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewPortraitFrame)
  return false;
#undef DO_
}

void NewPortraitFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewPortraitFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 portrait = 3;
  for (int i = 0; i < this->portrait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->portrait(i), output);
  }

  // repeated uint32 frame = 4;
  for (int i = 0; i < this->frame_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->frame(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewPortraitFrame)
}

::google::protobuf::uint8* NewPortraitFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewPortraitFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 portrait = 3;
  for (int i = 0; i < this->portrait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->portrait(i), target);
  }

  // repeated uint32 frame = 4;
  for (int i = 0; i < this->frame_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->frame(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewPortraitFrame)
  return target;
}

int NewPortraitFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWPORTRAITFRAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 portrait = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->portrait_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->portrait(i));
    }
    total_size += 1 * this->portrait_size() + data_size;
  }

  // repeated uint32 frame = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->frame_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->frame(i));
    }
    total_size += 1 * this->frame_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPortraitFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPortraitFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPortraitFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPortraitFrame::MergeFrom(const NewPortraitFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  portrait_.MergeFrom(from.portrait_);
  frame_.MergeFrom(from.frame_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPortraitFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPortraitFrame::CopyFrom(const NewPortraitFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPortraitFrame::IsInitialized() const {

  return true;
}

void NewPortraitFrame::Swap(NewPortraitFrame* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    portrait_.Swap(&other->portrait_);
    frame_.Swap(&other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewPortraitFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPortraitFrame_descriptor_;
  metadata.reflection = NewPortraitFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPortraitListUserCmd::kCmdFieldNumber;
const int QueryPortraitListUserCmd::kParamFieldNumber;
const int QueryPortraitListUserCmd::kPortraitFieldNumber;
#endif  // !_MSC_VER

QueryPortraitListUserCmd::QueryPortraitListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPortraitListUserCmd)
}

void QueryPortraitListUserCmd::InitAsDefaultInstance() {
}

QueryPortraitListUserCmd::QueryPortraitListUserCmd(const QueryPortraitListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPortraitListUserCmd)
}

void QueryPortraitListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 24;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPortraitListUserCmd::~QueryPortraitListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPortraitListUserCmd)
  SharedDtor();
}

void QueryPortraitListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPortraitListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPortraitListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPortraitListUserCmd_descriptor_;
}

const QueryPortraitListUserCmd& QueryPortraitListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryPortraitListUserCmd* QueryPortraitListUserCmd::default_instance_ = NULL;

QueryPortraitListUserCmd* QueryPortraitListUserCmd::New() const {
  return new QueryPortraitListUserCmd;
}

void QueryPortraitListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 24;
  }
  portrait_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPortraitListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPortraitListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        break;
      }

      // repeated uint32 portrait = 3;
      case 3: {
        if (tag == 24) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_portrait())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_portrait())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_portrait;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPortraitListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPortraitListUserCmd)
  return false;
#undef DO_
}

void QueryPortraitListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPortraitListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 portrait = 3;
  for (int i = 0; i < this->portrait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->portrait(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPortraitListUserCmd)
}

::google::protobuf::uint8* QueryPortraitListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPortraitListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 portrait = 3;
  for (int i = 0; i < this->portrait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->portrait(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPortraitListUserCmd)
  return target;
}

int QueryPortraitListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYPORTRAITLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 portrait = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->portrait_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->portrait(i));
    }
    total_size += 1 * this->portrait_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPortraitListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPortraitListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPortraitListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPortraitListUserCmd::MergeFrom(const QueryPortraitListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  portrait_.MergeFrom(from.portrait_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPortraitListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPortraitListUserCmd::CopyFrom(const QueryPortraitListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPortraitListUserCmd::IsInitialized() const {

  return true;
}

void QueryPortraitListUserCmd::Swap(QueryPortraitListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    portrait_.Swap(&other->portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPortraitListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPortraitListUserCmd_descriptor_;
  metadata.reflection = QueryPortraitListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseDressing::kCmdFieldNumber;
const int UseDressing::kParamFieldNumber;
const int UseDressing::kIdFieldNumber;
const int UseDressing::kCharidFieldNumber;
const int UseDressing::kTypeFieldNumber;
#endif  // !_MSC_VER

UseDressing::UseDressing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseDressing)
}

void UseDressing::InitAsDefaultInstance() {
}

UseDressing::UseDressing(const UseDressing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseDressing)
}

void UseDressing::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 25;
  id_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseDressing::~UseDressing() {
  // @@protoc_insertion_point(destructor:Cmd.UseDressing)
  SharedDtor();
}

void UseDressing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseDressing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseDressing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseDressing_descriptor_;
}

const UseDressing& UseDressing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UseDressing* UseDressing::default_instance_ = NULL;

UseDressing* UseDressing::New() const {
  return new UseDressing;
}

void UseDressing::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseDressing*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, type_);
    cmd_ = 9;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseDressing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseDressing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDressType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseDressing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseDressing)
  return false;
#undef DO_
}

void UseDressing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseDressing)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseDressing)
}

::google::protobuf::uint8* UseDressing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseDressing)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseDressing)
  return target;
}

int UseDressing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USEDRESSING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EDressType type = 5 [default = EDRESSTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseDressing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseDressing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseDressing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseDressing::MergeFrom(const UseDressing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseDressing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseDressing::CopyFrom(const UseDressing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseDressing::IsInitialized() const {

  return true;
}

void UseDressing::Swap(UseDressing* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseDressing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseDressing_descriptor_;
  metadata.reflection = UseDressing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewDressing::kCmdFieldNumber;
const int NewDressing::kParamFieldNumber;
const int NewDressing::kTypeFieldNumber;
const int NewDressing::kDressidsFieldNumber;
#endif  // !_MSC_VER

NewDressing::NewDressing()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewDressing)
}

void NewDressing::InitAsDefaultInstance() {
}

NewDressing::NewDressing(const NewDressing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewDressing)
}

void NewDressing::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 26;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDressing::~NewDressing() {
  // @@protoc_insertion_point(destructor:Cmd.NewDressing)
  SharedDtor();
}

void NewDressing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDressing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDressing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDressing_descriptor_;
}

const NewDressing& NewDressing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewDressing* NewDressing::default_instance_ = NULL;

NewDressing* NewDressing::New() const {
  return new NewDressing;
}

void NewDressing::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 26;
    type_ = 0;
  }
  dressids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDressing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewDressing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDressType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dressids;
        break;
      }

      // repeated uint32 dressids = 4;
      case 4: {
        if (tag == 32) {
         parse_dressids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dressids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dressids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dressids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewDressing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewDressing)
  return false;
#undef DO_
}

void NewDressing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewDressing)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 dressids = 4;
  for (int i = 0; i < this->dressids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dressids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewDressing)
}

::google::protobuf::uint8* NewDressing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewDressing)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint32 dressids = 4;
  for (int i = 0; i < this->dressids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dressids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewDressing)
  return target;
}

int NewDressing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWDRESSING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 dressids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dressids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dressids(i));
    }
    total_size += 1 * this->dressids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDressing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDressing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDressing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDressing::MergeFrom(const NewDressing& from) {
  GOOGLE_CHECK_NE(&from, this);
  dressids_.MergeFrom(from.dressids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDressing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDressing::CopyFrom(const NewDressing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDressing::IsInitialized() const {

  return true;
}

void NewDressing::Swap(NewDressing* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    dressids_.Swap(&other->dressids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDressing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDressing_descriptor_;
  metadata.reflection = NewDressing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DressingListUserCmd::kCmdFieldNumber;
const int DressingListUserCmd::kParamFieldNumber;
const int DressingListUserCmd::kTypeFieldNumber;
const int DressingListUserCmd::kDressidsFieldNumber;
#endif  // !_MSC_VER

DressingListUserCmd::DressingListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DressingListUserCmd)
}

void DressingListUserCmd::InitAsDefaultInstance() {
}

DressingListUserCmd::DressingListUserCmd(const DressingListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DressingListUserCmd)
}

void DressingListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 27;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressingListUserCmd::~DressingListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DressingListUserCmd)
  SharedDtor();
}

void DressingListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressingListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressingListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressingListUserCmd_descriptor_;
}

const DressingListUserCmd& DressingListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DressingListUserCmd* DressingListUserCmd::default_instance_ = NULL;

DressingListUserCmd* DressingListUserCmd::New() const {
  return new DressingListUserCmd;
}

void DressingListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 27;
    type_ = 0;
  }
  dressids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressingListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DressingListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDressType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDressType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dressids;
        break;
      }

      // repeated uint32 dressids = 4;
      case 4: {
        if (tag == 32) {
         parse_dressids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dressids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dressids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dressids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DressingListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DressingListUserCmd)
  return false;
#undef DO_
}

void DressingListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DressingListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // repeated uint32 dressids = 4;
  for (int i = 0; i < this->dressids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dressids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DressingListUserCmd)
}

::google::protobuf::uint8* DressingListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DressingListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // repeated uint32 dressids = 4;
  for (int i = 0; i < this->dressids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dressids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DressingListUserCmd)
  return target;
}

int DressingListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSINGLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EDressType type = 3 [default = EDRESSTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 dressids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dressids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dressids(i));
    }
    total_size += 1 * this->dressids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressingListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressingListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressingListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressingListUserCmd::MergeFrom(const DressingListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  dressids_.MergeFrom(from.dressids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressingListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressingListUserCmd::CopyFrom(const DressingListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressingListUserCmd::IsInitialized() const {

  return true;
}

void DressingListUserCmd::Swap(DressingListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    dressids_.Swap(&other->dressids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressingListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressingListUserCmd_descriptor_;
  metadata.reflection = DressingListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddAttrPoint::kCmdFieldNumber;
const int AddAttrPoint::kParamFieldNumber;
const int AddAttrPoint::kTypeFieldNumber;
const int AddAttrPoint::kStrpointFieldNumber;
const int AddAttrPoint::kIntpointFieldNumber;
const int AddAttrPoint::kAgipointFieldNumber;
const int AddAttrPoint::kDexpointFieldNumber;
const int AddAttrPoint::kVitpointFieldNumber;
const int AddAttrPoint::kLukpointFieldNumber;
#endif  // !_MSC_VER

AddAttrPoint::AddAttrPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddAttrPoint)
}

void AddAttrPoint::InitAsDefaultInstance() {
}

AddAttrPoint::AddAttrPoint(const AddAttrPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddAttrPoint)
}

void AddAttrPoint::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 21;
  type_ = 1;
  strpoint_ = 0u;
  intpoint_ = 0u;
  agipoint_ = 0u;
  dexpoint_ = 0u;
  vitpoint_ = 0u;
  lukpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddAttrPoint::~AddAttrPoint() {
  // @@protoc_insertion_point(destructor:Cmd.AddAttrPoint)
  SharedDtor();
}

void AddAttrPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddAttrPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddAttrPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddAttrPoint_descriptor_;
}

const AddAttrPoint& AddAttrPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

AddAttrPoint* AddAttrPoint::default_instance_ = NULL;

AddAttrPoint* AddAttrPoint::New() const {
  return new AddAttrPoint;
}

void AddAttrPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddAttrPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(strpoint_, vitpoint_);
    cmd_ = 9;
    param_ = 21;
    type_ = 1;
  }
  lukpoint_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddAttrPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddAttrPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::PointType_IsValid(value)) {
            set_type(static_cast< ::Cmd::PointType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_strpoint;
        break;
      }

      // optional uint32 strpoint = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_strpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &strpoint_)));
          set_has_strpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_intpoint;
        break;
      }

      // optional uint32 intpoint = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_intpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intpoint_)));
          set_has_intpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_agipoint;
        break;
      }

      // optional uint32 agipoint = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_agipoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &agipoint_)));
          set_has_agipoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_dexpoint;
        break;
      }

      // optional uint32 dexpoint = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_dexpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dexpoint_)));
          set_has_dexpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_vitpoint;
        break;
      }

      // optional uint32 vitpoint = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_vitpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vitpoint_)));
          set_has_vitpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lukpoint;
        break;
      }

      // optional uint32 lukpoint = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_lukpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lukpoint_)));
          set_has_lukpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddAttrPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddAttrPoint)
  return false;
#undef DO_
}

void AddAttrPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddAttrPoint)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 strpoint = 4 [default = 0];
  if (has_strpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->strpoint(), output);
  }

  // optional uint32 intpoint = 5 [default = 0];
  if (has_intpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->intpoint(), output);
  }

  // optional uint32 agipoint = 6 [default = 0];
  if (has_agipoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->agipoint(), output);
  }

  // optional uint32 dexpoint = 7 [default = 0];
  if (has_dexpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dexpoint(), output);
  }

  // optional uint32 vitpoint = 8 [default = 0];
  if (has_vitpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->vitpoint(), output);
  }

  // optional uint32 lukpoint = 9 [default = 0];
  if (has_lukpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lukpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddAttrPoint)
}

::google::protobuf::uint8* AddAttrPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddAttrPoint)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 strpoint = 4 [default = 0];
  if (has_strpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->strpoint(), target);
  }

  // optional uint32 intpoint = 5 [default = 0];
  if (has_intpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->intpoint(), target);
  }

  // optional uint32 agipoint = 6 [default = 0];
  if (has_agipoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->agipoint(), target);
  }

  // optional uint32 dexpoint = 7 [default = 0];
  if (has_dexpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dexpoint(), target);
  }

  // optional uint32 vitpoint = 8 [default = 0];
  if (has_vitpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->vitpoint(), target);
  }

  // optional uint32 lukpoint = 9 [default = 0];
  if (has_lukpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lukpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddAttrPoint)
  return target;
}

int AddAttrPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ADDATTRPOINT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PointType type = 3 [default = POINTTYPE_ADD];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 strpoint = 4 [default = 0];
    if (has_strpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->strpoint());
    }

    // optional uint32 intpoint = 5 [default = 0];
    if (has_intpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intpoint());
    }

    // optional uint32 agipoint = 6 [default = 0];
    if (has_agipoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->agipoint());
    }

    // optional uint32 dexpoint = 7 [default = 0];
    if (has_dexpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dexpoint());
    }

    // optional uint32 vitpoint = 8 [default = 0];
    if (has_vitpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vitpoint());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 lukpoint = 9 [default = 0];
    if (has_lukpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lukpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddAttrPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddAttrPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddAttrPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddAttrPoint::MergeFrom(const AddAttrPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_strpoint()) {
      set_strpoint(from.strpoint());
    }
    if (from.has_intpoint()) {
      set_intpoint(from.intpoint());
    }
    if (from.has_agipoint()) {
      set_agipoint(from.agipoint());
    }
    if (from.has_dexpoint()) {
      set_dexpoint(from.dexpoint());
    }
    if (from.has_vitpoint()) {
      set_vitpoint(from.vitpoint());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lukpoint()) {
      set_lukpoint(from.lukpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddAttrPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddAttrPoint::CopyFrom(const AddAttrPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddAttrPoint::IsInitialized() const {

  return true;
}

void AddAttrPoint::Swap(AddAttrPoint* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(strpoint_, other->strpoint_);
    std::swap(intpoint_, other->intpoint_);
    std::swap(agipoint_, other->agipoint_);
    std::swap(dexpoint_, other->dexpoint_);
    std::swap(vitpoint_, other->vitpoint_);
    std::swap(lukpoint_, other->lukpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddAttrPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddAttrPoint_descriptor_;
  metadata.reflection = AddAttrPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopGotItem::kIdFieldNumber;
const int ShopGotItem::kCountFieldNumber;
#endif  // !_MSC_VER

ShopGotItem::ShopGotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShopGotItem)
}

void ShopGotItem::InitAsDefaultInstance() {
}

ShopGotItem::ShopGotItem(const ShopGotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShopGotItem)
}

void ShopGotItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopGotItem::~ShopGotItem() {
  // @@protoc_insertion_point(destructor:Cmd.ShopGotItem)
  SharedDtor();
}

void ShopGotItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopGotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopGotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopGotItem_descriptor_;
}

const ShopGotItem& ShopGotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShopGotItem* ShopGotItem::default_instance_ = NULL;

ShopGotItem* ShopGotItem::New() const {
  return new ShopGotItem;
}

void ShopGotItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopGotItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopGotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShopGotItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShopGotItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShopGotItem)
  return false;
#undef DO_
}

void ShopGotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShopGotItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShopGotItem)
}

::google::protobuf::uint8* ShopGotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShopGotItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShopGotItem)
  return target;
}

int ShopGotItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopGotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopGotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopGotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopGotItem::MergeFrom(const ShopGotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopGotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopGotItem::CopyFrom(const ShopGotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopGotItem::IsInitialized() const {

  return true;
}

void ShopGotItem::Swap(ShopGotItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopGotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopGotItem_descriptor_;
  metadata.reflection = ShopGotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryShopGotItem::kCmdFieldNumber;
const int QueryShopGotItem::kParamFieldNumber;
const int QueryShopGotItem::kItemsFieldNumber;
const int QueryShopGotItem::kDiscountitemsFieldNumber;
const int QueryShopGotItem::kLimititemsFieldNumber;
#endif  // !_MSC_VER

QueryShopGotItem::QueryShopGotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryShopGotItem)
}

void QueryShopGotItem::InitAsDefaultInstance() {
}

QueryShopGotItem::QueryShopGotItem(const QueryShopGotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryShopGotItem)
}

void QueryShopGotItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 22;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryShopGotItem::~QueryShopGotItem() {
  // @@protoc_insertion_point(destructor:Cmd.QueryShopGotItem)
  SharedDtor();
}

void QueryShopGotItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryShopGotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryShopGotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryShopGotItem_descriptor_;
}

const QueryShopGotItem& QueryShopGotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryShopGotItem* QueryShopGotItem::default_instance_ = NULL;

QueryShopGotItem* QueryShopGotItem::New() const {
  return new QueryShopGotItem;
}

void QueryShopGotItem::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 22;
  }
  items_.Clear();
  discountitems_.Clear();
  limititems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryShopGotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryShopGotItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ShopGotItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_discountitems;
        break;
      }

      // repeated .Cmd.ShopGotItem discountitems = 4;
      case 4: {
        if (tag == 34) {
         parse_discountitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_discountitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_discountitems;
        if (input->ExpectTag(42)) goto parse_limititems;
        break;
      }

      // repeated .Cmd.ShopGotItem limititems = 5;
      case 5: {
        if (tag == 42) {
         parse_limititems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limititems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_limititems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryShopGotItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryShopGotItem)
  return false;
#undef DO_
}

void QueryShopGotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryShopGotItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ShopGotItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .Cmd.ShopGotItem discountitems = 4;
  for (int i = 0; i < this->discountitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->discountitems(i), output);
  }

  // repeated .Cmd.ShopGotItem limititems = 5;
  for (int i = 0; i < this->limititems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->limititems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryShopGotItem)
}

::google::protobuf::uint8* QueryShopGotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryShopGotItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ShopGotItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .Cmd.ShopGotItem discountitems = 4;
  for (int i = 0; i < this->discountitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->discountitems(i), target);
  }

  // repeated .Cmd.ShopGotItem limititems = 5;
  for (int i = 0; i < this->limititems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->limititems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryShopGotItem)
  return target;
}

int QueryShopGotItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHOPGOTITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ShopGotItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.ShopGotItem discountitems = 4;
  total_size += 1 * this->discountitems_size();
  for (int i = 0; i < this->discountitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->discountitems(i));
  }

  // repeated .Cmd.ShopGotItem limititems = 5;
  total_size += 1 * this->limititems_size();
  for (int i = 0; i < this->limititems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limititems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryShopGotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryShopGotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryShopGotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryShopGotItem::MergeFrom(const QueryShopGotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  discountitems_.MergeFrom(from.discountitems_);
  limititems_.MergeFrom(from.limititems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryShopGotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryShopGotItem::CopyFrom(const QueryShopGotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryShopGotItem::IsInitialized() const {

  return true;
}

void QueryShopGotItem::Swap(QueryShopGotItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    discountitems_.Swap(&other->discountitems_);
    limititems_.Swap(&other->limititems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryShopGotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryShopGotItem_descriptor_;
  metadata.reflection = QueryShopGotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateShopGotItem::kCmdFieldNumber;
const int UpdateShopGotItem::kParamFieldNumber;
const int UpdateShopGotItem::kItemFieldNumber;
const int UpdateShopGotItem::kDiscountitemFieldNumber;
const int UpdateShopGotItem::kLimititemFieldNumber;
#endif  // !_MSC_VER

UpdateShopGotItem::UpdateShopGotItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateShopGotItem)
}

void UpdateShopGotItem::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ShopGotItem*>(&::Cmd::ShopGotItem::default_instance());
  discountitem_ = const_cast< ::Cmd::ShopGotItem*>(&::Cmd::ShopGotItem::default_instance());
  limititem_ = const_cast< ::Cmd::ShopGotItem*>(&::Cmd::ShopGotItem::default_instance());
}

UpdateShopGotItem::UpdateShopGotItem(const UpdateShopGotItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateShopGotItem)
}

void UpdateShopGotItem::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 23;
  item_ = NULL;
  discountitem_ = NULL;
  limititem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateShopGotItem::~UpdateShopGotItem() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateShopGotItem)
  SharedDtor();
}

void UpdateShopGotItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
    delete discountitem_;
    delete limititem_;
  }
}

void UpdateShopGotItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateShopGotItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateShopGotItem_descriptor_;
}

const UpdateShopGotItem& UpdateShopGotItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpdateShopGotItem* UpdateShopGotItem::default_instance_ = NULL;

UpdateShopGotItem* UpdateShopGotItem::New() const {
  return new UpdateShopGotItem;
}

void UpdateShopGotItem::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 23;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ShopGotItem::Clear();
    }
    if (has_discountitem()) {
      if (discountitem_ != NULL) discountitem_->::Cmd::ShopGotItem::Clear();
    }
    if (has_limititem()) {
      if (limititem_ != NULL) limititem_->::Cmd::ShopGotItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateShopGotItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateShopGotItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .Cmd.ShopGotItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_discountitem;
        break;
      }

      // optional .Cmd.ShopGotItem discountitem = 4;
      case 4: {
        if (tag == 34) {
         parse_discountitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_discountitem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_limititem;
        break;
      }

      // optional .Cmd.ShopGotItem limititem = 5;
      case 5: {
        if (tag == 42) {
         parse_limititem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_limititem()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateShopGotItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateShopGotItem)
  return false;
#undef DO_
}

void UpdateShopGotItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateShopGotItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ShopGotItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  // optional .Cmd.ShopGotItem discountitem = 4;
  if (has_discountitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->discountitem(), output);
  }

  // optional .Cmd.ShopGotItem limititem = 5;
  if (has_limititem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->limititem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateShopGotItem)
}

::google::protobuf::uint8* UpdateShopGotItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateShopGotItem)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ShopGotItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  // optional .Cmd.ShopGotItem discountitem = 4;
  if (has_discountitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->discountitem(), target);
  }

  // optional .Cmd.ShopGotItem limititem = 5;
  if (has_limititem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->limititem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateShopGotItem)
  return target;
}

int UpdateShopGotItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATESHOPGOTITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ShopGotItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional .Cmd.ShopGotItem discountitem = 4;
    if (has_discountitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->discountitem());
    }

    // optional .Cmd.ShopGotItem limititem = 5;
    if (has_limititem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->limititem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateShopGotItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateShopGotItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateShopGotItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateShopGotItem::MergeFrom(const UpdateShopGotItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::ShopGotItem::MergeFrom(from.item());
    }
    if (from.has_discountitem()) {
      mutable_discountitem()->::Cmd::ShopGotItem::MergeFrom(from.discountitem());
    }
    if (from.has_limititem()) {
      mutable_limititem()->::Cmd::ShopGotItem::MergeFrom(from.limititem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateShopGotItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateShopGotItem::CopyFrom(const UpdateShopGotItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateShopGotItem::IsInitialized() const {

  return true;
}

void UpdateShopGotItem::Swap(UpdateShopGotItem* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(discountitem_, other->discountitem_);
    std::swap(limititem_, other->limititem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateShopGotItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateShopGotItem_descriptor_;
  metadata.reflection = UpdateShopGotItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OpenUI::kCmdFieldNumber;
const int OpenUI::kParamFieldNumber;
const int OpenUI::kIdFieldNumber;
const int OpenUI::kUiFieldNumber;
#endif  // !_MSC_VER

OpenUI::OpenUI()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OpenUI)
}

void OpenUI::InitAsDefaultInstance() {
}

OpenUI::OpenUI(const OpenUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OpenUI)
}

void OpenUI::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 29;
  id_ = 0u;
  ui_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenUI::~OpenUI() {
  // @@protoc_insertion_point(destructor:Cmd.OpenUI)
  SharedDtor();
}

void OpenUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenUI_descriptor_;
}

const OpenUI& OpenUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

OpenUI* OpenUI::default_instance_ = NULL;

OpenUI* OpenUI::New() const {
  return new OpenUI;
}

void OpenUI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OpenUI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(id_, ui_);
    cmd_ = 9;
    param_ = 29;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OpenUI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ui;
        break;
      }

      // optional uint32 ui = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_ui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ui_)));
          set_has_ui();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OpenUI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OpenUI)
  return false;
#undef DO_
}

void OpenUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OpenUI)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 ui = 4 [default = 0];
  if (has_ui()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ui(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OpenUI)
}

::google::protobuf::uint8* OpenUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OpenUI)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 ui = 4 [default = 0];
  if (has_ui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ui(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OpenUI)
  return target;
}

int OpenUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_OPENUI];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 ui = 4 [default = 0];
    if (has_ui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ui());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenUI::MergeFrom(const OpenUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ui()) {
      set_ui(from.ui());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenUI::CopyFrom(const OpenUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenUI::IsInitialized() const {

  return true;
}

void OpenUI::Swap(OpenUI* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(ui_, other->ui_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenUI_descriptor_;
  metadata.reflection = OpenUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DbgSysMsg::kCmdFieldNumber;
const int DbgSysMsg::kParamFieldNumber;
const int DbgSysMsg::kTypeFieldNumber;
const int DbgSysMsg::kContentFieldNumber;
#endif  // !_MSC_VER

DbgSysMsg::DbgSysMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DbgSysMsg)
}

void DbgSysMsg::InitAsDefaultInstance() {
}

DbgSysMsg::DbgSysMsg(const DbgSysMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DbgSysMsg)
}

void DbgSysMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 30;
  type_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DbgSysMsg::~DbgSysMsg() {
  // @@protoc_insertion_point(destructor:Cmd.DbgSysMsg)
  SharedDtor();
}

void DbgSysMsg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void DbgSysMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DbgSysMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DbgSysMsg_descriptor_;
}

const DbgSysMsg& DbgSysMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DbgSysMsg* DbgSysMsg::default_instance_ = NULL;

DbgSysMsg* DbgSysMsg::New() const {
  return new DbgSysMsg;
}

void DbgSysMsg::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 30;
    type_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DbgSysMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DbgSysMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDbgMsgType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDbgMsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // required string content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DbgSysMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DbgSysMsg)
  return false;
#undef DO_
}

void DbgSysMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DbgSysMsg)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DbgSysMsg)
}

::google::protobuf::uint8* DbgSysMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DbgSysMsg)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // required string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DbgSysMsg)
  return target;
}

int DbgSysMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DBGSYSMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EDbgMsgType type = 3 [default = EDBGMSGTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DbgSysMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DbgSysMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DbgSysMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DbgSysMsg::MergeFrom(const DbgSysMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DbgSysMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbgSysMsg::CopyFrom(const DbgSysMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbgSysMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void DbgSysMsg::Swap(DbgSysMsg* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DbgSysMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DbgSysMsg_descriptor_;
  metadata.reflection = DbgSysMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowTransferCmd::kCmdFieldNumber;
const int FollowTransferCmd::kParamFieldNumber;
const int FollowTransferCmd::kTargetIdFieldNumber;
#endif  // !_MSC_VER

FollowTransferCmd::FollowTransferCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FollowTransferCmd)
}

void FollowTransferCmd::InitAsDefaultInstance() {
}

FollowTransferCmd::FollowTransferCmd(const FollowTransferCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FollowTransferCmd)
}

void FollowTransferCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 32;
  targetid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowTransferCmd::~FollowTransferCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FollowTransferCmd)
  SharedDtor();
}

void FollowTransferCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowTransferCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowTransferCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowTransferCmd_descriptor_;
}

const FollowTransferCmd& FollowTransferCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

FollowTransferCmd* FollowTransferCmd::default_instance_ = NULL;

FollowTransferCmd* FollowTransferCmd::New() const {
  return new FollowTransferCmd;
}

void FollowTransferCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 32;
    targetid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowTransferCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FollowTransferCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional uint64 targetId = 3;
      case 3: {
        if (tag == 24) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FollowTransferCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FollowTransferCmd)
  return false;
#undef DO_
}

void FollowTransferCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FollowTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FollowTransferCmd)
}

::google::protobuf::uint8* FollowTransferCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FollowTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FollowTransferCmd)
  return target;
}

int FollowTransferCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWTRANSFER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowTransferCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowTransferCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowTransferCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowTransferCmd::MergeFrom(const FollowTransferCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowTransferCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowTransferCmd::CopyFrom(const FollowTransferCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowTransferCmd::IsInitialized() const {

  return true;
}

void FollowTransferCmd::Swap(FollowTransferCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetid_, other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowTransferCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowTransferCmd_descriptor_;
  metadata.reflection = FollowTransferCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallNpcFuncCmd::kCmdFieldNumber;
const int CallNpcFuncCmd::kParamFieldNumber;
const int CallNpcFuncCmd::kTypeFieldNumber;
const int CallNpcFuncCmd::kFunparamFieldNumber;
#endif  // !_MSC_VER

CallNpcFuncCmd::CallNpcFuncCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CallNpcFuncCmd)
}

void CallNpcFuncCmd::InitAsDefaultInstance() {
}

CallNpcFuncCmd::CallNpcFuncCmd(const CallNpcFuncCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CallNpcFuncCmd)
}

void CallNpcFuncCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 33;
  type_ = 0u;
  funparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallNpcFuncCmd::~CallNpcFuncCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CallNpcFuncCmd)
  SharedDtor();
}

void CallNpcFuncCmd::SharedDtor() {
  if (funparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete funparam_;
  }
  if (this != default_instance_) {
  }
}

void CallNpcFuncCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallNpcFuncCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallNpcFuncCmd_descriptor_;
}

const CallNpcFuncCmd& CallNpcFuncCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CallNpcFuncCmd* CallNpcFuncCmd::default_instance_ = NULL;

CallNpcFuncCmd* CallNpcFuncCmd::New() const {
  return new CallNpcFuncCmd;
}

void CallNpcFuncCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 33;
    type_ = 0u;
    if (has_funparam()) {
      if (funparam_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        funparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallNpcFuncCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CallNpcFuncCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_funparam;
        break;
      }

      // optional string funparam = 4;
      case 4: {
        if (tag == 34) {
         parse_funparam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_funparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->funparam().data(), this->funparam().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "funparam");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CallNpcFuncCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CallNpcFuncCmd)
  return false;
#undef DO_
}

void CallNpcFuncCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CallNpcFuncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string funparam = 4;
  if (has_funparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funparam().data(), this->funparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funparam");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->funparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CallNpcFuncCmd)
}

::google::protobuf::uint8* CallNpcFuncCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CallNpcFuncCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string funparam = 4;
  if (has_funparam()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->funparam().data(), this->funparam().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "funparam");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->funparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CallNpcFuncCmd)
  return target;
}

int CallNpcFuncCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCFUNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string funparam = 4;
    if (has_funparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->funparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallNpcFuncCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallNpcFuncCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallNpcFuncCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallNpcFuncCmd::MergeFrom(const CallNpcFuncCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_funparam()) {
      set_funparam(from.funparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallNpcFuncCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallNpcFuncCmd::CopyFrom(const CallNpcFuncCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallNpcFuncCmd::IsInitialized() const {

  return true;
}

void CallNpcFuncCmd::Swap(CallNpcFuncCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(funparam_, other->funparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallNpcFuncCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallNpcFuncCmd_descriptor_;
  metadata.reflection = CallNpcFuncCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelShow::kCmdFieldNumber;
const int ModelShow::kParamFieldNumber;
const int ModelShow::kTypeFieldNumber;
const int ModelShow::kDataFieldNumber;
#endif  // !_MSC_VER

ModelShow::ModelShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ModelShow)
}

void ModelShow::InitAsDefaultInstance() {
}

ModelShow::ModelShow(const ModelShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ModelShow)
}

void ModelShow::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 34;
  type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelShow::~ModelShow() {
  // @@protoc_insertion_point(destructor:Cmd.ModelShow)
  SharedDtor();
}

void ModelShow::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ModelShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelShow_descriptor_;
}

const ModelShow& ModelShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ModelShow* ModelShow::default_instance_ = NULL;

ModelShow* ModelShow::New() const {
  return new ModelShow;
}

void ModelShow::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 34;
    type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ModelShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional uint32 type = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ModelShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ModelShow)
  return false;
#undef DO_
}

void ModelShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ModelShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ModelShow)
}

::google::protobuf::uint8* ModelShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ModelShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 type = 3 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ModelShow)
  return target;
}

int ModelShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MODELSHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 3 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelShow::MergeFrom(const ModelShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelShow::CopyFrom(const ModelShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelShow::IsInitialized() const {

  return true;
}

void ModelShow::Swap(ModelShow* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelShow_descriptor_;
  metadata.reflection = ModelShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoundEffectCmd::kCmdFieldNumber;
const int SoundEffectCmd::kParamFieldNumber;
const int SoundEffectCmd::kSeFieldNumber;
const int SoundEffectCmd::kPosFieldNumber;
const int SoundEffectCmd::kMsecFieldNumber;
const int SoundEffectCmd::kTimesFieldNumber;
const int SoundEffectCmd::kDelayFieldNumber;
#endif  // !_MSC_VER

SoundEffectCmd::SoundEffectCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SoundEffectCmd)
}

void SoundEffectCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

SoundEffectCmd::SoundEffectCmd(const SoundEffectCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SoundEffectCmd)
}

void SoundEffectCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 35;
  se_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_ = NULL;
  msec_ = 0u;
  times_ = 1u;
  delay_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoundEffectCmd::~SoundEffectCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SoundEffectCmd)
  SharedDtor();
}

void SoundEffectCmd::SharedDtor() {
  if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete se_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void SoundEffectCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoundEffectCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoundEffectCmd_descriptor_;
}

const SoundEffectCmd& SoundEffectCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SoundEffectCmd* SoundEffectCmd::default_instance_ = NULL;

SoundEffectCmd* SoundEffectCmd::New() const {
  return new SoundEffectCmd;
}

void SoundEffectCmd::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    cmd_ = 9;
    param_ = 35;
    if (has_se()) {
      if (se_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        se_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    msec_ = 0u;
    times_ = 1u;
    delay_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoundEffectCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SoundEffectCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_se;
        break;
      }

      // optional string se = 3;
      case 3: {
        if (tag == 26) {
         parse_se:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_se()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->se().data(), this->se().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "se");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msec;
        break;
      }

      // optional uint32 msec = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_)));
          set_has_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional uint32 times = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_delay;
        break;
      }

      // optional uint32 delay = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SoundEffectCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SoundEffectCmd)
  return false;
#undef DO_
}

void SoundEffectCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SoundEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string se = 3;
  if (has_se()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->se().data(), this->se().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "se");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->se(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint32 msec = 5 [default = 0];
  if (has_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msec(), output);
  }

  // optional uint32 times = 6 [default = 1];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->times(), output);
  }

  // optional uint32 delay = 7 [default = 0];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SoundEffectCmd)
}

::google::protobuf::uint8* SoundEffectCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SoundEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string se = 3;
  if (has_se()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->se().data(), this->se().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "se");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->se(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint32 msec = 5 [default = 0];
  if (has_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msec(), target);
  }

  // optional uint32 times = 6 [default = 1];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->times(), target);
  }

  // optional uint32 delay = 7 [default = 0];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SoundEffectCmd)
  return target;
}

int SoundEffectCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SOUNDEFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string se = 3;
    if (has_se()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->se());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 msec = 5 [default = 0];
    if (has_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec());
    }

    // optional uint32 times = 6 [default = 1];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional uint32 delay = 7 [default = 0];
    if (has_delay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoundEffectCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoundEffectCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoundEffectCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoundEffectCmd::MergeFrom(const SoundEffectCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_se()) {
      set_se(from.se());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_msec()) {
      set_msec(from.msec());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoundEffectCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoundEffectCmd::CopyFrom(const SoundEffectCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoundEffectCmd::IsInitialized() const {

  return true;
}

void SoundEffectCmd::Swap(SoundEffectCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(se_, other->se_);
    std::swap(pos_, other->pos_);
    std::swap(msec_, other->msec_);
    std::swap(times_, other->times_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoundEffectCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoundEffectCmd_descriptor_;
  metadata.reflection = SoundEffectCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PresetMsg::kMsgidFieldNumber;
const int PresetMsg::kMsgFieldNumber;
#endif  // !_MSC_VER

PresetMsg::PresetMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PresetMsg)
}

void PresetMsg::InitAsDefaultInstance() {
}

PresetMsg::PresetMsg(const PresetMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PresetMsg)
}

void PresetMsg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  msgid_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresetMsg::~PresetMsg() {
  // @@protoc_insertion_point(destructor:Cmd.PresetMsg)
  SharedDtor();
}

void PresetMsg::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void PresetMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresetMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresetMsg_descriptor_;
}

const PresetMsg& PresetMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

PresetMsg* PresetMsg::default_instance_ = NULL;

PresetMsg* PresetMsg::New() const {
  return new PresetMsg;
}

void PresetMsg::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    msgid_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PresetMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PresetMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PresetMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PresetMsg)
  return false;
#undef DO_
}

void PresetMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PresetMsg)
  // optional uint32 msgid = 1 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgid(), output);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PresetMsg)
}

::google::protobuf::uint8* PresetMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PresetMsg)
  // optional uint32 msgid = 1 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgid(), target);
  }

  // optional string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PresetMsg)
  return target;
}

int PresetMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgid = 1 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresetMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PresetMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PresetMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PresetMsg::MergeFrom(const PresetMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PresetMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresetMsg::CopyFrom(const PresetMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresetMsg::IsInitialized() const {

  return true;
}

void PresetMsg::Swap(PresetMsg* other) {
  if (other != this) {
    std::swap(msgid_, other->msgid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PresetMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PresetMsg_descriptor_;
  metadata.reflection = PresetMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PresetMsgCmd::kCmdFieldNumber;
const int PresetMsgCmd::kParamFieldNumber;
const int PresetMsgCmd::kMsgsFieldNumber;
#endif  // !_MSC_VER

PresetMsgCmd::PresetMsgCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PresetMsgCmd)
}

void PresetMsgCmd::InitAsDefaultInstance() {
}

PresetMsgCmd::PresetMsgCmd(const PresetMsgCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PresetMsgCmd)
}

void PresetMsgCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 36;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PresetMsgCmd::~PresetMsgCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PresetMsgCmd)
  SharedDtor();
}

void PresetMsgCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PresetMsgCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PresetMsgCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PresetMsgCmd_descriptor_;
}

const PresetMsgCmd& PresetMsgCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

PresetMsgCmd* PresetMsgCmd::default_instance_ = NULL;

PresetMsgCmd* PresetMsgCmd::New() const {
  return new PresetMsgCmd;
}

void PresetMsgCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 36;
  }
  msgs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PresetMsgCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PresetMsgCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        break;
      }

      // repeated string msgs = 3;
      case 3: {
        if (tag == 26) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msgs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msgs(this->msgs_size() - 1).data(),
            this->msgs(this->msgs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "msgs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msgs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PresetMsgCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PresetMsgCmd)
  return false;
#undef DO_
}

void PresetMsgCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PresetMsgCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated string msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->msgs(i).data(), this->msgs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "msgs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msgs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PresetMsgCmd)
}

::google::protobuf::uint8* PresetMsgCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PresetMsgCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated string msgs = 3;
  for (int i = 0; i < this->msgs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msgs(i).data(), this->msgs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "msgs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->msgs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PresetMsgCmd)
  return target;
}

int PresetMsgCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PRESETCHATMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated string msgs = 3;
  total_size += 1 * this->msgs_size();
  for (int i = 0; i < this->msgs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msgs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PresetMsgCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PresetMsgCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PresetMsgCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PresetMsgCmd::MergeFrom(const PresetMsgCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  msgs_.MergeFrom(from.msgs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PresetMsgCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresetMsgCmd::CopyFrom(const PresetMsgCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresetMsgCmd::IsInitialized() const {

  return true;
}

void PresetMsgCmd::Swap(PresetMsgCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    msgs_.Swap(&other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PresetMsgCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PresetMsgCmd_descriptor_;
  metadata.reflection = PresetMsgCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeBgmCmd::kCmdFieldNumber;
const int ChangeBgmCmd::kParamFieldNumber;
const int ChangeBgmCmd::kBgmFieldNumber;
const int ChangeBgmCmd::kPlayFieldNumber;
const int ChangeBgmCmd::kTimesFieldNumber;
const int ChangeBgmCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

ChangeBgmCmd::ChangeBgmCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeBgmCmd)
}

void ChangeBgmCmd::InitAsDefaultInstance() {
}

ChangeBgmCmd::ChangeBgmCmd(const ChangeBgmCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeBgmCmd)
}

void ChangeBgmCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 37;
  bgm_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  play_ = true;
  times_ = 0u;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeBgmCmd::~ChangeBgmCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeBgmCmd)
  SharedDtor();
}

void ChangeBgmCmd::SharedDtor() {
  if (bgm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bgm_;
  }
  if (this != default_instance_) {
  }
}

void ChangeBgmCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeBgmCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeBgmCmd_descriptor_;
}

const ChangeBgmCmd& ChangeBgmCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ChangeBgmCmd* ChangeBgmCmd::default_instance_ = NULL;

ChangeBgmCmd* ChangeBgmCmd::New() const {
  return new ChangeBgmCmd;
}

void ChangeBgmCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeBgmCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(times_, type_);
    cmd_ = 9;
    param_ = 37;
    if (has_bgm()) {
      if (bgm_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bgm_->clear();
      }
    }
    play_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeBgmCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeBgmCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_bgm;
        break;
      }

      // optional string bgm = 3;
      case 3: {
        if (tag == 26) {
         parse_bgm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bgm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bgm().data(), this->bgm().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bgm");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_play;
        break;
      }

      // optional bool play = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_play:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &play_)));
          set_has_play();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional uint32 times = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.EBgmType type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBgmType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EBgmType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeBgmCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeBgmCmd)
  return false;
#undef DO_
}

void ChangeBgmCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeBgmCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string bgm = 3;
  if (has_bgm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bgm().data(), this->bgm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bgm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->bgm(), output);
  }

  // optional bool play = 4 [default = true];
  if (has_play()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->play(), output);
  }

  // optional uint32 times = 5 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times(), output);
  }

  // optional .Cmd.EBgmType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeBgmCmd)
}

::google::protobuf::uint8* ChangeBgmCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeBgmCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string bgm = 3;
  if (has_bgm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bgm().data(), this->bgm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bgm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bgm(), target);
  }

  // optional bool play = 4 [default = true];
  if (has_play()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->play(), target);
  }

  // optional uint32 times = 5 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times(), target);
  }

  // optional .Cmd.EBgmType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeBgmCmd)
  return target;
}

int ChangeBgmCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGEBGM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string bgm = 3;
    if (has_bgm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bgm());
    }

    // optional bool play = 4 [default = true];
    if (has_play()) {
      total_size += 1 + 1;
    }

    // optional uint32 times = 5 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

    // optional .Cmd.EBgmType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeBgmCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeBgmCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeBgmCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeBgmCmd::MergeFrom(const ChangeBgmCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_bgm()) {
      set_bgm(from.bgm());
    }
    if (from.has_play()) {
      set_play(from.play());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeBgmCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeBgmCmd::CopyFrom(const ChangeBgmCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeBgmCmd::IsInitialized() const {

  return true;
}

void ChangeBgmCmd::Swap(ChangeBgmCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(bgm_, other->bgm_);
    std::swap(play_, other->play_);
    std::swap(times_, other->times_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeBgmCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeBgmCmd_descriptor_;
  metadata.reflection = ChangeBgmCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FighterInfo::kDatasFieldNumber;
const int FighterInfo::kAttrsFieldNumber;
#endif  // !_MSC_VER

FighterInfo::FighterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FighterInfo)
}

void FighterInfo::InitAsDefaultInstance() {
}

FighterInfo::FighterInfo(const FighterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FighterInfo)
}

void FighterInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FighterInfo::~FighterInfo() {
  // @@protoc_insertion_point(destructor:Cmd.FighterInfo)
  SharedDtor();
}

void FighterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FighterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FighterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FighterInfo_descriptor_;
}

const FighterInfo& FighterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

FighterInfo* FighterInfo::default_instance_ = NULL;

FighterInfo* FighterInfo::New() const {
  return new FighterInfo;
}

void FighterInfo::Clear() {
  datas_.Clear();
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FighterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FighterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserData datas = 1;
      case 1: {
        if (tag == 10) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_datas;
        if (input->ExpectTag(18)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 2;
      case 2: {
        if (tag == 18) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FighterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FighterInfo)
  return false;
#undef DO_
}

void FighterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FighterInfo)
  // repeated .Cmd.UserData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FighterInfo)
}

::google::protobuf::uint8* FighterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FighterInfo)
  // repeated .Cmd.UserData datas = 1;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 2;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FighterInfo)
  return target;
}

int FighterInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.UserData datas = 1;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 2;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FighterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FighterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FighterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FighterInfo::MergeFrom(const FighterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FighterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FighterInfo::CopyFrom(const FighterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FighterInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void FighterInfo::Swap(FighterInfo* other) {
  if (other != this) {
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FighterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FighterInfo_descriptor_;
  metadata.reflection = FighterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryFighterInfo::kCmdFieldNumber;
const int QueryFighterInfo::kParamFieldNumber;
const int QueryFighterInfo::kFightersFieldNumber;
#endif  // !_MSC_VER

QueryFighterInfo::QueryFighterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryFighterInfo)
}

void QueryFighterInfo::InitAsDefaultInstance() {
}

QueryFighterInfo::QueryFighterInfo(const QueryFighterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryFighterInfo)
}

void QueryFighterInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 38;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryFighterInfo::~QueryFighterInfo() {
  // @@protoc_insertion_point(destructor:Cmd.QueryFighterInfo)
  SharedDtor();
}

void QueryFighterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryFighterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryFighterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryFighterInfo_descriptor_;
}

const QueryFighterInfo& QueryFighterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryFighterInfo* QueryFighterInfo::default_instance_ = NULL;

QueryFighterInfo* QueryFighterInfo::New() const {
  return new QueryFighterInfo;
}

void QueryFighterInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 38;
  }
  fighters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryFighterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryFighterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fighters;
        break;
      }

      // repeated .Cmd.FighterInfo fighters = 3;
      case 3: {
        if (tag == 26) {
         parse_fighters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fighters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_fighters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryFighterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryFighterInfo)
  return false;
#undef DO_
}

void QueryFighterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryFighterInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FighterInfo fighters = 3;
  for (int i = 0; i < this->fighters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->fighters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryFighterInfo)
}

::google::protobuf::uint8* QueryFighterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryFighterInfo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FighterInfo fighters = 3;
  for (int i = 0; i < this->fighters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->fighters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryFighterInfo)
  return target;
}

int QueryFighterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYFIGHTERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.FighterInfo fighters = 3;
  total_size += 1 * this->fighters_size();
  for (int i = 0; i < this->fighters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fighters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryFighterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryFighterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryFighterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryFighterInfo::MergeFrom(const QueryFighterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fighters_.MergeFrom(from.fighters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryFighterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryFighterInfo::CopyFrom(const QueryFighterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryFighterInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->fighters())) return false;
  return true;
}

void QueryFighterInfo::Swap(QueryFighterInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    fighters_.Swap(&other->fighters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryFighterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryFighterInfo_descriptor_;
  metadata.reflection = QueryFighterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameTimeCmd::kCmdFieldNumber;
const int GameTimeCmd::kParamFieldNumber;
const int GameTimeCmd::kOptFieldNumber;
const int GameTimeCmd::kSecFieldNumber;
const int GameTimeCmd::kSpeedFieldNumber;
#endif  // !_MSC_VER

GameTimeCmd::GameTimeCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GameTimeCmd)
}

void GameTimeCmd::InitAsDefaultInstance() {
}

GameTimeCmd::GameTimeCmd(const GameTimeCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GameTimeCmd)
}

void GameTimeCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 40;
  opt_ = 1;
  sec_ = 1u;
  speed_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameTimeCmd::~GameTimeCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GameTimeCmd)
  SharedDtor();
}

void GameTimeCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameTimeCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameTimeCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameTimeCmd_descriptor_;
}

const GameTimeCmd& GameTimeCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GameTimeCmd* GameTimeCmd::default_instance_ = NULL;

GameTimeCmd* GameTimeCmd::New() const {
  return new GameTimeCmd;
}

void GameTimeCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 40;
    opt_ = 1;
    sec_ = 1u;
    speed_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameTimeCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GameTimeCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_opt;
        break;
      }

      // optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
      case 3: {
        if (tag == 24) {
         parse_opt:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GameTimeOpt_IsValid(value)) {
            set_opt(static_cast< ::Cmd::GameTimeOpt >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sec;
        break;
      }

      // optional uint32 sec = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sec_)));
          set_has_sec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // optional uint32 speed = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GameTimeCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GameTimeCmd)
  return false;
#undef DO_
}

void GameTimeCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GameTimeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
  if (has_opt()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->opt(), output);
  }

  // optional uint32 sec = 4 [default = 1];
  if (has_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sec(), output);
  }

  // optional uint32 speed = 5 [default = 1];
  if (has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GameTimeCmd)
}

::google::protobuf::uint8* GameTimeCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GameTimeCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
  if (has_opt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->opt(), target);
  }

  // optional uint32 sec = 4 [default = 1];
  if (has_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sec(), target);
  }

  // optional uint32 speed = 5 [default = 1];
  if (has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GameTimeCmd)
  return target;
}

int GameTimeCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GAMETIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GameTimeOpt opt = 3 [default = EGAMETIMEOPT_SYNC];
    if (has_opt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->opt());
    }

    // optional uint32 sec = 4 [default = 1];
    if (has_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sec());
    }

    // optional uint32 speed = 5 [default = 1];
    if (has_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->speed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameTimeCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameTimeCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameTimeCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameTimeCmd::MergeFrom(const GameTimeCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_opt()) {
      set_opt(from.opt());
    }
    if (from.has_sec()) {
      set_sec(from.sec());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameTimeCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameTimeCmd::CopyFrom(const GameTimeCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameTimeCmd::IsInitialized() const {

  return true;
}

void GameTimeCmd::Swap(GameTimeCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(opt_, other->opt_);
    std::swap(sec_, other->sec_);
    std::swap(speed_, other->speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameTimeCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameTimeCmd_descriptor_;
  metadata.reflection = GameTimeCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDTimeItem::kIdFieldNumber;
const int CDTimeItem::kTimeFieldNumber;
const int CDTimeItem::kTypeFieldNumber;
#endif  // !_MSC_VER

CDTimeItem::CDTimeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CDTimeItem)
}

void CDTimeItem::InitAsDefaultInstance() {
}

CDTimeItem::CDTimeItem(const CDTimeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CDTimeItem)
}

void CDTimeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTimeItem::~CDTimeItem() {
  // @@protoc_insertion_point(destructor:Cmd.CDTimeItem)
  SharedDtor();
}

void CDTimeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDTimeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTimeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTimeItem_descriptor_;
}

const CDTimeItem& CDTimeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CDTimeItem* CDTimeItem::default_instance_ = NULL;

CDTimeItem* CDTimeItem::New() const {
  return new CDTimeItem;
}

void CDTimeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CDTimeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_, type_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDTimeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CDTimeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.CD_TYPE type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CD_TYPE_IsValid(value)) {
            set_type(static_cast< ::Cmd::CD_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CDTimeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CDTimeItem)
  return false;
#undef DO_
}

void CDTimeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CDTimeItem)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional .Cmd.CD_TYPE type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CDTimeItem)
}

::google::protobuf::uint8* CDTimeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CDTimeItem)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional .Cmd.CD_TYPE type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CDTimeItem)
  return target;
}

int CDTimeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional .Cmd.CD_TYPE type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTimeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDTimeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDTimeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTimeItem::MergeFrom(const CDTimeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTimeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTimeItem::CopyFrom(const CDTimeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTimeItem::IsInitialized() const {

  return true;
}

void CDTimeItem::Swap(CDTimeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDTimeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTimeItem_descriptor_;
  metadata.reflection = CDTimeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDTimeUserCmd::kCmdFieldNumber;
const int CDTimeUserCmd::kParamFieldNumber;
const int CDTimeUserCmd::kListFieldNumber;
#endif  // !_MSC_VER

CDTimeUserCmd::CDTimeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CDTimeUserCmd)
}

void CDTimeUserCmd::InitAsDefaultInstance() {
}

CDTimeUserCmd::CDTimeUserCmd(const CDTimeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CDTimeUserCmd)
}

void CDTimeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 41;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTimeUserCmd::~CDTimeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CDTimeUserCmd)
  SharedDtor();
}

void CDTimeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDTimeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTimeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTimeUserCmd_descriptor_;
}

const CDTimeUserCmd& CDTimeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CDTimeUserCmd* CDTimeUserCmd::default_instance_ = NULL;

CDTimeUserCmd* CDTimeUserCmd::New() const {
  return new CDTimeUserCmd;
}

void CDTimeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 41;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDTimeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CDTimeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.CDTimeItem list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CDTimeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CDTimeUserCmd)
  return false;
#undef DO_
}

void CDTimeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CDTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.CDTimeItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CDTimeUserCmd)
}

::google::protobuf::uint8* CDTimeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CDTimeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.CDTimeItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CDTimeUserCmd)
  return target;
}

int CDTimeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CDTIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.CDTimeItem list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTimeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDTimeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDTimeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTimeUserCmd::MergeFrom(const CDTimeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDTimeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTimeUserCmd::CopyFrom(const CDTimeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTimeUserCmd::IsInitialized() const {

  return true;
}

void CDTimeUserCmd::Swap(CDTimeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDTimeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTimeUserCmd_descriptor_;
  metadata.reflection = CDTimeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StateChange::kCmdFieldNumber;
const int StateChange::kParamFieldNumber;
const int StateChange::kStatusFieldNumber;
#endif  // !_MSC_VER

StateChange::StateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StateChange)
}

void StateChange::InitAsDefaultInstance() {
}

StateChange::StateChange(const StateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StateChange)
}

void StateChange::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 42;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:Cmd.StateChange)
  SharedDtor();
}

void StateChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StateChange_descriptor_;
}

const StateChange& StateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

StateChange* StateChange::default_instance_ = NULL;

StateChange* StateChange::New() const {
  return new StateChange;
}

void StateChange::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 42;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StateChange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECreatureStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::ECreatureStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StateChange)
  return false;
#undef DO_
}

void StateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StateChange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StateChange)
}

::google::protobuf::uint8* StateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StateChange)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StateChange)
  return target;
}

int StateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_STATECHANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECreatureStatus status = 3 [default = ECREATURESTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StateChange::MergeFrom(const StateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StateChange::CopyFrom(const StateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StateChange::IsInitialized() const {

  return true;
}

void StateChange::Swap(StateChange* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StateChange_descriptor_;
  metadata.reflection = StateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Photo::kCmdFieldNumber;
const int Photo::kParamFieldNumber;
const int Photo::kGuidFieldNumber;
#endif  // !_MSC_VER

Photo::Photo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Photo)
}

void Photo::InitAsDefaultInstance() {
}

Photo::Photo(const Photo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Photo)
}

void Photo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 44;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Photo::~Photo() {
  // @@protoc_insertion_point(destructor:Cmd.Photo)
  SharedDtor();
}

void Photo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Photo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Photo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Photo_descriptor_;
}

const Photo& Photo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

Photo* Photo::default_instance_ = NULL;

Photo* Photo::New() const {
  return new Photo;
}

void Photo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 44;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Photo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Photo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Photo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Photo)
  return false;
#undef DO_
}

void Photo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Photo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Photo)
}

::google::protobuf::uint8* Photo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Photo)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Photo)
  return target;
}

int Photo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Photo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Photo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Photo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Photo::MergeFrom(const Photo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Photo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Photo::CopyFrom(const Photo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Photo::IsInitialized() const {

  return true;
}

void Photo::Swap(Photo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Photo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Photo_descriptor_;
  metadata.reflection = Photo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeScreen::kCmdFieldNumber;
const int ShakeScreen::kParamFieldNumber;
const int ShakeScreen::kMaxamplitudeFieldNumber;
const int ShakeScreen::kMsecFieldNumber;
const int ShakeScreen::kShaketypeFieldNumber;
#endif  // !_MSC_VER

ShakeScreen::ShakeScreen()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShakeScreen)
}

void ShakeScreen::InitAsDefaultInstance() {
}

ShakeScreen::ShakeScreen(const ShakeScreen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShakeScreen)
}

void ShakeScreen::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 45;
  maxamplitude_ = 3u;
  msec_ = 0u;
  shaketype_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeScreen::~ShakeScreen() {
  // @@protoc_insertion_point(destructor:Cmd.ShakeScreen)
  SharedDtor();
}

void ShakeScreen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShakeScreen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeScreen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeScreen_descriptor_;
}

const ShakeScreen& ShakeScreen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShakeScreen* ShakeScreen::default_instance_ = NULL;

ShakeScreen* ShakeScreen::New() const {
  return new ShakeScreen;
}

void ShakeScreen::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 45;
    maxamplitude_ = 3u;
    msec_ = 0u;
    shaketype_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeScreen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShakeScreen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxamplitude;
        break;
      }

      // optional uint32 maxamplitude = 3 [default = 3];
      case 3: {
        if (tag == 24) {
         parse_maxamplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxamplitude_)));
          set_has_maxamplitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msec;
        break;
      }

      // optional uint32 msec = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msec_)));
          set_has_msec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_shaketype;
        break;
      }

      // optional uint32 shaketype = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_shaketype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shaketype_)));
          set_has_shaketype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShakeScreen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShakeScreen)
  return false;
#undef DO_
}

void ShakeScreen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShakeScreen)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 maxamplitude = 3 [default = 3];
  if (has_maxamplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxamplitude(), output);
  }

  // optional uint32 msec = 4 [default = 0];
  if (has_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msec(), output);
  }

  // optional uint32 shaketype = 5 [default = 1];
  if (has_shaketype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->shaketype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShakeScreen)
}

::google::protobuf::uint8* ShakeScreen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShakeScreen)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 maxamplitude = 3 [default = 3];
  if (has_maxamplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxamplitude(), target);
  }

  // optional uint32 msec = 4 [default = 0];
  if (has_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msec(), target);
  }

  // optional uint32 shaketype = 5 [default = 1];
  if (has_shaketype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->shaketype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShakeScreen)
  return target;
}

int ShakeScreen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKESCREEN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 maxamplitude = 3 [default = 3];
    if (has_maxamplitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxamplitude());
    }

    // optional uint32 msec = 4 [default = 0];
    if (has_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msec());
    }

    // optional uint32 shaketype = 5 [default = 1];
    if (has_shaketype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shaketype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeScreen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeScreen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeScreen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeScreen::MergeFrom(const ShakeScreen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_maxamplitude()) {
      set_maxamplitude(from.maxamplitude());
    }
    if (from.has_msec()) {
      set_msec(from.msec());
    }
    if (from.has_shaketype()) {
      set_shaketype(from.shaketype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeScreen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeScreen::CopyFrom(const ShakeScreen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeScreen::IsInitialized() const {

  return true;
}

void ShakeScreen::Swap(ShakeScreen* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(maxamplitude_, other->maxamplitude_);
    std::swap(msec_, other->msec_);
    std::swap(shaketype_, other->shaketype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeScreen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeScreen_descriptor_;
  metadata.reflection = ShakeScreen_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortcutItem::kGuidFieldNumber;
const int ShortcutItem::kTypeFieldNumber;
const int ShortcutItem::kPosFieldNumber;
#endif  // !_MSC_VER

ShortcutItem::ShortcutItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShortcutItem)
}

void ShortcutItem::InitAsDefaultInstance() {
}

ShortcutItem::ShortcutItem(const ShortcutItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShortcutItem)
}

void ShortcutItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortcutItem::~ShortcutItem() {
  // @@protoc_insertion_point(destructor:Cmd.ShortcutItem)
  SharedDtor();
}

void ShortcutItem::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void ShortcutItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShortcutItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortcutItem_descriptor_;
}

const ShortcutItem& ShortcutItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShortcutItem* ShortcutItem::default_instance_ = NULL;

ShortcutItem* ShortcutItem::New() const {
  return new ShortcutItem;
}

void ShortcutItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShortcutItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(type_, pos_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortcutItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShortcutItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guid = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShortcutItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShortcutItem)
  return false;
#undef DO_
}

void ShortcutItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShortcutItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->guid(), output);
  }

  // optional uint32 type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShortcutItem)
}

::google::protobuf::uint8* ShortcutItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShortcutItem)
  // optional string guid = 1;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guid(), target);
  }

  // optional uint32 type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 pos = 3 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShortcutItem)
  return target;
}

int ShortcutItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guid = 1;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

    // optional uint32 type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 pos = 3 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortcutItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortcutItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShortcutItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortcutItem::MergeFrom(const ShortcutItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortcutItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortcutItem::CopyFrom(const ShortcutItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortcutItem::IsInitialized() const {

  return true;
}

void ShortcutItem::Swap(ShortcutItem* other) {
  if (other != this) {
    std::swap(guid_, other->guid_);
    std::swap(type_, other->type_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShortcutItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShortcutItem_descriptor_;
  metadata.reflection = ShortcutItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryShortcut::kCmdFieldNumber;
const int QueryShortcut::kParamFieldNumber;
const int QueryShortcut::kListFieldNumber;
#endif  // !_MSC_VER

QueryShortcut::QueryShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryShortcut)
}

void QueryShortcut::InitAsDefaultInstance() {
}

QueryShortcut::QueryShortcut(const QueryShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryShortcut)
}

void QueryShortcut::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 47;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryShortcut::~QueryShortcut() {
  // @@protoc_insertion_point(destructor:Cmd.QueryShortcut)
  SharedDtor();
}

void QueryShortcut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryShortcut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryShortcut_descriptor_;
}

const QueryShortcut& QueryShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryShortcut* QueryShortcut::default_instance_ = NULL;

QueryShortcut* QueryShortcut::New() const {
  return new QueryShortcut;
}

void QueryShortcut::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 47;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryShortcut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.ShortcutItem list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryShortcut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryShortcut)
  return false;
#undef DO_
}

void QueryShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryShortcut)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ShortcutItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryShortcut)
}

::google::protobuf::uint8* QueryShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryShortcut)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ShortcutItem list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryShortcut)
  return target;
}

int QueryShortcut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYSHORTCUT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ShortcutItem list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryShortcut::MergeFrom(const QueryShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryShortcut::CopyFrom(const QueryShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryShortcut::IsInitialized() const {

  return true;
}

void QueryShortcut::Swap(QueryShortcut* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryShortcut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryShortcut_descriptor_;
  metadata.reflection = QueryShortcut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutShortcut::kCmdFieldNumber;
const int PutShortcut::kParamFieldNumber;
const int PutShortcut::kItemFieldNumber;
#endif  // !_MSC_VER

PutShortcut::PutShortcut()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PutShortcut)
}

void PutShortcut::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ShortcutItem*>(&::Cmd::ShortcutItem::default_instance());
}

PutShortcut::PutShortcut(const PutShortcut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PutShortcut)
}

void PutShortcut::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 48;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutShortcut::~PutShortcut() {
  // @@protoc_insertion_point(destructor:Cmd.PutShortcut)
  SharedDtor();
}

void PutShortcut::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void PutShortcut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutShortcut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutShortcut_descriptor_;
}

const PutShortcut& PutShortcut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

PutShortcut* PutShortcut::default_instance_ = NULL;

PutShortcut* PutShortcut::New() const {
  return new PutShortcut;
}

void PutShortcut::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 48;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ShortcutItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutShortcut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PutShortcut)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // optional .Cmd.ShortcutItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PutShortcut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PutShortcut)
  return false;
#undef DO_
}

void PutShortcut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PutShortcut)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ShortcutItem item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PutShortcut)
}

::google::protobuf::uint8* PutShortcut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PutShortcut)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ShortcutItem item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PutShortcut)
  return target;
}

int PutShortcut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PUTSHORTCUT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ShortcutItem item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutShortcut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutShortcut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutShortcut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutShortcut::MergeFrom(const PutShortcut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::ShortcutItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutShortcut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutShortcut::CopyFrom(const PutShortcut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutShortcut::IsInitialized() const {

  return true;
}

void PutShortcut::Swap(PutShortcut* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutShortcut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutShortcut_descriptor_;
  metadata.reflection = PutShortcut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NpcChangeAngle::kCmdFieldNumber;
const int NpcChangeAngle::kParamFieldNumber;
const int NpcChangeAngle::kGuidFieldNumber;
const int NpcChangeAngle::kTargetidFieldNumber;
const int NpcChangeAngle::kAngleFieldNumber;
#endif  // !_MSC_VER

NpcChangeAngle::NpcChangeAngle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NpcChangeAngle)
}

void NpcChangeAngle::InitAsDefaultInstance() {
}

NpcChangeAngle::NpcChangeAngle(const NpcChangeAngle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NpcChangeAngle)
}

void NpcChangeAngle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 49;
  guid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  angle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NpcChangeAngle::~NpcChangeAngle() {
  // @@protoc_insertion_point(destructor:Cmd.NpcChangeAngle)
  SharedDtor();
}

void NpcChangeAngle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NpcChangeAngle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NpcChangeAngle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NpcChangeAngle_descriptor_;
}

const NpcChangeAngle& NpcChangeAngle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NpcChangeAngle* NpcChangeAngle::default_instance_ = NULL;

NpcChangeAngle* NpcChangeAngle::New() const {
  return new NpcChangeAngle;
}

void NpcChangeAngle::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NpcChangeAngle*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guid_, angle_);
    cmd_ = 9;
    param_ = 49;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NpcChangeAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NpcChangeAngle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_angle;
        break;
      }

      // optional uint32 angle = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NpcChangeAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NpcChangeAngle)
  return false;
#undef DO_
}

void NpcChangeAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NpcChangeAngle)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional uint32 angle = 5 [default = 0];
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NpcChangeAngle)
}

::google::protobuf::uint8* NpcChangeAngle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NpcChangeAngle)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional uint32 angle = 5 [default = 0];
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NpcChangeAngle)
  return target;
}

int NpcChangeAngle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NPCANGLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 angle = 5 [default = 0];
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->angle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NpcChangeAngle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NpcChangeAngle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NpcChangeAngle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NpcChangeAngle::MergeFrom(const NpcChangeAngle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NpcChangeAngle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NpcChangeAngle::CopyFrom(const NpcChangeAngle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NpcChangeAngle::IsInitialized() const {

  return true;
}

void NpcChangeAngle::Swap(NpcChangeAngle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(targetid_, other->targetid_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NpcChangeAngle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NpcChangeAngle_descriptor_;
  metadata.reflection = NpcChangeAngle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraFocus::kCmdFieldNumber;
const int CameraFocus::kParamFieldNumber;
const int CameraFocus::kTargetsFieldNumber;
#endif  // !_MSC_VER

CameraFocus::CameraFocus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CameraFocus)
}

void CameraFocus::InitAsDefaultInstance() {
}

CameraFocus::CameraFocus(const CameraFocus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CameraFocus)
}

void CameraFocus::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 50;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraFocus::~CameraFocus() {
  // @@protoc_insertion_point(destructor:Cmd.CameraFocus)
  SharedDtor();
}

void CameraFocus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraFocus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraFocus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraFocus_descriptor_;
}

const CameraFocus& CameraFocus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CameraFocus* CameraFocus::default_instance_ = NULL;

CameraFocus* CameraFocus::New() const {
  return new CameraFocus;
}

void CameraFocus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 50;
  }
  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraFocus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CameraFocus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targets;
        break;
      }

      // repeated uint64 targets = 3;
      case 3: {
        if (tag == 24) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_targets())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_targets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targets;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CameraFocus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CameraFocus)
  return false;
#undef DO_
}

void CameraFocus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CameraFocus)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->targets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CameraFocus)
}

::google::protobuf::uint8* CameraFocus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CameraFocus)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 targets = 3;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->targets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CameraFocus)
  return target;
}

int CameraFocus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CAMERAFOCUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint64 targets = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->targets(i));
    }
    total_size += 1 * this->targets_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraFocus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraFocus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraFocus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraFocus::MergeFrom(const CameraFocus& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraFocus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraFocus::CopyFrom(const CameraFocus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraFocus::IsInitialized() const {

  return true;
}

void CameraFocus::Swap(CameraFocus* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    targets_.Swap(&other->targets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraFocus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraFocus_descriptor_;
  metadata.reflection = CameraFocus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToListUserCmd::kCmdFieldNumber;
const int GoToListUserCmd::kParamFieldNumber;
const int GoToListUserCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

GoToListUserCmd::GoToListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToListUserCmd)
}

void GoToListUserCmd::InitAsDefaultInstance() {
}

GoToListUserCmd::GoToListUserCmd(const GoToListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToListUserCmd)
}

void GoToListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 51;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToListUserCmd::~GoToListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToListUserCmd)
  SharedDtor();
}

void GoToListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToListUserCmd_descriptor_;
}

const GoToListUserCmd& GoToListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoToListUserCmd* GoToListUserCmd::default_instance_ = NULL;

GoToListUserCmd* GoToListUserCmd::New() const {
  return new GoToListUserCmd;
}

void GoToListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 51;
  }
  mapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // repeated uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_mapid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToListUserCmd)
  return false;
#undef DO_
}

void GoToListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 mapid = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->mapid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToListUserCmd)
}

::google::protobuf::uint8* GoToListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 mapid = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->mapid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToListUserCmd)
  return target;
}

int GoToListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 mapid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToListUserCmd::MergeFrom(const GoToListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToListUserCmd::CopyFrom(const GoToListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToListUserCmd::IsInitialized() const {

  return true;
}

void GoToListUserCmd::Swap(GoToListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    mapid_.Swap(&other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToListUserCmd_descriptor_;
  metadata.reflection = GoToListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToGearUserCmd::kCmdFieldNumber;
const int GoToGearUserCmd::kParamFieldNumber;
const int GoToGearUserCmd::kMapidFieldNumber;
const int GoToGearUserCmd::kTypeFieldNumber;
const int GoToGearUserCmd::kOtheridsFieldNumber;
#endif  // !_MSC_VER

GoToGearUserCmd::GoToGearUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToGearUserCmd)
}

void GoToGearUserCmd::InitAsDefaultInstance() {
}

GoToGearUserCmd::GoToGearUserCmd(const GoToGearUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToGearUserCmd)
}

void GoToGearUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 52;
  mapid_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToGearUserCmd::~GoToGearUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToGearUserCmd)
  SharedDtor();
}

void GoToGearUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToGearUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToGearUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToGearUserCmd_descriptor_;
}

const GoToGearUserCmd& GoToGearUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoToGearUserCmd* GoToGearUserCmd::default_instance_ = NULL;

GoToGearUserCmd* GoToGearUserCmd::New() const {
  return new GoToGearUserCmd;
}

void GoToGearUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 52;
    mapid_ = 0u;
    type_ = 1;
  }
  otherids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToGearUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToGearUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EGoToGearType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGoToGearType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGoToGearType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_otherids;
        break;
      }

      // repeated uint64 otherids = 5;
      case 5: {
        if (tag == 40) {
         parse_otherids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_otherids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_otherids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_otherids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToGearUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToGearUserCmd)
  return false;
#undef DO_
}

void GoToGearUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToGearUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional .Cmd.EGoToGearType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // repeated uint64 otherids = 5;
  for (int i = 0; i < this->otherids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->otherids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToGearUserCmd)
}

::google::protobuf::uint8* GoToGearUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToGearUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional .Cmd.EGoToGearType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // repeated uint64 otherids = 5;
  for (int i = 0; i < this->otherids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->otherids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToGearUserCmd)
  return target;
}

int GoToGearUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_GEAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.EGoToGearType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint64 otherids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->otherids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->otherids(i));
    }
    total_size += 1 * this->otherids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToGearUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToGearUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToGearUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToGearUserCmd::MergeFrom(const GoToGearUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherids_.MergeFrom(from.otherids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToGearUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToGearUserCmd::CopyFrom(const GoToGearUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToGearUserCmd::IsInitialized() const {

  return true;
}

void GoToGearUserCmd::Swap(GoToGearUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(type_, other->type_);
    otherids_.Swap(&other->otherids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToGearUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToGearUserCmd_descriptor_;
  metadata.reflection = GoToGearUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewTransMapCmd::kCmdFieldNumber;
const int NewTransMapCmd::kParamFieldNumber;
const int NewTransMapCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

NewTransMapCmd::NewTransMapCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewTransMapCmd)
}

void NewTransMapCmd::InitAsDefaultInstance() {
}

NewTransMapCmd::NewTransMapCmd(const NewTransMapCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewTransMapCmd)
}

void NewTransMapCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 12;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewTransMapCmd::~NewTransMapCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NewTransMapCmd)
  SharedDtor();
}

void NewTransMapCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewTransMapCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewTransMapCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewTransMapCmd_descriptor_;
}

const NewTransMapCmd& NewTransMapCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewTransMapCmd* NewTransMapCmd::default_instance_ = NULL;

NewTransMapCmd* NewTransMapCmd::New() const {
  return new NewTransMapCmd;
}

void NewTransMapCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 12;
  }
  mapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewTransMapCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewTransMapCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // repeated uint32 mapid = 3;
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_mapid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewTransMapCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewTransMapCmd)
  return false;
#undef DO_
}

void NewTransMapCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewTransMapCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 mapid = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->mapid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewTransMapCmd)
}

::google::protobuf::uint8* NewTransMapCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewTransMapCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 mapid = 3;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->mapid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewTransMapCmd)
  return target;
}

int NewTransMapCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEWTRANSMAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 mapid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewTransMapCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewTransMapCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewTransMapCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewTransMapCmd::MergeFrom(const NewTransMapCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewTransMapCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTransMapCmd::CopyFrom(const NewTransMapCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTransMapCmd::IsInitialized() const {

  return true;
}

void NewTransMapCmd::Swap(NewTransMapCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    mapid_.Swap(&other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewTransMapCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewTransMapCmd_descriptor_;
  metadata.reflection = NewTransMapCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeathTransferListCmd::kCmdFieldNumber;
const int DeathTransferListCmd::kParamFieldNumber;
const int DeathTransferListCmd::kNpcIdFieldNumber;
#endif  // !_MSC_VER

DeathTransferListCmd::DeathTransferListCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeathTransferListCmd)
}

void DeathTransferListCmd::InitAsDefaultInstance() {
}

DeathTransferListCmd::DeathTransferListCmd(const DeathTransferListCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeathTransferListCmd)
}

void DeathTransferListCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 151;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeathTransferListCmd::~DeathTransferListCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeathTransferListCmd)
  SharedDtor();
}

void DeathTransferListCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeathTransferListCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeathTransferListCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeathTransferListCmd_descriptor_;
}

const DeathTransferListCmd& DeathTransferListCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DeathTransferListCmd* DeathTransferListCmd::default_instance_ = NULL;

DeathTransferListCmd* DeathTransferListCmd::New() const {
  return new DeathTransferListCmd;
}

void DeathTransferListCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 151;
  }
  npcid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeathTransferListCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeathTransferListCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcId;
        break;
      }

      // repeated uint32 npcId = 3;
      case 3: {
        if (tag == 24) {
         parse_npcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_npcid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_npcid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcId;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeathTransferListCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeathTransferListCmd)
  return false;
#undef DO_
}

void DeathTransferListCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeathTransferListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 npcId = 3;
  for (int i = 0; i < this->npcid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->npcid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeathTransferListCmd)
}

::google::protobuf::uint8* DeathTransferListCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeathTransferListCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 npcId = 3;
  for (int i = 0; i < this->npcid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->npcid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeathTransferListCmd)
  return target;
}

int DeathTransferListCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DEATH_TRANSFER_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 npcId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->npcid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->npcid(i));
    }
    total_size += 1 * this->npcid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeathTransferListCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeathTransferListCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeathTransferListCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeathTransferListCmd::MergeFrom(const DeathTransferListCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcid_.MergeFrom(from.npcid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeathTransferListCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeathTransferListCmd::CopyFrom(const DeathTransferListCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeathTransferListCmd::IsInitialized() const {

  return true;
}

void DeathTransferListCmd::Swap(DeathTransferListCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    npcid_.Swap(&other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeathTransferListCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeathTransferListCmd_descriptor_;
  metadata.reflection = DeathTransferListCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewDeathTransferCmd::kCmdFieldNumber;
const int NewDeathTransferCmd::kParamFieldNumber;
const int NewDeathTransferCmd::kNpcIdFieldNumber;
#endif  // !_MSC_VER

NewDeathTransferCmd::NewDeathTransferCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewDeathTransferCmd)
}

void NewDeathTransferCmd::InitAsDefaultInstance() {
}

NewDeathTransferCmd::NewDeathTransferCmd(const NewDeathTransferCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewDeathTransferCmd)
}

void NewDeathTransferCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 152;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewDeathTransferCmd::~NewDeathTransferCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NewDeathTransferCmd)
  SharedDtor();
}

void NewDeathTransferCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewDeathTransferCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewDeathTransferCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewDeathTransferCmd_descriptor_;
}

const NewDeathTransferCmd& NewDeathTransferCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewDeathTransferCmd* NewDeathTransferCmd::default_instance_ = NULL;

NewDeathTransferCmd* NewDeathTransferCmd::New() const {
  return new NewDeathTransferCmd;
}

void NewDeathTransferCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 152;
    npcid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewDeathTransferCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewDeathTransferCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcId;
        break;
      }

      // optional uint32 npcId = 3;
      case 3: {
        if (tag == 24) {
         parse_npcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewDeathTransferCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewDeathTransferCmd)
  return false;
#undef DO_
}

void NewDeathTransferCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewDeathTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 npcId = 3;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewDeathTransferCmd)
}

::google::protobuf::uint8* NewDeathTransferCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewDeathTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 npcId = 3;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewDeathTransferCmd)
  return target;
}

int NewDeathTransferCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_DEATH_TRANSFER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 npcId = 3;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewDeathTransferCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewDeathTransferCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewDeathTransferCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewDeathTransferCmd::MergeFrom(const NewDeathTransferCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewDeathTransferCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewDeathTransferCmd::CopyFrom(const NewDeathTransferCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewDeathTransferCmd::IsInitialized() const {

  return true;
}

void NewDeathTransferCmd::Swap(NewDeathTransferCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewDeathTransferCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewDeathTransferCmd_descriptor_;
  metadata.reflection = NewDeathTransferCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseDeathTransferCmd::kCmdFieldNumber;
const int UseDeathTransferCmd::kParamFieldNumber;
const int UseDeathTransferCmd::kFromNpcIdFieldNumber;
const int UseDeathTransferCmd::kToNpcIdFieldNumber;
#endif  // !_MSC_VER

UseDeathTransferCmd::UseDeathTransferCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UseDeathTransferCmd)
}

void UseDeathTransferCmd::InitAsDefaultInstance() {
}

UseDeathTransferCmd::UseDeathTransferCmd(const UseDeathTransferCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UseDeathTransferCmd)
}

void UseDeathTransferCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 153;
  fromnpcid_ = 0u;
  tonpcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseDeathTransferCmd::~UseDeathTransferCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UseDeathTransferCmd)
  SharedDtor();
}

void UseDeathTransferCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseDeathTransferCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseDeathTransferCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseDeathTransferCmd_descriptor_;
}

const UseDeathTransferCmd& UseDeathTransferCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UseDeathTransferCmd* UseDeathTransferCmd::default_instance_ = NULL;

UseDeathTransferCmd* UseDeathTransferCmd::New() const {
  return new UseDeathTransferCmd;
}

void UseDeathTransferCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UseDeathTransferCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(fromnpcid_, tonpcid_);
    cmd_ = 9;
    param_ = 153;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseDeathTransferCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UseDeathTransferCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fromNpcId;
        break;
      }

      // optional uint32 fromNpcId = 3;
      case 3: {
        if (tag == 24) {
         parse_fromNpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromnpcid_)));
          set_has_fromnpcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_toNpcId;
        break;
      }

      // optional uint32 toNpcId = 4;
      case 4: {
        if (tag == 32) {
         parse_toNpcId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tonpcid_)));
          set_has_tonpcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UseDeathTransferCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UseDeathTransferCmd)
  return false;
#undef DO_
}

void UseDeathTransferCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UseDeathTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 fromNpcId = 3;
  if (has_fromnpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->fromnpcid(), output);
  }

  // optional uint32 toNpcId = 4;
  if (has_tonpcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tonpcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UseDeathTransferCmd)
}

::google::protobuf::uint8* UseDeathTransferCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UseDeathTransferCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 fromNpcId = 3;
  if (has_fromnpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->fromnpcid(), target);
  }

  // optional uint32 toNpcId = 4;
  if (has_tonpcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tonpcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UseDeathTransferCmd)
  return target;
}

int UseDeathTransferCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 fromNpcId = 3;
    if (has_fromnpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromnpcid());
    }

    // optional uint32 toNpcId = 4;
    if (has_tonpcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tonpcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseDeathTransferCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseDeathTransferCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseDeathTransferCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseDeathTransferCmd::MergeFrom(const UseDeathTransferCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_fromnpcid()) {
      set_fromnpcid(from.fromnpcid());
    }
    if (from.has_tonpcid()) {
      set_tonpcid(from.tonpcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseDeathTransferCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseDeathTransferCmd::CopyFrom(const UseDeathTransferCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseDeathTransferCmd::IsInitialized() const {

  return true;
}

void UseDeathTransferCmd::Swap(UseDeathTransferCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(fromnpcid_, other->fromnpcid_);
    std::swap(tonpcid_, other->tonpcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseDeathTransferCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseDeathTransferCmd_descriptor_;
  metadata.reflection = UseDeathTransferCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FollowerUser::kCmdFieldNumber;
const int FollowerUser::kParamFieldNumber;
const int FollowerUser::kUseridFieldNumber;
const int FollowerUser::kETypeFieldNumber;
#endif  // !_MSC_VER

FollowerUser::FollowerUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FollowerUser)
}

void FollowerUser::InitAsDefaultInstance() {
}

FollowerUser::FollowerUser(const FollowerUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FollowerUser)
}

void FollowerUser::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 53;
  userid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FollowerUser::~FollowerUser() {
  // @@protoc_insertion_point(destructor:Cmd.FollowerUser)
  SharedDtor();
}

void FollowerUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FollowerUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FollowerUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FollowerUser_descriptor_;
}

const FollowerUser& FollowerUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

FollowerUser* FollowerUser::default_instance_ = NULL;

FollowerUser* FollowerUser::New() const {
  return new FollowerUser;
}

void FollowerUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FollowerUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, etype_);
    cmd_ = 9;
    param_ = 53;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FollowerUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FollowerUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eType;
        break;
      }

      // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFollowType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EFollowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FollowerUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FollowerUser)
  return false;
#undef DO_
}

void FollowerUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FollowerUser)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FollowerUser)
}

::google::protobuf::uint8* FollowerUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FollowerUser)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FollowerUser)
  return target;
}

int FollowerUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOLLOWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FollowerUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FollowerUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FollowerUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FollowerUser::MergeFrom(const FollowerUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FollowerUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FollowerUser::CopyFrom(const FollowerUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowerUser::IsInitialized() const {

  return true;
}

void FollowerUser::Swap(FollowerUser* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FollowerUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FollowerUser_descriptor_;
  metadata.reflection = FollowerUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeFollowUserCmd::kCmdFieldNumber;
const int BeFollowUserCmd::kParamFieldNumber;
const int BeFollowUserCmd::kUseridFieldNumber;
const int BeFollowUserCmd::kETypeFieldNumber;
#endif  // !_MSC_VER

BeFollowUserCmd::BeFollowUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BeFollowUserCmd)
}

void BeFollowUserCmd::InitAsDefaultInstance() {
}

BeFollowUserCmd::BeFollowUserCmd(const BeFollowUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BeFollowUserCmd)
}

void BeFollowUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 96;
  userid_ = GOOGLE_ULONGLONG(0);
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeFollowUserCmd::~BeFollowUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BeFollowUserCmd)
  SharedDtor();
}

void BeFollowUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeFollowUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeFollowUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeFollowUserCmd_descriptor_;
}

const BeFollowUserCmd& BeFollowUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BeFollowUserCmd* BeFollowUserCmd::default_instance_ = NULL;

BeFollowUserCmd* BeFollowUserCmd::New() const {
  return new BeFollowUserCmd;
}

void BeFollowUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BeFollowUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(userid_, etype_);
    cmd_ = 9;
    param_ = 96;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeFollowUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BeFollowUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_eType;
        break;
      }

      // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFollowType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EFollowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BeFollowUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BeFollowUserCmd)
  return false;
#undef DO_
}

void BeFollowUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BeFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BeFollowUserCmd)
}

::google::protobuf::uint8* BeFollowUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BeFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BeFollowUserCmd)
  return target;
}

int BeFollowUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BEFOLLOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional .Cmd.EFollowType eType = 4 [default = EFOLLOWTYPE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeFollowUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeFollowUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeFollowUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeFollowUserCmd::MergeFrom(const BeFollowUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeFollowUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeFollowUserCmd::CopyFrom(const BeFollowUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeFollowUserCmd::IsInitialized() const {

  return true;
}

void BeFollowUserCmd::Swap(BeFollowUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeFollowUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeFollowUserCmd_descriptor_;
  metadata.reflection = BeFollowUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LaboratoryUserCmd::kCmdFieldNumber;
const int LaboratoryUserCmd::kParamFieldNumber;
const int LaboratoryUserCmd::kRoundFieldNumber;
const int LaboratoryUserCmd::kCurscoreFieldNumber;
const int LaboratoryUserCmd::kMaxscoreFieldNumber;
#endif  // !_MSC_VER

LaboratoryUserCmd::LaboratoryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LaboratoryUserCmd)
}

void LaboratoryUserCmd::InitAsDefaultInstance() {
}

LaboratoryUserCmd::LaboratoryUserCmd(const LaboratoryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LaboratoryUserCmd)
}

void LaboratoryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 54;
  round_ = 0u;
  curscore_ = 0u;
  maxscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LaboratoryUserCmd::~LaboratoryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LaboratoryUserCmd)
  SharedDtor();
}

void LaboratoryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LaboratoryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaboratoryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LaboratoryUserCmd_descriptor_;
}

const LaboratoryUserCmd& LaboratoryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

LaboratoryUserCmd* LaboratoryUserCmd::default_instance_ = NULL;

LaboratoryUserCmd* LaboratoryUserCmd::New() const {
  return new LaboratoryUserCmd;
}

void LaboratoryUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LaboratoryUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(round_, maxscore_);
    cmd_ = 9;
    param_ = 54;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LaboratoryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LaboratoryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_round;
        break;
      }

      // optional uint32 round = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_curscore;
        break;
      }

      // optional uint32 curscore = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_curscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curscore_)));
          set_has_curscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxscore;
        break;
      }

      // optional uint32 maxscore = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxscore_)));
          set_has_maxscore();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LaboratoryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LaboratoryUserCmd)
  return false;
#undef DO_
}

void LaboratoryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LaboratoryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 round = 3 [default = 0];
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->round(), output);
  }

  // optional uint32 curscore = 4 [default = 0];
  if (has_curscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curscore(), output);
  }

  // optional uint32 maxscore = 5 [default = 0];
  if (has_maxscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LaboratoryUserCmd)
}

::google::protobuf::uint8* LaboratoryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LaboratoryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 round = 3 [default = 0];
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->round(), target);
  }

  // optional uint32 curscore = 4 [default = 0];
  if (has_curscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curscore(), target);
  }

  // optional uint32 maxscore = 5 [default = 0];
  if (has_maxscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LaboratoryUserCmd)
  return target;
}

int LaboratoryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LABORATORY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 round = 3 [default = 0];
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint32 curscore = 4 [default = 0];
    if (has_curscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curscore());
    }

    // optional uint32 maxscore = 5 [default = 0];
    if (has_maxscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaboratoryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LaboratoryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LaboratoryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LaboratoryUserCmd::MergeFrom(const LaboratoryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_curscore()) {
      set_curscore(from.curscore());
    }
    if (from.has_maxscore()) {
      set_maxscore(from.maxscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LaboratoryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaboratoryUserCmd::CopyFrom(const LaboratoryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaboratoryUserCmd::IsInitialized() const {

  return true;
}

void LaboratoryUserCmd::Swap(LaboratoryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(round_, other->round_);
    std::swap(curscore_, other->curscore_);
    std::swap(maxscore_, other->maxscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LaboratoryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LaboratoryUserCmd_descriptor_;
  metadata.reflection = LaboratoryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GotoLaboratoryUserCmd::kCmdFieldNumber;
const int GotoLaboratoryUserCmd::kParamFieldNumber;
const int GotoLaboratoryUserCmd::kFunidFieldNumber;
#endif  // !_MSC_VER

GotoLaboratoryUserCmd::GotoLaboratoryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GotoLaboratoryUserCmd)
}

void GotoLaboratoryUserCmd::InitAsDefaultInstance() {
}

GotoLaboratoryUserCmd::GotoLaboratoryUserCmd(const GotoLaboratoryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GotoLaboratoryUserCmd)
}

void GotoLaboratoryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 57;
  funid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GotoLaboratoryUserCmd::~GotoLaboratoryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GotoLaboratoryUserCmd)
  SharedDtor();
}

void GotoLaboratoryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GotoLaboratoryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GotoLaboratoryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GotoLaboratoryUserCmd_descriptor_;
}

const GotoLaboratoryUserCmd& GotoLaboratoryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GotoLaboratoryUserCmd* GotoLaboratoryUserCmd::default_instance_ = NULL;

GotoLaboratoryUserCmd* GotoLaboratoryUserCmd::New() const {
  return new GotoLaboratoryUserCmd;
}

void GotoLaboratoryUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 57;
    funid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GotoLaboratoryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GotoLaboratoryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_funid;
        break;
      }

      // optional uint32 funid = 3;
      case 3: {
        if (tag == 24) {
         parse_funid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GotoLaboratoryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GotoLaboratoryUserCmd)
  return false;
#undef DO_
}

void GotoLaboratoryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GotoLaboratoryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 funid = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GotoLaboratoryUserCmd)
}

::google::protobuf::uint8* GotoLaboratoryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GotoLaboratoryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 funid = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GotoLaboratoryUserCmd)
  return target;
}

int GotoLaboratoryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_LABORATORY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 funid = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GotoLaboratoryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GotoLaboratoryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GotoLaboratoryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GotoLaboratoryUserCmd::MergeFrom(const GotoLaboratoryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GotoLaboratoryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GotoLaboratoryUserCmd::CopyFrom(const GotoLaboratoryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GotoLaboratoryUserCmd::IsInitialized() const {

  return true;
}

void GotoLaboratoryUserCmd::Swap(GotoLaboratoryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(funid_, other->funid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GotoLaboratoryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GotoLaboratoryUserCmd_descriptor_;
  metadata.reflection = GotoLaboratoryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeProfession::kCmdFieldNumber;
const int ExchangeProfession::kParamFieldNumber;
const int ExchangeProfession::kGuidFieldNumber;
const int ExchangeProfession::kDatasFieldNumber;
const int ExchangeProfession::kAttrsFieldNumber;
const int ExchangeProfession::kPointattrsFieldNumber;
const int ExchangeProfession::kTypeFieldNumber;
#endif  // !_MSC_VER

ExchangeProfession::ExchangeProfession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeProfession)
}

void ExchangeProfession::InitAsDefaultInstance() {
}

ExchangeProfession::ExchangeProfession(const ExchangeProfession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeProfession)
}

void ExchangeProfession::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 56;
  guid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeProfession::~ExchangeProfession() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeProfession)
  SharedDtor();
}

void ExchangeProfession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeProfession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeProfession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeProfession_descriptor_;
}

const ExchangeProfession& ExchangeProfession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ExchangeProfession* ExchangeProfession::default_instance_ = NULL;

ExchangeProfession* ExchangeProfession::New() const {
  return new ExchangeProfession;
}

void ExchangeProfession::Clear() {
  if (_has_bits_[0 / 32] & 71) {
    cmd_ = 9;
    param_ = 56;
    guid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  datas_.Clear();
  attrs_.Clear();
  pointattrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeProfession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeProfession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 4;
      case 4: {
        if (tag == 34) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_datas;
        if (input->ExpectTag(42)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 5;
      case 5: {
        if (tag == 42) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_attrs;
        if (input->ExpectTag(50)) goto parse_pointattrs;
        break;
      }

      // repeated .Cmd.UserAttr pointattrs = 6;
      case 6: {
        if (tag == 50) {
         parse_pointattrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointattrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_pointattrs;
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }

      // optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
      case 7: {
        if (tag == 56) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfressionDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EProfressionDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeProfession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeProfession)
  return false;
#undef DO_
}

void ExchangeProfession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeProfession)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  // repeated .Cmd.UserData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attrs(i), output);
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  for (int i = 0; i < this->pointattrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pointattrs(i), output);
  }

  // optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeProfession)
}

::google::protobuf::uint8* ExchangeProfession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeProfession)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  // repeated .Cmd.UserData datas = 4;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 5;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attrs(i), target);
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  for (int i = 0; i < this->pointattrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pointattrs(i), target);
  }

  // optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeProfession)
  return target;
}

int ExchangeProfession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_EXCHANGEPROFESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

    // optional .Cmd.EProfressionDataType type = 7 [default = ETypeAdvance];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .Cmd.UserData datas = 4;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 5;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.UserAttr pointattrs = 6;
  total_size += 1 * this->pointattrs_size();
  for (int i = 0; i < this->pointattrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointattrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeProfession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeProfession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeProfession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeProfession::MergeFrom(const ExchangeProfession& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  pointattrs_.MergeFrom(from.pointattrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeProfession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeProfession::CopyFrom(const ExchangeProfession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeProfession::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pointattrs())) return false;
  return true;
}

void ExchangeProfession::Swap(ExchangeProfession* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    pointattrs_.Swap(&other->pointattrs_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeProfession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeProfession_descriptor_;
  metadata.reflection = ExchangeProfession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Scenery::kSceneryidFieldNumber;
const int Scenery::kAnglezFieldNumber;
const int Scenery::kCharidFieldNumber;
#endif  // !_MSC_VER

Scenery::Scenery()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Scenery)
}

void Scenery::InitAsDefaultInstance() {
}

Scenery::Scenery(const Scenery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Scenery)
}

void Scenery::SharedCtor() {
  _cached_size_ = 0;
  sceneryid_ = 0u;
  anglez_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scenery::~Scenery() {
  // @@protoc_insertion_point(destructor:Cmd.Scenery)
  SharedDtor();
}

void Scenery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Scenery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scenery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scenery_descriptor_;
}

const Scenery& Scenery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

Scenery* Scenery::default_instance_ = NULL;

Scenery* Scenery::New() const {
  return new Scenery;
}

void Scenery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Scenery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(sceneryid_, charid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Scenery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Scenery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sceneryid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneryid_)));
          set_has_sceneryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Scenery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Scenery)
  return false;
#undef DO_
}

void Scenery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Scenery)
  // optional uint32 sceneryid = 1 [default = 0];
  if (has_sceneryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sceneryid(), output);
  }

  // optional uint32 anglez = 2 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->anglez(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Scenery)
}

::google::protobuf::uint8* Scenery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Scenery)
  // optional uint32 sceneryid = 1 [default = 0];
  if (has_sceneryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sceneryid(), target);
  }

  // optional uint32 anglez = 2 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->anglez(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Scenery)
  return target;
}

int Scenery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sceneryid = 1 [default = 0];
    if (has_sceneryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneryid());
    }

    // optional uint32 anglez = 2 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scenery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Scenery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Scenery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Scenery::MergeFrom(const Scenery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sceneryid()) {
      set_sceneryid(from.sceneryid());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Scenery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scenery::CopyFrom(const Scenery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scenery::IsInitialized() const {

  return true;
}

void Scenery::Swap(Scenery* other) {
  if (other != this) {
    std::swap(sceneryid_, other->sceneryid_);
    std::swap(anglez_, other->anglez_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Scenery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scenery_descriptor_;
  metadata.reflection = Scenery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SceneryUserCmd::kCmdFieldNumber;
const int SceneryUserCmd::kParamFieldNumber;
const int SceneryUserCmd::kMapidFieldNumber;
const int SceneryUserCmd::kScenerysFieldNumber;
#endif  // !_MSC_VER

SceneryUserCmd::SceneryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SceneryUserCmd)
}

void SceneryUserCmd::InitAsDefaultInstance() {
}

SceneryUserCmd::SceneryUserCmd(const SceneryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SceneryUserCmd)
}

void SceneryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 58;
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SceneryUserCmd::~SceneryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SceneryUserCmd)
  SharedDtor();
}

void SceneryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SceneryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SceneryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SceneryUserCmd_descriptor_;
}

const SceneryUserCmd& SceneryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SceneryUserCmd* SceneryUserCmd::default_instance_ = NULL;

SceneryUserCmd* SceneryUserCmd::New() const {
  return new SceneryUserCmd;
}

void SceneryUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 58;
    mapid_ = 0u;
  }
  scenerys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SceneryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SceneryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scenerys;
        break;
      }

      // repeated .Cmd.Scenery scenerys = 4;
      case 4: {
        if (tag == 34) {
         parse_scenerys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scenerys()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_scenerys;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SceneryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SceneryUserCmd)
  return false;
#undef DO_
}

void SceneryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SceneryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // repeated .Cmd.Scenery scenerys = 4;
  for (int i = 0; i < this->scenerys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->scenerys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SceneryUserCmd)
}

::google::protobuf::uint8* SceneryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SceneryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // repeated .Cmd.Scenery scenerys = 4;
  for (int i = 0; i < this->scenerys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->scenerys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SceneryUserCmd)
  return target;
}

int SceneryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SCENERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  // repeated .Cmd.Scenery scenerys = 4;
  total_size += 1 * this->scenerys_size();
  for (int i = 0; i < this->scenerys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scenerys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SceneryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SceneryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SceneryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SceneryUserCmd::MergeFrom(const SceneryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  scenerys_.MergeFrom(from.scenerys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SceneryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SceneryUserCmd::CopyFrom(const SceneryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SceneryUserCmd::IsInitialized() const {

  return true;
}

void SceneryUserCmd::Swap(SceneryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    scenerys_.Swap(&other->scenerys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SceneryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SceneryUserCmd_descriptor_;
  metadata.reflection = SceneryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoMapQuestUserCmd::kCmdFieldNumber;
const int GoMapQuestUserCmd::kParamFieldNumber;
const int GoMapQuestUserCmd::kQuestidFieldNumber;
#endif  // !_MSC_VER

GoMapQuestUserCmd::GoMapQuestUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoMapQuestUserCmd)
}

void GoMapQuestUserCmd::InitAsDefaultInstance() {
}

GoMapQuestUserCmd::GoMapQuestUserCmd(const GoMapQuestUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoMapQuestUserCmd)
}

void GoMapQuestUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 59;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoMapQuestUserCmd::~GoMapQuestUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoMapQuestUserCmd)
  SharedDtor();
}

void GoMapQuestUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoMapQuestUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoMapQuestUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoMapQuestUserCmd_descriptor_;
}

const GoMapQuestUserCmd& GoMapQuestUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoMapQuestUserCmd* GoMapQuestUserCmd::default_instance_ = NULL;

GoMapQuestUserCmd* GoMapQuestUserCmd::New() const {
  return new GoMapQuestUserCmd;
}

void GoMapQuestUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 59;
    questid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoMapQuestUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoMapQuestUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_questid;
        break;
      }

      // optional uint32 questid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoMapQuestUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoMapQuestUserCmd)
  return false;
#undef DO_
}

void GoMapQuestUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoMapQuestUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoMapQuestUserCmd)
}

::google::protobuf::uint8* GoMapQuestUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoMapQuestUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 questid = 3 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoMapQuestUserCmd)
  return target;
}

int GoMapQuestUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_QUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 questid = 3 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoMapQuestUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoMapQuestUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoMapQuestUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoMapQuestUserCmd::MergeFrom(const GoMapQuestUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoMapQuestUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoMapQuestUserCmd::CopyFrom(const GoMapQuestUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoMapQuestUserCmd::IsInitialized() const {

  return true;
}

void GoMapQuestUserCmd::Swap(GoMapQuestUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoMapQuestUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoMapQuestUserCmd_descriptor_;
  metadata.reflection = GoMapQuestUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoMapFollowUserCmd::kCmdFieldNumber;
const int GoMapFollowUserCmd::kParamFieldNumber;
const int GoMapFollowUserCmd::kMapidFieldNumber;
const int GoMapFollowUserCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

GoMapFollowUserCmd::GoMapFollowUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoMapFollowUserCmd)
}

void GoMapFollowUserCmd::InitAsDefaultInstance() {
}

GoMapFollowUserCmd::GoMapFollowUserCmd(const GoMapFollowUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoMapFollowUserCmd)
}

void GoMapFollowUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 60;
  mapid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoMapFollowUserCmd::~GoMapFollowUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoMapFollowUserCmd)
  SharedDtor();
}

void GoMapFollowUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoMapFollowUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoMapFollowUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoMapFollowUserCmd_descriptor_;
}

const GoMapFollowUserCmd& GoMapFollowUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoMapFollowUserCmd* GoMapFollowUserCmd::default_instance_ = NULL;

GoMapFollowUserCmd* GoMapFollowUserCmd::New() const {
  return new GoMapFollowUserCmd;
}

void GoMapFollowUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoMapFollowUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, mapid_);
    cmd_ = 9;
    param_ = 60;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoMapFollowUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoMapFollowUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoMapFollowUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoMapFollowUserCmd)
  return false;
#undef DO_
}

void GoMapFollowUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoMapFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoMapFollowUserCmd)
}

::google::protobuf::uint8* GoMapFollowUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoMapFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoMapFollowUserCmd)
  return target;
}

int GoMapFollowUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOMAP_FOLLOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoMapFollowUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoMapFollowUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoMapFollowUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoMapFollowUserCmd::MergeFrom(const GoMapFollowUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoMapFollowUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoMapFollowUserCmd::CopyFrom(const GoMapFollowUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoMapFollowUserCmd::IsInitialized() const {

  return true;
}

void GoMapFollowUserCmd::Swap(GoMapFollowUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoMapFollowUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoMapFollowUserCmd_descriptor_;
  metadata.reflection = GoMapFollowUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAutoHitCmd::kCmdFieldNumber;
const int UserAutoHitCmd::kParamFieldNumber;
const int UserAutoHitCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

UserAutoHitCmd::UserAutoHitCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAutoHitCmd)
}

void UserAutoHitCmd::InitAsDefaultInstance() {
}

UserAutoHitCmd::UserAutoHitCmd(const UserAutoHitCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAutoHitCmd)
}

void UserAutoHitCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 61;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAutoHitCmd::~UserAutoHitCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserAutoHitCmd)
  SharedDtor();
}

void UserAutoHitCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAutoHitCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAutoHitCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAutoHitCmd_descriptor_;
}

const UserAutoHitCmd& UserAutoHitCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserAutoHitCmd* UserAutoHitCmd::default_instance_ = NULL;

UserAutoHitCmd* UserAutoHitCmd::New() const {
  return new UserAutoHitCmd;
}

void UserAutoHitCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 61;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAutoHitCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAutoHitCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAutoHitCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAutoHitCmd)
  return false;
#undef DO_
}

void UserAutoHitCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAutoHitCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAutoHitCmd)
}

::google::protobuf::uint8* UserAutoHitCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAutoHitCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAutoHitCmd)
  return target;
}

int UserAutoHitCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_AUTOHIT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAutoHitCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAutoHitCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAutoHitCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAutoHitCmd::MergeFrom(const UserAutoHitCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAutoHitCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAutoHitCmd::CopyFrom(const UserAutoHitCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAutoHitCmd::IsInitialized() const {

  return true;
}

void UserAutoHitCmd::Swap(UserAutoHitCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAutoHitCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAutoHitCmd_descriptor_;
  metadata.reflection = UserAutoHitCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadSceneryPhotoUserCmd::kCmdFieldNumber;
const int UploadSceneryPhotoUserCmd::kParamFieldNumber;
const int UploadSceneryPhotoUserCmd::kTypeFieldNumber;
const int UploadSceneryPhotoUserCmd::kSceneryidFieldNumber;
const int UploadSceneryPhotoUserCmd::kPolicyFieldNumber;
const int UploadSceneryPhotoUserCmd::kSignatureFieldNumber;
#endif  // !_MSC_VER

UploadSceneryPhotoUserCmd::UploadSceneryPhotoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UploadSceneryPhotoUserCmd)
}

void UploadSceneryPhotoUserCmd::InitAsDefaultInstance() {
}

UploadSceneryPhotoUserCmd::UploadSceneryPhotoUserCmd(const UploadSceneryPhotoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UploadSceneryPhotoUserCmd)
}

void UploadSceneryPhotoUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 62;
  type_ = 1;
  sceneryid_ = 0u;
  policy_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadSceneryPhotoUserCmd::~UploadSceneryPhotoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UploadSceneryPhotoUserCmd)
  SharedDtor();
}

void UploadSceneryPhotoUserCmd::SharedDtor() {
  if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete policy_;
  }
  if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete signature_;
  }
  if (this != default_instance_) {
  }
}

void UploadSceneryPhotoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadSceneryPhotoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadSceneryPhotoUserCmd_descriptor_;
}

const UploadSceneryPhotoUserCmd& UploadSceneryPhotoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UploadSceneryPhotoUserCmd* UploadSceneryPhotoUserCmd::default_instance_ = NULL;

UploadSceneryPhotoUserCmd* UploadSceneryPhotoUserCmd::New() const {
  return new UploadSceneryPhotoUserCmd;
}

void UploadSceneryPhotoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 9;
    param_ = 62;
    type_ = 1;
    sceneryid_ = 0u;
    if (has_policy()) {
      if (policy_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        policy_->clear();
      }
    }
    if (has_signature()) {
      if (signature_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        signature_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadSceneryPhotoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UploadSceneryPhotoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAlbumType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAlbumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneryid;
        break;
      }

      // optional uint32 sceneryid = 4;
      case 4: {
        if (tag == 32) {
         parse_sceneryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneryid_)));
          set_has_sceneryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_policy;
        break;
      }

      // optional string policy = 5;
      case 5: {
        if (tag == 42) {
         parse_policy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_policy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy().data(), this->policy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "policy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_signature;
        break;
      }

      // optional string signature = 6;
      case 6: {
        if (tag == 50) {
         parse_signature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signature()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->signature().data(), this->signature().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "signature");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UploadSceneryPhotoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UploadSceneryPhotoUserCmd)
  return false;
#undef DO_
}

void UploadSceneryPhotoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UploadSceneryPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 sceneryid = 4;
  if (has_sceneryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneryid(), output);
  }

  // optional string policy = 5;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->policy(), output);
  }

  // optional string signature = 6;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->signature(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UploadSceneryPhotoUserCmd)
}

::google::protobuf::uint8* UploadSceneryPhotoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UploadSceneryPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 sceneryid = 4;
  if (has_sceneryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneryid(), target);
  }

  // optional string policy = 5;
  if (has_policy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy().data(), this->policy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "policy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->policy(), target);
  }

  // optional string signature = 6;
  if (has_signature()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->signature().data(), this->signature().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "signature");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->signature(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UploadSceneryPhotoUserCmd)
  return target;
}

int UploadSceneryPhotoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_SCENERY_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EAlbumType type = 3 [default = EALBUMTYPE_SCENERY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 sceneryid = 4;
    if (has_sceneryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneryid());
    }

    // optional string policy = 5;
    if (has_policy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->policy());
    }

    // optional string signature = 6;
    if (has_signature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->signature());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadSceneryPhotoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadSceneryPhotoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadSceneryPhotoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadSceneryPhotoUserCmd::MergeFrom(const UploadSceneryPhotoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sceneryid()) {
      set_sceneryid(from.sceneryid());
    }
    if (from.has_policy()) {
      set_policy(from.policy());
    }
    if (from.has_signature()) {
      set_signature(from.signature());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadSceneryPhotoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadSceneryPhotoUserCmd::CopyFrom(const UploadSceneryPhotoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadSceneryPhotoUserCmd::IsInitialized() const {

  return true;
}

void UploadSceneryPhotoUserCmd::Swap(UploadSceneryPhotoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(sceneryid_, other->sceneryid_);
    std::swap(policy_, other->policy_);
    std::swap(signature_, other->signature_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadSceneryPhotoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadSceneryPhotoUserCmd_descriptor_;
  metadata.reflection = UploadSceneryPhotoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpyunUrl::kTypeFieldNumber;
const int UpyunUrl::kCharUrlFieldNumber;
const int UpyunUrl::kAccUrlFieldNumber;
#endif  // !_MSC_VER

UpyunUrl::UpyunUrl()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpyunUrl)
}

void UpyunUrl::InitAsDefaultInstance() {
}

UpyunUrl::UpyunUrl(const UpyunUrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpyunUrl)
}

void UpyunUrl::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  char_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  acc_url_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpyunUrl::~UpyunUrl() {
  // @@protoc_insertion_point(destructor:Cmd.UpyunUrl)
  SharedDtor();
}

void UpyunUrl::SharedDtor() {
  if (char_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete char_url_;
  }
  if (acc_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete acc_url_;
  }
  if (this != default_instance_) {
  }
}

void UpyunUrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpyunUrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpyunUrl_descriptor_;
}

const UpyunUrl& UpyunUrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpyunUrl* UpyunUrl::default_instance_ = NULL;

UpyunUrl* UpyunUrl::New() const {
  return new UpyunUrl;
}

void UpyunUrl::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = 1;
    if (has_char_url()) {
      if (char_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        char_url_->clear();
      }
    }
    if (has_acc_url()) {
      if (acc_url_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        acc_url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpyunUrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpyunUrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAlbumType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAlbumType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_char_url;
        break;
      }

      // optional string char_url = 2;
      case 2: {
        if (tag == 18) {
         parse_char_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_char_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->char_url().data(), this->char_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "char_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_acc_url;
        break;
      }

      // optional string acc_url = 3;
      case 3: {
        if (tag == 26) {
         parse_acc_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acc_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->acc_url().data(), this->acc_url().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "acc_url");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpyunUrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpyunUrl)
  return false;
#undef DO_
}

void UpyunUrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpyunUrl)
  // optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional string char_url = 2;
  if (has_char_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->char_url().data(), this->char_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "char_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->char_url(), output);
  }

  // optional string acc_url = 3;
  if (has_acc_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_url().data(), this->acc_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->acc_url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpyunUrl)
}

::google::protobuf::uint8* UpyunUrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpyunUrl)
  // optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional string char_url = 2;
  if (has_char_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->char_url().data(), this->char_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "char_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->char_url(), target);
  }

  // optional string acc_url = 3;
  if (has_acc_url()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->acc_url().data(), this->acc_url().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "acc_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->acc_url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpyunUrl)
  return target;
}

int UpyunUrl::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EAlbumType type = 1 [default = EALBUMTYPE_SCENERY];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string char_url = 2;
    if (has_char_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->char_url());
    }

    // optional string acc_url = 3;
    if (has_acc_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acc_url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpyunUrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpyunUrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpyunUrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpyunUrl::MergeFrom(const UpyunUrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_char_url()) {
      set_char_url(from.char_url());
    }
    if (from.has_acc_url()) {
      set_acc_url(from.acc_url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpyunUrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpyunUrl::CopyFrom(const UpyunUrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpyunUrl::IsInitialized() const {

  return true;
}

void UpyunUrl::Swap(UpyunUrl* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(char_url_, other->char_url_);
    std::swap(acc_url_, other->acc_url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpyunUrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpyunUrl_descriptor_;
  metadata.reflection = UpyunUrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DownloadSceneryPhotoUserCmd::kCmdFieldNumber;
const int DownloadSceneryPhotoUserCmd::kParamFieldNumber;
const int DownloadSceneryPhotoUserCmd::kUrlsFieldNumber;
#endif  // !_MSC_VER

DownloadSceneryPhotoUserCmd::DownloadSceneryPhotoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DownloadSceneryPhotoUserCmd)
}

void DownloadSceneryPhotoUserCmd::InitAsDefaultInstance() {
}

DownloadSceneryPhotoUserCmd::DownloadSceneryPhotoUserCmd(const DownloadSceneryPhotoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DownloadSceneryPhotoUserCmd)
}

void DownloadSceneryPhotoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 80;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadSceneryPhotoUserCmd::~DownloadSceneryPhotoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DownloadSceneryPhotoUserCmd)
  SharedDtor();
}

void DownloadSceneryPhotoUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DownloadSceneryPhotoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadSceneryPhotoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadSceneryPhotoUserCmd_descriptor_;
}

const DownloadSceneryPhotoUserCmd& DownloadSceneryPhotoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DownloadSceneryPhotoUserCmd* DownloadSceneryPhotoUserCmd::default_instance_ = NULL;

DownloadSceneryPhotoUserCmd* DownloadSceneryPhotoUserCmd::New() const {
  return new DownloadSceneryPhotoUserCmd;
}

void DownloadSceneryPhotoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 80;
  }
  urls_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadSceneryPhotoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DownloadSceneryPhotoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        break;
      }

      // repeated .Cmd.UpyunUrl urls = 3;
      case 3: {
        if (tag == 26) {
         parse_urls:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_urls()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_urls;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DownloadSceneryPhotoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DownloadSceneryPhotoUserCmd)
  return false;
#undef DO_
}

void DownloadSceneryPhotoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DownloadSceneryPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.UpyunUrl urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->urls(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DownloadSceneryPhotoUserCmd)
}

::google::protobuf::uint8* DownloadSceneryPhotoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DownloadSceneryPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.UpyunUrl urls = 3;
  for (int i = 0; i < this->urls_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->urls(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DownloadSceneryPhotoUserCmd)
  return target;
}

int DownloadSceneryPhotoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DOWNLOAD_SCENERY_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.UpyunUrl urls = 3;
  total_size += 1 * this->urls_size();
  for (int i = 0; i < this->urls_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->urls(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadSceneryPhotoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadSceneryPhotoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadSceneryPhotoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadSceneryPhotoUserCmd::MergeFrom(const DownloadSceneryPhotoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  urls_.MergeFrom(from.urls_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadSceneryPhotoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadSceneryPhotoUserCmd::CopyFrom(const DownloadSceneryPhotoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadSceneryPhotoUserCmd::IsInitialized() const {

  return true;
}

void DownloadSceneryPhotoUserCmd::Swap(DownloadSceneryPhotoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    urls_.Swap(&other->urls_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadSceneryPhotoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadSceneryPhotoUserCmd_descriptor_;
  metadata.reflection = DownloadSceneryPhotoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMapArea::kCmdFieldNumber;
const int QueryMapArea::kParamFieldNumber;
const int QueryMapArea::kAreasFieldNumber;
#endif  // !_MSC_VER

QueryMapArea::QueryMapArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryMapArea)
}

void QueryMapArea::InitAsDefaultInstance() {
}

QueryMapArea::QueryMapArea(const QueryMapArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryMapArea)
}

void QueryMapArea::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 63;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMapArea::~QueryMapArea() {
  // @@protoc_insertion_point(destructor:Cmd.QueryMapArea)
  SharedDtor();
}

void QueryMapArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryMapArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMapArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMapArea_descriptor_;
}

const QueryMapArea& QueryMapArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryMapArea* QueryMapArea::default_instance_ = NULL;

QueryMapArea* QueryMapArea::New() const {
  return new QueryMapArea;
}

void QueryMapArea::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 63;
  }
  areas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMapArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryMapArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areas;
        break;
      }

      // repeated uint32 areas = 3;
      case 3: {
        if (tag == 24) {
         parse_areas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_areas())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_areas())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_areas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryMapArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryMapArea)
  return false;
#undef DO_
}

void QueryMapArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryMapArea)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 areas = 3;
  for (int i = 0; i < this->areas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->areas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryMapArea)
}

::google::protobuf::uint8* QueryMapArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryMapArea)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 areas = 3;
  for (int i = 0; i < this->areas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->areas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryMapArea)
  return target;
}

int QueryMapArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_MAPAREA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 areas = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->areas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->areas(i));
    }
    total_size += 1 * this->areas_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMapArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMapArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMapArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMapArea::MergeFrom(const QueryMapArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  areas_.MergeFrom(from.areas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMapArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMapArea::CopyFrom(const QueryMapArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMapArea::IsInitialized() const {

  return true;
}

void QueryMapArea::Swap(QueryMapArea* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    areas_.Swap(&other->areas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMapArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMapArea_descriptor_;
  metadata.reflection = QueryMapArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewMapAreaNtf::kCmdFieldNumber;
const int NewMapAreaNtf::kParamFieldNumber;
const int NewMapAreaNtf::kAreaFieldNumber;
#endif  // !_MSC_VER

NewMapAreaNtf::NewMapAreaNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewMapAreaNtf)
}

void NewMapAreaNtf::InitAsDefaultInstance() {
}

NewMapAreaNtf::NewMapAreaNtf(const NewMapAreaNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewMapAreaNtf)
}

void NewMapAreaNtf::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 64;
  area_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMapAreaNtf::~NewMapAreaNtf() {
  // @@protoc_insertion_point(destructor:Cmd.NewMapAreaNtf)
  SharedDtor();
}

void NewMapAreaNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewMapAreaNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMapAreaNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMapAreaNtf_descriptor_;
}

const NewMapAreaNtf& NewMapAreaNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewMapAreaNtf* NewMapAreaNtf::default_instance_ = NULL;

NewMapAreaNtf* NewMapAreaNtf::New() const {
  return new NewMapAreaNtf;
}

void NewMapAreaNtf::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 64;
    area_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewMapAreaNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewMapAreaNtf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_area;
        break;
      }

      // optional uint32 area = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_area:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_)));
          set_has_area();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewMapAreaNtf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewMapAreaNtf)
  return false;
#undef DO_
}

void NewMapAreaNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewMapAreaNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 area = 3 [default = 0];
  if (has_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->area(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewMapAreaNtf)
}

::google::protobuf::uint8* NewMapAreaNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewMapAreaNtf)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 area = 3 [default = 0];
  if (has_area()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->area(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewMapAreaNtf)
  return target;
}

int NewMapAreaNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_MAPAREA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 area = 3 [default = 0];
    if (has_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMapAreaNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMapAreaNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMapAreaNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewMapAreaNtf::MergeFrom(const NewMapAreaNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_area()) {
      set_area(from.area());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewMapAreaNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMapAreaNtf::CopyFrom(const NewMapAreaNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMapAreaNtf::IsInitialized() const {

  return true;
}

void NewMapAreaNtf::Swap(NewMapAreaNtf* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(area_, other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewMapAreaNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMapAreaNtf_descriptor_;
  metadata.reflection = NewMapAreaNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffForeverCmd::kCmdFieldNumber;
const int BuffForeverCmd::kParamFieldNumber;
const int BuffForeverCmd::kBuffFieldNumber;
#endif  // !_MSC_VER

BuffForeverCmd::BuffForeverCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuffForeverCmd)
}

void BuffForeverCmd::InitAsDefaultInstance() {
}

BuffForeverCmd::BuffForeverCmd(const BuffForeverCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuffForeverCmd)
}

void BuffForeverCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 66;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffForeverCmd::~BuffForeverCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuffForeverCmd)
  SharedDtor();
}

void BuffForeverCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffForeverCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffForeverCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffForeverCmd_descriptor_;
}

const BuffForeverCmd& BuffForeverCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BuffForeverCmd* BuffForeverCmd::default_instance_ = NULL;

BuffForeverCmd* BuffForeverCmd::New() const {
  return new BuffForeverCmd;
}

void BuffForeverCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 66;
  }
  buff_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffForeverCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuffForeverCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        break;
      }

      // repeated .Cmd.BufferData buff = 3;
      case 3: {
        if (tag == 26) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_buff;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuffForeverCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuffForeverCmd)
  return false;
#undef DO_
}

void BuffForeverCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuffForeverCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.BufferData buff = 3;
  for (int i = 0; i < this->buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buff(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuffForeverCmd)
}

::google::protobuf::uint8* BuffForeverCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuffForeverCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.BufferData buff = 3;
  for (int i = 0; i < this->buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buff(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuffForeverCmd)
  return target;
}

int BuffForeverCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_FOREVER_BUFF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.BufferData buff = 3;
  total_size += 1 * this->buff_size();
  for (int i = 0; i < this->buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffForeverCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffForeverCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffForeverCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffForeverCmd::MergeFrom(const BuffForeverCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  buff_.MergeFrom(from.buff_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffForeverCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffForeverCmd::CopyFrom(const BuffForeverCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffForeverCmd::IsInitialized() const {

  return true;
}

void BuffForeverCmd::Swap(BuffForeverCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    buff_.Swap(&other->buff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffForeverCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffForeverCmd_descriptor_;
  metadata.reflection = BuffForeverCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinHandsUserCmd::kCmdFieldNumber;
const int InviteJoinHandsUserCmd::kParamFieldNumber;
const int InviteJoinHandsUserCmd::kCharidFieldNumber;
const int InviteJoinHandsUserCmd::kMasteridFieldNumber;
const int InviteJoinHandsUserCmd::kTimeFieldNumber;
const int InviteJoinHandsUserCmd::kMasternameFieldNumber;
const int InviteJoinHandsUserCmd::kSignFieldNumber;
#endif  // !_MSC_VER

InviteJoinHandsUserCmd::InviteJoinHandsUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteJoinHandsUserCmd)
}

void InviteJoinHandsUserCmd::InitAsDefaultInstance() {
}

InviteJoinHandsUserCmd::InviteJoinHandsUserCmd(const InviteJoinHandsUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteJoinHandsUserCmd)
}

void InviteJoinHandsUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 67;
  charid_ = GOOGLE_ULONGLONG(0);
  masterid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinHandsUserCmd::~InviteJoinHandsUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteJoinHandsUserCmd)
  SharedDtor();
}

void InviteJoinHandsUserCmd::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void InviteJoinHandsUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinHandsUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinHandsUserCmd_descriptor_;
}

const InviteJoinHandsUserCmd& InviteJoinHandsUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

InviteJoinHandsUserCmd* InviteJoinHandsUserCmd::default_instance_ = NULL;

InviteJoinHandsUserCmd* InviteJoinHandsUserCmd::New() const {
  return new InviteJoinHandsUserCmd;
}

void InviteJoinHandsUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteJoinHandsUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(charid_, masterid_);
    cmd_ = 9;
    param_ = 67;
    time_ = 0u;
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinHandsUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteJoinHandsUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mastername;
        break;
      }

      // optional string mastername = 6;
      case 6: {
        if (tag == 50) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional bytes sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteJoinHandsUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteJoinHandsUserCmd)
  return false;
#undef DO_
}

void InviteJoinHandsUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteJoinHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional string mastername = 6;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mastername(), output);
  }

  // optional bytes sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteJoinHandsUserCmd)
}

::google::protobuf::uint8* InviteJoinHandsUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteJoinHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional string mastername = 6;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mastername(), target);
  }

  // optional bytes sign = 7;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteJoinHandsUserCmd)
  return target;
}

int InviteJoinHandsUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_JOIN_HANDS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 masterid = 4 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string mastername = 6;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

    // optional bytes sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinHandsUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinHandsUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinHandsUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinHandsUserCmd::MergeFrom(const InviteJoinHandsUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinHandsUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinHandsUserCmd::CopyFrom(const InviteJoinHandsUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinHandsUserCmd::IsInitialized() const {

  return true;
}

void InviteJoinHandsUserCmd::Swap(InviteJoinHandsUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(masterid_, other->masterid_);
    std::swap(time_, other->time_);
    std::swap(mastername_, other->mastername_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinHandsUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinHandsUserCmd_descriptor_;
  metadata.reflection = InviteJoinHandsUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BreakUpHandsUserCmd::kCmdFieldNumber;
const int BreakUpHandsUserCmd::kParamFieldNumber;
#endif  // !_MSC_VER

BreakUpHandsUserCmd::BreakUpHandsUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BreakUpHandsUserCmd)
}

void BreakUpHandsUserCmd::InitAsDefaultInstance() {
}

BreakUpHandsUserCmd::BreakUpHandsUserCmd(const BreakUpHandsUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BreakUpHandsUserCmd)
}

void BreakUpHandsUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 68;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BreakUpHandsUserCmd::~BreakUpHandsUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BreakUpHandsUserCmd)
  SharedDtor();
}

void BreakUpHandsUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BreakUpHandsUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BreakUpHandsUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BreakUpHandsUserCmd_descriptor_;
}

const BreakUpHandsUserCmd& BreakUpHandsUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BreakUpHandsUserCmd* BreakUpHandsUserCmd::default_instance_ = NULL;

BreakUpHandsUserCmd* BreakUpHandsUserCmd::New() const {
  return new BreakUpHandsUserCmd;
}

void BreakUpHandsUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 68;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BreakUpHandsUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BreakUpHandsUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BreakUpHandsUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BreakUpHandsUserCmd)
  return false;
#undef DO_
}

void BreakUpHandsUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BreakUpHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BreakUpHandsUserCmd)
}

::google::protobuf::uint8* BreakUpHandsUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BreakUpHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BreakUpHandsUserCmd)
  return target;
}

int BreakUpHandsUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BREAK_UP_HANDS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BreakUpHandsUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BreakUpHandsUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BreakUpHandsUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BreakUpHandsUserCmd::MergeFrom(const BreakUpHandsUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BreakUpHandsUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BreakUpHandsUserCmd::CopyFrom(const BreakUpHandsUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BreakUpHandsUserCmd::IsInitialized() const {

  return true;
}

void BreakUpHandsUserCmd::Swap(BreakUpHandsUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BreakUpHandsUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BreakUpHandsUserCmd_descriptor_;
  metadata.reflection = BreakUpHandsUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandStatusUserCmd::kCmdFieldNumber;
const int HandStatusUserCmd::kParamFieldNumber;
const int HandStatusUserCmd::kBuildFieldNumber;
const int HandStatusUserCmd::kMasteridFieldNumber;
const int HandStatusUserCmd::kFollowidFieldNumber;
const int HandStatusUserCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

HandStatusUserCmd::HandStatusUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HandStatusUserCmd)
}

void HandStatusUserCmd::InitAsDefaultInstance() {
}

HandStatusUserCmd::HandStatusUserCmd(const HandStatusUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HandStatusUserCmd)
}

void HandStatusUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 95;
  build_ = true;
  masterid_ = GOOGLE_ULONGLONG(0);
  followid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandStatusUserCmd::~HandStatusUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HandStatusUserCmd)
  SharedDtor();
}

void HandStatusUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandStatusUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandStatusUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandStatusUserCmd_descriptor_;
}

const HandStatusUserCmd& HandStatusUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

HandStatusUserCmd* HandStatusUserCmd::default_instance_ = NULL;

HandStatusUserCmd* HandStatusUserCmd::New() const {
  return new HandStatusUserCmd;
}

void HandStatusUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandStatusUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, followid_);
    cmd_ = 9;
    param_ = 95;
    build_ = true;
    masterid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandStatusUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HandStatusUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_build;
        break;
      }

      // optional bool build = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &build_)));
          set_has_build();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_followid;
        break;
      }

      // optional uint64 followid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_followid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &followid_)));
          set_has_followid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional uint32 type = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HandStatusUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HandStatusUserCmd)
  return false;
#undef DO_
}

void HandStatusUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HandStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool build = 3 [default = true];
  if (has_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->build(), output);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  // optional uint64 followid = 5 [default = 0];
  if (has_followid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->followid(), output);
  }

  // optional uint32 type = 6 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HandStatusUserCmd)
}

::google::protobuf::uint8* HandStatusUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HandStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool build = 3 [default = true];
  if (has_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->build(), target);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  // optional uint64 followid = 5 [default = 0];
  if (has_followid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->followid(), target);
  }

  // optional uint32 type = 6 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HandStatusUserCmd)
  return target;
}

int HandStatusUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_HANDSTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool build = 3 [default = true];
    if (has_build()) {
      total_size += 1 + 1;
    }

    // optional uint64 masterid = 4 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint64 followid = 5 [default = 0];
    if (has_followid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->followid());
    }

    // optional uint32 type = 6 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandStatusUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandStatusUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandStatusUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandStatusUserCmd::MergeFrom(const HandStatusUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_build()) {
      set_build(from.build());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_followid()) {
      set_followid(from.followid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandStatusUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandStatusUserCmd::CopyFrom(const HandStatusUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandStatusUserCmd::IsInitialized() const {

  return true;
}

void HandStatusUserCmd::Swap(HandStatusUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(build_, other->build_);
    std::swap(masterid_, other->masterid_);
    std::swap(followid_, other->followid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandStatusUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandStatusUserCmd_descriptor_;
  metadata.reflection = HandStatusUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryShow::kCmdFieldNumber;
const int QueryShow::kParamFieldNumber;
const int QueryShow::kActionidFieldNumber;
const int QueryShow::kExpressionFieldNumber;
#endif  // !_MSC_VER

QueryShow::QueryShow()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryShow)
}

void QueryShow::InitAsDefaultInstance() {
}

QueryShow::QueryShow(const QueryShow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryShow)
}

void QueryShow::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 69;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryShow::~QueryShow() {
  // @@protoc_insertion_point(destructor:Cmd.QueryShow)
  SharedDtor();
}

void QueryShow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryShow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryShow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryShow_descriptor_;
}

const QueryShow& QueryShow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryShow* QueryShow::default_instance_ = NULL;

QueryShow* QueryShow::New() const {
  return new QueryShow;
}

void QueryShow::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 69;
  }
  actionid_.Clear();
  expression_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryShow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryShow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actionid;
        break;
      }

      // repeated uint32 actionid = 3;
      case 3: {
        if (tag == 24) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_actionid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_actionid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actionid;
        if (input->ExpectTag(32)) goto parse_expression;
        break;
      }

      // repeated uint32 expression = 4;
      case 4: {
        if (tag == 32) {
         parse_expression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_expression())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_expression())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expression;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryShow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryShow)
  return false;
#undef DO_
}

void QueryShow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 actionid = 3;
  for (int i = 0; i < this->actionid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->actionid(i), output);
  }

  // repeated uint32 expression = 4;
  for (int i = 0; i < this->expression_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->expression(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryShow)
}

::google::protobuf::uint8* QueryShow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryShow)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 actionid = 3;
  for (int i = 0; i < this->actionid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->actionid(i), target);
  }

  // repeated uint32 expression = 4;
  for (int i = 0; i < this->expression_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->expression(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryShow)
  return target;
}

int QueryShow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 actionid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->actionid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->actionid(i));
    }
    total_size += 1 * this->actionid_size() + data_size;
  }

  // repeated uint32 expression = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->expression_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->expression(i));
    }
    total_size += 1 * this->expression_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryShow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryShow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryShow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryShow::MergeFrom(const QueryShow& from) {
  GOOGLE_CHECK_NE(&from, this);
  actionid_.MergeFrom(from.actionid_);
  expression_.MergeFrom(from.expression_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryShow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryShow::CopyFrom(const QueryShow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryShow::IsInitialized() const {

  return true;
}

void QueryShow::Swap(QueryShow* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    actionid_.Swap(&other->actionid_);
    expression_.Swap(&other->expression_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryShow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryShow_descriptor_;
  metadata.reflection = QueryShow_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MusicItem::kCharidFieldNumber;
const int MusicItem::kDemandtimeFieldNumber;
const int MusicItem::kMapidFieldNumber;
const int MusicItem::kNpcidFieldNumber;
const int MusicItem::kMusicidFieldNumber;
const int MusicItem::kStarttimeFieldNumber;
const int MusicItem::kEndtimeFieldNumber;
const int MusicItem::kStatusFieldNumber;
const int MusicItem::kNameFieldNumber;
#endif  // !_MSC_VER

MusicItem::MusicItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MusicItem)
}

void MusicItem::InitAsDefaultInstance() {
}

MusicItem::MusicItem(const MusicItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MusicItem)
}

void MusicItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  demandtime_ = 0u;
  mapid_ = 0u;
  npcid_ = 0u;
  musicid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  status_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MusicItem::~MusicItem() {
  // @@protoc_insertion_point(destructor:Cmd.MusicItem)
  SharedDtor();
}

void MusicItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MusicItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MusicItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MusicItem_descriptor_;
}

const MusicItem& MusicItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MusicItem* MusicItem::default_instance_ = NULL;

MusicItem* MusicItem::New() const {
  return new MusicItem;
}

void MusicItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MusicItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, endtime_);
    status_ = 0u;
  }
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MusicItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MusicItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_demandtime;
        break;
      }

      // optional uint32 demandtime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_demandtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demandtime_)));
          set_has_demandtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_musicid;
        break;
      }

      // optional uint32 musicid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_musicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicid_)));
          set_has_musicid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (tag == 74) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MusicItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MusicItem)
  return false;
#undef DO_
}

void MusicItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MusicItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 demandtime = 2 [default = 0];
  if (has_demandtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->demandtime(), output);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint32 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->npcid(), output);
  }

  // optional uint32 musicid = 5 [default = 0];
  if (has_musicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->musicid(), output);
  }

  // optional uint32 starttime = 6 [default = 0];
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->starttime(), output);
  }

  // optional uint32 endtime = 7 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->endtime(), output);
  }

  // optional uint32 status = 8 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MusicItem)
}

::google::protobuf::uint8* MusicItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MusicItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 demandtime = 2 [default = 0];
  if (has_demandtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->demandtime(), target);
  }

  // optional uint32 mapid = 3 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint32 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->npcid(), target);
  }

  // optional uint32 musicid = 5 [default = 0];
  if (has_musicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->musicid(), target);
  }

  // optional uint32 starttime = 6 [default = 0];
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->starttime(), target);
  }

  // optional uint32 endtime = 7 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->endtime(), target);
  }

  // optional uint32 status = 8 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MusicItem)
  return target;
}

int MusicItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 demandtime = 2 [default = 0];
    if (has_demandtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demandtime());
    }

    // optional uint32 mapid = 3 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional uint32 musicid = 5 [default = 0];
    if (has_musicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musicid());
    }

    // optional uint32 starttime = 6 [default = 0];
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endtime = 7 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 status = 8 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MusicItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MusicItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MusicItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MusicItem::MergeFrom(const MusicItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_demandtime()) {
      set_demandtime(from.demandtime());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_musicid()) {
      set_musicid(from.musicid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MusicItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MusicItem::CopyFrom(const MusicItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MusicItem::IsInitialized() const {

  return true;
}

void MusicItem::Swap(MusicItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(demandtime_, other->demandtime_);
    std::swap(mapid_, other->mapid_);
    std::swap(npcid_, other->npcid_);
    std::swap(musicid_, other->musicid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(status_, other->status_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MusicItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MusicItem_descriptor_;
  metadata.reflection = MusicItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryMusicList::kCmdFieldNumber;
const int QueryMusicList::kParamFieldNumber;
const int QueryMusicList::kNpcidFieldNumber;
const int QueryMusicList::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryMusicList::QueryMusicList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryMusicList)
}

void QueryMusicList::InitAsDefaultInstance() {
}

QueryMusicList::QueryMusicList(const QueryMusicList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryMusicList)
}

void QueryMusicList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 70;
  npcid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryMusicList::~QueryMusicList() {
  // @@protoc_insertion_point(destructor:Cmd.QueryMusicList)
  SharedDtor();
}

void QueryMusicList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryMusicList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryMusicList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryMusicList_descriptor_;
}

const QueryMusicList& QueryMusicList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryMusicList* QueryMusicList::default_instance_ = NULL;

QueryMusicList* QueryMusicList::New() const {
  return new QueryMusicList;
}

void QueryMusicList::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 70;
    npcid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryMusicList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryMusicList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.MusicItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryMusicList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryMusicList)
  return false;
#undef DO_
}

void QueryMusicList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryMusicList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // repeated .Cmd.MusicItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryMusicList)
}

::google::protobuf::uint8* QueryMusicList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryMusicList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // repeated .Cmd.MusicItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryMusicList)
  return target;
}

int QueryMusicList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

  }
  // repeated .Cmd.MusicItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryMusicList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryMusicList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryMusicList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryMusicList::MergeFrom(const QueryMusicList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryMusicList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryMusicList::CopyFrom(const QueryMusicList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryMusicList::IsInitialized() const {

  return true;
}

void QueryMusicList::Swap(QueryMusicList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryMusicList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryMusicList_descriptor_;
  metadata.reflection = QueryMusicList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DemandMusic::kCmdFieldNumber;
const int DemandMusic::kParamFieldNumber;
const int DemandMusic::kNpcidFieldNumber;
const int DemandMusic::kMusicidFieldNumber;
#endif  // !_MSC_VER

DemandMusic::DemandMusic()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DemandMusic)
}

void DemandMusic::InitAsDefaultInstance() {
}

DemandMusic::DemandMusic(const DemandMusic& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DemandMusic)
}

void DemandMusic::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 71;
  npcid_ = GOOGLE_ULONGLONG(0);
  musicid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DemandMusic::~DemandMusic() {
  // @@protoc_insertion_point(destructor:Cmd.DemandMusic)
  SharedDtor();
}

void DemandMusic::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DemandMusic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DemandMusic::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DemandMusic_descriptor_;
}

const DemandMusic& DemandMusic::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DemandMusic* DemandMusic::default_instance_ = NULL;

DemandMusic* DemandMusic::New() const {
  return new DemandMusic;
}

void DemandMusic::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DemandMusic*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcid_, musicid_);
    cmd_ = 9;
    param_ = 71;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DemandMusic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DemandMusic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_musicid;
        break;
      }

      // optional uint32 musicid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_musicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musicid_)));
          set_has_musicid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DemandMusic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DemandMusic)
  return false;
#undef DO_
}

void DemandMusic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DemandMusic)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // optional uint32 musicid = 4 [default = 0];
  if (has_musicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->musicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DemandMusic)
}

::google::protobuf::uint8* DemandMusic::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DemandMusic)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // optional uint32 musicid = 4 [default = 0];
  if (has_musicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->musicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DemandMusic)
  return target;
}

int DemandMusic::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_DEMAND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint32 musicid = 4 [default = 0];
    if (has_musicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DemandMusic::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DemandMusic* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DemandMusic*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DemandMusic::MergeFrom(const DemandMusic& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_musicid()) {
      set_musicid(from.musicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DemandMusic::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DemandMusic::CopyFrom(const DemandMusic& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DemandMusic::IsInitialized() const {

  return true;
}

void DemandMusic::Swap(DemandMusic* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(musicid_, other->musicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DemandMusic::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DemandMusic_descriptor_;
  metadata.reflection = DemandMusic_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseMusicFrame::kCmdFieldNumber;
const int CloseMusicFrame::kParamFieldNumber;
#endif  // !_MSC_VER

CloseMusicFrame::CloseMusicFrame()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CloseMusicFrame)
}

void CloseMusicFrame::InitAsDefaultInstance() {
}

CloseMusicFrame::CloseMusicFrame(const CloseMusicFrame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CloseMusicFrame)
}

void CloseMusicFrame::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 72;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseMusicFrame::~CloseMusicFrame() {
  // @@protoc_insertion_point(destructor:Cmd.CloseMusicFrame)
  SharedDtor();
}

void CloseMusicFrame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CloseMusicFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseMusicFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseMusicFrame_descriptor_;
}

const CloseMusicFrame& CloseMusicFrame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CloseMusicFrame* CloseMusicFrame::default_instance_ = NULL;

CloseMusicFrame* CloseMusicFrame::New() const {
  return new CloseMusicFrame;
}

void CloseMusicFrame::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 72;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseMusicFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CloseMusicFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CloseMusicFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CloseMusicFrame)
  return false;
#undef DO_
}

void CloseMusicFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CloseMusicFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CloseMusicFrame)
}

::google::protobuf::uint8* CloseMusicFrame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CloseMusicFrame)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CloseMusicFrame)
  return target;
}

int CloseMusicFrame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MUSIC_CLOSE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseMusicFrame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseMusicFrame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseMusicFrame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseMusicFrame::MergeFrom(const CloseMusicFrame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseMusicFrame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseMusicFrame::CopyFrom(const CloseMusicFrame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseMusicFrame::IsInitialized() const {

  return true;
}

void CloseMusicFrame::Swap(CloseMusicFrame* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseMusicFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseMusicFrame_descriptor_;
  metadata.reflection = CloseMusicFrame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadOkSceneryUserCmd::kCmdFieldNumber;
const int UploadOkSceneryUserCmd::kParamFieldNumber;
const int UploadOkSceneryUserCmd::kSceneryidFieldNumber;
const int UploadOkSceneryUserCmd::kStatusFieldNumber;
const int UploadOkSceneryUserCmd::kAnglezFieldNumber;
const int UploadOkSceneryUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

UploadOkSceneryUserCmd::UploadOkSceneryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UploadOkSceneryUserCmd)
}

void UploadOkSceneryUserCmd::InitAsDefaultInstance() {
}

UploadOkSceneryUserCmd::UploadOkSceneryUserCmd(const UploadOkSceneryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UploadOkSceneryUserCmd)
}

void UploadOkSceneryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 73;
  sceneryid_ = 0u;
  status_ = 0u;
  anglez_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadOkSceneryUserCmd::~UploadOkSceneryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UploadOkSceneryUserCmd)
  SharedDtor();
}

void UploadOkSceneryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UploadOkSceneryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadOkSceneryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadOkSceneryUserCmd_descriptor_;
}

const UploadOkSceneryUserCmd& UploadOkSceneryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UploadOkSceneryUserCmd* UploadOkSceneryUserCmd::default_instance_ = NULL;

UploadOkSceneryUserCmd* UploadOkSceneryUserCmd::New() const {
  return new UploadOkSceneryUserCmd;
}

void UploadOkSceneryUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UploadOkSceneryUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sceneryid_, time_);
    cmd_ = 9;
    param_ = 73;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadOkSceneryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UploadOkSceneryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneryid;
        break;
      }

      // optional uint32 sceneryid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sceneryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneryid_)));
          set_has_sceneryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UploadOkSceneryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UploadOkSceneryUserCmd)
  return false;
#undef DO_
}

void UploadOkSceneryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UploadOkSceneryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 sceneryid = 3 [default = 0];
  if (has_sceneryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->sceneryid(), output);
  }

  // optional uint32 status = 4 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint32 anglez = 5 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->anglez(), output);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UploadOkSceneryUserCmd)
}

::google::protobuf::uint8* UploadOkSceneryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UploadOkSceneryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 sceneryid = 3 [default = 0];
  if (has_sceneryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->sceneryid(), target);
  }

  // optional uint32 status = 4 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint32 anglez = 5 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->anglez(), target);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UploadOkSceneryUserCmd)
  return target;
}

int UploadOkSceneryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_OK_SCENERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 sceneryid = 3 [default = 0];
    if (has_sceneryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneryid());
    }

    // optional uint32 status = 4 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 anglez = 5 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

    // optional uint32 time = 6 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadOkSceneryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadOkSceneryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadOkSceneryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadOkSceneryUserCmd::MergeFrom(const UploadOkSceneryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sceneryid()) {
      set_sceneryid(from.sceneryid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadOkSceneryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadOkSceneryUserCmd::CopyFrom(const UploadOkSceneryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadOkSceneryUserCmd::IsInitialized() const {

  return true;
}

void UploadOkSceneryUserCmd::Swap(UploadOkSceneryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(sceneryid_, other->sceneryid_);
    std::swap(status_, other->status_);
    std::swap(anglez_, other->anglez_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadOkSceneryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadOkSceneryUserCmd_descriptor_;
  metadata.reflection = UploadOkSceneryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinHandsUserCmd::kCmdFieldNumber;
const int JoinHandsUserCmd::kParamFieldNumber;
const int JoinHandsUserCmd::kMasteridFieldNumber;
const int JoinHandsUserCmd::kSignFieldNumber;
const int JoinHandsUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

JoinHandsUserCmd::JoinHandsUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinHandsUserCmd)
}

void JoinHandsUserCmd::InitAsDefaultInstance() {
}

JoinHandsUserCmd::JoinHandsUserCmd(const JoinHandsUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinHandsUserCmd)
}

void JoinHandsUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 74;
  masterid_ = GOOGLE_ULONGLONG(0);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinHandsUserCmd::~JoinHandsUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinHandsUserCmd)
  SharedDtor();
}

void JoinHandsUserCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void JoinHandsUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinHandsUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinHandsUserCmd_descriptor_;
}

const JoinHandsUserCmd& JoinHandsUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

JoinHandsUserCmd* JoinHandsUserCmd::default_instance_ = NULL;

JoinHandsUserCmd* JoinHandsUserCmd::New() const {
  return new JoinHandsUserCmd;
}

void JoinHandsUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 74;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinHandsUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinHandsUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinHandsUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinHandsUserCmd)
  return false;
#undef DO_
}

void JoinHandsUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinHandsUserCmd)
}

::google::protobuf::uint8* JoinHandsUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinHandsUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinHandsUserCmd)
  return target;
}

int JoinHandsUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JOIN_HANDS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinHandsUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinHandsUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinHandsUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinHandsUserCmd::MergeFrom(const JoinHandsUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinHandsUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinHandsUserCmd::CopyFrom(const JoinHandsUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinHandsUserCmd::IsInitialized() const {

  return true;
}

void JoinHandsUserCmd::Swap(JoinHandsUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(sign_, other->sign_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinHandsUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinHandsUserCmd_descriptor_;
  metadata.reflection = JoinHandsUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TraceItem::kItemidFieldNumber;
const int TraceItem::kMonsteridFieldNumber;
#endif  // !_MSC_VER

TraceItem::TraceItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TraceItem)
}

void TraceItem::InitAsDefaultInstance() {
}

TraceItem::TraceItem(const TraceItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TraceItem)
}

void TraceItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  monsterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraceItem::~TraceItem() {
  // @@protoc_insertion_point(destructor:Cmd.TraceItem)
  SharedDtor();
}

void TraceItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TraceItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraceItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraceItem_descriptor_;
}

const TraceItem& TraceItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TraceItem* TraceItem::default_instance_ = NULL;

TraceItem* TraceItem::New() const {
  return new TraceItem;
}

void TraceItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TraceItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, monsterid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraceItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TraceItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_monsterid;
        break;
      }

      // optional uint32 monsterid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_monsterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TraceItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TraceItem)
  return false;
#undef DO_
}

void TraceItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TraceItem)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 monsterid = 2 [default = 0];
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->monsterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TraceItem)
}

::google::protobuf::uint8* TraceItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TraceItem)
  // optional uint32 itemid = 1 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 monsterid = 2 [default = 0];
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->monsterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TraceItem)
  return target;
}

int TraceItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 monsterid = 2 [default = 0];
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->monsterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraceItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraceItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraceItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraceItem::MergeFrom(const TraceItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraceItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraceItem::CopyFrom(const TraceItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraceItem::IsInitialized() const {

  return true;
}

void TraceItem::Swap(TraceItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraceItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraceItem_descriptor_;
  metadata.reflection = TraceItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTraceList::kCmdFieldNumber;
const int QueryTraceList::kParamFieldNumber;
const int QueryTraceList::kItemsFieldNumber;
#endif  // !_MSC_VER

QueryTraceList::QueryTraceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTraceList)
}

void QueryTraceList::InitAsDefaultInstance() {
}

QueryTraceList::QueryTraceList(const QueryTraceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTraceList)
}

void QueryTraceList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 75;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTraceList::~QueryTraceList() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTraceList)
  SharedDtor();
}

void QueryTraceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTraceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTraceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTraceList_descriptor_;
}

const QueryTraceList& QueryTraceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryTraceList* QueryTraceList::default_instance_ = NULL;

QueryTraceList* QueryTraceList::New() const {
  return new QueryTraceList;
}

void QueryTraceList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 75;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTraceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTraceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.TraceItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTraceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTraceList)
  return false;
#undef DO_
}

void QueryTraceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTraceList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TraceItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTraceList)
}

::google::protobuf::uint8* QueryTraceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTraceList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TraceItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTraceList)
  return target;
}

int QueryTraceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_TRACE_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TraceItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTraceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTraceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTraceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTraceList::MergeFrom(const QueryTraceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTraceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTraceList::CopyFrom(const QueryTraceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTraceList::IsInitialized() const {

  return true;
}

void QueryTraceList::Swap(QueryTraceList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTraceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTraceList_descriptor_;
  metadata.reflection = QueryTraceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateTraceList::kCmdFieldNumber;
const int UpdateTraceList::kParamFieldNumber;
const int UpdateTraceList::kUpdatesFieldNumber;
const int UpdateTraceList::kDelsFieldNumber;
#endif  // !_MSC_VER

UpdateTraceList::UpdateTraceList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateTraceList)
}

void UpdateTraceList::InitAsDefaultInstance() {
}

UpdateTraceList::UpdateTraceList(const UpdateTraceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateTraceList)
}

void UpdateTraceList::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 76;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateTraceList::~UpdateTraceList() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateTraceList)
  SharedDtor();
}

void UpdateTraceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateTraceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTraceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateTraceList_descriptor_;
}

const UpdateTraceList& UpdateTraceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpdateTraceList* UpdateTraceList::default_instance_ = NULL;

UpdateTraceList* UpdateTraceList::New() const {
  return new UpdateTraceList;
}

void UpdateTraceList::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 76;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateTraceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateTraceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.TraceItem updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_dels;
        break;
      }

      // repeated uint32 dels = 4;
      case 4: {
        if (tag == 32) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_dels())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateTraceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateTraceList)
  return false;
#undef DO_
}

void UpdateTraceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateTraceList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TraceItem updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint32 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateTraceList)
}

::google::protobuf::uint8* UpdateTraceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateTraceList)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TraceItem updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint32 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateTraceList)
  return target;
}

int UpdateTraceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_TRACE_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TraceItem updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint32 dels = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTraceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateTraceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateTraceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateTraceList::MergeFrom(const UpdateTraceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateTraceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTraceList::CopyFrom(const UpdateTraceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTraceList::IsInitialized() const {

  return true;
}

void UpdateTraceList::Swap(UpdateTraceList* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateTraceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateTraceList_descriptor_;
  metadata.reflection = UpdateTraceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetDirection::kCmdFieldNumber;
const int SetDirection::kParamFieldNumber;
const int SetDirection::kDirFieldNumber;
#endif  // !_MSC_VER

SetDirection::SetDirection()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetDirection)
}

void SetDirection::InitAsDefaultInstance() {
}

SetDirection::SetDirection(const SetDirection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetDirection)
}

void SetDirection::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 77;
  dir_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetDirection::~SetDirection() {
  // @@protoc_insertion_point(destructor:Cmd.SetDirection)
  SharedDtor();
}

void SetDirection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetDirection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetDirection_descriptor_;
}

const SetDirection& SetDirection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SetDirection* SetDirection::default_instance_ = NULL;

SetDirection* SetDirection::New() const {
  return new SetDirection;
}

void SetDirection::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 77;
    dir_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetDirection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dir;
        break;
      }

      // optional uint32 dir = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dir_)));
          set_has_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetDirection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetDirection)
  return false;
#undef DO_
}

void SetDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetDirection)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dir = 3 [default = 0];
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetDirection)
}

::google::protobuf::uint8* SetDirection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetDirection)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dir = 3 [default = 0];
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetDirection)
  return target;
}

int SetDirection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_DIRECTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dir = 3 [default = 0];
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetDirection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetDirection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetDirection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetDirection::MergeFrom(const SetDirection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetDirection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetDirection::CopyFrom(const SetDirection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetDirection::IsInitialized() const {

  return true;
}

void SetDirection::Swap(SetDirection* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetDirection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetDirection_descriptor_;
  metadata.reflection = SetDirection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleTimelenUserCmd::kCmdFieldNumber;
const int BattleTimelenUserCmd::kParamFieldNumber;
const int BattleTimelenUserCmd::kTimelenFieldNumber;
const int BattleTimelenUserCmd::kTotaltimeFieldNumber;
const int BattleTimelenUserCmd::kMusictimeFieldNumber;
const int BattleTimelenUserCmd::kTutortimeFieldNumber;
const int BattleTimelenUserCmd::kEstatusFieldNumber;
#endif  // !_MSC_VER

BattleTimelenUserCmd::BattleTimelenUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BattleTimelenUserCmd)
}

void BattleTimelenUserCmd::InitAsDefaultInstance() {
}

BattleTimelenUserCmd::BattleTimelenUserCmd(const BattleTimelenUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BattleTimelenUserCmd)
}

void BattleTimelenUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 82;
  timelen_ = 0u;
  totaltime_ = 0u;
  musictime_ = 0u;
  tutortime_ = 0u;
  estatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleTimelenUserCmd::~BattleTimelenUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BattleTimelenUserCmd)
  SharedDtor();
}

void BattleTimelenUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleTimelenUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleTimelenUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleTimelenUserCmd_descriptor_;
}

const BattleTimelenUserCmd& BattleTimelenUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BattleTimelenUserCmd* BattleTimelenUserCmd::default_instance_ = NULL;

BattleTimelenUserCmd* BattleTimelenUserCmd::New() const {
  return new BattleTimelenUserCmd;
}

void BattleTimelenUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BattleTimelenUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(timelen_, tutortime_);
    cmd_ = 9;
    param_ = 82;
    estatus_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleTimelenUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BattleTimelenUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_timelen;
        break;
      }

      // optional uint32 timelen = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_timelen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timelen_)));
          set_has_timelen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_totaltime;
        break;
      }

      // optional uint32 totaltime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_totaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_musictime;
        break;
      }

      // optional uint32 musictime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_musictime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &musictime_)));
          set_has_musictime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tutortime;
        break;
      }

      // optional uint32 tutortime = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_tutortime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tutortime_)));
          set_has_tutortime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_estatus;
        break;
      }

      // optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
      case 7: {
        if (tag == 56) {
         parse_estatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBattleStatus_IsValid(value)) {
            set_estatus(static_cast< ::Cmd::EBattleStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BattleTimelenUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BattleTimelenUserCmd)
  return false;
#undef DO_
}

void BattleTimelenUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BattleTimelenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 timelen = 3 [default = 0];
  if (has_timelen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->timelen(), output);
  }

  // optional uint32 totaltime = 4 [default = 0];
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totaltime(), output);
  }

  // optional uint32 musictime = 5 [default = 0];
  if (has_musictime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->musictime(), output);
  }

  // optional uint32 tutortime = 6 [default = 0];
  if (has_tutortime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->tutortime(), output);
  }

  // optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
  if (has_estatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->estatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BattleTimelenUserCmd)
}

::google::protobuf::uint8* BattleTimelenUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BattleTimelenUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 timelen = 3 [default = 0];
  if (has_timelen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->timelen(), target);
  }

  // optional uint32 totaltime = 4 [default = 0];
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totaltime(), target);
  }

  // optional uint32 musictime = 5 [default = 0];
  if (has_musictime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->musictime(), target);
  }

  // optional uint32 tutortime = 6 [default = 0];
  if (has_tutortime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->tutortime(), target);
  }

  // optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
  if (has_estatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->estatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BattleTimelenUserCmd)
  return target;
}

int BattleTimelenUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BATTLE_TIMELEN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 timelen = 3 [default = 0];
    if (has_timelen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timelen());
    }

    // optional uint32 totaltime = 4 [default = 0];
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totaltime());
    }

    // optional uint32 musictime = 5 [default = 0];
    if (has_musictime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->musictime());
    }

    // optional uint32 tutortime = 6 [default = 0];
    if (has_tutortime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tutortime());
    }

    // optional .Cmd.EBattleStatus estatus = 7 [default = EBATTLESTATUS_EASY];
    if (has_estatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->estatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleTimelenUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleTimelenUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleTimelenUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleTimelenUserCmd::MergeFrom(const BattleTimelenUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_timelen()) {
      set_timelen(from.timelen());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
    if (from.has_musictime()) {
      set_musictime(from.musictime());
    }
    if (from.has_tutortime()) {
      set_tutortime(from.tutortime());
    }
    if (from.has_estatus()) {
      set_estatus(from.estatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleTimelenUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleTimelenUserCmd::CopyFrom(const BattleTimelenUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleTimelenUserCmd::IsInitialized() const {

  return true;
}

void BattleTimelenUserCmd::Swap(BattleTimelenUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(timelen_, other->timelen_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(musictime_, other->musictime_);
    std::swap(tutortime_, other->tutortime_);
    std::swap(estatus_, other->estatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleTimelenUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleTimelenUserCmd_descriptor_;
  metadata.reflection = BattleTimelenUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetOptionUserCmd::kCmdFieldNumber;
const int SetOptionUserCmd::kParamFieldNumber;
const int SetOptionUserCmd::kTypeFieldNumber;
const int SetOptionUserCmd::kFashionhideFieldNumber;
const int SetOptionUserCmd::kWeddingTypeFieldNumber;
#endif  // !_MSC_VER

SetOptionUserCmd::SetOptionUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetOptionUserCmd)
}

void SetOptionUserCmd::InitAsDefaultInstance() {
}

SetOptionUserCmd::SetOptionUserCmd(const SetOptionUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetOptionUserCmd)
}

void SetOptionUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 83;
  type_ = 0;
  fashionhide_ = 0u;
  wedding_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetOptionUserCmd::~SetOptionUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SetOptionUserCmd)
  SharedDtor();
}

void SetOptionUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetOptionUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetOptionUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetOptionUserCmd_descriptor_;
}

const SetOptionUserCmd& SetOptionUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SetOptionUserCmd* SetOptionUserCmd::default_instance_ = NULL;

SetOptionUserCmd* SetOptionUserCmd::New() const {
  return new SetOptionUserCmd;
}

void SetOptionUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SetOptionUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, wedding_type_);
    cmd_ = 9;
    param_ = 83;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetOptionUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetOptionUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQueryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_fashionhide;
        break;
      }

      // optional uint32 fashionhide = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_fashionhide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhide_)));
          set_has_fashionhide();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_wedding_type;
        break;
      }

      // optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
      case 5: {
        if (tag == 40) {
         parse_wedding_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EQueryType_IsValid(value)) {
            set_wedding_type(static_cast< ::Cmd::EQueryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetOptionUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetOptionUserCmd)
  return false;
#undef DO_
}

void SetOptionUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 fashionhide = 4 [default = 0];
  if (has_fashionhide()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fashionhide(), output);
  }

  // optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
  if (has_wedding_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->wedding_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetOptionUserCmd)
}

::google::protobuf::uint8* SetOptionUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 fashionhide = 4 [default = 0];
  if (has_fashionhide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fashionhide(), target);
  }

  // optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
  if (has_wedding_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->wedding_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetOptionUserCmd)
  return target;
}

int SetOptionUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SETOPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EQueryType type = 3 [default = EQUERYTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 fashionhide = 4 [default = 0];
    if (has_fashionhide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhide());
    }

    // optional .Cmd.EQueryType wedding_type = 5 [default = EQUERYTYPE_MIN];
    if (has_wedding_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->wedding_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetOptionUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetOptionUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetOptionUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetOptionUserCmd::MergeFrom(const SetOptionUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_fashionhide()) {
      set_fashionhide(from.fashionhide());
    }
    if (from.has_wedding_type()) {
      set_wedding_type(from.wedding_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetOptionUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetOptionUserCmd::CopyFrom(const SetOptionUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetOptionUserCmd::IsInitialized() const {

  return true;
}

void SetOptionUserCmd::Swap(SetOptionUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(fashionhide_, other->fashionhide_);
    std::swap(wedding_type_, other->wedding_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetOptionUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetOptionUserCmd_descriptor_;
  metadata.reflection = SetOptionUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserInfoUserCmd::kCmdFieldNumber;
const int QueryUserInfoUserCmd::kParamFieldNumber;
const int QueryUserInfoUserCmd::kCharidFieldNumber;
const int QueryUserInfoUserCmd::kTeamidFieldNumber;
const int QueryUserInfoUserCmd::kBlinkFieldNumber;
#endif  // !_MSC_VER

QueryUserInfoUserCmd::QueryUserInfoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserInfoUserCmd)
}

void QueryUserInfoUserCmd::InitAsDefaultInstance() {
}

QueryUserInfoUserCmd::QueryUserInfoUserCmd(const QueryUserInfoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserInfoUserCmd)
}

void QueryUserInfoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 84;
  charid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  blink_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserInfoUserCmd::~QueryUserInfoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserInfoUserCmd)
  SharedDtor();
}

void QueryUserInfoUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUserInfoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserInfoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserInfoUserCmd_descriptor_;
}

const QueryUserInfoUserCmd& QueryUserInfoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryUserInfoUserCmd* QueryUserInfoUserCmd::default_instance_ = NULL;

QueryUserInfoUserCmd* QueryUserInfoUserCmd::New() const {
  return new QueryUserInfoUserCmd;
}

void QueryUserInfoUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryUserInfoUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, blink_);
    cmd_ = 9;
    param_ = 84;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserInfoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserInfoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_blink;
        break;
      }

      // optional bool blink = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserInfoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserInfoUserCmd)
  return false;
#undef DO_
}

void QueryUserInfoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional bool blink = 5 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->blink(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserInfoUserCmd)
}

::google::protobuf::uint8* QueryUserInfoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional bool blink = 5 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->blink(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserInfoUserCmd)
  return target;
}

int QueryUserInfoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERYUSERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional bool blink = 5 [default = false];
    if (has_blink()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserInfoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserInfoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserInfoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserInfoUserCmd::MergeFrom(const QueryUserInfoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserInfoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserInfoUserCmd::CopyFrom(const QueryUserInfoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserInfoUserCmd::IsInitialized() const {

  return true;
}

void QueryUserInfoUserCmd::Swap(QueryUserInfoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(teamid_, other->teamid_);
    std::swap(blink_, other->blink_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserInfoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserInfoUserCmd_descriptor_;
  metadata.reflection = QueryUserInfoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountDownTickUserCmd::kCmdFieldNumber;
const int CountDownTickUserCmd::kParamFieldNumber;
const int CountDownTickUserCmd::kTypeFieldNumber;
const int CountDownTickUserCmd::kTickFieldNumber;
const int CountDownTickUserCmd::kTimeFieldNumber;
const int CountDownTickUserCmd::kSignFieldNumber;
const int CountDownTickUserCmd::kExtparamFieldNumber;
#endif  // !_MSC_VER

CountDownTickUserCmd::CountDownTickUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CountDownTickUserCmd)
}

void CountDownTickUserCmd::InitAsDefaultInstance() {
}

CountDownTickUserCmd::CountDownTickUserCmd(const CountDownTickUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CountDownTickUserCmd)
}

void CountDownTickUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 85;
  type_ = 1;
  tick_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  extparam_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountDownTickUserCmd::~CountDownTickUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CountDownTickUserCmd)
  SharedDtor();
}

void CountDownTickUserCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void CountDownTickUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountDownTickUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountDownTickUserCmd_descriptor_;
}

const CountDownTickUserCmd& CountDownTickUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CountDownTickUserCmd* CountDownTickUserCmd::default_instance_ = NULL;

CountDownTickUserCmd* CountDownTickUserCmd::New() const {
  return new CountDownTickUserCmd;
}

void CountDownTickUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CountDownTickUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(time_, extparam_);
    cmd_ = 9;
    param_ = 85;
    type_ = 1;
    tick_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountDownTickUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CountDownTickUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ECountDownType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECountDownType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ECountDownType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tick;
        break;
      }

      // optional uint32 tick = 4;
      case 4: {
        if (tag == 32) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional string sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_extparam;
        break;
      }

      // optional uint32 extparam = 7;
      case 7: {
        if (tag == 56) {
         parse_extparam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extparam_)));
          set_has_extparam();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CountDownTickUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CountDownTickUserCmd)
  return false;
#undef DO_
}

void CountDownTickUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CountDownTickUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECountDownType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 tick = 4;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tick(), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sign(), output);
  }

  // optional uint32 extparam = 7;
  if (has_extparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->extparam(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CountDownTickUserCmd)
}

::google::protobuf::uint8* CountDownTickUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CountDownTickUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECountDownType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 tick = 4;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tick(), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  // optional uint32 extparam = 7;
  if (has_extparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->extparam(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CountDownTickUserCmd)
  return target;
}

int CountDownTickUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_COUNTDOWN_TICK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECountDownType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 tick = 4;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 extparam = 7;
    if (has_extparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extparam());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountDownTickUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountDownTickUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountDownTickUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountDownTickUserCmd::MergeFrom(const CountDownTickUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_extparam()) {
      set_extparam(from.extparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountDownTickUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountDownTickUserCmd::CopyFrom(const CountDownTickUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountDownTickUserCmd::IsInitialized() const {

  return true;
}

void CountDownTickUserCmd::Swap(CountDownTickUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(tick_, other->tick_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(extparam_, other->extparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountDownTickUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountDownTickUserCmd_descriptor_;
  metadata.reflection = CountDownTickUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemMusicNtfUserCmd::kCmdFieldNumber;
const int ItemMusicNtfUserCmd::kParamFieldNumber;
const int ItemMusicNtfUserCmd::kAddFieldNumber;
const int ItemMusicNtfUserCmd::kUriFieldNumber;
const int ItemMusicNtfUserCmd::kStarttimeFieldNumber;
#endif  // !_MSC_VER

ItemMusicNtfUserCmd::ItemMusicNtfUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemMusicNtfUserCmd)
}

void ItemMusicNtfUserCmd::InitAsDefaultInstance() {
}

ItemMusicNtfUserCmd::ItemMusicNtfUserCmd(const ItemMusicNtfUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemMusicNtfUserCmd)
}

void ItemMusicNtfUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 86;
  add_ = false;
  uri_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemMusicNtfUserCmd::~ItemMusicNtfUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ItemMusicNtfUserCmd)
  SharedDtor();
}

void ItemMusicNtfUserCmd::SharedDtor() {
  if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uri_;
  }
  if (this != default_instance_) {
  }
}

void ItemMusicNtfUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemMusicNtfUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemMusicNtfUserCmd_descriptor_;
}

const ItemMusicNtfUserCmd& ItemMusicNtfUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ItemMusicNtfUserCmd* ItemMusicNtfUserCmd::default_instance_ = NULL;

ItemMusicNtfUserCmd* ItemMusicNtfUserCmd::New() const {
  return new ItemMusicNtfUserCmd;
}

void ItemMusicNtfUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ItemMusicNtfUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(add_, starttime_);
    cmd_ = 9;
    param_ = 86;
    if (has_uri()) {
      if (uri_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        uri_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemMusicNtfUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemMusicNtfUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_add;
        break;
      }

      // optional bool add = 3;
      case 3: {
        if (tag == 24) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uri;
        break;
      }

      // optional string uri = 4;
      case 4: {
        if (tag == 34) {
         parse_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uri()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uri().data(), this->uri().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "uri");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 5;
      case 5: {
        if (tag == 40) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemMusicNtfUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemMusicNtfUserCmd)
  return false;
#undef DO_
}

void ItemMusicNtfUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemMusicNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool add = 3;
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->add(), output);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uri(), output);
  }

  // optional uint32 starttime = 5;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->starttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemMusicNtfUserCmd)
}

::google::protobuf::uint8* ItemMusicNtfUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemMusicNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool add = 3;
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->add(), target);
  }

  // optional string uri = 4;
  if (has_uri()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uri().data(), this->uri().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uri(), target);
  }

  // optional uint32 starttime = 5;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->starttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemMusicNtfUserCmd)
  return target;
}

int ItemMusicNtfUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEM_MUSIC_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool add = 3;
    if (has_add()) {
      total_size += 1 + 1;
    }

    // optional string uri = 4;
    if (has_uri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uri());
    }

    // optional uint32 starttime = 5;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemMusicNtfUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemMusicNtfUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemMusicNtfUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemMusicNtfUserCmd::MergeFrom(const ItemMusicNtfUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
    if (from.has_uri()) {
      set_uri(from.uri());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemMusicNtfUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemMusicNtfUserCmd::CopyFrom(const ItemMusicNtfUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemMusicNtfUserCmd::IsInitialized() const {

  return true;
}

void ItemMusicNtfUserCmd::Swap(ItemMusicNtfUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(add_, other->add_);
    std::swap(uri_, other->uri_);
    std::swap(starttime_, other->starttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemMusicNtfUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemMusicNtfUserCmd_descriptor_;
  metadata.reflection = ItemMusicNtfUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShakeTreeUserCmd::kCmdFieldNumber;
const int ShakeTreeUserCmd::kParamFieldNumber;
const int ShakeTreeUserCmd::kNpcidFieldNumber;
const int ShakeTreeUserCmd::kResultFieldNumber;
#endif  // !_MSC_VER

ShakeTreeUserCmd::ShakeTreeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShakeTreeUserCmd)
}

void ShakeTreeUserCmd::InitAsDefaultInstance() {
}

ShakeTreeUserCmd::ShakeTreeUserCmd(const ShakeTreeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShakeTreeUserCmd)
}

void ShakeTreeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 87;
  npcid_ = GOOGLE_ULONGLONG(0);
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShakeTreeUserCmd::~ShakeTreeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ShakeTreeUserCmd)
  SharedDtor();
}

void ShakeTreeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShakeTreeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShakeTreeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShakeTreeUserCmd_descriptor_;
}

const ShakeTreeUserCmd& ShakeTreeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShakeTreeUserCmd* ShakeTreeUserCmd::default_instance_ = NULL;

ShakeTreeUserCmd* ShakeTreeUserCmd::New() const {
  return new ShakeTreeUserCmd;
}

void ShakeTreeUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShakeTreeUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcid_, result_);
    cmd_ = 9;
    param_ = 87;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShakeTreeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShakeTreeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
      case 4: {
        if (tag == 32) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETreeStatus_IsValid(value)) {
            set_result(static_cast< ::Cmd::ETreeStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShakeTreeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShakeTreeUserCmd)
  return false;
#undef DO_
}

void ShakeTreeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShakeTreeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShakeTreeUserCmd)
}

::google::protobuf::uint8* ShakeTreeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShakeTreeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShakeTreeUserCmd)
  return target;
}

int ShakeTreeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHAKETREE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional .Cmd.ETreeStatus result = 4 [default = ETREESTATUS_MIN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShakeTreeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShakeTreeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShakeTreeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShakeTreeUserCmd::MergeFrom(const ShakeTreeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShakeTreeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShakeTreeUserCmd::CopyFrom(const ShakeTreeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShakeTreeUserCmd::IsInitialized() const {

  return true;
}

void ShakeTreeUserCmd::Swap(ShakeTreeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShakeTreeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShakeTreeUserCmd_descriptor_;
  metadata.reflection = ShakeTreeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Tree::kIdFieldNumber;
const int Tree::kTypeidFieldNumber;
const int Tree::kPosFieldNumber;
#endif  // !_MSC_VER

Tree::Tree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Tree)
}

void Tree::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

Tree::Tree(const Tree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Tree)
}

void Tree::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  typeid__ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tree::~Tree() {
  // @@protoc_insertion_point(destructor:Cmd.Tree)
  SharedDtor();
}

void Tree::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void Tree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tree_descriptor_;
}

const Tree& Tree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

Tree* Tree::default_instance_ = NULL;

Tree* Tree::New() const {
  return new Tree;
}

void Tree::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    typeid__ = 0u;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Tree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_typeid;
        break;
      }

      // optional uint32 typeid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_typeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &typeid__)));
          set_has_typeid_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Tree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Tree)
  return false;
#undef DO_
}

void Tree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Tree)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 typeid = 2 [default = 0];
  if (has_typeid_()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->typeid_(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Tree)
}

::google::protobuf::uint8* Tree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Tree)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 typeid = 2 [default = 0];
  if (has_typeid_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->typeid_(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Tree)
  return target;
}

int Tree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 typeid = 2 [default = 0];
    if (has_typeid_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->typeid_());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tree::MergeFrom(const Tree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_typeid_()) {
      set_typeid_(from.typeid_());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tree::CopyFrom(const Tree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tree::IsInitialized() const {

  return true;
}

void Tree::Swap(Tree* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(typeid__, other->typeid__);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tree_descriptor_;
  metadata.reflection = Tree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeListUserCmd::kCmdFieldNumber;
const int TreeListUserCmd::kParamFieldNumber;
const int TreeListUserCmd::kUpdatesFieldNumber;
const int TreeListUserCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

TreeListUserCmd::TreeListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TreeListUserCmd)
}

void TreeListUserCmd::InitAsDefaultInstance() {
}

TreeListUserCmd::TreeListUserCmd(const TreeListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TreeListUserCmd)
}

void TreeListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 88;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeListUserCmd::~TreeListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TreeListUserCmd)
  SharedDtor();
}

void TreeListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TreeListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeListUserCmd_descriptor_;
}

const TreeListUserCmd& TreeListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TreeListUserCmd* TreeListUserCmd::default_instance_ = NULL;

TreeListUserCmd* TreeListUserCmd::New() const {
  return new TreeListUserCmd;
}

void TreeListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 88;
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TreeListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.Tree updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 4;
      case 4: {
        if (tag == 32) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_dels())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TreeListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TreeListUserCmd)
  return false;
#undef DO_
}

void TreeListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TreeListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.Tree updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TreeListUserCmd)
}

::google::protobuf::uint8* TreeListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TreeListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.Tree updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 dels = 4;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TreeListUserCmd)
  return target;
}

int TreeListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TREELIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.Tree updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeListUserCmd::MergeFrom(const TreeListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeListUserCmd::CopyFrom(const TreeListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeListUserCmd::IsInitialized() const {

  return true;
}

void TreeListUserCmd::Swap(TreeListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeListUserCmd_descriptor_;
  metadata.reflection = TreeListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityNtfUserCmd::kCmdFieldNumber;
const int ActivityNtfUserCmd::kParamFieldNumber;
const int ActivityNtfUserCmd::kIdFieldNumber;
const int ActivityNtfUserCmd::kMapidFieldNumber;
const int ActivityNtfUserCmd::kEndtimeFieldNumber;
const int ActivityNtfUserCmd::kProgressFieldNumber;
#endif  // !_MSC_VER

ActivityNtfUserCmd::ActivityNtfUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityNtfUserCmd)
}

void ActivityNtfUserCmd::InitAsDefaultInstance() {
}

ActivityNtfUserCmd::ActivityNtfUserCmd(const ActivityNtfUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityNtfUserCmd)
}

void ActivityNtfUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 89;
  id_ = 0u;
  mapid_ = 0u;
  endtime_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityNtfUserCmd::~ActivityNtfUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityNtfUserCmd)
  SharedDtor();
}

void ActivityNtfUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityNtfUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityNtfUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityNtfUserCmd_descriptor_;
}

const ActivityNtfUserCmd& ActivityNtfUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ActivityNtfUserCmd* ActivityNtfUserCmd::default_instance_ = NULL;

ActivityNtfUserCmd* ActivityNtfUserCmd::New() const {
  return new ActivityNtfUserCmd;
}

void ActivityNtfUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityNtfUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, progress_);
    cmd_ = 9;
    param_ = 89;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityNtfUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityNtfUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 6;
      case 6: {
        if (tag == 48) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityNtfUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityNtfUserCmd)
  return false;
#undef DO_
}

void ActivityNtfUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->endtime(), output);
  }

  // optional uint32 progress = 6;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityNtfUserCmd)
}

::google::protobuf::uint8* ActivityNtfUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional uint32 endtime = 5 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->endtime(), target);
  }

  // optional uint32 progress = 6;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityNtfUserCmd)
  return target;
}

int ActivityNtfUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ACTIVITY_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 endtime = 5 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 progress = 6;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityNtfUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityNtfUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityNtfUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityNtfUserCmd::MergeFrom(const ActivityNtfUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityNtfUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityNtfUserCmd::CopyFrom(const ActivityNtfUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityNtfUserCmd::IsInitialized() const {

  return true;
}

void ActivityNtfUserCmd::Swap(ActivityNtfUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(mapid_, other->mapid_);
    std::swap(endtime_, other->endtime_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityNtfUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityNtfUserCmd_descriptor_;
  metadata.reflection = ActivityNtfUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfo::kZoneidFieldNumber;
const int ZoneInfo::kMaxbaselvFieldNumber;
const int ZoneInfo::kStatusFieldNumber;
const int ZoneInfo::kStateFieldNumber;
#endif  // !_MSC_VER

ZoneInfo::ZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ZoneInfo)
}

void ZoneInfo::InitAsDefaultInstance() {
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ZoneInfo)
}

void ZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  zoneid_ = 0u;
  maxbaselv_ = 0u;
  status_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfo::~ZoneInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ZoneInfo)
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfo_descriptor_;
}

const ZoneInfo& ZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New() const {
  return new ZoneInfo;
}

void ZoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zoneid_, state_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxbaselv;
        break;
      }

      // optional uint32 maxbaselv = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_maxbaselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxbaselv_)));
          set_has_maxbaselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EZoneStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EZoneStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EZoneState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EZoneState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ZoneInfo)
  return false;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ZoneInfo)
  // optional uint32 zoneid = 1 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 maxbaselv = 2 [default = 0];
  if (has_maxbaselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->maxbaselv(), output);
  }

  // optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ZoneInfo)
}

::google::protobuf::uint8* ZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ZoneInfo)
  // optional uint32 zoneid = 1 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 maxbaselv = 2 [default = 0];
  if (has_maxbaselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->maxbaselv(), target);
  }

  // optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ZoneInfo)
  return target;
}

int ZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 maxbaselv = 2 [default = 0];
    if (has_maxbaselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxbaselv());
    }

    // optional .Cmd.EZoneStatus status = 3 [default = EZONESTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .Cmd.EZoneState state = 4 [default = EZONESTATE_MIN];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_maxbaselv()) {
      set_maxbaselv(from.maxbaselv());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfo::IsInitialized() const {

  return true;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(maxbaselv_, other->maxbaselv_);
    std::swap(status_, other->status_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfo_descriptor_;
  metadata.reflection = ZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecentZoneInfo::kTypeFieldNumber;
const int RecentZoneInfo::kZoneidFieldNumber;
#endif  // !_MSC_VER

RecentZoneInfo::RecentZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RecentZoneInfo)
}

void RecentZoneInfo::InitAsDefaultInstance() {
}

RecentZoneInfo::RecentZoneInfo(const RecentZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RecentZoneInfo)
}

void RecentZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecentZoneInfo::~RecentZoneInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RecentZoneInfo)
  SharedDtor();
}

void RecentZoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecentZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecentZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecentZoneInfo_descriptor_;
}

const RecentZoneInfo& RecentZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

RecentZoneInfo* RecentZoneInfo::default_instance_ = NULL;

RecentZoneInfo* RecentZoneInfo::New() const {
  return new RecentZoneInfo;
}

void RecentZoneInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecentZoneInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecentZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RecentZoneInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EJumpZone_IsValid(value)) {
            set_type(static_cast< ::Cmd::EJumpZone >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RecentZoneInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RecentZoneInfo)
  return false;
#undef DO_
}

void RecentZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RecentZoneInfo)
  // optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RecentZoneInfo)
}

::google::protobuf::uint8* RecentZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RecentZoneInfo)
  // optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RecentZoneInfo)
  return target;
}

int RecentZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EJumpZone type = 1 [default = EJUMPZONE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecentZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecentZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecentZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecentZoneInfo::MergeFrom(const RecentZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecentZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecentZoneInfo::CopyFrom(const RecentZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecentZoneInfo::IsInitialized() const {

  return true;
}

void RecentZoneInfo::Swap(RecentZoneInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecentZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecentZoneInfo_descriptor_;
  metadata.reflection = RecentZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryZoneStatusUserCmd::kCmdFieldNumber;
const int QueryZoneStatusUserCmd::kParamFieldNumber;
const int QueryZoneStatusUserCmd::kInfosFieldNumber;
const int QueryZoneStatusUserCmd::kRecentsFieldNumber;
#endif  // !_MSC_VER

QueryZoneStatusUserCmd::QueryZoneStatusUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryZoneStatusUserCmd)
}

void QueryZoneStatusUserCmd::InitAsDefaultInstance() {
}

QueryZoneStatusUserCmd::QueryZoneStatusUserCmd(const QueryZoneStatusUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryZoneStatusUserCmd)
}

void QueryZoneStatusUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 91;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryZoneStatusUserCmd::~QueryZoneStatusUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryZoneStatusUserCmd)
  SharedDtor();
}

void QueryZoneStatusUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryZoneStatusUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryZoneStatusUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryZoneStatusUserCmd_descriptor_;
}

const QueryZoneStatusUserCmd& QueryZoneStatusUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryZoneStatusUserCmd* QueryZoneStatusUserCmd::default_instance_ = NULL;

QueryZoneStatusUserCmd* QueryZoneStatusUserCmd::New() const {
  return new QueryZoneStatusUserCmd;
}

void QueryZoneStatusUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 91;
  }
  infos_.Clear();
  recents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryZoneStatusUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryZoneStatusUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.ZoneInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectTag(34)) goto parse_recents;
        break;
      }

      // repeated .Cmd.RecentZoneInfo recents = 4;
      case 4: {
        if (tag == 34) {
         parse_recents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recents()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_recents;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryZoneStatusUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryZoneStatusUserCmd)
  return false;
#undef DO_
}

void QueryZoneStatusUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryZoneStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ZoneInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  // repeated .Cmd.RecentZoneInfo recents = 4;
  for (int i = 0; i < this->recents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryZoneStatusUserCmd)
}

::google::protobuf::uint8* QueryZoneStatusUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryZoneStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ZoneInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  // repeated .Cmd.RecentZoneInfo recents = 4;
  for (int i = 0; i < this->recents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryZoneStatusUserCmd)
  return target;
}

int QueryZoneStatusUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ZONESTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ZoneInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .Cmd.RecentZoneInfo recents = 4;
  total_size += 1 * this->recents_size();
  for (int i = 0; i < this->recents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryZoneStatusUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryZoneStatusUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryZoneStatusUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryZoneStatusUserCmd::MergeFrom(const QueryZoneStatusUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  recents_.MergeFrom(from.recents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryZoneStatusUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryZoneStatusUserCmd::CopyFrom(const QueryZoneStatusUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryZoneStatusUserCmd::IsInitialized() const {

  return true;
}

void QueryZoneStatusUserCmd::Swap(QueryZoneStatusUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    recents_.Swap(&other->recents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryZoneStatusUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryZoneStatusUserCmd_descriptor_;
  metadata.reflection = QueryZoneStatusUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JumpZoneUserCmd::kCmdFieldNumber;
const int JumpZoneUserCmd::kParamFieldNumber;
const int JumpZoneUserCmd::kNpcidFieldNumber;
const int JumpZoneUserCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

JumpZoneUserCmd::JumpZoneUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JumpZoneUserCmd)
}

void JumpZoneUserCmd::InitAsDefaultInstance() {
}

JumpZoneUserCmd::JumpZoneUserCmd(const JumpZoneUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JumpZoneUserCmd)
}

void JumpZoneUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 92;
  npcid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JumpZoneUserCmd::~JumpZoneUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JumpZoneUserCmd)
  SharedDtor();
}

void JumpZoneUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JumpZoneUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JumpZoneUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JumpZoneUserCmd_descriptor_;
}

const JumpZoneUserCmd& JumpZoneUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

JumpZoneUserCmd* JumpZoneUserCmd::default_instance_ = NULL;

JumpZoneUserCmd* JumpZoneUserCmd::New() const {
  return new JumpZoneUserCmd;
}

void JumpZoneUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JumpZoneUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcid_, zoneid_);
    cmd_ = 9;
    param_ = 92;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JumpZoneUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JumpZoneUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JumpZoneUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JumpZoneUserCmd)
  return false;
#undef DO_
}

void JumpZoneUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JumpZoneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcid(), output);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JumpZoneUserCmd)
}

::google::protobuf::uint8* JumpZoneUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JumpZoneUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcid(), target);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JumpZoneUserCmd)
  return target;
}

int JumpZoneUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_JUMP_ZONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint32 zoneid = 4 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JumpZoneUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JumpZoneUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JumpZoneUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JumpZoneUserCmd::MergeFrom(const JumpZoneUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JumpZoneUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JumpZoneUserCmd::CopyFrom(const JumpZoneUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JumpZoneUserCmd::IsInitialized() const {

  return true;
}

void JumpZoneUserCmd::Swap(JumpZoneUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JumpZoneUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JumpZoneUserCmd_descriptor_;
  metadata.reflection = JumpZoneUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemImageUserNtfUserCmd::kCmdFieldNumber;
const int ItemImageUserNtfUserCmd::kParamFieldNumber;
const int ItemImageUserNtfUserCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

ItemImageUserNtfUserCmd::ItemImageUserNtfUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ItemImageUserNtfUserCmd)
}

void ItemImageUserNtfUserCmd::InitAsDefaultInstance() {
}

ItemImageUserNtfUserCmd::ItemImageUserNtfUserCmd(const ItemImageUserNtfUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ItemImageUserNtfUserCmd)
}

void ItemImageUserNtfUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 93;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemImageUserNtfUserCmd::~ItemImageUserNtfUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ItemImageUserNtfUserCmd)
  SharedDtor();
}

void ItemImageUserNtfUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemImageUserNtfUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemImageUserNtfUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemImageUserNtfUserCmd_descriptor_;
}

const ItemImageUserNtfUserCmd& ItemImageUserNtfUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ItemImageUserNtfUserCmd* ItemImageUserNtfUserCmd::default_instance_ = NULL;

ItemImageUserNtfUserCmd* ItemImageUserNtfUserCmd::New() const {
  return new ItemImageUserNtfUserCmd;
}

void ItemImageUserNtfUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 93;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemImageUserNtfUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ItemImageUserNtfUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ItemImageUserNtfUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ItemImageUserNtfUserCmd)
  return false;
#undef DO_
}

void ItemImageUserNtfUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ItemImageUserNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ItemImageUserNtfUserCmd)
}

::google::protobuf::uint8* ItemImageUserNtfUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ItemImageUserNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ItemImageUserNtfUserCmd)
  return target;
}

int ItemImageUserNtfUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ITEMIMAGE_USER_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemImageUserNtfUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemImageUserNtfUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemImageUserNtfUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemImageUserNtfUserCmd::MergeFrom(const ItemImageUserNtfUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemImageUserNtfUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemImageUserNtfUserCmd::CopyFrom(const ItemImageUserNtfUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemImageUserNtfUserCmd::IsInitialized() const {

  return true;
}

void ItemImageUserNtfUserCmd::Swap(ItemImageUserNtfUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemImageUserNtfUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemImageUserNtfUserCmd_descriptor_;
  metadata.reflection = ItemImageUserNtfUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteFollowUserCmd::kCmdFieldNumber;
const int InviteFollowUserCmd::kParamFieldNumber;
const int InviteFollowUserCmd::kCharidFieldNumber;
const int InviteFollowUserCmd::kFollowFieldNumber;
#endif  // !_MSC_VER

InviteFollowUserCmd::InviteFollowUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteFollowUserCmd)
}

void InviteFollowUserCmd::InitAsDefaultInstance() {
}

InviteFollowUserCmd::InviteFollowUserCmd(const InviteFollowUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteFollowUserCmd)
}

void InviteFollowUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 97;
  charid_ = GOOGLE_ULONGLONG(0);
  follow_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFollowUserCmd::~InviteFollowUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteFollowUserCmd)
  SharedDtor();
}

void InviteFollowUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteFollowUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFollowUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFollowUserCmd_descriptor_;
}

const InviteFollowUserCmd& InviteFollowUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

InviteFollowUserCmd* InviteFollowUserCmd::default_instance_ = NULL;

InviteFollowUserCmd* InviteFollowUserCmd::New() const {
  return new InviteFollowUserCmd;
}

void InviteFollowUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 97;
    charid_ = GOOGLE_ULONGLONG(0);
    follow_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFollowUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteFollowUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_follow;
        break;
      }

      // optional bool follow = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &follow_)));
          set_has_follow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteFollowUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteFollowUserCmd)
  return false;
#undef DO_
}

void InviteFollowUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool follow = 4 [default = true];
  if (has_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->follow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteFollowUserCmd)
}

::google::protobuf::uint8* InviteFollowUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteFollowUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool follow = 4 [default = true];
  if (has_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->follow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteFollowUserCmd)
  return target;
}

int InviteFollowUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEFOLLOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool follow = 4 [default = true];
    if (has_follow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFollowUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFollowUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFollowUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFollowUserCmd::MergeFrom(const InviteFollowUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_follow()) {
      set_follow(from.follow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFollowUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFollowUserCmd::CopyFrom(const InviteFollowUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFollowUserCmd::IsInitialized() const {

  return true;
}

void InviteFollowUserCmd::Swap(InviteFollowUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(follow_, other->follow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFollowUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFollowUserCmd_descriptor_;
  metadata.reflection = InviteFollowUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeNameUserCmd::kCmdFieldNumber;
const int ChangeNameUserCmd::kParamFieldNumber;
const int ChangeNameUserCmd::kNameFieldNumber;
#endif  // !_MSC_VER

ChangeNameUserCmd::ChangeNameUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeNameUserCmd)
}

void ChangeNameUserCmd::InitAsDefaultInstance() {
}

ChangeNameUserCmd::ChangeNameUserCmd(const ChangeNameUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeNameUserCmd)
}

void ChangeNameUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 98;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeNameUserCmd::~ChangeNameUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeNameUserCmd)
  SharedDtor();
}

void ChangeNameUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeNameUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeNameUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeNameUserCmd_descriptor_;
}

const ChangeNameUserCmd& ChangeNameUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ChangeNameUserCmd* ChangeNameUserCmd::default_instance_ = NULL;

ChangeNameUserCmd* ChangeNameUserCmd::New() const {
  return new ChangeNameUserCmd;
}

void ChangeNameUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 98;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeNameUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeNameUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeNameUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeNameUserCmd)
  return false;
#undef DO_
}

void ChangeNameUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeNameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeNameUserCmd)
}

::google::protobuf::uint8* ChangeNameUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeNameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeNameUserCmd)
  return target;
}

int ChangeNameUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGENAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeNameUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeNameUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeNameUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeNameUserCmd::MergeFrom(const ChangeNameUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeNameUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeNameUserCmd::CopyFrom(const ChangeNameUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameUserCmd::IsInitialized() const {

  return true;
}

void ChangeNameUserCmd::Swap(ChangeNameUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeNameUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeNameUserCmd_descriptor_;
  metadata.reflection = ChangeNameUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargePlayUserCmd::kCmdFieldNumber;
const int ChargePlayUserCmd::kParamFieldNumber;
const int ChargePlayUserCmd::kChargeidsFieldNumber;
#endif  // !_MSC_VER

ChargePlayUserCmd::ChargePlayUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargePlayUserCmd)
}

void ChargePlayUserCmd::InitAsDefaultInstance() {
}

ChargePlayUserCmd::ChargePlayUserCmd(const ChargePlayUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargePlayUserCmd)
}

void ChargePlayUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 99;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargePlayUserCmd::~ChargePlayUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChargePlayUserCmd)
  SharedDtor();
}

void ChargePlayUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargePlayUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargePlayUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargePlayUserCmd_descriptor_;
}

const ChargePlayUserCmd& ChargePlayUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ChargePlayUserCmd* ChargePlayUserCmd::default_instance_ = NULL;

ChargePlayUserCmd* ChargePlayUserCmd::New() const {
  return new ChargePlayUserCmd;
}

void ChargePlayUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 99;
  }
  chargeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargePlayUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargePlayUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chargeids;
        break;
      }

      // repeated uint32 chargeids = 3;
      case 3: {
        if (tag == 24) {
         parse_chargeids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_chargeids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chargeids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chargeids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargePlayUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargePlayUserCmd)
  return false;
#undef DO_
}

void ChargePlayUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargePlayUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 chargeids = 3;
  for (int i = 0; i < this->chargeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->chargeids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargePlayUserCmd)
}

::google::protobuf::uint8* ChargePlayUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargePlayUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 chargeids = 3;
  for (int i = 0; i < this->chargeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->chargeids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargePlayUserCmd)
  return target;
}

int ChargePlayUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHARGEPLAY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 chargeids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->chargeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->chargeids(i));
    }
    total_size += 1 * this->chargeids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargePlayUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargePlayUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargePlayUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargePlayUserCmd::MergeFrom(const ChargePlayUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  chargeids_.MergeFrom(from.chargeids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargePlayUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargePlayUserCmd::CopyFrom(const ChargePlayUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargePlayUserCmd::IsInitialized() const {

  return true;
}

void ChargePlayUserCmd::Swap(ChargePlayUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    chargeids_.Swap(&other->chargeids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargePlayUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargePlayUserCmd_descriptor_;
  metadata.reflection = ChargePlayUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequireNpcFuncUserCmd::kCmdFieldNumber;
const int RequireNpcFuncUserCmd::kParamFieldNumber;
const int RequireNpcFuncUserCmd::kNpcidFieldNumber;
const int RequireNpcFuncUserCmd::kFunctionsFieldNumber;
#endif  // !_MSC_VER

RequireNpcFuncUserCmd::RequireNpcFuncUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RequireNpcFuncUserCmd)
}

void RequireNpcFuncUserCmd::InitAsDefaultInstance() {
}

RequireNpcFuncUserCmd::RequireNpcFuncUserCmd(const RequireNpcFuncUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RequireNpcFuncUserCmd)
}

void RequireNpcFuncUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 100;
  npcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequireNpcFuncUserCmd::~RequireNpcFuncUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RequireNpcFuncUserCmd)
  SharedDtor();
}

void RequireNpcFuncUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequireNpcFuncUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequireNpcFuncUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequireNpcFuncUserCmd_descriptor_;
}

const RequireNpcFuncUserCmd& RequireNpcFuncUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

RequireNpcFuncUserCmd* RequireNpcFuncUserCmd::default_instance_ = NULL;

RequireNpcFuncUserCmd* RequireNpcFuncUserCmd::New() const {
  return new RequireNpcFuncUserCmd;
}

void RequireNpcFuncUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 100;
    npcid_ = 0u;
  }
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequireNpcFuncUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RequireNpcFuncUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcid;
        break;
      }

      // optional uint32 npcid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_functions;
        break;
      }

      // repeated string functions = 4;
      case 4: {
        if (tag == 34) {
         parse_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_functions()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->functions(this->functions_size() - 1).data(),
            this->functions(this->functions_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "functions");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_functions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RequireNpcFuncUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RequireNpcFuncUserCmd)
  return false;
#undef DO_
}

void RequireNpcFuncUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RequireNpcFuncUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 npcid = 3 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->npcid(), output);
  }

  // repeated string functions = 4;
  for (int i = 0; i < this->functions_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->functions(i).data(), this->functions(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "functions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->functions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RequireNpcFuncUserCmd)
}

::google::protobuf::uint8* RequireNpcFuncUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RequireNpcFuncUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 npcid = 3 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->npcid(), target);
  }

  // repeated string functions = 4;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->functions(i).data(), this->functions(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "functions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->functions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RequireNpcFuncUserCmd)
  return target;
}

int RequireNpcFuncUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_REQUIRENPCFUNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 npcid = 3 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

  }
  // repeated string functions = 4;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->functions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequireNpcFuncUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequireNpcFuncUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequireNpcFuncUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequireNpcFuncUserCmd::MergeFrom(const RequireNpcFuncUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  functions_.MergeFrom(from.functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequireNpcFuncUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequireNpcFuncUserCmd::CopyFrom(const RequireNpcFuncUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequireNpcFuncUserCmd::IsInitialized() const {

  return true;
}

void RequireNpcFuncUserCmd::Swap(RequireNpcFuncUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcid_, other->npcid_);
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequireNpcFuncUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequireNpcFuncUserCmd_descriptor_;
  metadata.reflection = RequireNpcFuncUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckSeatUserCmd::kCmdFieldNumber;
const int CheckSeatUserCmd::kParamFieldNumber;
const int CheckSeatUserCmd::kSeatidFieldNumber;
const int CheckSeatUserCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

CheckSeatUserCmd::CheckSeatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckSeatUserCmd)
}

void CheckSeatUserCmd::InitAsDefaultInstance() {
}

CheckSeatUserCmd::CheckSeatUserCmd(const CheckSeatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckSeatUserCmd)
}

void CheckSeatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 101;
  seatid_ = 0u;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckSeatUserCmd::~CheckSeatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckSeatUserCmd)
  SharedDtor();
}

void CheckSeatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckSeatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckSeatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckSeatUserCmd_descriptor_;
}

const CheckSeatUserCmd& CheckSeatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CheckSeatUserCmd* CheckSeatUserCmd::default_instance_ = NULL;

CheckSeatUserCmd* CheckSeatUserCmd::New() const {
  return new CheckSeatUserCmd;
}

void CheckSeatUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckSeatUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(seatid_, success_);
    cmd_ = 9;
    param_ = 101;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckSeatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckSeatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // optional uint32 seatid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4;
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckSeatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckSeatUserCmd)
  return false;
#undef DO_
}

void CheckSeatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 seatid = 3 [default = 0];
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->seatid(), output);
  }

  // optional bool success = 4;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckSeatUserCmd)
}

::google::protobuf::uint8* CheckSeatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 seatid = 3 [default = 0];
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->seatid(), target);
  }

  // optional bool success = 4;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckSeatUserCmd)
  return target;
}

int CheckSeatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_SEAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 seatid = 3 [default = 0];
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seatid());
    }

    // optional bool success = 4;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckSeatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckSeatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckSeatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckSeatUserCmd::MergeFrom(const CheckSeatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckSeatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckSeatUserCmd::CopyFrom(const CheckSeatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckSeatUserCmd::IsInitialized() const {

  return true;
}

void CheckSeatUserCmd::Swap(CheckSeatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(seatid_, other->seatid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckSeatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckSeatUserCmd_descriptor_;
  metadata.reflection = CheckSeatUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfSeatUserCmd::kCmdFieldNumber;
const int NtfSeatUserCmd::kParamFieldNumber;
const int NtfSeatUserCmd::kCharidFieldNumber;
const int NtfSeatUserCmd::kSeatidFieldNumber;
const int NtfSeatUserCmd::kIsseatdownFieldNumber;
#endif  // !_MSC_VER

NtfSeatUserCmd::NtfSeatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfSeatUserCmd)
}

void NtfSeatUserCmd::InitAsDefaultInstance() {
}

NtfSeatUserCmd::NtfSeatUserCmd(const NtfSeatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfSeatUserCmd)
}

void NtfSeatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 102;
  charid_ = GOOGLE_ULONGLONG(0);
  seatid_ = 0u;
  isseatdown_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfSeatUserCmd::~NtfSeatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfSeatUserCmd)
  SharedDtor();
}

void NtfSeatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfSeatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfSeatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfSeatUserCmd_descriptor_;
}

const NtfSeatUserCmd& NtfSeatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NtfSeatUserCmd* NtfSeatUserCmd::default_instance_ = NULL;

NtfSeatUserCmd* NtfSeatUserCmd::New() const {
  return new NtfSeatUserCmd;
}

void NtfSeatUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NtfSeatUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, isseatdown_);
    cmd_ = 9;
    param_ = 102;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfSeatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfSeatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_seatid;
        break;
      }

      // optional uint32 seatid = 4;
      case 4: {
        if (tag == 32) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isseatdown;
        break;
      }

      // optional bool isseatdown = 5;
      case 5: {
        if (tag == 40) {
         parse_isseatdown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isseatdown_)));
          set_has_isseatdown();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfSeatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfSeatUserCmd)
  return false;
#undef DO_
}

void NtfSeatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 seatid = 4;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->seatid(), output);
  }

  // optional bool isseatdown = 5;
  if (has_isseatdown()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isseatdown(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfSeatUserCmd)
}

::google::protobuf::uint8* NtfSeatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 seatid = 4;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->seatid(), target);
  }

  // optional bool isseatdown = 5;
  if (has_isseatdown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isseatdown(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfSeatUserCmd)
  return target;
}

int NtfSeatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_SEAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 seatid = 4;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seatid());
    }

    // optional bool isseatdown = 5;
    if (has_isseatdown()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfSeatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfSeatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfSeatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfSeatUserCmd::MergeFrom(const NtfSeatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_isseatdown()) {
      set_isseatdown(from.isseatdown());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfSeatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfSeatUserCmd::CopyFrom(const NtfSeatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfSeatUserCmd::IsInitialized() const {

  return true;
}

void NtfSeatUserCmd::Swap(NtfSeatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(seatid_, other->seatid_);
    std::swap(isseatdown_, other->isseatdown_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfSeatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfSeatUserCmd_descriptor_;
  metadata.reflection = NtfSeatUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YoyoSeatUserCmd::kCmdFieldNumber;
const int YoyoSeatUserCmd::kParamFieldNumber;
const int YoyoSeatUserCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

YoyoSeatUserCmd::YoyoSeatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.YoyoSeatUserCmd)
}

void YoyoSeatUserCmd::InitAsDefaultInstance() {
}

YoyoSeatUserCmd::YoyoSeatUserCmd(const YoyoSeatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.YoyoSeatUserCmd)
}

void YoyoSeatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 114;
  guid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YoyoSeatUserCmd::~YoyoSeatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.YoyoSeatUserCmd)
  SharedDtor();
}

void YoyoSeatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YoyoSeatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YoyoSeatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YoyoSeatUserCmd_descriptor_;
}

const YoyoSeatUserCmd& YoyoSeatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

YoyoSeatUserCmd* YoyoSeatUserCmd::default_instance_ = NULL;

YoyoSeatUserCmd* YoyoSeatUserCmd::New() const {
  return new YoyoSeatUserCmd;
}

void YoyoSeatUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 114;
    guid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YoyoSeatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.YoyoSeatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guid;
        break;
      }

      // optional uint64 guid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.YoyoSeatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.YoyoSeatUserCmd)
  return false;
#undef DO_
}

void YoyoSeatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.YoyoSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.YoyoSeatUserCmd)
}

::google::protobuf::uint8* YoyoSeatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.YoyoSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guid = 3 [default = 0];
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.YoyoSeatUserCmd)
  return target;
}

int YoyoSeatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_YOYO_SEAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guid = 3 [default = 0];
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YoyoSeatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YoyoSeatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YoyoSeatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YoyoSeatUserCmd::MergeFrom(const YoyoSeatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YoyoSeatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YoyoSeatUserCmd::CopyFrom(const YoyoSeatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YoyoSeatUserCmd::IsInitialized() const {

  return true;
}

void YoyoSeatUserCmd::Swap(YoyoSeatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YoyoSeatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YoyoSeatUserCmd_descriptor_;
  metadata.reflection = YoyoSeatUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowSeatUserCmd::kCmdFieldNumber;
const int ShowSeatUserCmd::kParamFieldNumber;
const int ShowSeatUserCmd::kSeatidFieldNumber;
const int ShowSeatUserCmd::kShowFieldNumber;
#endif  // !_MSC_VER

ShowSeatUserCmd::ShowSeatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShowSeatUserCmd)
}

void ShowSeatUserCmd::InitAsDefaultInstance() {
}

ShowSeatUserCmd::ShowSeatUserCmd(const ShowSeatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShowSeatUserCmd)
}

void ShowSeatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 115;
  show_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowSeatUserCmd::~ShowSeatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ShowSeatUserCmd)
  SharedDtor();
}

void ShowSeatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowSeatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowSeatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowSeatUserCmd_descriptor_;
}

const ShowSeatUserCmd& ShowSeatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShowSeatUserCmd* ShowSeatUserCmd::default_instance_ = NULL;

ShowSeatUserCmd* ShowSeatUserCmd::New() const {
  return new ShowSeatUserCmd;
}

void ShowSeatUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 9;
    param_ = 115;
    show_ = 0;
  }
  seatid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowSeatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShowSeatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        break;
      }

      // repeated uint32 seatid = 3;
      case 3: {
        if (tag == 24) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_seatid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_seatid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_seatid;
        if (input->ExpectTag(32)) goto parse_show;
        break;
      }

      // optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
      case 4: {
        if (tag == 32) {
         parse_show:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SeatShowType_IsValid(value)) {
            set_show(static_cast< ::Cmd::SeatShowType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShowSeatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShowSeatUserCmd)
  return false;
#undef DO_
}

void ShowSeatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShowSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 seatid = 3;
  for (int i = 0; i < this->seatid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->seatid(i), output);
  }

  // optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShowSeatUserCmd)
}

::google::protobuf::uint8* ShowSeatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShowSeatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 seatid = 3;
  for (int i = 0; i < this->seatid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->seatid(i), target);
  }

  // optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShowSeatUserCmd)
  return target;
}

int ShowSeatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SHOW_SEAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SeatShowType show = 4 [default = SEAT_SHOW_VISIBLE];
    if (has_show()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->show());
    }

  }
  // repeated uint32 seatid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->seatid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->seatid(i));
    }
    total_size += 1 * this->seatid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowSeatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowSeatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowSeatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowSeatUserCmd::MergeFrom(const ShowSeatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  seatid_.MergeFrom(from.seatid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowSeatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowSeatUserCmd::CopyFrom(const ShowSeatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowSeatUserCmd::IsInitialized() const {

  return true;
}

void ShowSeatUserCmd::Swap(ShowSeatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    seatid_.Swap(&other->seatid_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowSeatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowSeatUserCmd_descriptor_;
  metadata.reflection = ShowSeatUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SetNormalSkillOptionUserCmd::kCmdFieldNumber;
const int SetNormalSkillOptionUserCmd::kParamFieldNumber;
const int SetNormalSkillOptionUserCmd::kFlagFieldNumber;
#endif  // !_MSC_VER

SetNormalSkillOptionUserCmd::SetNormalSkillOptionUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetNormalSkillOptionUserCmd)
}

void SetNormalSkillOptionUserCmd::InitAsDefaultInstance() {
}

SetNormalSkillOptionUserCmd::SetNormalSkillOptionUserCmd(const SetNormalSkillOptionUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetNormalSkillOptionUserCmd)
}

void SetNormalSkillOptionUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 103;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetNormalSkillOptionUserCmd::~SetNormalSkillOptionUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SetNormalSkillOptionUserCmd)
  SharedDtor();
}

void SetNormalSkillOptionUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SetNormalSkillOptionUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetNormalSkillOptionUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetNormalSkillOptionUserCmd_descriptor_;
}

const SetNormalSkillOptionUserCmd& SetNormalSkillOptionUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SetNormalSkillOptionUserCmd* SetNormalSkillOptionUserCmd::default_instance_ = NULL;

SetNormalSkillOptionUserCmd* SetNormalSkillOptionUserCmd::New() const {
  return new SetNormalSkillOptionUserCmd;
}

void SetNormalSkillOptionUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 103;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetNormalSkillOptionUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetNormalSkillOptionUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 3;
      case 3: {
        if (tag == 24) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetNormalSkillOptionUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetNormalSkillOptionUserCmd)
  return false;
#undef DO_
}

void SetNormalSkillOptionUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetNormalSkillOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetNormalSkillOptionUserCmd)
}

::google::protobuf::uint8* SetNormalSkillOptionUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetNormalSkillOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetNormalSkillOptionUserCmd)
  return target;
}

int SetNormalSkillOptionUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SET_NORMALSKILL_OPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 flag = 3;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetNormalSkillOptionUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetNormalSkillOptionUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetNormalSkillOptionUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetNormalSkillOptionUserCmd::MergeFrom(const SetNormalSkillOptionUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetNormalSkillOptionUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetNormalSkillOptionUserCmd::CopyFrom(const SetNormalSkillOptionUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetNormalSkillOptionUserCmd::IsInitialized() const {

  return true;
}

void SetNormalSkillOptionUserCmd::Swap(SetNormalSkillOptionUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetNormalSkillOptionUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetNormalSkillOptionUserCmd_descriptor_;
  metadata.reflection = SetNormalSkillOptionUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewSetOptionUserCmd::kCmdFieldNumber;
const int NewSetOptionUserCmd::kParamFieldNumber;
const int NewSetOptionUserCmd::kTypeFieldNumber;
const int NewSetOptionUserCmd::kFlagFieldNumber;
#endif  // !_MSC_VER

NewSetOptionUserCmd::NewSetOptionUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewSetOptionUserCmd)
}

void NewSetOptionUserCmd::InitAsDefaultInstance() {
}

NewSetOptionUserCmd::NewSetOptionUserCmd(const NewSetOptionUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewSetOptionUserCmd)
}

void NewSetOptionUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 106;
  type_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewSetOptionUserCmd::~NewSetOptionUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NewSetOptionUserCmd)
  SharedDtor();
}

void NewSetOptionUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewSetOptionUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewSetOptionUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewSetOptionUserCmd_descriptor_;
}

const NewSetOptionUserCmd& NewSetOptionUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NewSetOptionUserCmd* NewSetOptionUserCmd::default_instance_ = NULL;

NewSetOptionUserCmd* NewSetOptionUserCmd::New() const {
  return new NewSetOptionUserCmd;
}

void NewSetOptionUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NewSetOptionUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, flag_);
    cmd_ = 9;
    param_ = 106;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewSetOptionUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewSetOptionUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EOptionType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EOptionType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EOptionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 4;
      case 4: {
        if (tag == 32) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewSetOptionUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewSetOptionUserCmd)
  return false;
#undef DO_
}

void NewSetOptionUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewSetOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EOptionType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewSetOptionUserCmd)
}

::google::protobuf::uint8* NewSetOptionUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewSetOptionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EOptionType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewSetOptionUserCmd)
  return target;
}

int NewSetOptionUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NEW_SET_OPTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EOptionType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 flag = 4;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewSetOptionUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewSetOptionUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewSetOptionUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewSetOptionUserCmd::MergeFrom(const NewSetOptionUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewSetOptionUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewSetOptionUserCmd::CopyFrom(const NewSetOptionUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewSetOptionUserCmd::IsInitialized() const {

  return true;
}

void NewSetOptionUserCmd::Swap(NewSetOptionUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewSetOptionUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewSetOptionUserCmd_descriptor_;
  metadata.reflection = NewSetOptionUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsolvedSceneryNtfUserCmd::kCmdFieldNumber;
const int UnsolvedSceneryNtfUserCmd::kParamFieldNumber;
const int UnsolvedSceneryNtfUserCmd::kIdsFieldNumber;
#endif  // !_MSC_VER

UnsolvedSceneryNtfUserCmd::UnsolvedSceneryNtfUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnsolvedSceneryNtfUserCmd)
}

void UnsolvedSceneryNtfUserCmd::InitAsDefaultInstance() {
}

UnsolvedSceneryNtfUserCmd::UnsolvedSceneryNtfUserCmd(const UnsolvedSceneryNtfUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnsolvedSceneryNtfUserCmd)
}

void UnsolvedSceneryNtfUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 104;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsolvedSceneryNtfUserCmd::~UnsolvedSceneryNtfUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UnsolvedSceneryNtfUserCmd)
  SharedDtor();
}

void UnsolvedSceneryNtfUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsolvedSceneryNtfUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsolvedSceneryNtfUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsolvedSceneryNtfUserCmd_descriptor_;
}

const UnsolvedSceneryNtfUserCmd& UnsolvedSceneryNtfUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UnsolvedSceneryNtfUserCmd* UnsolvedSceneryNtfUserCmd::default_instance_ = NULL;

UnsolvedSceneryNtfUserCmd* UnsolvedSceneryNtfUserCmd::New() const {
  return new UnsolvedSceneryNtfUserCmd;
}

void UnsolvedSceneryNtfUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 104;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsolvedSceneryNtfUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnsolvedSceneryNtfUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        break;
      }

      // repeated uint32 ids = 3;
      case 3: {
        if (tag == 24) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnsolvedSceneryNtfUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnsolvedSceneryNtfUserCmd)
  return false;
#undef DO_
}

void UnsolvedSceneryNtfUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnsolvedSceneryNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnsolvedSceneryNtfUserCmd)
}

::google::protobuf::uint8* UnsolvedSceneryNtfUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnsolvedSceneryNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint32 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnsolvedSceneryNtfUserCmd)
  return target;
}

int UnsolvedSceneryNtfUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UNSOLVED_SCENERY_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated uint32 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsolvedSceneryNtfUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsolvedSceneryNtfUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsolvedSceneryNtfUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsolvedSceneryNtfUserCmd::MergeFrom(const UnsolvedSceneryNtfUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsolvedSceneryNtfUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsolvedSceneryNtfUserCmd::CopyFrom(const UnsolvedSceneryNtfUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsolvedSceneryNtfUserCmd::IsInitialized() const {

  return true;
}

void UnsolvedSceneryNtfUserCmd::Swap(UnsolvedSceneryNtfUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsolvedSceneryNtfUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsolvedSceneryNtfUserCmd_descriptor_;
  metadata.reflection = UnsolvedSceneryNtfUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VisibleNpc::kNpcidFieldNumber;
const int VisibleNpc::kPosFieldNumber;
const int VisibleNpc::kUniqueidFieldNumber;
#endif  // !_MSC_VER

VisibleNpc::VisibleNpc()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.VisibleNpc)
}

void VisibleNpc::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

VisibleNpc::VisibleNpc(const VisibleNpc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.VisibleNpc)
}

void VisibleNpc::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0u;
  pos_ = NULL;
  uniqueid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VisibleNpc::~VisibleNpc() {
  // @@protoc_insertion_point(destructor:Cmd.VisibleNpc)
  SharedDtor();
}

void VisibleNpc::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void VisibleNpc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VisibleNpc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VisibleNpc_descriptor_;
}

const VisibleNpc& VisibleNpc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

VisibleNpc* VisibleNpc::default_instance_ = NULL;

VisibleNpc* VisibleNpc::New() const {
  return new VisibleNpc;
}

void VisibleNpc::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VisibleNpc*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(uniqueid_, npcid_);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VisibleNpc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.VisibleNpc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 npcid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 2;
      case 2: {
        if (tag == 18) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_uniqueid;
        break;
      }

      // optional uint64 uniqueid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_uniqueid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uniqueid_)));
          set_has_uniqueid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.VisibleNpc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.VisibleNpc)
  return false;
#undef DO_
}

void VisibleNpc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.VisibleNpc)
  // optional uint32 npcid = 1 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->npcid(), output);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional uint64 uniqueid = 3 [default = 0];
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->uniqueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.VisibleNpc)
}

::google::protobuf::uint8* VisibleNpc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.VisibleNpc)
  // optional uint32 npcid = 1 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->npcid(), target);
  }

  // optional .Cmd.ScenePos pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional uint64 uniqueid = 3 [default = 0];
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->uniqueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.VisibleNpc)
  return target;
}

int VisibleNpc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 npcid = 1 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->npcid());
    }

    // optional .Cmd.ScenePos pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 uniqueid = 3 [default = 0];
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->uniqueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VisibleNpc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VisibleNpc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VisibleNpc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VisibleNpc::MergeFrom(const VisibleNpc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_uniqueid()) {
      set_uniqueid(from.uniqueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VisibleNpc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisibleNpc::CopyFrom(const VisibleNpc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisibleNpc::IsInitialized() const {

  return true;
}

void VisibleNpc::Swap(VisibleNpc* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(pos_, other->pos_);
    std::swap(uniqueid_, other->uniqueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VisibleNpc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VisibleNpc_descriptor_;
  metadata.reflection = VisibleNpc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfVisibleNpcUserCmd::kCmdFieldNumber;
const int NtfVisibleNpcUserCmd::kParamFieldNumber;
const int NtfVisibleNpcUserCmd::kNpcsFieldNumber;
const int NtfVisibleNpcUserCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

NtfVisibleNpcUserCmd::NtfVisibleNpcUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfVisibleNpcUserCmd)
}

void NtfVisibleNpcUserCmd::InitAsDefaultInstance() {
}

NtfVisibleNpcUserCmd::NtfVisibleNpcUserCmd(const NtfVisibleNpcUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfVisibleNpcUserCmd)
}

void NtfVisibleNpcUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 105;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfVisibleNpcUserCmd::~NtfVisibleNpcUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NtfVisibleNpcUserCmd)
  SharedDtor();
}

void NtfVisibleNpcUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfVisibleNpcUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfVisibleNpcUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfVisibleNpcUserCmd_descriptor_;
}

const NtfVisibleNpcUserCmd& NtfVisibleNpcUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

NtfVisibleNpcUserCmd* NtfVisibleNpcUserCmd::default_instance_ = NULL;

NtfVisibleNpcUserCmd* NtfVisibleNpcUserCmd::New() const {
  return new NtfVisibleNpcUserCmd;
}

void NtfVisibleNpcUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 9;
    param_ = 105;
    type_ = 0u;
  }
  npcs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfVisibleNpcUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfVisibleNpcUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcs;
        break;
      }

      // repeated .Cmd.VisibleNpc npcs = 3;
      case 3: {
        if (tag == 26) {
         parse_npcs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_npcs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_npcs;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfVisibleNpcUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfVisibleNpcUserCmd)
  return false;
#undef DO_
}

void NtfVisibleNpcUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfVisibleNpcUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.VisibleNpc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->npcs(i), output);
  }

  // optional uint32 type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfVisibleNpcUserCmd)
}

::google::protobuf::uint8* NtfVisibleNpcUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfVisibleNpcUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.VisibleNpc npcs = 3;
  for (int i = 0; i < this->npcs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->npcs(i), target);
  }

  // optional uint32 type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfVisibleNpcUserCmd)
  return target;
}

int NtfVisibleNpcUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_NTF_VISIBLENPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .Cmd.VisibleNpc npcs = 3;
  total_size += 1 * this->npcs_size();
  for (int i = 0; i < this->npcs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->npcs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfVisibleNpcUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfVisibleNpcUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfVisibleNpcUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfVisibleNpcUserCmd::MergeFrom(const NtfVisibleNpcUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  npcs_.MergeFrom(from.npcs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfVisibleNpcUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfVisibleNpcUserCmd::CopyFrom(const NtfVisibleNpcUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfVisibleNpcUserCmd::IsInitialized() const {

  return true;
}

void NtfVisibleNpcUserCmd::Swap(NtfVisibleNpcUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    npcs_.Swap(&other->npcs_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfVisibleNpcUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfVisibleNpcUserCmd_descriptor_;
  metadata.reflection = NtfVisibleNpcUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpyunAuthorizationCmd::kCmdFieldNumber;
const int UpyunAuthorizationCmd::kParamFieldNumber;
const int UpyunAuthorizationCmd::kAuthvalueFieldNumber;
#endif  // !_MSC_VER

UpyunAuthorizationCmd::UpyunAuthorizationCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpyunAuthorizationCmd)
}

void UpyunAuthorizationCmd::InitAsDefaultInstance() {
}

UpyunAuthorizationCmd::UpyunAuthorizationCmd(const UpyunAuthorizationCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpyunAuthorizationCmd)
}

void UpyunAuthorizationCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 107;
  authvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpyunAuthorizationCmd::~UpyunAuthorizationCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpyunAuthorizationCmd)
  SharedDtor();
}

void UpyunAuthorizationCmd::SharedDtor() {
  if (authvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete authvalue_;
  }
  if (this != default_instance_) {
  }
}

void UpyunAuthorizationCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpyunAuthorizationCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpyunAuthorizationCmd_descriptor_;
}

const UpyunAuthorizationCmd& UpyunAuthorizationCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpyunAuthorizationCmd* UpyunAuthorizationCmd::default_instance_ = NULL;

UpyunAuthorizationCmd* UpyunAuthorizationCmd::New() const {
  return new UpyunAuthorizationCmd;
}

void UpyunAuthorizationCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 107;
    if (has_authvalue()) {
      if (authvalue_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        authvalue_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpyunAuthorizationCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpyunAuthorizationCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_authvalue;
        break;
      }

      // optional string authvalue = 3;
      case 3: {
        if (tag == 26) {
         parse_authvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->authvalue().data(), this->authvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "authvalue");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpyunAuthorizationCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpyunAuthorizationCmd)
  return false;
#undef DO_
}

void UpyunAuthorizationCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpyunAuthorizationCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string authvalue = 3;
  if (has_authvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authvalue().data(), this->authvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authvalue");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->authvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpyunAuthorizationCmd)
}

::google::protobuf::uint8* UpyunAuthorizationCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpyunAuthorizationCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string authvalue = 3;
  if (has_authvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->authvalue().data(), this->authvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "authvalue");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->authvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpyunAuthorizationCmd)
  return target;
}

int UpyunAuthorizationCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPYUN_AUTHORIZATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string authvalue = 3;
    if (has_authvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpyunAuthorizationCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpyunAuthorizationCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpyunAuthorizationCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpyunAuthorizationCmd::MergeFrom(const UpyunAuthorizationCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_authvalue()) {
      set_authvalue(from.authvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpyunAuthorizationCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpyunAuthorizationCmd::CopyFrom(const UpyunAuthorizationCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpyunAuthorizationCmd::IsInitialized() const {

  return true;
}

void UpyunAuthorizationCmd::Swap(UpyunAuthorizationCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(authvalue_, other->authvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpyunAuthorizationCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpyunAuthorizationCmd_descriptor_;
  metadata.reflection = UpyunAuthorizationCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransformPreDataCmd::kCmdFieldNumber;
const int TransformPreDataCmd::kParamFieldNumber;
const int TransformPreDataCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

TransformPreDataCmd::TransformPreDataCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TransformPreDataCmd)
}

void TransformPreDataCmd::InitAsDefaultInstance() {
}

TransformPreDataCmd::TransformPreDataCmd(const TransformPreDataCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TransformPreDataCmd)
}

void TransformPreDataCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 108;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransformPreDataCmd::~TransformPreDataCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TransformPreDataCmd)
  SharedDtor();
}

void TransformPreDataCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransformPreDataCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransformPreDataCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransformPreDataCmd_descriptor_;
}

const TransformPreDataCmd& TransformPreDataCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TransformPreDataCmd* TransformPreDataCmd::default_instance_ = NULL;

TransformPreDataCmd* TransformPreDataCmd::New() const {
  return new TransformPreDataCmd;
}

void TransformPreDataCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 108;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransformPreDataCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TransformPreDataCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TransformPreDataCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TransformPreDataCmd)
  return false;
#undef DO_
}

void TransformPreDataCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TransformPreDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.UserData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TransformPreDataCmd)
}

::google::protobuf::uint8* TransformPreDataCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TransformPreDataCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.UserData datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TransformPreDataCmd)
  return target;
}

int TransformPreDataCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TRANSFORM_PREDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.UserData datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransformPreDataCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransformPreDataCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransformPreDataCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransformPreDataCmd::MergeFrom(const TransformPreDataCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransformPreDataCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransformPreDataCmd::CopyFrom(const TransformPreDataCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformPreDataCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void TransformPreDataCmd::Swap(TransformPreDataCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransformPreDataCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransformPreDataCmd_descriptor_;
  metadata.reflection = TransformPreDataCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRenameCmd::kCmdFieldNumber;
const int UserRenameCmd::kParamFieldNumber;
const int UserRenameCmd::kNameFieldNumber;
const int UserRenameCmd::kCodeFieldNumber;
#endif  // !_MSC_VER

UserRenameCmd::UserRenameCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserRenameCmd)
}

void UserRenameCmd::InitAsDefaultInstance() {
}

UserRenameCmd::UserRenameCmd(const UserRenameCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserRenameCmd)
}

void UserRenameCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 109;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRenameCmd::~UserRenameCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserRenameCmd)
  SharedDtor();
}

void UserRenameCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserRenameCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRenameCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRenameCmd_descriptor_;
}

const UserRenameCmd& UserRenameCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserRenameCmd* UserRenameCmd::default_instance_ = NULL;

UserRenameCmd* UserRenameCmd::New() const {
  return new UserRenameCmd;
}

void UserRenameCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 109;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRenameCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserRenameCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_code;
        break;
      }

      // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
      case 4: {
        if (tag == 32) {
         parse_code:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERenameErrCode_IsValid(value)) {
            set_code(static_cast< ::Cmd::ERenameErrCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserRenameCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserRenameCmd)
  return false;
#undef DO_
}

void UserRenameCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserRenameCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserRenameCmd)
}

::google::protobuf::uint8* UserRenameCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserRenameCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserRenameCmd)
  return target;
}

int UserRenameCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_RENAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.ERenameErrCode code = 4 [default = ERENAME_SUCCESS];
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRenameCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRenameCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRenameCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRenameCmd::MergeFrom(const UserRenameCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRenameCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRenameCmd::CopyFrom(const UserRenameCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRenameCmd::IsInitialized() const {

  return true;
}

void UserRenameCmd::Swap(UserRenameCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRenameCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRenameCmd_descriptor_;
  metadata.reflection = UserRenameCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyZenyCmd::kCmdFieldNumber;
const int BuyZenyCmd::kParamFieldNumber;
const int BuyZenyCmd::kBcoinFieldNumber;
const int BuyZenyCmd::kZenyFieldNumber;
const int BuyZenyCmd::kRetFieldNumber;
#endif  // !_MSC_VER

BuyZenyCmd::BuyZenyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuyZenyCmd)
}

void BuyZenyCmd::InitAsDefaultInstance() {
}

BuyZenyCmd::BuyZenyCmd(const BuyZenyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuyZenyCmd)
}

void BuyZenyCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 111;
  bcoin_ = 0u;
  zeny_ = GOOGLE_ULONGLONG(0);
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyZenyCmd::~BuyZenyCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuyZenyCmd)
  SharedDtor();
}

void BuyZenyCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyZenyCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyZenyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyZenyCmd_descriptor_;
}

const BuyZenyCmd& BuyZenyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BuyZenyCmd* BuyZenyCmd::default_instance_ = NULL;

BuyZenyCmd* BuyZenyCmd::New() const {
  return new BuyZenyCmd;
}

void BuyZenyCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyZenyCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(zeny_, ret_);
    cmd_ = 9;
    param_ = 111;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyZenyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuyZenyCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_bcoin;
        break;
      }

      // optional uint32 bcoin = 3;
      case 3: {
        if (tag == 24) {
         parse_bcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcoin_)));
          set_has_bcoin();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zeny;
        break;
      }

      // optional uint64 zeny = 4;
      case 4: {
        if (tag == 32) {
         parse_zeny:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &zeny_)));
          set_has_zeny();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional bool ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuyZenyCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuyZenyCmd)
  return false;
#undef DO_
}

void BuyZenyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuyZenyCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 bcoin = 3;
  if (has_bcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bcoin(), output);
  }

  // optional uint64 zeny = 4;
  if (has_zeny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->zeny(), output);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuyZenyCmd)
}

::google::protobuf::uint8* BuyZenyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuyZenyCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 bcoin = 3;
  if (has_bcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bcoin(), target);
  }

  // optional uint64 zeny = 4;
  if (has_zeny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->zeny(), target);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuyZenyCmd)
  return target;
}

int BuyZenyCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_ZENY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 bcoin = 3;
    if (has_bcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcoin());
    }

    // optional uint64 zeny = 4;
    if (has_zeny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->zeny());
    }

    // optional bool ret = 5;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyZenyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyZenyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyZenyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyZenyCmd::MergeFrom(const BuyZenyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_bcoin()) {
      set_bcoin(from.bcoin());
    }
    if (from.has_zeny()) {
      set_zeny(from.zeny());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyZenyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyZenyCmd::CopyFrom(const BuyZenyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyZenyCmd::IsInitialized() const {

  return true;
}

void BuyZenyCmd::Swap(BuyZenyCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(bcoin_, other->bcoin_);
    std::swap(zeny_, other->zeny_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyZenyCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyZenyCmd_descriptor_;
  metadata.reflection = BuyZenyCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallTeamerUserCmd::kCmdFieldNumber;
const int CallTeamerUserCmd::kParamFieldNumber;
const int CallTeamerUserCmd::kMasteridFieldNumber;
const int CallTeamerUserCmd::kSignFieldNumber;
const int CallTeamerUserCmd::kTimeFieldNumber;
const int CallTeamerUserCmd::kUsernameFieldNumber;
const int CallTeamerUserCmd::kMapidFieldNumber;
const int CallTeamerUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

CallTeamerUserCmd::CallTeamerUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CallTeamerUserCmd)
}

void CallTeamerUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

CallTeamerUserCmd::CallTeamerUserCmd(const CallTeamerUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CallTeamerUserCmd)
}

void CallTeamerUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 112;
  masterid_ = GOOGLE_ULONGLONG(0);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mapid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallTeamerUserCmd::~CallTeamerUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CallTeamerUserCmd)
  SharedDtor();
}

void CallTeamerUserCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void CallTeamerUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallTeamerUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallTeamerUserCmd_descriptor_;
}

const CallTeamerUserCmd& CallTeamerUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CallTeamerUserCmd* CallTeamerUserCmd::default_instance_ = NULL;

CallTeamerUserCmd* CallTeamerUserCmd::New() const {
  return new CallTeamerUserCmd;
}

void CallTeamerUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CallTeamerUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(time_, mapid_);
    cmd_ = 9;
    param_ = 112;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallTeamerUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CallTeamerUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_username;
        break;
      }

      // optional string username = 6;
      case 6: {
        if (tag == 50) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 8;
      case 8: {
        if (tag == 66) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CallTeamerUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CallTeamerUserCmd)
  return false;
#undef DO_
}

void CallTeamerUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CallTeamerUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->username(), output);
  }

  // optional uint32 mapid = 7 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mapid(), output);
  }

  // optional .Cmd.ScenePos pos = 8;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CallTeamerUserCmd)
}

::google::protobuf::uint8* CallTeamerUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CallTeamerUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional string username = 6;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->username(), target);
  }

  // optional uint32 mapid = 7 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mapid(), target);
  }

  // optional .Cmd.ScenePos pos = 8;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CallTeamerUserCmd)
  return target;
}

int CallTeamerUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string username = 6;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional uint32 mapid = 7 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.ScenePos pos = 8;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallTeamerUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallTeamerUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallTeamerUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallTeamerUserCmd::MergeFrom(const CallTeamerUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallTeamerUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallTeamerUserCmd::CopyFrom(const CallTeamerUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallTeamerUserCmd::IsInitialized() const {

  return true;
}

void CallTeamerUserCmd::Swap(CallTeamerUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(sign_, other->sign_);
    std::swap(time_, other->time_);
    std::swap(username_, other->username_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallTeamerUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallTeamerUserCmd_descriptor_;
  metadata.reflection = CallTeamerUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallTeamerReplyUserCmd::kCmdFieldNumber;
const int CallTeamerReplyUserCmd::kParamFieldNumber;
const int CallTeamerReplyUserCmd::kMasteridFieldNumber;
const int CallTeamerReplyUserCmd::kSignFieldNumber;
const int CallTeamerReplyUserCmd::kTimeFieldNumber;
const int CallTeamerReplyUserCmd::kMapidFieldNumber;
const int CallTeamerReplyUserCmd::kPosFieldNumber;
#endif  // !_MSC_VER

CallTeamerReplyUserCmd::CallTeamerReplyUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CallTeamerReplyUserCmd)
}

void CallTeamerReplyUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

CallTeamerReplyUserCmd::CallTeamerReplyUserCmd(const CallTeamerReplyUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CallTeamerReplyUserCmd)
}

void CallTeamerReplyUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 113;
  masterid_ = GOOGLE_ULONGLONG(0);
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  mapid_ = 0u;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallTeamerReplyUserCmd::~CallTeamerReplyUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CallTeamerReplyUserCmd)
  SharedDtor();
}

void CallTeamerReplyUserCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
    delete pos_;
  }
}

void CallTeamerReplyUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallTeamerReplyUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallTeamerReplyUserCmd_descriptor_;
}

const CallTeamerReplyUserCmd& CallTeamerReplyUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CallTeamerReplyUserCmd* CallTeamerReplyUserCmd::default_instance_ = NULL;

CallTeamerReplyUserCmd* CallTeamerReplyUserCmd::New() const {
  return new CallTeamerReplyUserCmd;
}

void CallTeamerReplyUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CallTeamerReplyUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(time_, mapid_);
    cmd_ = 9;
    param_ = 113;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallTeamerReplyUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CallTeamerReplyUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sign;
        break;
      }

      // optional string sign = 4;
      case 4: {
        if (tag == 34) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 7;
      case 7: {
        if (tag == 58) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CallTeamerReplyUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CallTeamerReplyUserCmd)
  return false;
#undef DO_
}

void CallTeamerReplyUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CallTeamerReplyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sign(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 mapid = 6 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->mapid(), output);
  }

  // optional .Cmd.ScenePos pos = 7;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CallTeamerReplyUserCmd)
}

::google::protobuf::uint8* CallTeamerReplyUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CallTeamerReplyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string sign = 4;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sign(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 mapid = 6 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->mapid(), target);
  }

  // optional .Cmd.ScenePos pos = 7;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CallTeamerReplyUserCmd)
  return target;
}

int CallTeamerReplyUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CALL_TEAMER_JOIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string sign = 4;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 mapid = 6 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .Cmd.ScenePos pos = 7;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallTeamerReplyUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallTeamerReplyUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallTeamerReplyUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallTeamerReplyUserCmd::MergeFrom(const CallTeamerReplyUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallTeamerReplyUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallTeamerReplyUserCmd::CopyFrom(const CallTeamerReplyUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallTeamerReplyUserCmd::IsInitialized() const {

  return true;
}

void CallTeamerReplyUserCmd::Swap(CallTeamerReplyUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(sign_, other->sign_);
    std::swap(time_, other->time_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallTeamerReplyUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallTeamerReplyUserCmd_descriptor_;
  metadata.reflection = CallTeamerReplyUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SpecialEffectCmd::kCmdFieldNumber;
const int SpecialEffectCmd::kParamFieldNumber;
const int SpecialEffectCmd::kDramaidFieldNumber;
const int SpecialEffectCmd::kStarttimeFieldNumber;
const int SpecialEffectCmd::kTimesFieldNumber;
#endif  // !_MSC_VER

SpecialEffectCmd::SpecialEffectCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SpecialEffectCmd)
}

void SpecialEffectCmd::InitAsDefaultInstance() {
}

SpecialEffectCmd::SpecialEffectCmd(const SpecialEffectCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SpecialEffectCmd)
}

void SpecialEffectCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 116;
  dramaid_ = 0u;
  starttime_ = 0u;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SpecialEffectCmd::~SpecialEffectCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SpecialEffectCmd)
  SharedDtor();
}

void SpecialEffectCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SpecialEffectCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SpecialEffectCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SpecialEffectCmd_descriptor_;
}

const SpecialEffectCmd& SpecialEffectCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SpecialEffectCmd* SpecialEffectCmd::default_instance_ = NULL;

SpecialEffectCmd* SpecialEffectCmd::New() const {
  return new SpecialEffectCmd;
}

void SpecialEffectCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SpecialEffectCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(dramaid_, times_);
    cmd_ = 9;
    param_ = 116;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SpecialEffectCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SpecialEffectCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dramaid;
        break;
      }

      // optional uint32 dramaid = 3;
      case 3: {
        if (tag == 24) {
         parse_dramaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dramaid_)));
          set_has_dramaid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 4;
      case 4: {
        if (tag == 32) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional uint32 times = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SpecialEffectCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SpecialEffectCmd)
  return false;
#undef DO_
}

void SpecialEffectCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SpecialEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dramaid = 3;
  if (has_dramaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dramaid(), output);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->starttime(), output);
  }

  // optional uint32 times = 5 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SpecialEffectCmd)
}

::google::protobuf::uint8* SpecialEffectCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SpecialEffectCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dramaid = 3;
  if (has_dramaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dramaid(), target);
  }

  // optional uint32 starttime = 4;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->starttime(), target);
  }

  // optional uint32 times = 5 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SpecialEffectCmd)
  return target;
}

int SpecialEffectCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SPECIAL_EFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dramaid = 3;
    if (has_dramaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dramaid());
    }

    // optional uint32 starttime = 4;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 times = 5 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SpecialEffectCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SpecialEffectCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SpecialEffectCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SpecialEffectCmd::MergeFrom(const SpecialEffectCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dramaid()) {
      set_dramaid(from.dramaid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SpecialEffectCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpecialEffectCmd::CopyFrom(const SpecialEffectCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpecialEffectCmd::IsInitialized() const {

  return true;
}

void SpecialEffectCmd::Swap(SpecialEffectCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dramaid_, other->dramaid_);
    std::swap(starttime_, other->starttime_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SpecialEffectCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SpecialEffectCmd_descriptor_;
  metadata.reflection = SpecialEffectCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageProposalCmd::kCmdFieldNumber;
const int MarriageProposalCmd::kParamFieldNumber;
const int MarriageProposalCmd::kMasteridFieldNumber;
const int MarriageProposalCmd::kItemidFieldNumber;
const int MarriageProposalCmd::kTimeFieldNumber;
const int MarriageProposalCmd::kMasternameFieldNumber;
const int MarriageProposalCmd::kSignFieldNumber;
#endif  // !_MSC_VER

MarriageProposalCmd::MarriageProposalCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarriageProposalCmd)
}

void MarriageProposalCmd::InitAsDefaultInstance() {
}

MarriageProposalCmd::MarriageProposalCmd(const MarriageProposalCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarriageProposalCmd)
}

void MarriageProposalCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 117;
  masterid_ = GOOGLE_ULONGLONG(0);
  itemid_ = 0u;
  time_ = 0u;
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageProposalCmd::~MarriageProposalCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarriageProposalCmd)
  SharedDtor();
}

void MarriageProposalCmd::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void MarriageProposalCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageProposalCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageProposalCmd_descriptor_;
}

const MarriageProposalCmd& MarriageProposalCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MarriageProposalCmd* MarriageProposalCmd::default_instance_ = NULL;

MarriageProposalCmd* MarriageProposalCmd::New() const {
  return new MarriageProposalCmd;
}

void MarriageProposalCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarriageProposalCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(masterid_, time_);
    cmd_ = 9;
    param_ = 117;
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageProposalCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarriageProposalCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_mastername;
        break;
      }

      // optional string mastername = 6;
      case 6: {
        if (tag == 50) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional bytes sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarriageProposalCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarriageProposalCmd)
  return false;
#undef DO_
}

void MarriageProposalCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarriageProposalCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional string mastername = 6;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->mastername(), output);
  }

  // optional bytes sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarriageProposalCmd)
}

::google::protobuf::uint8* MarriageProposalCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarriageProposalCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional string mastername = 6;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->mastername(), target);
  }

  // optional bytes sign = 7;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarriageProposalCmd)
  return target;
}

int MarriageProposalCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint32 itemid = 4 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string mastername = 6;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

    // optional bytes sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageProposalCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageProposalCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageProposalCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageProposalCmd::MergeFrom(const MarriageProposalCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageProposalCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageProposalCmd::CopyFrom(const MarriageProposalCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageProposalCmd::IsInitialized() const {

  return true;
}

void MarriageProposalCmd::Swap(MarriageProposalCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(itemid_, other->itemid_);
    std::swap(time_, other->time_);
    std::swap(mastername_, other->mastername_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageProposalCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageProposalCmd_descriptor_;
  metadata.reflection = MarriageProposalCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageProposalReplyCmd::kCmdFieldNumber;
const int MarriageProposalReplyCmd::kParamFieldNumber;
const int MarriageProposalReplyCmd::kMasteridFieldNumber;
const int MarriageProposalReplyCmd::kReplyFieldNumber;
const int MarriageProposalReplyCmd::kTimeFieldNumber;
const int MarriageProposalReplyCmd::kSignFieldNumber;
#endif  // !_MSC_VER

MarriageProposalReplyCmd::MarriageProposalReplyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarriageProposalReplyCmd)
}

void MarriageProposalReplyCmd::InitAsDefaultInstance() {
}

MarriageProposalReplyCmd::MarriageProposalReplyCmd(const MarriageProposalReplyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarriageProposalReplyCmd)
}

void MarriageProposalReplyCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 118;
  masterid_ = GOOGLE_ULONGLONG(0);
  reply_ = 0;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageProposalReplyCmd::~MarriageProposalReplyCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarriageProposalReplyCmd)
  SharedDtor();
}

void MarriageProposalReplyCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void MarriageProposalReplyCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageProposalReplyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageProposalReplyCmd_descriptor_;
}

const MarriageProposalReplyCmd& MarriageProposalReplyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MarriageProposalReplyCmd* MarriageProposalReplyCmd::default_instance_ = NULL;

MarriageProposalReplyCmd* MarriageProposalReplyCmd::New() const {
  return new MarriageProposalReplyCmd;
}

void MarriageProposalReplyCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarriageProposalReplyCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(masterid_, time_);
    cmd_ = 9;
    param_ = 118;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageProposalReplyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarriageProposalReplyCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_reply;
        break;
      }

      // optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
      case 4: {
        if (tag == 32) {
         parse_reply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProposalReply_IsValid(value)) {
            set_reply(static_cast< ::Cmd::EProposalReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional string sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarriageProposalReplyCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarriageProposalReplyCmd)
  return false;
#undef DO_
}

void MarriageProposalReplyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarriageProposalReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->reply(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarriageProposalReplyCmd)
}

::google::protobuf::uint8* MarriageProposalReplyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarriageProposalReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->reply(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional string sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarriageProposalReplyCmd)
  return target;
}

int MarriageProposalReplyCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional .Cmd.EProposalReply reply = 4 [default = EPROPOSALREPLY_YES];
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reply());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageProposalReplyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageProposalReplyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageProposalReplyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageProposalReplyCmd::MergeFrom(const MarriageProposalReplyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageProposalReplyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageProposalReplyCmd::CopyFrom(const MarriageProposalReplyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageProposalReplyCmd::IsInitialized() const {

  return true;
}

void MarriageProposalReplyCmd::Swap(MarriageProposalReplyCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(reply_, other->reply_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageProposalReplyCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageProposalReplyCmd_descriptor_;
  metadata.reflection = MarriageProposalReplyCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UploadWeddingPhotoUserCmd::kCmdFieldNumber;
const int UploadWeddingPhotoUserCmd::kParamFieldNumber;
const int UploadWeddingPhotoUserCmd::kItemguidFieldNumber;
const int UploadWeddingPhotoUserCmd::kIndexFieldNumber;
const int UploadWeddingPhotoUserCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

UploadWeddingPhotoUserCmd::UploadWeddingPhotoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UploadWeddingPhotoUserCmd)
}

void UploadWeddingPhotoUserCmd::InitAsDefaultInstance() {
}

UploadWeddingPhotoUserCmd::UploadWeddingPhotoUserCmd(const UploadWeddingPhotoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UploadWeddingPhotoUserCmd)
}

void UploadWeddingPhotoUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 119;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UploadWeddingPhotoUserCmd::~UploadWeddingPhotoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UploadWeddingPhotoUserCmd)
  SharedDtor();
}

void UploadWeddingPhotoUserCmd::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (this != default_instance_) {
  }
}

void UploadWeddingPhotoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UploadWeddingPhotoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UploadWeddingPhotoUserCmd_descriptor_;
}

const UploadWeddingPhotoUserCmd& UploadWeddingPhotoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UploadWeddingPhotoUserCmd* UploadWeddingPhotoUserCmd::default_instance_ = NULL;

UploadWeddingPhotoUserCmd* UploadWeddingPhotoUserCmd::New() const {
  return new UploadWeddingPhotoUserCmd;
}

void UploadWeddingPhotoUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UploadWeddingPhotoUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(index_, time_);
    cmd_ = 9;
    param_ = 119;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UploadWeddingPhotoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UploadWeddingPhotoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 3;
      case 3: {
        if (tag == 26) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UploadWeddingPhotoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UploadWeddingPhotoUserCmd)
  return false;
#undef DO_
}

void UploadWeddingPhotoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UploadWeddingPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->itemguid(), output);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UploadWeddingPhotoUserCmd)
}

::google::protobuf::uint8* UploadWeddingPhotoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UploadWeddingPhotoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemguid(), target);
  }

  // optional uint32 index = 4 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UploadWeddingPhotoUserCmd)
  return target;
}

int UploadWeddingPhotoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPLOAD_WEDDING_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string itemguid = 3;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

    // optional uint32 index = 4 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadWeddingPhotoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UploadWeddingPhotoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UploadWeddingPhotoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UploadWeddingPhotoUserCmd::MergeFrom(const UploadWeddingPhotoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UploadWeddingPhotoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UploadWeddingPhotoUserCmd::CopyFrom(const UploadWeddingPhotoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadWeddingPhotoUserCmd::IsInitialized() const {

  return true;
}

void UploadWeddingPhotoUserCmd::Swap(UploadWeddingPhotoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UploadWeddingPhotoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UploadWeddingPhotoUserCmd_descriptor_;
  metadata.reflection = UploadWeddingPhotoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarriageProposalSuccessCmd::kCmdFieldNumber;
const int MarriageProposalSuccessCmd::kParamFieldNumber;
const int MarriageProposalSuccessCmd::kCharidFieldNumber;
const int MarriageProposalSuccessCmd::kIsmasterFieldNumber;
#endif  // !_MSC_VER

MarriageProposalSuccessCmd::MarriageProposalSuccessCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarriageProposalSuccessCmd)
}

void MarriageProposalSuccessCmd::InitAsDefaultInstance() {
}

MarriageProposalSuccessCmd::MarriageProposalSuccessCmd(const MarriageProposalSuccessCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarriageProposalSuccessCmd)
}

void MarriageProposalSuccessCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 120;
  charid_ = GOOGLE_ULONGLONG(0);
  ismaster_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarriageProposalSuccessCmd::~MarriageProposalSuccessCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarriageProposalSuccessCmd)
  SharedDtor();
}

void MarriageProposalSuccessCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarriageProposalSuccessCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarriageProposalSuccessCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarriageProposalSuccessCmd_descriptor_;
}

const MarriageProposalSuccessCmd& MarriageProposalSuccessCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

MarriageProposalSuccessCmd* MarriageProposalSuccessCmd::default_instance_ = NULL;

MarriageProposalSuccessCmd* MarriageProposalSuccessCmd::New() const {
  return new MarriageProposalSuccessCmd;
}

void MarriageProposalSuccessCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 120;
    charid_ = GOOGLE_ULONGLONG(0);
    ismaster_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarriageProposalSuccessCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarriageProposalSuccessCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ismaster;
        break;
      }

      // optional bool ismaster = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_ismaster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismaster_)));
          set_has_ismaster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarriageProposalSuccessCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarriageProposalSuccessCmd)
  return false;
#undef DO_
}

void MarriageProposalSuccessCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarriageProposalSuccessCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool ismaster = 4 [default = true];
  if (has_ismaster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ismaster(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarriageProposalSuccessCmd)
}

::google::protobuf::uint8* MarriageProposalSuccessCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarriageProposalSuccessCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool ismaster = 4 [default = true];
  if (has_ismaster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ismaster(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarriageProposalSuccessCmd)
  return target;
}

int MarriageProposalSuccessCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_MARRIAGE_PROPOSAL_SUCCESS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool ismaster = 4 [default = true];
    if (has_ismaster()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarriageProposalSuccessCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarriageProposalSuccessCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarriageProposalSuccessCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarriageProposalSuccessCmd::MergeFrom(const MarriageProposalSuccessCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ismaster()) {
      set_ismaster(from.ismaster());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarriageProposalSuccessCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarriageProposalSuccessCmd::CopyFrom(const MarriageProposalSuccessCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarriageProposalSuccessCmd::IsInitialized() const {

  return true;
}

void MarriageProposalSuccessCmd::Swap(MarriageProposalSuccessCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(ismaster_, other->ismaster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarriageProposalSuccessCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarriageProposalSuccessCmd_descriptor_;
  metadata.reflection = MarriageProposalSuccessCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteeWeddingStartNtfUserCmd::kCmdFieldNumber;
const int InviteeWeddingStartNtfUserCmd::kParamFieldNumber;
const int InviteeWeddingStartNtfUserCmd::kItemguidFieldNumber;
#endif  // !_MSC_VER

InviteeWeddingStartNtfUserCmd::InviteeWeddingStartNtfUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteeWeddingStartNtfUserCmd)
}

void InviteeWeddingStartNtfUserCmd::InitAsDefaultInstance() {
}

InviteeWeddingStartNtfUserCmd::InviteeWeddingStartNtfUserCmd(const InviteeWeddingStartNtfUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteeWeddingStartNtfUserCmd)
}

void InviteeWeddingStartNtfUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 121;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteeWeddingStartNtfUserCmd::~InviteeWeddingStartNtfUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteeWeddingStartNtfUserCmd)
  SharedDtor();
}

void InviteeWeddingStartNtfUserCmd::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (this != default_instance_) {
  }
}

void InviteeWeddingStartNtfUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteeWeddingStartNtfUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteeWeddingStartNtfUserCmd_descriptor_;
}

const InviteeWeddingStartNtfUserCmd& InviteeWeddingStartNtfUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

InviteeWeddingStartNtfUserCmd* InviteeWeddingStartNtfUserCmd::default_instance_ = NULL;

InviteeWeddingStartNtfUserCmd* InviteeWeddingStartNtfUserCmd::New() const {
  return new InviteeWeddingStartNtfUserCmd;
}

void InviteeWeddingStartNtfUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 121;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteeWeddingStartNtfUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteeWeddingStartNtfUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 3;
      case 3: {
        if (tag == 26) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteeWeddingStartNtfUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteeWeddingStartNtfUserCmd)
  return false;
#undef DO_
}

void InviteeWeddingStartNtfUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteeWeddingStartNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->itemguid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteeWeddingStartNtfUserCmd)
}

::google::protobuf::uint8* InviteeWeddingStartNtfUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteeWeddingStartNtfUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemguid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteeWeddingStartNtfUserCmd)
  return target;
}

int InviteeWeddingStartNtfUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITEE_WEDDING_START_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string itemguid = 3;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteeWeddingStartNtfUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteeWeddingStartNtfUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteeWeddingStartNtfUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteeWeddingStartNtfUserCmd::MergeFrom(const InviteeWeddingStartNtfUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteeWeddingStartNtfUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteeWeddingStartNtfUserCmd::CopyFrom(const InviteeWeddingStartNtfUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteeWeddingStartNtfUserCmd::IsInitialized() const {

  return true;
}

void InviteeWeddingStartNtfUserCmd::Swap(InviteeWeddingStartNtfUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteeWeddingStartNtfUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteeWeddingStartNtfUserCmd_descriptor_;
  metadata.reflection = InviteeWeddingStartNtfUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KFCShareUserCmd::kCmdFieldNumber;
const int KFCShareUserCmd::kParamFieldNumber;
#endif  // !_MSC_VER

KFCShareUserCmd::KFCShareUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KFCShareUserCmd)
}

void KFCShareUserCmd::InitAsDefaultInstance() {
}

KFCShareUserCmd::KFCShareUserCmd(const KFCShareUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KFCShareUserCmd)
}

void KFCShareUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 128;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KFCShareUserCmd::~KFCShareUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KFCShareUserCmd)
  SharedDtor();
}

void KFCShareUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KFCShareUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KFCShareUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KFCShareUserCmd_descriptor_;
}

const KFCShareUserCmd& KFCShareUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

KFCShareUserCmd* KFCShareUserCmd::default_instance_ = NULL;

KFCShareUserCmd* KFCShareUserCmd::New() const {
  return new KFCShareUserCmd;
}

void KFCShareUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 128;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KFCShareUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KFCShareUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KFCShareUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KFCShareUserCmd)
  return false;
#undef DO_
}

void KFCShareUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KFCShareUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KFCShareUserCmd)
}

::google::protobuf::uint8* KFCShareUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KFCShareUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KFCShareUserCmd)
  return target;
}

int KFCShareUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_KFC_SHARE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KFCShareUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KFCShareUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KFCShareUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KFCShareUserCmd::MergeFrom(const KFCShareUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KFCShareUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KFCShareUserCmd::CopyFrom(const KFCShareUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KFCShareUserCmd::IsInitialized() const {

  return true;
}

void KFCShareUserCmd::Swap(KFCShareUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KFCShareUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KFCShareUserCmd_descriptor_;
  metadata.reflection = KFCShareUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckRelationUserCmd::kCmdFieldNumber;
const int CheckRelationUserCmd::kParamFieldNumber;
const int CheckRelationUserCmd::kCharidFieldNumber;
const int CheckRelationUserCmd::kEtypeFieldNumber;
const int CheckRelationUserCmd::kRetFieldNumber;
#endif  // !_MSC_VER

CheckRelationUserCmd::CheckRelationUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckRelationUserCmd)
}

void CheckRelationUserCmd::InitAsDefaultInstance() {
}

CheckRelationUserCmd::CheckRelationUserCmd(const CheckRelationUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckRelationUserCmd)
}

void CheckRelationUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 130;
  charid_ = GOOGLE_ULONGLONG(0);
  etype_ = 1;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckRelationUserCmd::~CheckRelationUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckRelationUserCmd)
  SharedDtor();
}

void CheckRelationUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckRelationUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRelationUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckRelationUserCmd_descriptor_;
}

const CheckRelationUserCmd& CheckRelationUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CheckRelationUserCmd* CheckRelationUserCmd::default_instance_ = NULL;

CheckRelationUserCmd* CheckRelationUserCmd::New() const {
  return new CheckRelationUserCmd;
}

void CheckRelationUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 130;
    charid_ = GOOGLE_ULONGLONG(0);
    etype_ = 1;
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckRelationUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckRelationUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_etype;
        break;
      }

      // optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
      case 4: {
        if (tag == 32) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional bool ret = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckRelationUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckRelationUserCmd)
  return false;
#undef DO_
}

void CheckRelationUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckRelationUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  // optional bool ret = 5 [default = false];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckRelationUserCmd)
}

::google::protobuf::uint8* CheckRelationUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckRelationUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  // optional bool ret = 5 [default = false];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckRelationUserCmd)
  return target;
}

int CheckRelationUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHECK_RELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ESocialRelation etype = 4 [default = ESOCIALRELATION_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool ret = 5 [default = false];
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRelationUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckRelationUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckRelationUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckRelationUserCmd::MergeFrom(const CheckRelationUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckRelationUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRelationUserCmd::CopyFrom(const CheckRelationUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRelationUserCmd::IsInitialized() const {

  return true;
}

void CheckRelationUserCmd::Swap(CheckRelationUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(etype_, other->etype_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckRelationUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckRelationUserCmd_descriptor_;
  metadata.reflection = CheckRelationUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TwinsActionUserCmd::kCmdFieldNumber;
const int TwinsActionUserCmd::kParamFieldNumber;
const int TwinsActionUserCmd::kUseridFieldNumber;
const int TwinsActionUserCmd::kActionidFieldNumber;
const int TwinsActionUserCmd::kEtypeFieldNumber;
const int TwinsActionUserCmd::kSponsorFieldNumber;
#endif  // !_MSC_VER

TwinsActionUserCmd::TwinsActionUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TwinsActionUserCmd)
}

void TwinsActionUserCmd::InitAsDefaultInstance() {
}

TwinsActionUserCmd::TwinsActionUserCmd(const TwinsActionUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TwinsActionUserCmd)
}

void TwinsActionUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 129;
  userid_ = GOOGLE_ULONGLONG(0);
  actionid_ = 0u;
  etype_ = 0;
  sponsor_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TwinsActionUserCmd::~TwinsActionUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TwinsActionUserCmd)
  SharedDtor();
}

void TwinsActionUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TwinsActionUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TwinsActionUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TwinsActionUserCmd_descriptor_;
}

const TwinsActionUserCmd& TwinsActionUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

TwinsActionUserCmd* TwinsActionUserCmd::default_instance_ = NULL;

TwinsActionUserCmd* TwinsActionUserCmd::New() const {
  return new TwinsActionUserCmd;
}

void TwinsActionUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TwinsActionUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(userid_, etype_);
    cmd_ = 9;
    param_ = 129;
    sponsor_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TwinsActionUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TwinsActionUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_actionid;
        break;
      }

      // optional uint32 actionid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_actionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actionid_)));
          set_has_actionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_etype;
        break;
      }

      // optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
      case 5: {
        if (tag == 40) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETwinsOperation_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ETwinsOperation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sponsor;
        break;
      }

      // optional bool sponsor = 6 [default = true];
      case 6: {
        if (tag == 48) {
         parse_sponsor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sponsor_)));
          set_has_sponsor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TwinsActionUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TwinsActionUserCmd)
  return false;
#undef DO_
}

void TwinsActionUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TwinsActionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint32 actionid = 4 [default = 0];
  if (has_actionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->actionid(), output);
  }

  // optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etype(), output);
  }

  // optional bool sponsor = 6 [default = true];
  if (has_sponsor()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sponsor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TwinsActionUserCmd)
}

::google::protobuf::uint8* TwinsActionUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TwinsActionUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint32 actionid = 4 [default = 0];
  if (has_actionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->actionid(), target);
  }

  // optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etype(), target);
  }

  // optional bool sponsor = 6 [default = true];
  if (has_sponsor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sponsor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TwinsActionUserCmd)
  return target;
}

int TwinsActionUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_TWINS_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 actionid = 4 [default = 0];
    if (has_actionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->actionid());
    }

    // optional .Cmd.ETwinsOperation etype = 5 [default = ETWINS_OPERATION_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool sponsor = 6 [default = true];
    if (has_sponsor()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TwinsActionUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TwinsActionUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TwinsActionUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TwinsActionUserCmd::MergeFrom(const TwinsActionUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_actionid()) {
      set_actionid(from.actionid());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_sponsor()) {
      set_sponsor(from.sponsor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TwinsActionUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TwinsActionUserCmd::CopyFrom(const TwinsActionUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TwinsActionUserCmd::IsInitialized() const {

  return true;
}

void TwinsActionUserCmd::Swap(TwinsActionUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(actionid_, other->actionid_);
    std::swap(etype_, other->etype_);
    std::swap(sponsor_, other->sponsor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TwinsActionUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TwinsActionUserCmd_descriptor_;
  metadata.reflection = TwinsActionUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShowServantUserCmd::kCmdFieldNumber;
const int ShowServantUserCmd::kParamFieldNumber;
const int ShowServantUserCmd::kShowFieldNumber;
#endif  // !_MSC_VER

ShowServantUserCmd::ShowServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShowServantUserCmd)
}

void ShowServantUserCmd::InitAsDefaultInstance() {
}

ShowServantUserCmd::ShowServantUserCmd(const ShowServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShowServantUserCmd)
}

void ShowServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 122;
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShowServantUserCmd::~ShowServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ShowServantUserCmd)
  SharedDtor();
}

void ShowServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShowServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShowServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShowServantUserCmd_descriptor_;
}

const ShowServantUserCmd& ShowServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ShowServantUserCmd* ShowServantUserCmd::default_instance_ = NULL;

ShowServantUserCmd* ShowServantUserCmd::New() const {
  return new ShowServantUserCmd;
}

void ShowServantUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 122;
    show_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShowServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShowServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_show;
        break;
      }

      // optional bool show = 3;
      case 3: {
        if (tag == 24) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShowServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShowServantUserCmd)
  return false;
#undef DO_
}

void ShowServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShowServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool show = 3;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->show(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShowServantUserCmd)
}

::google::protobuf::uint8* ShowServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShowServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool show = 3;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->show(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShowServantUserCmd)
  return target;
}

int ShowServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SHOW];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool show = 3;
    if (has_show()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShowServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShowServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShowServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShowServantUserCmd::MergeFrom(const ShowServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShowServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShowServantUserCmd::CopyFrom(const ShowServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShowServantUserCmd::IsInitialized() const {

  return true;
}

void ShowServantUserCmd::Swap(ShowServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(show_, other->show_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShowServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShowServantUserCmd_descriptor_;
  metadata.reflection = ShowServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplaceServantUserCmd::kCmdFieldNumber;
const int ReplaceServantUserCmd::kParamFieldNumber;
const int ReplaceServantUserCmd::kReplaceFieldNumber;
const int ReplaceServantUserCmd::kServantFieldNumber;
#endif  // !_MSC_VER

ReplaceServantUserCmd::ReplaceServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplaceServantUserCmd)
}

void ReplaceServantUserCmd::InitAsDefaultInstance() {
}

ReplaceServantUserCmd::ReplaceServantUserCmd(const ReplaceServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplaceServantUserCmd)
}

void ReplaceServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 123;
  replace_ = false;
  servant_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplaceServantUserCmd::~ReplaceServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplaceServantUserCmd)
  SharedDtor();
}

void ReplaceServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplaceServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplaceServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplaceServantUserCmd_descriptor_;
}

const ReplaceServantUserCmd& ReplaceServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ReplaceServantUserCmd* ReplaceServantUserCmd::default_instance_ = NULL;

ReplaceServantUserCmd* ReplaceServantUserCmd::New() const {
  return new ReplaceServantUserCmd;
}

void ReplaceServantUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplaceServantUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(replace_, servant_);
    cmd_ = 9;
    param_ = 123;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplaceServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplaceServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_replace;
        break;
      }

      // optional bool replace = 3;
      case 3: {
        if (tag == 24) {
         parse_replace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &replace_)));
          set_has_replace();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_servant;
        break;
      }

      // optional uint32 servant = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_servant:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servant_)));
          set_has_servant();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplaceServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplaceServantUserCmd)
  return false;
#undef DO_
}

void ReplaceServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplaceServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool replace = 3;
  if (has_replace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->replace(), output);
  }

  // optional uint32 servant = 4 [default = 0];
  if (has_servant()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->servant(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplaceServantUserCmd)
}

::google::protobuf::uint8* ReplaceServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplaceServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool replace = 3;
  if (has_replace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->replace(), target);
  }

  // optional uint32 servant = 4 [default = 0];
  if (has_servant()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->servant(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplaceServantUserCmd)
  return target;
}

int ReplaceServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REPLACE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool replace = 3;
    if (has_replace()) {
      total_size += 1 + 1;
    }

    // optional uint32 servant = 4 [default = 0];
    if (has_servant()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servant());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplaceServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplaceServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplaceServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplaceServantUserCmd::MergeFrom(const ReplaceServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_replace()) {
      set_replace(from.replace());
    }
    if (from.has_servant()) {
      set_servant(from.servant());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplaceServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaceServantUserCmd::CopyFrom(const ReplaceServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaceServantUserCmd::IsInitialized() const {

  return true;
}

void ReplaceServantUserCmd::Swap(ReplaceServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(replace_, other->replace_);
    std::swap(servant_, other->servant_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplaceServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplaceServantUserCmd_descriptor_;
  metadata.reflection = ReplaceServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServantService::kCmdFieldNumber;
const int ServantService::kParamFieldNumber;
const int ServantService::kTypeFieldNumber;
#endif  // !_MSC_VER

ServantService::ServantService()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServantService)
}

void ServantService::InitAsDefaultInstance() {
}

ServantService::ServantService(const ServantService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServantService)
}

void ServantService::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 124;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServantService::~ServantService() {
  // @@protoc_insertion_point(destructor:Cmd.ServantService)
  SharedDtor();
}

void ServantService::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServantService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServantService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServantService_descriptor_;
}

const ServantService& ServantService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ServantService* ServantService::default_instance_ = NULL;

ServantService* ServantService::New() const {
  return new ServantService;
}

void ServantService::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 124;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServantService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServantService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EServantService_IsValid(value)) {
            set_type(static_cast< ::Cmd::EServantService >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServantService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServantService)
  return false;
#undef DO_
}

void ServantService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServantService)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServantService)
}

::google::protobuf::uint8* ServantService::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServantService)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServantService)
  return target;
}

int ServantService::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_SERVICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EServantService type = 3 [default = ESERVANT_SERVICE_RECOMMEND];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServantService::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServantService* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServantService*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServantService::MergeFrom(const ServantService& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServantService::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServantService::CopyFrom(const ServantService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServantService::IsInitialized() const {

  return true;
}

void ServantService::Swap(ServantService* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServantService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServantService_descriptor_;
  metadata.reflection = ServantService_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendItemInfo::kDwidFieldNumber;
const int RecommendItemInfo::kFinishtimesFieldNumber;
const int RecommendItemInfo::kStatusFieldNumber;
const int RecommendItemInfo::kRealopenFieldNumber;
#endif  // !_MSC_VER

RecommendItemInfo::RecommendItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RecommendItemInfo)
}

void RecommendItemInfo::InitAsDefaultInstance() {
}

RecommendItemInfo::RecommendItemInfo(const RecommendItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RecommendItemInfo)
}

void RecommendItemInfo::SharedCtor() {
  _cached_size_ = 0;
  dwid_ = 0u;
  finishtimes_ = 0u;
  status_ = 0;
  realopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendItemInfo::~RecommendItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.RecommendItemInfo)
  SharedDtor();
}

void RecommendItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendItemInfo_descriptor_;
}

const RecommendItemInfo& RecommendItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

RecommendItemInfo* RecommendItemInfo::default_instance_ = NULL;

RecommendItemInfo* RecommendItemInfo::New() const {
  return new RecommendItemInfo;
}

void RecommendItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RecommendItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwid_, realopen_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RecommendItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dwid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finishtimes;
        break;
      }

      // optional uint32 finishtimes = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_finishtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtimes_)));
          set_has_finishtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERecommendStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::ERecommendStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_realopen;
        break;
      }

      // optional bool realopen = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_realopen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realopen_)));
          set_has_realopen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RecommendItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RecommendItemInfo)
  return false;
#undef DO_
}

void RecommendItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RecommendItemInfo)
  // optional uint32 dwid = 1 [default = 0];
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwid(), output);
  }

  // optional uint32 finishtimes = 2 [default = 0];
  if (has_finishtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishtimes(), output);
  }

  // optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional bool realopen = 4 [default = false];
  if (has_realopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->realopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RecommendItemInfo)
}

::google::protobuf::uint8* RecommendItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RecommendItemInfo)
  // optional uint32 dwid = 1 [default = 0];
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwid(), target);
  }

  // optional uint32 finishtimes = 2 [default = 0];
  if (has_finishtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishtimes(), target);
  }

  // optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional bool realopen = 4 [default = false];
  if (has_realopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->realopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RecommendItemInfo)
  return target;
}

int RecommendItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dwid = 1 [default = 0];
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

    // optional uint32 finishtimes = 2 [default = 0];
    if (has_finishtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtimes());
    }

    // optional .Cmd.ERecommendStatus status = 3 [default = ERECOMMEND_STATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional bool realopen = 4 [default = false];
    if (has_realopen()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendItemInfo::MergeFrom(const RecommendItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
    if (from.has_finishtimes()) {
      set_finishtimes(from.finishtimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_realopen()) {
      set_realopen(from.realopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendItemInfo::CopyFrom(const RecommendItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendItemInfo::IsInitialized() const {

  return true;
}

void RecommendItemInfo::Swap(RecommendItemInfo* other) {
  if (other != this) {
    std::swap(dwid_, other->dwid_);
    std::swap(finishtimes_, other->finishtimes_);
    std::swap(status_, other->status_);
    std::swap(realopen_, other->realopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendItemInfo_descriptor_;
  metadata.reflection = RecommendItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecommendServantUserCmd::kCmdFieldNumber;
const int RecommendServantUserCmd::kParamFieldNumber;
const int RecommendServantUserCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

RecommendServantUserCmd::RecommendServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RecommendServantUserCmd)
}

void RecommendServantUserCmd::InitAsDefaultInstance() {
}

RecommendServantUserCmd::RecommendServantUserCmd(const RecommendServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RecommendServantUserCmd)
}

void RecommendServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 125;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecommendServantUserCmd::~RecommendServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RecommendServantUserCmd)
  SharedDtor();
}

void RecommendServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecommendServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecommendServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecommendServantUserCmd_descriptor_;
}

const RecommendServantUserCmd& RecommendServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

RecommendServantUserCmd* RecommendServantUserCmd::default_instance_ = NULL;

RecommendServantUserCmd* RecommendServantUserCmd::New() const {
  return new RecommendServantUserCmd;
}

void RecommendServantUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 125;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecommendServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RecommendServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.RecommendItemInfo items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RecommendServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RecommendServantUserCmd)
  return false;
#undef DO_
}

void RecommendServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RecommendServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.RecommendItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RecommendServantUserCmd)
}

::google::protobuf::uint8* RecommendServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RecommendServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.RecommendItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RecommendServantUserCmd)
  return target;
}

int RecommendServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECOMMEND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.RecommendItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecommendServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecommendServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecommendServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecommendServantUserCmd::MergeFrom(const RecommendServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecommendServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecommendServantUserCmd::CopyFrom(const RecommendServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecommendServantUserCmd::IsInitialized() const {

  return true;
}

void RecommendServantUserCmd::Swap(RecommendServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecommendServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecommendServantUserCmd_descriptor_;
  metadata.reflection = RecommendServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveServantUserCmd::kCmdFieldNumber;
const int ReceiveServantUserCmd::kParamFieldNumber;
const int ReceiveServantUserCmd::kFavorabilityFieldNumber;
const int ReceiveServantUserCmd::kDwidFieldNumber;
#endif  // !_MSC_VER

ReceiveServantUserCmd::ReceiveServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReceiveServantUserCmd)
}

void ReceiveServantUserCmd::InitAsDefaultInstance() {
}

ReceiveServantUserCmd::ReceiveServantUserCmd(const ReceiveServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReceiveServantUserCmd)
}

void ReceiveServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 126;
  favorability_ = false;
  dwid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveServantUserCmd::~ReceiveServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReceiveServantUserCmd)
  SharedDtor();
}

void ReceiveServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveServantUserCmd_descriptor_;
}

const ReceiveServantUserCmd& ReceiveServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ReceiveServantUserCmd* ReceiveServantUserCmd::default_instance_ = NULL;

ReceiveServantUserCmd* ReceiveServantUserCmd::New() const {
  return new ReceiveServantUserCmd;
}

void ReceiveServantUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiveServantUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(favorability_, dwid_);
    cmd_ = 9;
    param_ = 126;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReceiveServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_favorability;
        break;
      }

      // optional bool favorability = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_favorability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &favorability_)));
          set_has_favorability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwid;
        break;
      }

      // optional uint32 dwid = 4;
      case 4: {
        if (tag == 32) {
         parse_dwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReceiveServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReceiveServantUserCmd)
  return false;
#undef DO_
}

void ReceiveServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReceiveServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool favorability = 3 [default = false];
  if (has_favorability()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->favorability(), output);
  }

  // optional uint32 dwid = 4;
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReceiveServantUserCmd)
}

::google::protobuf::uint8* ReceiveServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReceiveServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool favorability = 3 [default = false];
  if (has_favorability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->favorability(), target);
  }

  // optional uint32 dwid = 4;
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReceiveServantUserCmd)
  return target;
}

int ReceiveServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool favorability = 3 [default = false];
    if (has_favorability()) {
      total_size += 1 + 1;
    }

    // optional uint32 dwid = 4;
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveServantUserCmd::MergeFrom(const ReceiveServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_favorability()) {
      set_favorability(from.favorability());
    }
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveServantUserCmd::CopyFrom(const ReceiveServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveServantUserCmd::IsInitialized() const {

  return true;
}

void ReceiveServantUserCmd::Swap(ReceiveServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(favorability_, other->favorability_);
    std::swap(dwid_, other->dwid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveServantUserCmd_descriptor_;
  metadata.reflection = ReceiveServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FavorabilityStatus::kFavorabilityFieldNumber;
const int FavorabilityStatus::kStatusFieldNumber;
#endif  // !_MSC_VER

FavorabilityStatus::FavorabilityStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FavorabilityStatus)
}

void FavorabilityStatus::InitAsDefaultInstance() {
}

FavorabilityStatus::FavorabilityStatus(const FavorabilityStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FavorabilityStatus)
}

void FavorabilityStatus::SharedCtor() {
  _cached_size_ = 0;
  favorability_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FavorabilityStatus::~FavorabilityStatus() {
  // @@protoc_insertion_point(destructor:Cmd.FavorabilityStatus)
  SharedDtor();
}

void FavorabilityStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FavorabilityStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FavorabilityStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FavorabilityStatus_descriptor_;
}

const FavorabilityStatus& FavorabilityStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

FavorabilityStatus* FavorabilityStatus::default_instance_ = NULL;

FavorabilityStatus* FavorabilityStatus::New() const {
  return new FavorabilityStatus;
}

void FavorabilityStatus::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FavorabilityStatus*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(favorability_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FavorabilityStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FavorabilityStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 favorability = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &favorability_)));
          set_has_favorability();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FavorabilityStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FavorabilityStatus)
  return false;
#undef DO_
}

void FavorabilityStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FavorabilityStatus)
  // optional uint32 favorability = 1 [default = 0];
  if (has_favorability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->favorability(), output);
  }

  // optional uint32 status = 2 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FavorabilityStatus)
}

::google::protobuf::uint8* FavorabilityStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FavorabilityStatus)
  // optional uint32 favorability = 1 [default = 0];
  if (has_favorability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->favorability(), target);
  }

  // optional uint32 status = 2 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FavorabilityStatus)
  return target;
}

int FavorabilityStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 favorability = 1 [default = 0];
    if (has_favorability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->favorability());
    }

    // optional uint32 status = 2 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FavorabilityStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FavorabilityStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FavorabilityStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FavorabilityStatus::MergeFrom(const FavorabilityStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_favorability()) {
      set_favorability(from.favorability());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FavorabilityStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FavorabilityStatus::CopyFrom(const FavorabilityStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FavorabilityStatus::IsInitialized() const {

  return true;
}

void FavorabilityStatus::Swap(FavorabilityStatus* other) {
  if (other != this) {
    std::swap(favorability_, other->favorability_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FavorabilityStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FavorabilityStatus_descriptor_;
  metadata.reflection = FavorabilityStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServantRewardStatusUserCmd::kCmdFieldNumber;
const int ServantRewardStatusUserCmd::kParamFieldNumber;
const int ServantRewardStatusUserCmd::kItemsFieldNumber;
const int ServantRewardStatusUserCmd::kStayfavoFieldNumber;
#endif  // !_MSC_VER

ServantRewardStatusUserCmd::ServantRewardStatusUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServantRewardStatusUserCmd)
}

void ServantRewardStatusUserCmd::InitAsDefaultInstance() {
}

ServantRewardStatusUserCmd::ServantRewardStatusUserCmd(const ServantRewardStatusUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServantRewardStatusUserCmd)
}

void ServantRewardStatusUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 127;
  stayfavo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServantRewardStatusUserCmd::~ServantRewardStatusUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ServantRewardStatusUserCmd)
  SharedDtor();
}

void ServantRewardStatusUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServantRewardStatusUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServantRewardStatusUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServantRewardStatusUserCmd_descriptor_;
}

const ServantRewardStatusUserCmd& ServantRewardStatusUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ServantRewardStatusUserCmd* ServantRewardStatusUserCmd::default_instance_ = NULL;

ServantRewardStatusUserCmd* ServantRewardStatusUserCmd::New() const {
  return new ServantRewardStatusUserCmd;
}

void ServantRewardStatusUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 9;
    param_ = 127;
    stayfavo_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServantRewardStatusUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServantRewardStatusUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.FavorabilityStatus items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_stayfavo;
        break;
      }

      // optional uint32 stayfavo = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_stayfavo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stayfavo_)));
          set_has_stayfavo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServantRewardStatusUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServantRewardStatusUserCmd)
  return false;
#undef DO_
}

void ServantRewardStatusUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServantRewardStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.FavorabilityStatus items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional uint32 stayfavo = 4 [default = 0];
  if (has_stayfavo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stayfavo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServantRewardStatusUserCmd)
}

::google::protobuf::uint8* ServantRewardStatusUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServantRewardStatusUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.FavorabilityStatus items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional uint32 stayfavo = 4 [default = 0];
  if (has_stayfavo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stayfavo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServantRewardStatusUserCmd)
  return target;
}

int ServantRewardStatusUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_REWARD_STATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stayfavo = 4 [default = 0];
    if (has_stayfavo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stayfavo());
    }

  }
  // repeated .Cmd.FavorabilityStatus items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServantRewardStatusUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServantRewardStatusUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServantRewardStatusUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServantRewardStatusUserCmd::MergeFrom(const ServantRewardStatusUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stayfavo()) {
      set_stayfavo(from.stayfavo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServantRewardStatusUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServantRewardStatusUserCmd::CopyFrom(const ServantRewardStatusUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServantRewardStatusUserCmd::IsInitialized() const {

  return true;
}

void ServantRewardStatusUserCmd::Swap(ServantRewardStatusUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(stayfavo_, other->stayfavo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServantRewardStatusUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServantRewardStatusUserCmd_descriptor_;
  metadata.reflection = ServantRewardStatusUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionInfo::kBranchFieldNumber;
const int ProfessionInfo::kProfessionFieldNumber;
const int ProfessionInfo::kJoblvFieldNumber;
const int ProfessionInfo::kIscurrentFieldNumber;
const int ProfessionInfo::kIsbuyFieldNumber;
#endif  // !_MSC_VER

ProfessionInfo::ProfessionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionInfo)
}

void ProfessionInfo::InitAsDefaultInstance() {
}

ProfessionInfo::ProfessionInfo(const ProfessionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionInfo)
}

void ProfessionInfo::SharedCtor() {
  _cached_size_ = 0;
  branch_ = 0u;
  profession_ = 0u;
  joblv_ = 0u;
  iscurrent_ = false;
  isbuy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionInfo::~ProfessionInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionInfo)
  SharedDtor();
}

void ProfessionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionInfo_descriptor_;
}

const ProfessionInfo& ProfessionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ProfessionInfo* ProfessionInfo::default_instance_ = NULL;

ProfessionInfo* ProfessionInfo::New() const {
  return new ProfessionInfo;
}

void ProfessionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProfessionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(branch_, isbuy_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 branch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 2;
      case 2: {
        if (tag == 16) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joblv;
        break;
      }

      // optional uint32 joblv = 3;
      case 3: {
        if (tag == 24) {
         parse_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iscurrent;
        break;
      }

      // optional bool iscurrent = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_iscurrent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscurrent_)));
          set_has_iscurrent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_isbuy;
        break;
      }

      // optional bool isbuy = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_isbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionInfo)
  return false;
#undef DO_
}

void ProfessionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionInfo)
  // optional uint32 branch = 1;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->branch(), output);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profession(), output);
  }

  // optional uint32 joblv = 3;
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->joblv(), output);
  }

  // optional bool iscurrent = 4 [default = false];
  if (has_iscurrent()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscurrent(), output);
  }

  // optional bool isbuy = 5 [default = false];
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isbuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionInfo)
}

::google::protobuf::uint8* ProfessionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionInfo)
  // optional uint32 branch = 1;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->branch(), target);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profession(), target);
  }

  // optional uint32 joblv = 3;
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->joblv(), target);
  }

  // optional bool iscurrent = 4 [default = false];
  if (has_iscurrent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscurrent(), target);
  }

  // optional bool isbuy = 5 [default = false];
  if (has_isbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isbuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionInfo)
  return target;
}

int ProfessionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 branch = 1;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch());
    }

    // optional uint32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 joblv = 3;
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

    // optional bool iscurrent = 4 [default = false];
    if (has_iscurrent()) {
      total_size += 1 + 1;
    }

    // optional bool isbuy = 5 [default = false];
    if (has_isbuy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionInfo::MergeFrom(const ProfessionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
    if (from.has_iscurrent()) {
      set_iscurrent(from.iscurrent());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionInfo::CopyFrom(const ProfessionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionInfo::IsInitialized() const {

  return true;
}

void ProfessionInfo::Swap(ProfessionInfo* other) {
  if (other != this) {
    std::swap(branch_, other->branch_);
    std::swap(profession_, other->profession_);
    std::swap(joblv_, other->joblv_);
    std::swap(iscurrent_, other->iscurrent_);
    std::swap(isbuy_, other->isbuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionInfo_descriptor_;
  metadata.reflection = ProfessionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionQueryUserCmd::kCmdFieldNumber;
const int ProfessionQueryUserCmd::kParamFieldNumber;
const int ProfessionQueryUserCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

ProfessionQueryUserCmd::ProfessionQueryUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionQueryUserCmd)
}

void ProfessionQueryUserCmd::InitAsDefaultInstance() {
}

ProfessionQueryUserCmd::ProfessionQueryUserCmd(const ProfessionQueryUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionQueryUserCmd)
}

void ProfessionQueryUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 131;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionQueryUserCmd::~ProfessionQueryUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionQueryUserCmd)
  SharedDtor();
}

void ProfessionQueryUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionQueryUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionQueryUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionQueryUserCmd_descriptor_;
}

const ProfessionQueryUserCmd& ProfessionQueryUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ProfessionQueryUserCmd* ProfessionQueryUserCmd::default_instance_ = NULL;

ProfessionQueryUserCmd* ProfessionQueryUserCmd::New() const {
  return new ProfessionQueryUserCmd;
}

void ProfessionQueryUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 131;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionQueryUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionQueryUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ProfessionInfo items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionQueryUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionQueryUserCmd)
  return false;
#undef DO_
}

void ProfessionQueryUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionQueryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ProfessionInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionQueryUserCmd)
}

::google::protobuf::uint8* ProfessionQueryUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionQueryUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ProfessionInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionQueryUserCmd)
  return target;
}

int ProfessionQueryUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ProfessionInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionQueryUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionQueryUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionQueryUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionQueryUserCmd::MergeFrom(const ProfessionQueryUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionQueryUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionQueryUserCmd::CopyFrom(const ProfessionQueryUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionQueryUserCmd::IsInitialized() const {

  return true;
}

void ProfessionQueryUserCmd::Swap(ProfessionQueryUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionQueryUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionQueryUserCmd_descriptor_;
  metadata.reflection = ProfessionQueryUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionBuyUserCmd::kCmdFieldNumber;
const int ProfessionBuyUserCmd::kParamFieldNumber;
const int ProfessionBuyUserCmd::kBranchFieldNumber;
const int ProfessionBuyUserCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

ProfessionBuyUserCmd::ProfessionBuyUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionBuyUserCmd)
}

void ProfessionBuyUserCmd::InitAsDefaultInstance() {
}

ProfessionBuyUserCmd::ProfessionBuyUserCmd(const ProfessionBuyUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionBuyUserCmd)
}

void ProfessionBuyUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 132;
  branch_ = 0u;
  success_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionBuyUserCmd::~ProfessionBuyUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionBuyUserCmd)
  SharedDtor();
}

void ProfessionBuyUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionBuyUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionBuyUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionBuyUserCmd_descriptor_;
}

const ProfessionBuyUserCmd& ProfessionBuyUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ProfessionBuyUserCmd* ProfessionBuyUserCmd::default_instance_ = NULL;

ProfessionBuyUserCmd* ProfessionBuyUserCmd::New() const {
  return new ProfessionBuyUserCmd;
}

void ProfessionBuyUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 132;
    branch_ = 0u;
    success_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionBuyUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionBuyUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch;
        break;
      }

      // optional uint32 branch = 3;
      case 3: {
        if (tag == 24) {
         parse_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionBuyUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionBuyUserCmd)
  return false;
#undef DO_
}

void ProfessionBuyUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionBuyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 branch = 3;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch(), output);
  }

  // optional bool success = 4 [default = true];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionBuyUserCmd)
}

::google::protobuf::uint8* ProfessionBuyUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionBuyUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 branch = 3;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch(), target);
  }

  // optional bool success = 4 [default = true];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionBuyUserCmd)
  return target;
}

int ProfessionBuyUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_BUY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 branch = 3;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch());
    }

    // optional bool success = 4 [default = true];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionBuyUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionBuyUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionBuyUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionBuyUserCmd::MergeFrom(const ProfessionBuyUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionBuyUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionBuyUserCmd::CopyFrom(const ProfessionBuyUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionBuyUserCmd::IsInitialized() const {

  return true;
}

void ProfessionBuyUserCmd::Swap(ProfessionBuyUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(branch_, other->branch_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionBuyUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionBuyUserCmd_descriptor_;
  metadata.reflection = ProfessionBuyUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionChangeUserCmd::kCmdFieldNumber;
const int ProfessionChangeUserCmd::kParamFieldNumber;
const int ProfessionChangeUserCmd::kBranchFieldNumber;
const int ProfessionChangeUserCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

ProfessionChangeUserCmd::ProfessionChangeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionChangeUserCmd)
}

void ProfessionChangeUserCmd::InitAsDefaultInstance() {
}

ProfessionChangeUserCmd::ProfessionChangeUserCmd(const ProfessionChangeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionChangeUserCmd)
}

void ProfessionChangeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 133;
  branch_ = 0u;
  success_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionChangeUserCmd::~ProfessionChangeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionChangeUserCmd)
  SharedDtor();
}

void ProfessionChangeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfessionChangeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionChangeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionChangeUserCmd_descriptor_;
}

const ProfessionChangeUserCmd& ProfessionChangeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ProfessionChangeUserCmd* ProfessionChangeUserCmd::default_instance_ = NULL;

ProfessionChangeUserCmd* ProfessionChangeUserCmd::New() const {
  return new ProfessionChangeUserCmd;
}

void ProfessionChangeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 133;
    branch_ = 0u;
    success_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionChangeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionChangeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_branch;
        break;
      }

      // optional uint32 branch = 3;
      case 3: {
        if (tag == 24) {
         parse_branch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &branch_)));
          set_has_branch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_success;
        break;
      }

      // optional bool success = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionChangeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionChangeUserCmd)
  return false;
#undef DO_
}

void ProfessionChangeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionChangeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 branch = 3;
  if (has_branch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->branch(), output);
  }

  // optional bool success = 4 [default = true];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionChangeUserCmd)
}

::google::protobuf::uint8* ProfessionChangeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionChangeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 branch = 3;
  if (has_branch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->branch(), target);
  }

  // optional bool success = 4 [default = true];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionChangeUserCmd)
  return target;
}

int ProfessionChangeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_PROFESSION_CHANGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 branch = 3;
    if (has_branch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->branch());
    }

    // optional bool success = 4 [default = true];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionChangeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionChangeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionChangeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionChangeUserCmd::MergeFrom(const ProfessionChangeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_branch()) {
      set_branch(from.branch());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionChangeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionChangeUserCmd::CopyFrom(const ProfessionChangeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionChangeUserCmd::IsInitialized() const {

  return true;
}

void ProfessionChangeUserCmd::Swap(ProfessionChangeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(branch_, other->branch_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionChangeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionChangeUserCmd_descriptor_;
  metadata.reflection = ProfessionChangeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AstrolabeProfessionData::kStarsFieldNumber;
#endif  // !_MSC_VER

AstrolabeProfessionData::AstrolabeProfessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AstrolabeProfessionData)
}

void AstrolabeProfessionData::InitAsDefaultInstance() {
}

AstrolabeProfessionData::AstrolabeProfessionData(const AstrolabeProfessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AstrolabeProfessionData)
}

void AstrolabeProfessionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AstrolabeProfessionData::~AstrolabeProfessionData() {
  // @@protoc_insertion_point(destructor:Cmd.AstrolabeProfessionData)
  SharedDtor();
}

void AstrolabeProfessionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AstrolabeProfessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AstrolabeProfessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AstrolabeProfessionData_descriptor_;
}

const AstrolabeProfessionData& AstrolabeProfessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

AstrolabeProfessionData* AstrolabeProfessionData::default_instance_ = NULL;

AstrolabeProfessionData* AstrolabeProfessionData::New() const {
  return new AstrolabeProfessionData;
}

void AstrolabeProfessionData::Clear() {
  stars_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AstrolabeProfessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AstrolabeProfessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 stars = 2;
      case 2: {
        if (tag == 16) {
         parse_stars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_stars())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stars())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stars;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AstrolabeProfessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AstrolabeProfessionData)
  return false;
#undef DO_
}

void AstrolabeProfessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AstrolabeProfessionData)
  // repeated uint32 stars = 2;
  for (int i = 0; i < this->stars_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->stars(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AstrolabeProfessionData)
}

::google::protobuf::uint8* AstrolabeProfessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AstrolabeProfessionData)
  // repeated uint32 stars = 2;
  for (int i = 0; i < this->stars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->stars(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AstrolabeProfessionData)
  return target;
}

int AstrolabeProfessionData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 stars = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stars_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->stars(i));
    }
    total_size += 1 * this->stars_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AstrolabeProfessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AstrolabeProfessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AstrolabeProfessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AstrolabeProfessionData::MergeFrom(const AstrolabeProfessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  stars_.MergeFrom(from.stars_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AstrolabeProfessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AstrolabeProfessionData::CopyFrom(const AstrolabeProfessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AstrolabeProfessionData::IsInitialized() const {

  return true;
}

void AstrolabeProfessionData::Swap(AstrolabeProfessionData* other) {
  if (other != this) {
    stars_.Swap(&other->stars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AstrolabeProfessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AstrolabeProfessionData_descriptor_;
  metadata.reflection = AstrolabeProfessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrProfessionData::kAttrsFieldNumber;
const int AttrProfessionData::kDatasFieldNumber;
#endif  // !_MSC_VER

AttrProfessionData::AttrProfessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AttrProfessionData)
}

void AttrProfessionData::InitAsDefaultInstance() {
}

AttrProfessionData::AttrProfessionData(const AttrProfessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AttrProfessionData)
}

void AttrProfessionData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrProfessionData::~AttrProfessionData() {
  // @@protoc_insertion_point(destructor:Cmd.AttrProfessionData)
  SharedDtor();
}

void AttrProfessionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrProfessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrProfessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrProfessionData_descriptor_;
}

const AttrProfessionData& AttrProfessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

AttrProfessionData* AttrProfessionData::default_instance_ = NULL;

AttrProfessionData* AttrProfessionData::New() const {
  return new AttrProfessionData;
}

void AttrProfessionData::Clear() {
  attrs_.Clear();
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrProfessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AttrProfessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.UserAttr attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AttrProfessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AttrProfessionData)
  return false;
#undef DO_
}

void AttrProfessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AttrProfessionData)
  // repeated .Cmd.UserAttr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attrs(i), output);
  }

  // repeated .Cmd.UserData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AttrProfessionData)
}

::google::protobuf::uint8* AttrProfessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AttrProfessionData)
  // repeated .Cmd.UserAttr attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attrs(i), target);
  }

  // repeated .Cmd.UserData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AttrProfessionData)
  return target;
}

int AttrProfessionData::ByteSize() const {
  int total_size = 0;

  // repeated .Cmd.UserAttr attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  // repeated .Cmd.UserData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrProfessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrProfessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrProfessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrProfessionData::MergeFrom(const AttrProfessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrProfessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrProfessionData::CopyFrom(const AttrProfessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrProfessionData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void AttrProfessionData::Swap(AttrProfessionData* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrProfessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrProfessionData_descriptor_;
  metadata.reflection = AttrProfessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kPosFieldNumber;
const int EquipInfo::kTypeIdFieldNumber;
const int EquipInfo::kGuidFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipInfo)
}

void EquipInfo::InitAsDefaultInstance() {
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipInfo)
}

void EquipInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  pos_ = 0u;
  type_id_ = 0u;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  // @@protoc_insertion_point(destructor:Cmd.EquipInfo)
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EquipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(pos_, type_id_);
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional uint32 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guid;
        break;
      }

      // optional string guid = 3;
      case 3: {
        if (tag == 26) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipInfo)
  return false;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipInfo)
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type_id(), output);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipInfo)
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipInfo)
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type_id(), target);
  }

  // optional string guid = 3;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipInfo)
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // optional string guid = 3;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {

  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(type_id_, other->type_id_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipPackData::kTypeFieldNumber;
const int EquipPackData::kDatasFieldNumber;
#endif  // !_MSC_VER

EquipPackData::EquipPackData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EquipPackData)
}

void EquipPackData::InitAsDefaultInstance() {
}

EquipPackData::EquipPackData(const EquipPackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EquipPackData)
}

void EquipPackData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipPackData::~EquipPackData() {
  // @@protoc_insertion_point(destructor:Cmd.EquipPackData)
  SharedDtor();
}

void EquipPackData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipPackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipPackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipPackData_descriptor_;
}

const EquipPackData& EquipPackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

EquipPackData* EquipPackData::default_instance_ = NULL;

EquipPackData* EquipPackData::New() const {
  return new EquipPackData;
}

void EquipPackData::Clear() {
  type_ = 0u;
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipPackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EquipPackData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.EquipInfo datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EquipPackData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EquipPackData)
  return false;
#undef DO_
}

void EquipPackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EquipPackData)
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // repeated .Cmd.EquipInfo datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EquipPackData)
}

::google::protobuf::uint8* EquipPackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EquipPackData)
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // repeated .Cmd.EquipInfo datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EquipPackData)
  return target;
}

int EquipPackData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  // repeated .Cmd.EquipInfo datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipPackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipPackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipPackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipPackData::MergeFrom(const EquipPackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipPackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipPackData::CopyFrom(const EquipPackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipPackData::IsInitialized() const {

  return true;
}

void EquipPackData::Swap(EquipPackData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipPackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipPackData_descriptor_;
  metadata.reflection = EquipPackData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillValidPosData::kPosFieldNumber;
const int SkillValidPosData::kAutoposFieldNumber;
const int SkillValidPosData::kExtendposFieldNumber;
#endif  // !_MSC_VER

SkillValidPosData::SkillValidPosData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillValidPosData)
}

void SkillValidPosData::InitAsDefaultInstance() {
}

SkillValidPosData::SkillValidPosData(const SkillValidPosData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillValidPosData)
}

void SkillValidPosData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillValidPosData::~SkillValidPosData() {
  // @@protoc_insertion_point(destructor:Cmd.SkillValidPosData)
  SharedDtor();
}

void SkillValidPosData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillValidPosData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillValidPosData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillValidPosData_descriptor_;
}

const SkillValidPosData& SkillValidPosData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SkillValidPosData* SkillValidPosData::default_instance_ = NULL;

SkillValidPosData* SkillValidPosData::New() const {
  return new SkillValidPosData;
}

void SkillValidPosData::Clear() {
  pos_.Clear();
  autopos_.Clear();
  extendpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillValidPosData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillValidPosData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 pos = 1;
      case 1: {
        if (tag == 8) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_pos())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_pos;
        if (input->ExpectTag(16)) goto parse_autopos;
        break;
      }

      // repeated uint32 autopos = 2;
      case 2: {
        if (tag == 16) {
         parse_autopos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_autopos())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_autopos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_autopos;
        if (input->ExpectTag(24)) goto parse_extendpos;
        break;
      }

      // repeated uint32 extendpos = 3;
      case 3: {
        if (tag == 24) {
         parse_extendpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_extendpos())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_extendpos())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_extendpos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillValidPosData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillValidPosData)
  return false;
#undef DO_
}

void SkillValidPosData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillValidPosData)
  // repeated uint32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->pos(i), output);
  }

  // repeated uint32 autopos = 2;
  for (int i = 0; i < this->autopos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->autopos(i), output);
  }

  // repeated uint32 extendpos = 3;
  for (int i = 0; i < this->extendpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->extendpos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillValidPosData)
}

::google::protobuf::uint8* SkillValidPosData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillValidPosData)
  // repeated uint32 pos = 1;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->pos(i), target);
  }

  // repeated uint32 autopos = 2;
  for (int i = 0; i < this->autopos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->autopos(i), target);
  }

  // repeated uint32 extendpos = 3;
  for (int i = 0; i < this->extendpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->extendpos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillValidPosData)
  return target;
}

int SkillValidPosData::ByteSize() const {
  int total_size = 0;

  // repeated uint32 pos = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  // repeated uint32 autopos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->autopos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->autopos(i));
    }
    total_size += 1 * this->autopos_size() + data_size;
  }

  // repeated uint32 extendpos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->extendpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->extendpos(i));
    }
    total_size += 1 * this->extendpos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillValidPosData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillValidPosData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillValidPosData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillValidPosData::MergeFrom(const SkillValidPosData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  autopos_.MergeFrom(from.autopos_);
  extendpos_.MergeFrom(from.extendpos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillValidPosData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillValidPosData::CopyFrom(const SkillValidPosData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillValidPosData::IsInitialized() const {

  return true;
}

void SkillValidPosData::Swap(SkillValidPosData* other) {
  if (other != this) {
    pos_.Swap(&other->pos_);
    autopos_.Swap(&other->autopos_);
    extendpos_.Swap(&other->extendpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillValidPosData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillValidPosData_descriptor_;
  metadata.reflection = SkillValidPosData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillProfessionData::kLeftPointFieldNumber;
const int SkillProfessionData::kDatasFieldNumber;
const int SkillProfessionData::kNoviceDataFieldNumber;
const int SkillProfessionData::kBeingsFieldNumber;
const int SkillProfessionData::kCurbeingidFieldNumber;
const int SkillProfessionData::kBeinginfosFieldNumber;
const int SkillProfessionData::kSkillposFieldNumber;
const int SkillProfessionData::kShortcutFieldNumber;
#endif  // !_MSC_VER

SkillProfessionData::SkillProfessionData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillProfessionData)
}

void SkillProfessionData::InitAsDefaultInstance() {
  novice_data_ = const_cast< ::Cmd::SkillData*>(&::Cmd::SkillData::default_instance());
  skillpos_ = const_cast< ::Cmd::SkillValidPosData*>(&::Cmd::SkillValidPosData::default_instance());
  shortcut_ = const_cast< ::Cmd::SkillValidPos*>(&::Cmd::SkillValidPos::default_instance());
}

SkillProfessionData::SkillProfessionData(const SkillProfessionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillProfessionData)
}

void SkillProfessionData::SharedCtor() {
  _cached_size_ = 0;
  left_point_ = 0u;
  novice_data_ = NULL;
  curbeingid_ = 0u;
  skillpos_ = NULL;
  shortcut_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillProfessionData::~SkillProfessionData() {
  // @@protoc_insertion_point(destructor:Cmd.SkillProfessionData)
  SharedDtor();
}

void SkillProfessionData::SharedDtor() {
  if (this != default_instance_) {
    delete novice_data_;
    delete skillpos_;
    delete shortcut_;
  }
}

void SkillProfessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillProfessionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillProfessionData_descriptor_;
}

const SkillProfessionData& SkillProfessionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SkillProfessionData* SkillProfessionData::default_instance_ = NULL;

SkillProfessionData* SkillProfessionData::New() const {
  return new SkillProfessionData;
}

void SkillProfessionData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SkillProfessionData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 213) {
    ZR_(left_point_, curbeingid_);
    if (has_novice_data()) {
      if (novice_data_ != NULL) novice_data_->::Cmd::SkillData::Clear();
    }
    if (has_skillpos()) {
      if (skillpos_ != NULL) skillpos_->::Cmd::SkillValidPosData::Clear();
    }
    if (has_shortcut()) {
      if (shortcut_ != NULL) shortcut_->::Cmd::SkillValidPos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  datas_.Clear();
  beings_.Clear();
  beinginfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillProfessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillProfessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left_point = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_point_)));
          set_has_left_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.SkillData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(26)) goto parse_novice_data;
        break;
      }

      // optional .Cmd.SkillData novice_data = 3;
      case 3: {
        if (tag == 26) {
         parse_novice_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_novice_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beings;
        break;
      }

      // repeated .Cmd.BeingSkillData beings = 4;
      case 4: {
        if (tag == 34) {
         parse_beings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beings()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beings;
        if (input->ExpectTag(40)) goto parse_curbeingid;
        break;
      }

      // optional uint32 curbeingid = 5;
      case 5: {
        if (tag == 40) {
         parse_curbeingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curbeingid_)));
          set_has_curbeingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_beinginfos;
        break;
      }

      // repeated .Cmd.BeingInfo beinginfos = 6;
      case 6: {
        if (tag == 50) {
         parse_beinginfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beinginfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_beinginfos;
        if (input->ExpectTag(58)) goto parse_skillpos;
        break;
      }

      // optional .Cmd.SkillValidPosData skillpos = 7;
      case 7: {
        if (tag == 58) {
         parse_skillpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_shortcut;
        break;
      }

      // optional .Cmd.SkillValidPos shortcut = 8;
      case 8: {
        if (tag == 66) {
         parse_shortcut:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shortcut()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillProfessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillProfessionData)
  return false;
#undef DO_
}

void SkillProfessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillProfessionData)
  // optional uint32 left_point = 1;
  if (has_left_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left_point(), output);
  }

  // repeated .Cmd.SkillData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // optional .Cmd.SkillData novice_data = 3;
  if (has_novice_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->novice_data(), output);
  }

  // repeated .Cmd.BeingSkillData beings = 4;
  for (int i = 0; i < this->beings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->beings(i), output);
  }

  // optional uint32 curbeingid = 5;
  if (has_curbeingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curbeingid(), output);
  }

  // repeated .Cmd.BeingInfo beinginfos = 6;
  for (int i = 0; i < this->beinginfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->beinginfos(i), output);
  }

  // optional .Cmd.SkillValidPosData skillpos = 7;
  if (has_skillpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skillpos(), output);
  }

  // optional .Cmd.SkillValidPos shortcut = 8;
  if (has_shortcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->shortcut(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillProfessionData)
}

::google::protobuf::uint8* SkillProfessionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillProfessionData)
  // optional uint32 left_point = 1;
  if (has_left_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left_point(), target);
  }

  // repeated .Cmd.SkillData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // optional .Cmd.SkillData novice_data = 3;
  if (has_novice_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->novice_data(), target);
  }

  // repeated .Cmd.BeingSkillData beings = 4;
  for (int i = 0; i < this->beings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->beings(i), target);
  }

  // optional uint32 curbeingid = 5;
  if (has_curbeingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curbeingid(), target);
  }

  // repeated .Cmd.BeingInfo beinginfos = 6;
  for (int i = 0; i < this->beinginfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->beinginfos(i), target);
  }

  // optional .Cmd.SkillValidPosData skillpos = 7;
  if (has_skillpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skillpos(), target);
  }

  // optional .Cmd.SkillValidPos shortcut = 8;
  if (has_shortcut()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->shortcut(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillProfessionData)
  return target;
}

int SkillProfessionData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 left_point = 1;
    if (has_left_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_point());
    }

    // optional .Cmd.SkillData novice_data = 3;
    if (has_novice_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->novice_data());
    }

    // optional uint32 curbeingid = 5;
    if (has_curbeingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curbeingid());
    }

    // optional .Cmd.SkillValidPosData skillpos = 7;
    if (has_skillpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillpos());
    }

    // optional .Cmd.SkillValidPos shortcut = 8;
    if (has_shortcut()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shortcut());
    }

  }
  // repeated .Cmd.SkillData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.BeingSkillData beings = 4;
  total_size += 1 * this->beings_size();
  for (int i = 0; i < this->beings_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beings(i));
  }

  // repeated .Cmd.BeingInfo beinginfos = 6;
  total_size += 1 * this->beinginfos_size();
  for (int i = 0; i < this->beinginfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beinginfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillProfessionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillProfessionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillProfessionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillProfessionData::MergeFrom(const SkillProfessionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  beings_.MergeFrom(from.beings_);
  beinginfos_.MergeFrom(from.beinginfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_point()) {
      set_left_point(from.left_point());
    }
    if (from.has_novice_data()) {
      mutable_novice_data()->::Cmd::SkillData::MergeFrom(from.novice_data());
    }
    if (from.has_curbeingid()) {
      set_curbeingid(from.curbeingid());
    }
    if (from.has_skillpos()) {
      mutable_skillpos()->::Cmd::SkillValidPosData::MergeFrom(from.skillpos());
    }
    if (from.has_shortcut()) {
      mutable_shortcut()->::Cmd::SkillValidPos::MergeFrom(from.shortcut());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillProfessionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillProfessionData::CopyFrom(const SkillProfessionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillProfessionData::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->beings())) return false;
  return true;
}

void SkillProfessionData::Swap(SkillProfessionData* other) {
  if (other != this) {
    std::swap(left_point_, other->left_point_);
    datas_.Swap(&other->datas_);
    std::swap(novice_data_, other->novice_data_);
    beings_.Swap(&other->beings_);
    std::swap(curbeingid_, other->curbeingid_);
    beinginfos_.Swap(&other->beinginfos_);
    std::swap(skillpos_, other->skillpos_);
    std::swap(shortcut_, other->shortcut_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillProfessionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillProfessionData_descriptor_;
  metadata.reflection = SkillProfessionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfessionUserInfo::kIdFieldNumber;
const int ProfessionUserInfo::kProfessionFieldNumber;
const int ProfessionUserInfo::kJoblvFieldNumber;
const int ProfessionUserInfo::kJobexpFieldNumber;
const int ProfessionUserInfo::kTypeFieldNumber;
const int ProfessionUserInfo::kRecordnameFieldNumber;
const int ProfessionUserInfo::kRecordtimeFieldNumber;
const int ProfessionUserInfo::kCharidFieldNumber;
const int ProfessionUserInfo::kCharnameFieldNumber;
const int ProfessionUserInfo::kAttrDataFieldNumber;
const int ProfessionUserInfo::kEquipDataFieldNumber;
const int ProfessionUserInfo::kAstrolabeDataFieldNumber;
const int ProfessionUserInfo::kSkillDataFieldNumber;
const int ProfessionUserInfo::kIsfirstFieldNumber;
const int ProfessionUserInfo::kIsbuyFieldNumber;
#endif  // !_MSC_VER

ProfessionUserInfo::ProfessionUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ProfessionUserInfo)
}

void ProfessionUserInfo::InitAsDefaultInstance() {
  attr_data_ = const_cast< ::Cmd::AttrProfessionData*>(&::Cmd::AttrProfessionData::default_instance());
  astrolabe_data_ = const_cast< ::Cmd::AstrolabeProfessionData*>(&::Cmd::AstrolabeProfessionData::default_instance());
  skill_data_ = const_cast< ::Cmd::SkillProfessionData*>(&::Cmd::SkillProfessionData::default_instance());
}

ProfessionUserInfo::ProfessionUserInfo(const ProfessionUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ProfessionUserInfo)
}

void ProfessionUserInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  profession_ = 0u;
  joblv_ = 0u;
  jobexp_ = 0u;
  type_ = 1;
  recordname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordtime_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attr_data_ = NULL;
  astrolabe_data_ = NULL;
  skill_data_ = NULL;
  isfirst_ = true;
  isbuy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfessionUserInfo::~ProfessionUserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ProfessionUserInfo)
  SharedDtor();
}

void ProfessionUserInfo::SharedDtor() {
  if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete recordname_;
  }
  if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete charname_;
  }
  if (this != default_instance_) {
    delete attr_data_;
    delete astrolabe_data_;
    delete skill_data_;
  }
}

void ProfessionUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfessionUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfessionUserInfo_descriptor_;
}

const ProfessionUserInfo& ProfessionUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ProfessionUserInfo* ProfessionUserInfo::default_instance_ = NULL;

ProfessionUserInfo* ProfessionUserInfo::New() const {
  return new ProfessionUserInfo;
}

void ProfessionUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ProfessionUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, jobexp_);
    ZR_(recordtime_, charid_);
    type_ = 1;
    if (has_recordname()) {
      if (recordname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        recordname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 31488) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        charname_->clear();
      }
    }
    if (has_attr_data()) {
      if (attr_data_ != NULL) attr_data_->::Cmd::AttrProfessionData::Clear();
    }
    if (has_astrolabe_data()) {
      if (astrolabe_data_ != NULL) astrolabe_data_->::Cmd::AstrolabeProfessionData::Clear();
    }
    if (has_skill_data()) {
      if (skill_data_ != NULL) skill_data_->::Cmd::SkillProfessionData::Clear();
    }
    isfirst_ = true;
    isbuy_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  equip_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfessionUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ProfessionUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // optional uint32 profession = 2;
      case 2: {
        if (tag == 16) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_joblv;
        break;
      }

      // optional uint32 joblv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_joblv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joblv_)));
          set_has_joblv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_jobexp;
        break;
      }

      // optional uint32 jobexp = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
      case 5: {
        if (tag == 40) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfressionDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EProfressionDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_recordname;
        break;
      }

      // optional string recordname = 6;
      case 6: {
        if (tag == 50) {
         parse_recordname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_recordname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->recordname().data(), this->recordname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "recordname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_recordtime;
        break;
      }

      // optional uint32 recordtime = 7;
      case 7: {
        if (tag == 56) {
         parse_recordtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recordtime_)));
          set_has_recordtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 8;
      case 8: {
        if (tag == 64) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_charname;
        break;
      }

      // optional string charname = 9;
      case 9: {
        if (tag == 74) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "charname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_attr_data;
        break;
      }

      // optional .Cmd.AttrProfessionData attr_data = 10;
      case 10: {
        if (tag == 82) {
         parse_attr_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_equip_data;
        break;
      }

      // repeated .Cmd.EquipPackData equip_data = 11;
      case 11: {
        if (tag == 90) {
         parse_equip_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_equip_data;
        if (input->ExpectTag(98)) goto parse_astrolabe_data;
        break;
      }

      // optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
      case 12: {
        if (tag == 98) {
         parse_astrolabe_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_astrolabe_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_skill_data;
        break;
      }

      // optional .Cmd.SkillProfessionData skill_data = 13;
      case 13: {
        if (tag == 106) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_isfirst;
        break;
      }

      // optional bool isfirst = 14 [default = true];
      case 14: {
        if (tag == 112) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_isbuy;
        break;
      }

      // optional bool isbuy = 15 [default = false];
      case 15: {
        if (tag == 120) {
         parse_isbuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuy_)));
          set_has_isbuy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ProfessionUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ProfessionUserInfo)
  return false;
#undef DO_
}

void ProfessionUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ProfessionUserInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->profession(), output);
  }

  // optional uint32 joblv = 3 [default = 0];
  if (has_joblv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->joblv(), output);
  }

  // optional uint32 jobexp = 4 [default = 0];
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->jobexp(), output);
  }

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional string recordname = 6;
  if (has_recordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordname().data(), this->recordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->recordname(), output);
  }

  // optional uint32 recordtime = 7;
  if (has_recordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->recordtime(), output);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->charid(), output);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->charname(), output);
  }

  // optional .Cmd.AttrProfessionData attr_data = 10;
  if (has_attr_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->attr_data(), output);
  }

  // repeated .Cmd.EquipPackData equip_data = 11;
  for (int i = 0; i < this->equip_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->equip_data(i), output);
  }

  // optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
  if (has_astrolabe_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->astrolabe_data(), output);
  }

  // optional .Cmd.SkillProfessionData skill_data = 13;
  if (has_skill_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->skill_data(), output);
  }

  // optional bool isfirst = 14 [default = true];
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isfirst(), output);
  }

  // optional bool isbuy = 15 [default = false];
  if (has_isbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isbuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ProfessionUserInfo)
}

::google::protobuf::uint8* ProfessionUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ProfessionUserInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 profession = 2;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->profession(), target);
  }

  // optional uint32 joblv = 3 [default = 0];
  if (has_joblv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->joblv(), target);
  }

  // optional uint32 jobexp = 4 [default = 0];
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->jobexp(), target);
  }

  // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional string recordname = 6;
  if (has_recordname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->recordname().data(), this->recordname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "recordname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->recordname(), target);
  }

  // optional uint32 recordtime = 7;
  if (has_recordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->recordtime(), target);
  }

  // optional uint64 charid = 8;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->charid(), target);
  }

  // optional string charname = 9;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "charname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->charname(), target);
  }

  // optional .Cmd.AttrProfessionData attr_data = 10;
  if (has_attr_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->attr_data(), target);
  }

  // repeated .Cmd.EquipPackData equip_data = 11;
  for (int i = 0; i < this->equip_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->equip_data(i), target);
  }

  // optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
  if (has_astrolabe_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->astrolabe_data(), target);
  }

  // optional .Cmd.SkillProfessionData skill_data = 13;
  if (has_skill_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->skill_data(), target);
  }

  // optional bool isfirst = 14 [default = true];
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isfirst(), target);
  }

  // optional bool isbuy = 15 [default = false];
  if (has_isbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isbuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ProfessionUserInfo)
  return target;
}

int ProfessionUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 profession = 2;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->profession());
    }

    // optional uint32 joblv = 3 [default = 0];
    if (has_joblv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joblv());
    }

    // optional uint32 jobexp = 4 [default = 0];
    if (has_jobexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->jobexp());
    }

    // optional .Cmd.EProfressionDataType type = 5 [default = ETypeBranch];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string recordname = 6;
    if (has_recordname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->recordname());
    }

    // optional uint32 recordtime = 7;
    if (has_recordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recordtime());
    }

    // optional uint64 charid = 8;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string charname = 9;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional .Cmd.AttrProfessionData attr_data = 10;
    if (has_attr_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr_data());
    }

    // optional .Cmd.AstrolabeProfessionData astrolabe_data = 12;
    if (has_astrolabe_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->astrolabe_data());
    }

    // optional .Cmd.SkillProfessionData skill_data = 13;
    if (has_skill_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill_data());
    }

    // optional bool isfirst = 14 [default = true];
    if (has_isfirst()) {
      total_size += 1 + 1;
    }

    // optional bool isbuy = 15 [default = false];
    if (has_isbuy()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.EquipPackData equip_data = 11;
  total_size += 1 * this->equip_data_size();
  for (int i = 0; i < this->equip_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfessionUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfessionUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfessionUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfessionUserInfo::MergeFrom(const ProfessionUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_data_.MergeFrom(from.equip_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_joblv()) {
      set_joblv(from.joblv());
    }
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_recordname()) {
      set_recordname(from.recordname());
    }
    if (from.has_recordtime()) {
      set_recordtime(from.recordtime());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_attr_data()) {
      mutable_attr_data()->::Cmd::AttrProfessionData::MergeFrom(from.attr_data());
    }
    if (from.has_astrolabe_data()) {
      mutable_astrolabe_data()->::Cmd::AstrolabeProfessionData::MergeFrom(from.astrolabe_data());
    }
    if (from.has_skill_data()) {
      mutable_skill_data()->::Cmd::SkillProfessionData::MergeFrom(from.skill_data());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
    if (from.has_isbuy()) {
      set_isbuy(from.isbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfessionUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfessionUserInfo::CopyFrom(const ProfessionUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfessionUserInfo::IsInitialized() const {

  if (has_attr_data()) {
    if (!this->attr_data().IsInitialized()) return false;
  }
  if (has_skill_data()) {
    if (!this->skill_data().IsInitialized()) return false;
  }
  return true;
}

void ProfessionUserInfo::Swap(ProfessionUserInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(profession_, other->profession_);
    std::swap(joblv_, other->joblv_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(type_, other->type_);
    std::swap(recordname_, other->recordname_);
    std::swap(recordtime_, other->recordtime_);
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(attr_data_, other->attr_data_);
    equip_data_.Swap(&other->equip_data_);
    std::swap(astrolabe_data_, other->astrolabe_data_);
    std::swap(skill_data_, other->skill_data_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(isbuy_, other->isbuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfessionUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfessionUserInfo_descriptor_;
  metadata.reflection = ProfessionUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlotInfo::kIdFieldNumber;
const int SlotInfo::kTypeFieldNumber;
const int SlotInfo::kActiveFieldNumber;
const int SlotInfo::kCostidFieldNumber;
const int SlotInfo::kCostnumFieldNumber;
#endif  // !_MSC_VER

SlotInfo::SlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SlotInfo)
}

void SlotInfo::InitAsDefaultInstance() {
}

SlotInfo::SlotInfo(const SlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SlotInfo)
}

void SlotInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 1;
  active_ = false;
  costid_ = 0u;
  costnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotInfo::~SlotInfo() {
  // @@protoc_insertion_point(destructor:Cmd.SlotInfo)
  SharedDtor();
}

void SlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotInfo_descriptor_;
}

const SlotInfo& SlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SlotInfo* SlotInfo::default_instance_ = NULL;

SlotInfo* SlotInfo::New() const {
  return new SlotInfo;
}

void SlotInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SlotInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(active_, costnum_);
    id_ = 0u;
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SlotInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESlotType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ESlotType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_active;
        break;
      }

      // optional bool active = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &active_)));
          set_has_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_costid;
        break;
      }

      // optional uint32 costid = 4;
      case 4: {
        if (tag == 32) {
         parse_costid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costid_)));
          set_has_costid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_costnum;
        break;
      }

      // optional uint32 costnum = 5;
      case 5: {
        if (tag == 40) {
         parse_costnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costnum_)));
          set_has_costnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SlotInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SlotInfo)
  return false;
#undef DO_
}

void SlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SlotInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->active(), output);
  }

  // optional uint32 costid = 4;
  if (has_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->costid(), output);
  }

  // optional uint32 costnum = 5;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->costnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SlotInfo)
}

::google::protobuf::uint8* SlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SlotInfo)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bool active = 3 [default = false];
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->active(), target);
  }

  // optional uint32 costid = 4;
  if (has_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->costid(), target);
  }

  // optional uint32 costnum = 5;
  if (has_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->costnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SlotInfo)
  return target;
}

int SlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .Cmd.ESlotType type = 2 [default = ESLOT_DEFAULT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool active = 3 [default = false];
    if (has_active()) {
      total_size += 1 + 1;
    }

    // optional uint32 costid = 4;
    if (has_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costid());
    }

    // optional uint32 costnum = 5;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotInfo::MergeFrom(const SlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_active()) {
      set_active(from.active());
    }
    if (from.has_costid()) {
      set_costid(from.costid());
    }
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotInfo::CopyFrom(const SlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotInfo::IsInitialized() const {

  return true;
}

void SlotInfo::Swap(SlotInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(active_, other->active_);
    std::swap(costid_, other->costid_);
    std::swap(costnum_, other->costnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotInfo_descriptor_;
  metadata.reflection = SlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAstrolMaterialData::kCharidFieldNumber;
const int UserAstrolMaterialData::kMaterialsFieldNumber;
#endif  // !_MSC_VER

UserAstrolMaterialData::UserAstrolMaterialData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAstrolMaterialData)
}

void UserAstrolMaterialData::InitAsDefaultInstance() {
}

UserAstrolMaterialData::UserAstrolMaterialData(const UserAstrolMaterialData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAstrolMaterialData)
}

void UserAstrolMaterialData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAstrolMaterialData::~UserAstrolMaterialData() {
  // @@protoc_insertion_point(destructor:Cmd.UserAstrolMaterialData)
  SharedDtor();
}

void UserAstrolMaterialData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserAstrolMaterialData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAstrolMaterialData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAstrolMaterialData_descriptor_;
}

const UserAstrolMaterialData& UserAstrolMaterialData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UserAstrolMaterialData* UserAstrolMaterialData::default_instance_ = NULL;

UserAstrolMaterialData* UserAstrolMaterialData::New() const {
  return new UserAstrolMaterialData;
}

void UserAstrolMaterialData::Clear() {
  charid_ = GOOGLE_ULONGLONG(0);
  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAstrolMaterialData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAstrolMaterialData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_materials;
        break;
      }

      // repeated .Cmd.AstrolabeCostData materials = 2;
      case 2: {
        if (tag == 18) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_materials;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAstrolMaterialData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAstrolMaterialData)
  return false;
#undef DO_
}

void UserAstrolMaterialData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAstrolMaterialData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .Cmd.AstrolabeCostData materials = 2;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->materials(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAstrolMaterialData)
}

::google::protobuf::uint8* UserAstrolMaterialData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAstrolMaterialData)
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .Cmd.AstrolabeCostData materials = 2;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->materials(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAstrolMaterialData)
  return target;
}

int UserAstrolMaterialData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.AstrolabeCostData materials = 2;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAstrolMaterialData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAstrolMaterialData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAstrolMaterialData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAstrolMaterialData::MergeFrom(const UserAstrolMaterialData& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAstrolMaterialData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAstrolMaterialData::CopyFrom(const UserAstrolMaterialData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAstrolMaterialData::IsInitialized() const {

  return true;
}

void UserAstrolMaterialData::Swap(UserAstrolMaterialData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    materials_.Swap(&other->materials_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAstrolMaterialData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAstrolMaterialData_descriptor_;
  metadata.reflection = UserAstrolMaterialData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRecordInfoUserCmd::kCmdFieldNumber;
const int UpdateRecordInfoUserCmd::kParamFieldNumber;
const int UpdateRecordInfoUserCmd::kSlotsFieldNumber;
const int UpdateRecordInfoUserCmd::kRecordsFieldNumber;
const int UpdateRecordInfoUserCmd::kDeleteIdsFieldNumber;
const int UpdateRecordInfoUserCmd::kCardExpiretimeFieldNumber;
const int UpdateRecordInfoUserCmd::kAstrolDataFieldNumber;
#endif  // !_MSC_VER

UpdateRecordInfoUserCmd::UpdateRecordInfoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateRecordInfoUserCmd)
}

void UpdateRecordInfoUserCmd::InitAsDefaultInstance() {
}

UpdateRecordInfoUserCmd::UpdateRecordInfoUserCmd(const UpdateRecordInfoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateRecordInfoUserCmd)
}

void UpdateRecordInfoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 134;
  card_expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRecordInfoUserCmd::~UpdateRecordInfoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateRecordInfoUserCmd)
  SharedDtor();
}

void UpdateRecordInfoUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRecordInfoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRecordInfoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRecordInfoUserCmd_descriptor_;
}

const UpdateRecordInfoUserCmd& UpdateRecordInfoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpdateRecordInfoUserCmd* UpdateRecordInfoUserCmd::default_instance_ = NULL;

UpdateRecordInfoUserCmd* UpdateRecordInfoUserCmd::New() const {
  return new UpdateRecordInfoUserCmd;
}

void UpdateRecordInfoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 35) {
    cmd_ = 9;
    param_ = 134;
    card_expiretime_ = 0u;
  }
  slots_.Clear();
  records_.Clear();
  delete_ids_.Clear();
  astrol_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRecordInfoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateRecordInfoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        break;
      }

      // repeated .Cmd.SlotInfo slots = 3;
      case 3: {
        if (tag == 26) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_slots;
        if (input->ExpectTag(34)) goto parse_records;
        break;
      }

      // repeated .Cmd.ProfessionUserInfo records = 4;
      case 4: {
        if (tag == 34) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_records;
        if (input->ExpectTag(40)) goto parse_delete_ids;
        break;
      }

      // repeated uint32 delete_ids = 5;
      case 5: {
        if (tag == 40) {
         parse_delete_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_delete_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_delete_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_delete_ids;
        if (input->ExpectTag(48)) goto parse_card_expiretime;
        break;
      }

      // optional uint32 card_expiretime = 6;
      case 6: {
        if (tag == 48) {
         parse_card_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &card_expiretime_)));
          set_has_card_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_astrol_data;
        break;
      }

      // repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
      case 7: {
        if (tag == 58) {
         parse_astrol_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_astrol_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_astrol_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateRecordInfoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateRecordInfoUserCmd)
  return false;
#undef DO_
}

void UpdateRecordInfoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateRecordInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.SlotInfo slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slots(i), output);
  }

  // repeated .Cmd.ProfessionUserInfo records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // repeated uint32 delete_ids = 5;
  for (int i = 0; i < this->delete_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->delete_ids(i), output);
  }

  // optional uint32 card_expiretime = 6;
  if (has_card_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->card_expiretime(), output);
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
  for (int i = 0; i < this->astrol_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->astrol_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateRecordInfoUserCmd)
}

::google::protobuf::uint8* UpdateRecordInfoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateRecordInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.SlotInfo slots = 3;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slots(i), target);
  }

  // repeated .Cmd.ProfessionUserInfo records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // repeated uint32 delete_ids = 5;
  for (int i = 0; i < this->delete_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->delete_ids(i), target);
  }

  // optional uint32 card_expiretime = 6;
  if (has_card_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->card_expiretime(), target);
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
  for (int i = 0; i < this->astrol_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->astrol_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateRecordInfoUserCmd)
  return target;
}

int UpdateRecordInfoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_RECORD_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 card_expiretime = 6;
    if (has_card_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->card_expiretime());
    }

  }
  // repeated .Cmd.SlotInfo slots = 3;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  // repeated .Cmd.ProfessionUserInfo records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated uint32 delete_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->delete_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->delete_ids(i));
    }
    total_size += 1 * this->delete_ids_size() + data_size;
  }

  // repeated .Cmd.UserAstrolMaterialData astrol_data = 7;
  total_size += 1 * this->astrol_data_size();
  for (int i = 0; i < this->astrol_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->astrol_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRecordInfoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRecordInfoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRecordInfoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRecordInfoUserCmd::MergeFrom(const UpdateRecordInfoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  records_.MergeFrom(from.records_);
  delete_ids_.MergeFrom(from.delete_ids_);
  astrol_data_.MergeFrom(from.astrol_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_card_expiretime()) {
      set_card_expiretime(from.card_expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRecordInfoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRecordInfoUserCmd::CopyFrom(const UpdateRecordInfoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRecordInfoUserCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->records())) return false;
  return true;
}

void UpdateRecordInfoUserCmd::Swap(UpdateRecordInfoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    slots_.Swap(&other->slots_);
    records_.Swap(&other->records_);
    delete_ids_.Swap(&other->delete_ids_);
    std::swap(card_expiretime_, other->card_expiretime_);
    astrol_data_.Swap(&other->astrol_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRecordInfoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRecordInfoUserCmd_descriptor_;
  metadata.reflection = UpdateRecordInfoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveRecordUserCmd::kCmdFieldNumber;
const int SaveRecordUserCmd::kParamFieldNumber;
const int SaveRecordUserCmd::kSlotidFieldNumber;
const int SaveRecordUserCmd::kRecordNameFieldNumber;
#endif  // !_MSC_VER

SaveRecordUserCmd::SaveRecordUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SaveRecordUserCmd)
}

void SaveRecordUserCmd::InitAsDefaultInstance() {
}

SaveRecordUserCmd::SaveRecordUserCmd(const SaveRecordUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SaveRecordUserCmd)
}

void SaveRecordUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 135;
  slotid_ = 0u;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveRecordUserCmd::~SaveRecordUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SaveRecordUserCmd)
  SharedDtor();
}

void SaveRecordUserCmd::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_name_;
  }
  if (this != default_instance_) {
  }
}

void SaveRecordUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveRecordUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveRecordUserCmd_descriptor_;
}

const SaveRecordUserCmd& SaveRecordUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

SaveRecordUserCmd* SaveRecordUserCmd::default_instance_ = NULL;

SaveRecordUserCmd* SaveRecordUserCmd::New() const {
  return new SaveRecordUserCmd;
}

void SaveRecordUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 135;
    slotid_ = 0u;
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        record_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveRecordUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SaveRecordUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slotid;
        break;
      }

      // optional uint32 slotid = 3;
      case 3: {
        if (tag == 24) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_record_name;
        break;
      }

      // optional string record_name = 4;
      case 4: {
        if (tag == 34) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_name().data(), this->record_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "record_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SaveRecordUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SaveRecordUserCmd)
  return false;
#undef DO_
}

void SaveRecordUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SaveRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  // optional string record_name = 4;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->record_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SaveRecordUserCmd)
}

::google::protobuf::uint8* SaveRecordUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SaveRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  // optional string record_name = 4;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->record_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SaveRecordUserCmd)
  return target;
}

int SaveRecordUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SAVE_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 slotid = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

    // optional string record_name = 4;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveRecordUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveRecordUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveRecordUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveRecordUserCmd::MergeFrom(const SaveRecordUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveRecordUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveRecordUserCmd::CopyFrom(const SaveRecordUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveRecordUserCmd::IsInitialized() const {

  return true;
}

void SaveRecordUserCmd::Swap(SaveRecordUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(slotid_, other->slotid_);
    std::swap(record_name_, other->record_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveRecordUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveRecordUserCmd_descriptor_;
  metadata.reflection = SaveRecordUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadRecordUserCmd::kCmdFieldNumber;
const int LoadRecordUserCmd::kParamFieldNumber;
const int LoadRecordUserCmd::kSlotidFieldNumber;
#endif  // !_MSC_VER

LoadRecordUserCmd::LoadRecordUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoadRecordUserCmd)
}

void LoadRecordUserCmd::InitAsDefaultInstance() {
}

LoadRecordUserCmd::LoadRecordUserCmd(const LoadRecordUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoadRecordUserCmd)
}

void LoadRecordUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 136;
  slotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadRecordUserCmd::~LoadRecordUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoadRecordUserCmd)
  SharedDtor();
}

void LoadRecordUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadRecordUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadRecordUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadRecordUserCmd_descriptor_;
}

const LoadRecordUserCmd& LoadRecordUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

LoadRecordUserCmd* LoadRecordUserCmd::default_instance_ = NULL;

LoadRecordUserCmd* LoadRecordUserCmd::New() const {
  return new LoadRecordUserCmd;
}

void LoadRecordUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 136;
    slotid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadRecordUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoadRecordUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slotid;
        break;
      }

      // optional uint32 slotid = 3;
      case 3: {
        if (tag == 24) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoadRecordUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoadRecordUserCmd)
  return false;
#undef DO_
}

void LoadRecordUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoadRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoadRecordUserCmd)
}

::google::protobuf::uint8* LoadRecordUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoadRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoadRecordUserCmd)
  return target;
}

int LoadRecordUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_LOAD_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 slotid = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadRecordUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadRecordUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadRecordUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadRecordUserCmd::MergeFrom(const LoadRecordUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadRecordUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadRecordUserCmd::CopyFrom(const LoadRecordUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadRecordUserCmd::IsInitialized() const {

  return true;
}

void LoadRecordUserCmd::Swap(LoadRecordUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(slotid_, other->slotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadRecordUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadRecordUserCmd_descriptor_;
  metadata.reflection = LoadRecordUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeRecordNameUserCmd::kCmdFieldNumber;
const int ChangeRecordNameUserCmd::kParamFieldNumber;
const int ChangeRecordNameUserCmd::kSlotidFieldNumber;
const int ChangeRecordNameUserCmd::kRecordNameFieldNumber;
#endif  // !_MSC_VER

ChangeRecordNameUserCmd::ChangeRecordNameUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeRecordNameUserCmd)
}

void ChangeRecordNameUserCmd::InitAsDefaultInstance() {
}

ChangeRecordNameUserCmd::ChangeRecordNameUserCmd(const ChangeRecordNameUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeRecordNameUserCmd)
}

void ChangeRecordNameUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 137;
  slotid_ = 0u;
  record_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeRecordNameUserCmd::~ChangeRecordNameUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeRecordNameUserCmd)
  SharedDtor();
}

void ChangeRecordNameUserCmd::SharedDtor() {
  if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete record_name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeRecordNameUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeRecordNameUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeRecordNameUserCmd_descriptor_;
}

const ChangeRecordNameUserCmd& ChangeRecordNameUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ChangeRecordNameUserCmd* ChangeRecordNameUserCmd::default_instance_ = NULL;

ChangeRecordNameUserCmd* ChangeRecordNameUserCmd::New() const {
  return new ChangeRecordNameUserCmd;
}

void ChangeRecordNameUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 9;
    param_ = 137;
    slotid_ = 0u;
    if (has_record_name()) {
      if (record_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        record_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeRecordNameUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeRecordNameUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slotid;
        break;
      }

      // optional uint32 slotid = 3;
      case 3: {
        if (tag == 24) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_record_name;
        break;
      }

      // optional string record_name = 4;
      case 4: {
        if (tag == 34) {
         parse_record_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_record_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->record_name().data(), this->record_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "record_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeRecordNameUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeRecordNameUserCmd)
  return false;
#undef DO_
}

void ChangeRecordNameUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeRecordNameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  // optional string record_name = 4;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->record_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeRecordNameUserCmd)
}

::google::protobuf::uint8* ChangeRecordNameUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeRecordNameUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  // optional string record_name = 4;
  if (has_record_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->record_name().data(), this->record_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "record_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->record_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeRecordNameUserCmd)
  return target;
}

int ChangeRecordNameUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHANGE_RECORD_NAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 slotid = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

    // optional string record_name = 4;
    if (has_record_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->record_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeRecordNameUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeRecordNameUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeRecordNameUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeRecordNameUserCmd::MergeFrom(const ChangeRecordNameUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_record_name()) {
      set_record_name(from.record_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeRecordNameUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeRecordNameUserCmd::CopyFrom(const ChangeRecordNameUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeRecordNameUserCmd::IsInitialized() const {

  return true;
}

void ChangeRecordNameUserCmd::Swap(ChangeRecordNameUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(slotid_, other->slotid_);
    std::swap(record_name_, other->record_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeRecordNameUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeRecordNameUserCmd_descriptor_;
  metadata.reflection = ChangeRecordNameUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyRecordSlotUserCmd::kCmdFieldNumber;
const int BuyRecordSlotUserCmd::kParamFieldNumber;
const int BuyRecordSlotUserCmd::kSlotidFieldNumber;
#endif  // !_MSC_VER

BuyRecordSlotUserCmd::BuyRecordSlotUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuyRecordSlotUserCmd)
}

void BuyRecordSlotUserCmd::InitAsDefaultInstance() {
}

BuyRecordSlotUserCmd::BuyRecordSlotUserCmd(const BuyRecordSlotUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuyRecordSlotUserCmd)
}

void BuyRecordSlotUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 138;
  slotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyRecordSlotUserCmd::~BuyRecordSlotUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuyRecordSlotUserCmd)
  SharedDtor();
}

void BuyRecordSlotUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyRecordSlotUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyRecordSlotUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyRecordSlotUserCmd_descriptor_;
}

const BuyRecordSlotUserCmd& BuyRecordSlotUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BuyRecordSlotUserCmd* BuyRecordSlotUserCmd::default_instance_ = NULL;

BuyRecordSlotUserCmd* BuyRecordSlotUserCmd::New() const {
  return new BuyRecordSlotUserCmd;
}

void BuyRecordSlotUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 138;
    slotid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyRecordSlotUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuyRecordSlotUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slotid;
        break;
      }

      // optional uint32 slotid = 3;
      case 3: {
        if (tag == 24) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuyRecordSlotUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuyRecordSlotUserCmd)
  return false;
#undef DO_
}

void BuyRecordSlotUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuyRecordSlotUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuyRecordSlotUserCmd)
}

::google::protobuf::uint8* BuyRecordSlotUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuyRecordSlotUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuyRecordSlotUserCmd)
  return target;
}

int BuyRecordSlotUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BUY_RECORD_SLOT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 slotid = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyRecordSlotUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyRecordSlotUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyRecordSlotUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyRecordSlotUserCmd::MergeFrom(const BuyRecordSlotUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyRecordSlotUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyRecordSlotUserCmd::CopyFrom(const BuyRecordSlotUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyRecordSlotUserCmd::IsInitialized() const {

  return true;
}

void BuyRecordSlotUserCmd::Swap(BuyRecordSlotUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(slotid_, other->slotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyRecordSlotUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyRecordSlotUserCmd_descriptor_;
  metadata.reflection = BuyRecordSlotUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRecordUserCmd::kCmdFieldNumber;
const int DeleteRecordUserCmd::kParamFieldNumber;
const int DeleteRecordUserCmd::kSlotidFieldNumber;
#endif  // !_MSC_VER

DeleteRecordUserCmd::DeleteRecordUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DeleteRecordUserCmd)
}

void DeleteRecordUserCmd::InitAsDefaultInstance() {
}

DeleteRecordUserCmd::DeleteRecordUserCmd(const DeleteRecordUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DeleteRecordUserCmd)
}

void DeleteRecordUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 139;
  slotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRecordUserCmd::~DeleteRecordUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DeleteRecordUserCmd)
  SharedDtor();
}

void DeleteRecordUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteRecordUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRecordUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRecordUserCmd_descriptor_;
}

const DeleteRecordUserCmd& DeleteRecordUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DeleteRecordUserCmd* DeleteRecordUserCmd::default_instance_ = NULL;

DeleteRecordUserCmd* DeleteRecordUserCmd::New() const {
  return new DeleteRecordUserCmd;
}

void DeleteRecordUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 139;
    slotid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRecordUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DeleteRecordUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_slotid;
        break;
      }

      // optional uint32 slotid = 3;
      case 3: {
        if (tag == 24) {
         parse_slotid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DeleteRecordUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DeleteRecordUserCmd)
  return false;
#undef DO_
}

void DeleteRecordUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DeleteRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DeleteRecordUserCmd)
}

::google::protobuf::uint8* DeleteRecordUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DeleteRecordUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 slotid = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DeleteRecordUserCmd)
  return target;
}

int DeleteRecordUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DELETE_RECORD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 slotid = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRecordUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRecordUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRecordUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRecordUserCmd::MergeFrom(const DeleteRecordUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRecordUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRecordUserCmd::CopyFrom(const DeleteRecordUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRecordUserCmd::IsInitialized() const {

  return true;
}

void DeleteRecordUserCmd::Swap(DeleteRecordUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(slotid_, other->slotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRecordUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRecordUserCmd_descriptor_;
  metadata.reflection = DeleteRecordUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBranchInfoUserCmd::kCmdFieldNumber;
const int UpdateBranchInfoUserCmd::kParamFieldNumber;
const int UpdateBranchInfoUserCmd::kDatasFieldNumber;
const int UpdateBranchInfoUserCmd::kSyncTypeFieldNumber;
#endif  // !_MSC_VER

UpdateBranchInfoUserCmd::UpdateBranchInfoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateBranchInfoUserCmd)
}

void UpdateBranchInfoUserCmd::InitAsDefaultInstance() {
}

UpdateBranchInfoUserCmd::UpdateBranchInfoUserCmd(const UpdateBranchInfoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateBranchInfoUserCmd)
}

void UpdateBranchInfoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 140;
  sync_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBranchInfoUserCmd::~UpdateBranchInfoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateBranchInfoUserCmd)
  SharedDtor();
}

void UpdateBranchInfoUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateBranchInfoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBranchInfoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBranchInfoUserCmd_descriptor_;
}

const UpdateBranchInfoUserCmd& UpdateBranchInfoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

UpdateBranchInfoUserCmd* UpdateBranchInfoUserCmd::default_instance_ = NULL;

UpdateBranchInfoUserCmd* UpdateBranchInfoUserCmd::New() const {
  return new UpdateBranchInfoUserCmd;
}

void UpdateBranchInfoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 9;
    param_ = 140;
    sync_type_ = 0u;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBranchInfoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateBranchInfoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.ProfessionUserInfo datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectTag(32)) goto parse_sync_type;
        break;
      }

      // optional uint32 sync_type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sync_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sync_type_)));
          set_has_sync_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateBranchInfoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateBranchInfoUserCmd)
  return false;
#undef DO_
}

void UpdateBranchInfoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateBranchInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ProfessionUserInfo datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  // optional uint32 sync_type = 4 [default = 0];
  if (has_sync_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sync_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateBranchInfoUserCmd)
}

::google::protobuf::uint8* UpdateBranchInfoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateBranchInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ProfessionUserInfo datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  // optional uint32 sync_type = 4 [default = 0];
  if (has_sync_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sync_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateBranchInfoUserCmd)
  return target;
}

int UpdateBranchInfoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_UPDATE_BRANCH_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 sync_type = 4 [default = 0];
    if (has_sync_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sync_type());
    }

  }
  // repeated .Cmd.ProfessionUserInfo datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBranchInfoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBranchInfoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBranchInfoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBranchInfoUserCmd::MergeFrom(const UpdateBranchInfoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sync_type()) {
      set_sync_type(from.sync_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBranchInfoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBranchInfoUserCmd::CopyFrom(const UpdateBranchInfoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBranchInfoUserCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  return true;
}

void UpdateBranchInfoUserCmd::Swap(UpdateBranchInfoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    std::swap(sync_type_, other->sync_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBranchInfoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBranchInfoUserCmd_descriptor_;
  metadata.reflection = UpdateBranchInfoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterCapraActivityCmd::kCmdFieldNumber;
const int EnterCapraActivityCmd::kParamFieldNumber;
#endif  // !_MSC_VER

EnterCapraActivityCmd::EnterCapraActivityCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterCapraActivityCmd)
}

void EnterCapraActivityCmd::InitAsDefaultInstance() {
}

EnterCapraActivityCmd::EnterCapraActivityCmd(const EnterCapraActivityCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterCapraActivityCmd)
}

void EnterCapraActivityCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 110;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterCapraActivityCmd::~EnterCapraActivityCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterCapraActivityCmd)
  SharedDtor();
}

void EnterCapraActivityCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterCapraActivityCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterCapraActivityCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterCapraActivityCmd_descriptor_;
}

const EnterCapraActivityCmd& EnterCapraActivityCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

EnterCapraActivityCmd* EnterCapraActivityCmd::default_instance_ = NULL;

EnterCapraActivityCmd* EnterCapraActivityCmd::New() const {
  return new EnterCapraActivityCmd;
}

void EnterCapraActivityCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 110;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterCapraActivityCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterCapraActivityCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterCapraActivityCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterCapraActivityCmd)
  return false;
#undef DO_
}

void EnterCapraActivityCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterCapraActivityCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterCapraActivityCmd)
}

::google::protobuf::uint8* EnterCapraActivityCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterCapraActivityCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterCapraActivityCmd)
  return target;
}

int EnterCapraActivityCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_ENTER_CAPRA_ACTIVITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterCapraActivityCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterCapraActivityCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterCapraActivityCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterCapraActivityCmd::MergeFrom(const EnterCapraActivityCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterCapraActivityCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterCapraActivityCmd::CopyFrom(const EnterCapraActivityCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterCapraActivityCmd::IsInitialized() const {

  return true;
}

void EnterCapraActivityCmd::Swap(EnterCapraActivityCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterCapraActivityCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterCapraActivityCmd_descriptor_;
  metadata.reflection = EnterCapraActivityCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteWithMeUserCmd::kCmdFieldNumber;
const int InviteWithMeUserCmd::kParamFieldNumber;
const int InviteWithMeUserCmd::kSendidFieldNumber;
const int InviteWithMeUserCmd::kTimeFieldNumber;
const int InviteWithMeUserCmd::kReplyFieldNumber;
const int InviteWithMeUserCmd::kSignFieldNumber;
#endif  // !_MSC_VER

InviteWithMeUserCmd::InviteWithMeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteWithMeUserCmd)
}

void InviteWithMeUserCmd::InitAsDefaultInstance() {
}

InviteWithMeUserCmd::InviteWithMeUserCmd(const InviteWithMeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteWithMeUserCmd)
}

void InviteWithMeUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 142;
  sendid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  reply_ = false;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteWithMeUserCmd::~InviteWithMeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteWithMeUserCmd)
  SharedDtor();
}

void InviteWithMeUserCmd::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void InviteWithMeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteWithMeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteWithMeUserCmd_descriptor_;
}

const InviteWithMeUserCmd& InviteWithMeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

InviteWithMeUserCmd* InviteWithMeUserCmd::default_instance_ = NULL;

InviteWithMeUserCmd* InviteWithMeUserCmd::New() const {
  return new InviteWithMeUserCmd;
}

void InviteWithMeUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InviteWithMeUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(sendid_, reply_);
    cmd_ = 9;
    param_ = 142;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteWithMeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteWithMeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sendid;
        break;
      }

      // optional uint64 sendid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendid_)));
          set_has_sendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_reply;
        break;
      }

      // optional bool reply = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_reply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional bytes sign = 6;
      case 6: {
        if (tag == 50) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteWithMeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteWithMeUserCmd)
  return false;
#undef DO_
}

void InviteWithMeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteWithMeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 sendid = 3 [default = 0];
  if (has_sendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendid(), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  // optional bool reply = 5 [default = false];
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reply(), output);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteWithMeUserCmd)
}

::google::protobuf::uint8* InviteWithMeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteWithMeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 sendid = 3 [default = 0];
  if (has_sendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendid(), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  // optional bool reply = 5 [default = false];
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->reply(), target);
  }

  // optional bytes sign = 6;
  if (has_sign()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteWithMeUserCmd)
  return target;
}

int InviteWithMeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_INVITE_WITH_ME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 sendid = 3 [default = 0];
    if (has_sendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendid());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional bool reply = 5 [default = false];
    if (has_reply()) {
      total_size += 1 + 1;
    }

    // optional bytes sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteWithMeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteWithMeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteWithMeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteWithMeUserCmd::MergeFrom(const InviteWithMeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sendid()) {
      set_sendid(from.sendid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteWithMeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteWithMeUserCmd::CopyFrom(const InviteWithMeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteWithMeUserCmd::IsInitialized() const {

  return true;
}

void InviteWithMeUserCmd::Swap(InviteWithMeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(sendid_, other->sendid_);
    std::swap(time_, other->time_);
    std::swap(reply_, other->reply_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteWithMeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteWithMeUserCmd_descriptor_;
  metadata.reflection = InviteWithMeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryAltmanKillUserCmd::kCmdFieldNumber;
const int QueryAltmanKillUserCmd::kParamFieldNumber;
#endif  // !_MSC_VER

QueryAltmanKillUserCmd::QueryAltmanKillUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryAltmanKillUserCmd)
}

void QueryAltmanKillUserCmd::InitAsDefaultInstance() {
}

QueryAltmanKillUserCmd::QueryAltmanKillUserCmd(const QueryAltmanKillUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryAltmanKillUserCmd)
}

void QueryAltmanKillUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 143;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryAltmanKillUserCmd::~QueryAltmanKillUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryAltmanKillUserCmd)
  SharedDtor();
}

void QueryAltmanKillUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryAltmanKillUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryAltmanKillUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryAltmanKillUserCmd_descriptor_;
}

const QueryAltmanKillUserCmd& QueryAltmanKillUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryAltmanKillUserCmd* QueryAltmanKillUserCmd::default_instance_ = NULL;

QueryAltmanKillUserCmd* QueryAltmanKillUserCmd::New() const {
  return new QueryAltmanKillUserCmd;
}

void QueryAltmanKillUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 143;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryAltmanKillUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryAltmanKillUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryAltmanKillUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryAltmanKillUserCmd)
  return false;
#undef DO_
}

void QueryAltmanKillUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryAltmanKillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryAltmanKillUserCmd)
}

::google::protobuf::uint8* QueryAltmanKillUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryAltmanKillUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryAltmanKillUserCmd)
  return target;
}

int QueryAltmanKillUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_ALTMAN_KILL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryAltmanKillUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryAltmanKillUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryAltmanKillUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryAltmanKillUserCmd::MergeFrom(const QueryAltmanKillUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryAltmanKillUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryAltmanKillUserCmd::CopyFrom(const QueryAltmanKillUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryAltmanKillUserCmd::IsInitialized() const {

  return true;
}

void QueryAltmanKillUserCmd::Swap(QueryAltmanKillUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryAltmanKillUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryAltmanKillUserCmd_descriptor_;
  metadata.reflection = QueryAltmanKillUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoothInfo::kNameFieldNumber;
const int BoothInfo::kSignFieldNumber;
#endif  // !_MSC_VER

BoothInfo::BoothInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BoothInfo)
}

void BoothInfo::InitAsDefaultInstance() {
}

BoothInfo::BoothInfo(const BoothInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BoothInfo)
}

void BoothInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoothInfo::~BoothInfo() {
  // @@protoc_insertion_point(destructor:Cmd.BoothInfo)
  SharedDtor();
}

void BoothInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BoothInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoothInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoothInfo_descriptor_;
}

const BoothInfo& BoothInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BoothInfo* BoothInfo::default_instance_ = NULL;

BoothInfo* BoothInfo::New() const {
  return new BoothInfo;
}

void BoothInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    sign_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoothInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BoothInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sign;
        break;
      }

      // optional .Cmd.EBoothSign sign = 2;
      case 2: {
        if (tag == 16) {
         parse_sign:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBoothSign_IsValid(value)) {
            set_sign(static_cast< ::Cmd::EBoothSign >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BoothInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BoothInfo)
  return false;
#undef DO_
}

void BoothInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BoothInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .Cmd.EBoothSign sign = 2;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BoothInfo)
}

::google::protobuf::uint8* BoothInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BoothInfo)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .Cmd.EBoothSign sign = 2;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BoothInfo)
  return target;
}

int BoothInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.EBoothSign sign = 2;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoothInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoothInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoothInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoothInfo::MergeFrom(const BoothInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoothInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoothInfo::CopyFrom(const BoothInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoothInfo::IsInitialized() const {

  return true;
}

void BoothInfo::Swap(BoothInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoothInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoothInfo_descriptor_;
  metadata.reflection = BoothInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoothReqUserCmd::kCmdFieldNumber;
const int BoothReqUserCmd::kParamFieldNumber;
const int BoothReqUserCmd::kNameFieldNumber;
const int BoothReqUserCmd::kOperFieldNumber;
const int BoothReqUserCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

BoothReqUserCmd::BoothReqUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BoothReqUserCmd)
}

void BoothReqUserCmd::InitAsDefaultInstance() {
}

BoothReqUserCmd::BoothReqUserCmd(const BoothReqUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BoothReqUserCmd)
}

void BoothReqUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 144;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oper_ = 0;
  success_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoothReqUserCmd::~BoothReqUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BoothReqUserCmd)
  SharedDtor();
}

void BoothReqUserCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BoothReqUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoothReqUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoothReqUserCmd_descriptor_;
}

const BoothReqUserCmd& BoothReqUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BoothReqUserCmd* BoothReqUserCmd::default_instance_ = NULL;

BoothReqUserCmd* BoothReqUserCmd::New() const {
  return new BoothReqUserCmd;
}

void BoothReqUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 144;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    oper_ = 0;
    success_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoothReqUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BoothReqUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oper;
        break;
      }

      // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
      case 4: {
        if (tag == 32) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBoothOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EBoothOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_success;
        break;
      }

      // optional bool success = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BoothReqUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BoothReqUserCmd)
  return false;
#undef DO_
}

void BoothReqUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BoothReqUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->oper(), output);
  }

  // optional bool success = 5 [default = true];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BoothReqUserCmd)
}

::google::protobuf::uint8* BoothReqUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BoothReqUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->oper(), target);
  }

  // optional bool success = 5 [default = true];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BoothReqUserCmd)
  return target;
}

int BoothReqUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_USER_BOOTH_REQ];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional bool success = 5 [default = true];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoothReqUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoothReqUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoothReqUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoothReqUserCmd::MergeFrom(const BoothReqUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoothReqUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoothReqUserCmd::CopyFrom(const BoothReqUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoothReqUserCmd::IsInitialized() const {

  return true;
}

void BoothReqUserCmd::Swap(BoothReqUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(oper_, other->oper_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoothReqUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoothReqUserCmd_descriptor_;
  metadata.reflection = BoothReqUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoothInfoSyncUserCmd::kCmdFieldNumber;
const int BoothInfoSyncUserCmd::kParamFieldNumber;
const int BoothInfoSyncUserCmd::kCharidFieldNumber;
const int BoothInfoSyncUserCmd::kOperFieldNumber;
const int BoothInfoSyncUserCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

BoothInfoSyncUserCmd::BoothInfoSyncUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BoothInfoSyncUserCmd)
}

void BoothInfoSyncUserCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::BoothInfo*>(&::Cmd::BoothInfo::default_instance());
}

BoothInfoSyncUserCmd::BoothInfoSyncUserCmd(const BoothInfoSyncUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BoothInfoSyncUserCmd)
}

void BoothInfoSyncUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 145;
  charid_ = GOOGLE_ULONGLONG(0);
  oper_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoothInfoSyncUserCmd::~BoothInfoSyncUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BoothInfoSyncUserCmd)
  SharedDtor();
}

void BoothInfoSyncUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void BoothInfoSyncUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoothInfoSyncUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoothInfoSyncUserCmd_descriptor_;
}

const BoothInfoSyncUserCmd& BoothInfoSyncUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

BoothInfoSyncUserCmd* BoothInfoSyncUserCmd::default_instance_ = NULL;

BoothInfoSyncUserCmd* BoothInfoSyncUserCmd::New() const {
  return new BoothInfoSyncUserCmd;
}

void BoothInfoSyncUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 9;
    param_ = 145;
    charid_ = GOOGLE_ULONGLONG(0);
    oper_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::BoothInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoothInfoSyncUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BoothInfoSyncUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_oper;
        break;
      }

      // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
      case 4: {
        if (tag == 32) {
         parse_oper:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EBoothOper_IsValid(value)) {
            set_oper(static_cast< ::Cmd::EBoothOper >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .Cmd.BoothInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BoothInfoSyncUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BoothInfoSyncUserCmd)
  return false;
#undef DO_
}

void BoothInfoSyncUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BoothInfoSyncUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->oper(), output);
  }

  // optional .Cmd.BoothInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BoothInfoSyncUserCmd)
}

::google::protobuf::uint8* BoothInfoSyncUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BoothInfoSyncUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
  if (has_oper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->oper(), target);
  }

  // optional .Cmd.BoothInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BoothInfoSyncUserCmd)
  return target;
}

int BoothInfoSyncUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_BOOTH_INFO_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EBoothOper oper = 4 [default = EBOOTHOPER_OPEN];
    if (has_oper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->oper());
    }

    // optional .Cmd.BoothInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoothInfoSyncUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoothInfoSyncUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoothInfoSyncUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoothInfoSyncUserCmd::MergeFrom(const BoothInfoSyncUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_oper()) {
      set_oper(from.oper());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::BoothInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoothInfoSyncUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoothInfoSyncUserCmd::CopyFrom(const BoothInfoSyncUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoothInfoSyncUserCmd::IsInitialized() const {

  return true;
}

void BoothInfoSyncUserCmd::Swap(BoothInfoSyncUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(oper_, other->oper_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoothInfoSyncUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoothInfoSyncUserCmd_descriptor_;
  metadata.reflection = BoothInfoSyncUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DressUpModelUserCmd::kCmdFieldNumber;
const int DressUpModelUserCmd::kParamFieldNumber;
const int DressUpModelUserCmd::kStageidFieldNumber;
const int DressUpModelUserCmd::kTypeFieldNumber;
const int DressUpModelUserCmd::kValueFieldNumber;
#endif  // !_MSC_VER

DressUpModelUserCmd::DressUpModelUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DressUpModelUserCmd)
}

void DressUpModelUserCmd::InitAsDefaultInstance() {
}

DressUpModelUserCmd::DressUpModelUserCmd(const DressUpModelUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DressUpModelUserCmd)
}

void DressUpModelUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 146;
  stageid_ = 0u;
  type_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressUpModelUserCmd::~DressUpModelUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DressUpModelUserCmd)
  SharedDtor();
}

void DressUpModelUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressUpModelUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressUpModelUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressUpModelUserCmd_descriptor_;
}

const DressUpModelUserCmd& DressUpModelUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DressUpModelUserCmd* DressUpModelUserCmd::default_instance_ = NULL;

DressUpModelUserCmd* DressUpModelUserCmd::New() const {
  return new DressUpModelUserCmd;
}

void DressUpModelUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DressUpModelUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(stageid_, value_);
    cmd_ = 9;
    param_ = 146;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressUpModelUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DressUpModelUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_value;
        break;
      }

      // optional uint32 value = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DressUpModelUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DressUpModelUserCmd)
  return false;
#undef DO_
}

void DressUpModelUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DressUpModelUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 value = 5 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DressUpModelUserCmd)
}

::google::protobuf::uint8* DressUpModelUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DressUpModelUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 value = 5 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DressUpModelUserCmd)
  return target;
}

int DressUpModelUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_MODEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3 [default = 0];
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional .Cmd.EUserDataType type = 4 [default = EUSERDATATYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 5 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressUpModelUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressUpModelUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressUpModelUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressUpModelUserCmd::MergeFrom(const DressUpModelUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressUpModelUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressUpModelUserCmd::CopyFrom(const DressUpModelUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressUpModelUserCmd::IsInitialized() const {

  return true;
}

void DressUpModelUserCmd::Swap(DressUpModelUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressUpModelUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressUpModelUserCmd_descriptor_;
  metadata.reflection = DressUpModelUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DressUpHeadUserCmd::kCmdFieldNumber;
const int DressUpHeadUserCmd::kParamFieldNumber;
const int DressUpHeadUserCmd::kTypeFieldNumber;
const int DressUpHeadUserCmd::kValueFieldNumber;
const int DressUpHeadUserCmd::kPutonFieldNumber;
#endif  // !_MSC_VER

DressUpHeadUserCmd::DressUpHeadUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DressUpHeadUserCmd)
}

void DressUpHeadUserCmd::InitAsDefaultInstance() {
}

DressUpHeadUserCmd::DressUpHeadUserCmd(const DressUpHeadUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DressUpHeadUserCmd)
}

void DressUpHeadUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 147;
  type_ = 0;
  value_ = 0u;
  puton_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressUpHeadUserCmd::~DressUpHeadUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DressUpHeadUserCmd)
  SharedDtor();
}

void DressUpHeadUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressUpHeadUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressUpHeadUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressUpHeadUserCmd_descriptor_;
}

const DressUpHeadUserCmd& DressUpHeadUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DressUpHeadUserCmd* DressUpHeadUserCmd::default_instance_ = NULL;

DressUpHeadUserCmd* DressUpHeadUserCmd::New() const {
  return new DressUpHeadUserCmd;
}

void DressUpHeadUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DressUpHeadUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, value_);
    cmd_ = 9;
    param_ = 147;
    puton_ = true;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressUpHeadUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DressUpHeadUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // optional uint32 value = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_puton;
        break;
      }

      // optional bool puton = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_puton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &puton_)));
          set_has_puton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DressUpHeadUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DressUpHeadUserCmd)
  return false;
#undef DO_
}

void DressUpHeadUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DressUpHeadUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 value = 4 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->value(), output);
  }

  // optional bool puton = 5 [default = true];
  if (has_puton()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->puton(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DressUpHeadUserCmd)
}

::google::protobuf::uint8* DressUpHeadUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DressUpHeadUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 value = 4 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->value(), target);
  }

  // optional bool puton = 5 [default = true];
  if (has_puton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->puton(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DressUpHeadUserCmd)
  return target;
}

int DressUpHeadUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_HEAD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EUserDataType type = 3 [default = EUSERDATATYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 4 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional bool puton = 5 [default = true];
    if (has_puton()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressUpHeadUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressUpHeadUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressUpHeadUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressUpHeadUserCmd::MergeFrom(const DressUpHeadUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_puton()) {
      set_puton(from.puton());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressUpHeadUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressUpHeadUserCmd::CopyFrom(const DressUpHeadUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressUpHeadUserCmd::IsInitialized() const {

  return true;
}

void DressUpHeadUserCmd::Swap(DressUpHeadUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(puton_, other->puton_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressUpHeadUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressUpHeadUserCmd_descriptor_;
  metadata.reflection = DressUpHeadUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageInfo::kStageidFieldNumber;
const int StageInfo::kUsernumFieldNumber;
const int StageInfo::kWaittimeFieldNumber;
const int StageInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

StageInfo::StageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageInfo)
}

void StageInfo::InitAsDefaultInstance() {
}

StageInfo::StageInfo(const StageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageInfo)
}

void StageInfo::SharedCtor() {
  _cached_size_ = 0;
  stageid_ = 0u;
  usernum_ = 0u;
  waittime_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageInfo::~StageInfo() {
  // @@protoc_insertion_point(destructor:Cmd.StageInfo)
  SharedDtor();
}

void StageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageInfo_descriptor_;
}

const StageInfo& StageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

StageInfo* StageInfo::default_instance_ = NULL;

StageInfo* StageInfo::New() const {
  return new StageInfo;
}

void StageInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(stageid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stageid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_usernum;
        break;
      }

      // optional uint32 usernum = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_usernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usernum_)));
          set_has_usernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_waittime;
        break;
      }

      // optional uint32 waittime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_waittime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &waittime_)));
          set_has_waittime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageInfo)
  return false;
#undef DO_
}

void StageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageInfo)
  // optional uint32 stageid = 1 [default = 0];
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stageid(), output);
  }

  // optional uint32 usernum = 2 [default = 0];
  if (has_usernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usernum(), output);
  }

  // optional uint32 waittime = 3 [default = 0];
  if (has_waittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->waittime(), output);
  }

  // optional uint32 status = 4 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageInfo)
}

::google::protobuf::uint8* StageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageInfo)
  // optional uint32 stageid = 1 [default = 0];
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stageid(), target);
  }

  // optional uint32 usernum = 2 [default = 0];
  if (has_usernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usernum(), target);
  }

  // optional uint32 waittime = 3 [default = 0];
  if (has_waittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->waittime(), target);
  }

  // optional uint32 status = 4 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageInfo)
  return target;
}

int StageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stageid = 1 [default = 0];
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 usernum = 2 [default = 0];
    if (has_usernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usernum());
    }

    // optional uint32 waittime = 3 [default = 0];
    if (has_waittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->waittime());
    }

    // optional uint32 status = 4 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageInfo::MergeFrom(const StageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_usernum()) {
      set_usernum(from.usernum());
    }
    if (from.has_waittime()) {
      set_waittime(from.waittime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageInfo::CopyFrom(const StageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageInfo::IsInitialized() const {

  return true;
}

void StageInfo::Swap(StageInfo* other) {
  if (other != this) {
    std::swap(stageid_, other->stageid_);
    std::swap(usernum_, other->usernum_);
    std::swap(waittime_, other->waittime_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageInfo_descriptor_;
  metadata.reflection = StageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryStageUserCmd::kCmdFieldNumber;
const int QueryStageUserCmd::kParamFieldNumber;
const int QueryStageUserCmd::kStageidFieldNumber;
const int QueryStageUserCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryStageUserCmd::QueryStageUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryStageUserCmd)
}

void QueryStageUserCmd::InitAsDefaultInstance() {
}

QueryStageUserCmd::QueryStageUserCmd(const QueryStageUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryStageUserCmd)
}

void QueryStageUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 148;
  stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryStageUserCmd::~QueryStageUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryStageUserCmd)
  SharedDtor();
}

void QueryStageUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryStageUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryStageUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryStageUserCmd_descriptor_;
}

const QueryStageUserCmd& QueryStageUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

QueryStageUserCmd* QueryStageUserCmd::default_instance_ = NULL;

QueryStageUserCmd* QueryStageUserCmd::New() const {
  return new QueryStageUserCmd;
}

void QueryStageUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 148;
    stageid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryStageUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryStageUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // repeated .Cmd.StageInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryStageUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryStageUserCmd)
  return false;
#undef DO_
}

void QueryStageUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // repeated .Cmd.StageInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryStageUserCmd)
}

::google::protobuf::uint8* QueryStageUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // repeated .Cmd.StageInfo info = 4;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryStageUserCmd)
  return target;
}

int QueryStageUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_QUERY_STAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3 [default = 0];
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

  }
  // repeated .Cmd.StageInfo info = 4;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryStageUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryStageUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryStageUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryStageUserCmd::MergeFrom(const QueryStageUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryStageUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryStageUserCmd::CopyFrom(const QueryStageUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryStageUserCmd::IsInitialized() const {

  return true;
}

void QueryStageUserCmd::Swap(QueryStageUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryStageUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryStageUserCmd_descriptor_;
  metadata.reflection = QueryStageUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DressUpLineUpUserCmd::kCmdFieldNumber;
const int DressUpLineUpUserCmd::kParamFieldNumber;
const int DressUpLineUpUserCmd::kStageidFieldNumber;
const int DressUpLineUpUserCmd::kModeFieldNumber;
const int DressUpLineUpUserCmd::kEnterFieldNumber;
#endif  // !_MSC_VER

DressUpLineUpUserCmd::DressUpLineUpUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DressUpLineUpUserCmd)
}

void DressUpLineUpUserCmd::InitAsDefaultInstance() {
}

DressUpLineUpUserCmd::DressUpLineUpUserCmd(const DressUpLineUpUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DressUpLineUpUserCmd)
}

void DressUpLineUpUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 149;
  stageid_ = 0u;
  mode_ = 0u;
  enter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressUpLineUpUserCmd::~DressUpLineUpUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DressUpLineUpUserCmd)
  SharedDtor();
}

void DressUpLineUpUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressUpLineUpUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressUpLineUpUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressUpLineUpUserCmd_descriptor_;
}

const DressUpLineUpUserCmd& DressUpLineUpUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DressUpLineUpUserCmd* DressUpLineUpUserCmd::default_instance_ = NULL;

DressUpLineUpUserCmd* DressUpLineUpUserCmd::New() const {
  return new DressUpLineUpUserCmd;
}

void DressUpLineUpUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DressUpLineUpUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(stageid_, enter_);
    cmd_ = 9;
    param_ = 149;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressUpLineUpUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DressUpLineUpUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode;
        break;
      }

      // optional uint32 mode = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_enter;
        break;
      }

      // optional bool enter = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enter_)));
          set_has_enter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DressUpLineUpUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DressUpLineUpUserCmd)
  return false;
#undef DO_
}

void DressUpLineUpUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DressUpLineUpUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stageid(), output);
  }

  // optional uint32 mode = 4 [default = 0];
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mode(), output);
  }

  // optional bool enter = 5 [default = false];
  if (has_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DressUpLineUpUserCmd)
}

::google::protobuf::uint8* DressUpLineUpUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DressUpLineUpUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 stageid = 3 [default = 0];
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stageid(), target);
  }

  // optional uint32 mode = 4 [default = 0];
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mode(), target);
  }

  // optional bool enter = 5 [default = false];
  if (has_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->enter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DressUpLineUpUserCmd)
  return target;
}

int DressUpLineUpUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_LINEUP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 3 [default = 0];
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

    // optional uint32 mode = 4 [default = 0];
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional bool enter = 5 [default = false];
    if (has_enter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressUpLineUpUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressUpLineUpUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressUpLineUpUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressUpLineUpUserCmd::MergeFrom(const DressUpLineUpUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_enter()) {
      set_enter(from.enter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressUpLineUpUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressUpLineUpUserCmd::CopyFrom(const DressUpLineUpUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressUpLineUpUserCmd::IsInitialized() const {

  return true;
}

void DressUpLineUpUserCmd::Swap(DressUpLineUpUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(stageid_, other->stageid_);
    std::swap(mode_, other->mode_);
    std::swap(enter_, other->enter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressUpLineUpUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressUpLineUpUserCmd_descriptor_;
  metadata.reflection = DressUpLineUpUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StageUserDataType::kTypeFieldNumber;
const int StageUserDataType::kValueFieldNumber;
#endif  // !_MSC_VER

StageUserDataType::StageUserDataType()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StageUserDataType)
}

void StageUserDataType::InitAsDefaultInstance() {
}

StageUserDataType::StageUserDataType(const StageUserDataType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StageUserDataType)
}

void StageUserDataType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StageUserDataType::~StageUserDataType() {
  // @@protoc_insertion_point(destructor:Cmd.StageUserDataType)
  SharedDtor();
}

void StageUserDataType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StageUserDataType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StageUserDataType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StageUserDataType_descriptor_;
}

const StageUserDataType& StageUserDataType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

StageUserDataType* StageUserDataType::default_instance_ = NULL;

StageUserDataType* StageUserDataType::New() const {
  return new StageUserDataType;
}

void StageUserDataType::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StageUserDataType*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, value_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StageUserDataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StageUserDataType)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EUserDataType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EUserDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StageUserDataType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StageUserDataType)
  return false;
#undef DO_
}

void StageUserDataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StageUserDataType)
  // optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StageUserDataType)
}

::google::protobuf::uint8* StageUserDataType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StageUserDataType)
  // optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 value = 2 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StageUserDataType)
  return target;
}

int StageUserDataType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EUserDataType type = 1 [default = EUSERDATATYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 value = 2 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StageUserDataType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StageUserDataType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StageUserDataType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StageUserDataType::MergeFrom(const StageUserDataType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StageUserDataType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StageUserDataType::CopyFrom(const StageUserDataType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StageUserDataType::IsInitialized() const {

  return true;
}

void StageUserDataType::Swap(StageUserDataType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StageUserDataType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StageUserDataType_descriptor_;
  metadata.reflection = StageUserDataType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DressUpStageUserCmd::kCmdFieldNumber;
const int DressUpStageUserCmd::kParamFieldNumber;
const int DressUpStageUserCmd::kUseridFieldNumber;
const int DressUpStageUserCmd::kStageidFieldNumber;
const int DressUpStageUserCmd::kDatasFieldNumber;
#endif  // !_MSC_VER

DressUpStageUserCmd::DressUpStageUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DressUpStageUserCmd)
}

void DressUpStageUserCmd::InitAsDefaultInstance() {
}

DressUpStageUserCmd::DressUpStageUserCmd(const DressUpStageUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DressUpStageUserCmd)
}

void DressUpStageUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 150;
  stageid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DressUpStageUserCmd::~DressUpStageUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DressUpStageUserCmd)
  SharedDtor();
}

void DressUpStageUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DressUpStageUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DressUpStageUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DressUpStageUserCmd_descriptor_;
}

const DressUpStageUserCmd& DressUpStageUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

DressUpStageUserCmd* DressUpStageUserCmd::default_instance_ = NULL;

DressUpStageUserCmd* DressUpStageUserCmd::New() const {
  return new DressUpStageUserCmd;
}

void DressUpStageUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 9;
    param_ = 150;
    stageid_ = 0u;
  }
  userid_.Clear();
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DressUpStageUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DressUpStageUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // repeated uint64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_userid())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_userid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        if (input->ExpectTag(32)) goto parse_stageid;
        break;
      }

      // optional uint32 stageid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_stageid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stageid_)));
          set_has_stageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        break;
      }

      // repeated .Cmd.StageUserDataType datas = 5;
      case 5: {
        if (tag == 42) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DressUpStageUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DressUpStageUserCmd)
  return false;
#undef DO_
}

void DressUpStageUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DressUpStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 userid = 3;
  for (int i = 0; i < this->userid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->userid(i), output);
  }

  // optional uint32 stageid = 4 [default = 0];
  if (has_stageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stageid(), output);
  }

  // repeated .Cmd.StageUserDataType datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DressUpStageUserCmd)
}

::google::protobuf::uint8* DressUpStageUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DressUpStageUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 userid = 3;
  for (int i = 0; i < this->userid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->userid(i), target);
  }

  // optional uint32 stageid = 4 [default = 0];
  if (has_stageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stageid(), target);
  }

  // repeated .Cmd.StageUserDataType datas = 5;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DressUpStageUserCmd)
  return target;
}

int DressUpStageUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_DRESSUP_STAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 stageid = 4 [default = 0];
    if (has_stageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stageid());
    }

  }
  // repeated uint64 userid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->userid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->userid(i));
    }
    total_size += 1 * this->userid_size() + data_size;
  }

  // repeated .Cmd.StageUserDataType datas = 5;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DressUpStageUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DressUpStageUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DressUpStageUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DressUpStageUserCmd::MergeFrom(const DressUpStageUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  userid_.MergeFrom(from.userid_);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_stageid()) {
      set_stageid(from.stageid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DressUpStageUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DressUpStageUserCmd::CopyFrom(const DressUpStageUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DressUpStageUserCmd::IsInitialized() const {

  return true;
}

void DressUpStageUserCmd::Swap(DressUpStageUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    userid_.Swap(&other->userid_);
    std::swap(stageid_, other->stageid_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DressUpStageUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DressUpStageUserCmd_descriptor_;
  metadata.reflection = DressUpStageUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoToFunctionMapUserCmd::kCmdFieldNumber;
const int GoToFunctionMapUserCmd::kParamFieldNumber;
const int GoToFunctionMapUserCmd::kEtypeFieldNumber;
#endif  // !_MSC_VER

GoToFunctionMapUserCmd::GoToFunctionMapUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoToFunctionMapUserCmd)
}

void GoToFunctionMapUserCmd::InitAsDefaultInstance() {
}

GoToFunctionMapUserCmd::GoToFunctionMapUserCmd(const GoToFunctionMapUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoToFunctionMapUserCmd)
}

void GoToFunctionMapUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 141;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoToFunctionMapUserCmd::~GoToFunctionMapUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoToFunctionMapUserCmd)
  SharedDtor();
}

void GoToFunctionMapUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoToFunctionMapUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoToFunctionMapUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoToFunctionMapUserCmd_descriptor_;
}

const GoToFunctionMapUserCmd& GoToFunctionMapUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GoToFunctionMapUserCmd* GoToFunctionMapUserCmd::default_instance_ = NULL;

GoToFunctionMapUserCmd* GoToFunctionMapUserCmd::New() const {
  return new GoToFunctionMapUserCmd;
}

void GoToFunctionMapUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 141;
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoToFunctionMapUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoToFunctionMapUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // required .Cmd.EFuncMapType etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFuncMapType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EFuncMapType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoToFunctionMapUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoToFunctionMapUserCmd)
  return false;
#undef DO_
}

void GoToFunctionMapUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoToFunctionMapUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EFuncMapType etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoToFunctionMapUserCmd)
}

::google::protobuf::uint8* GoToFunctionMapUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoToFunctionMapUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EFuncMapType etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoToFunctionMapUserCmd)
  return target;
}

int GoToFunctionMapUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_GOTO_FUNCMAP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EFuncMapType etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoToFunctionMapUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoToFunctionMapUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoToFunctionMapUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoToFunctionMapUserCmd::MergeFrom(const GoToFunctionMapUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoToFunctionMapUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoToFunctionMapUserCmd::CopyFrom(const GoToFunctionMapUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoToFunctionMapUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GoToFunctionMapUserCmd::Swap(GoToFunctionMapUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoToFunctionMapUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoToFunctionMapUserCmd_descriptor_;
  metadata.reflection = GoToFunctionMapUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthCurInfo::kTypeFieldNumber;
const int GrowthCurInfo::kGroupidFieldNumber;
#endif  // !_MSC_VER

GrowthCurInfo::GrowthCurInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthCurInfo)
}

void GrowthCurInfo::InitAsDefaultInstance() {
}

GrowthCurInfo::GrowthCurInfo(const GrowthCurInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthCurInfo)
}

void GrowthCurInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthCurInfo::~GrowthCurInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthCurInfo)
  SharedDtor();
}

void GrowthCurInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthCurInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthCurInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthCurInfo_descriptor_;
}

const GrowthCurInfo& GrowthCurInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthCurInfo* GrowthCurInfo::default_instance_ = NULL;

GrowthCurInfo* GrowthCurInfo::New() const {
  return new GrowthCurInfo;
}

void GrowthCurInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthCurInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthCurInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGrowthType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EGrowthType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthCurInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthCurInfo)
  return false;
#undef DO_
}

void GrowthCurInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthCurInfo)
  // optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 groupid = 2 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthCurInfo)
}

::google::protobuf::uint8* GrowthCurInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthCurInfo)
  // optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 groupid = 2 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthCurInfo)
  return target;
}

int GrowthCurInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EGrowthType type = 1 [default = EGROWTH_TYPE_STEP];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 groupid = 2 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthCurInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthCurInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthCurInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthCurInfo::MergeFrom(const GrowthCurInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthCurInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthCurInfo::CopyFrom(const GrowthCurInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthCurInfo::IsInitialized() const {

  return true;
}

void GrowthCurInfo::Swap(GrowthCurInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthCurInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthCurInfo_descriptor_;
  metadata.reflection = GrowthCurInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthItemInfo::kDwidFieldNumber;
const int GrowthItemInfo::kFinishtimesFieldNumber;
const int GrowthItemInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

GrowthItemInfo::GrowthItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthItemInfo)
}

void GrowthItemInfo::InitAsDefaultInstance() {
}

GrowthItemInfo::GrowthItemInfo(const GrowthItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthItemInfo)
}

void GrowthItemInfo::SharedCtor() {
  _cached_size_ = 0;
  dwid_ = 0u;
  finishtimes_ = 0u;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthItemInfo::~GrowthItemInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthItemInfo)
  SharedDtor();
}

void GrowthItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthItemInfo_descriptor_;
}

const GrowthItemInfo& GrowthItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthItemInfo* GrowthItemInfo::default_instance_ = NULL;

GrowthItemInfo* GrowthItemInfo::New() const {
  return new GrowthItemInfo;
}

void GrowthItemInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GrowthItemInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dwid_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthItemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dwid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_finishtimes;
        break;
      }

      // optional uint32 finishtimes = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_finishtimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtimes_)));
          set_has_finishtimes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGrowthStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EGrowthStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthItemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthItemInfo)
  return false;
#undef DO_
}

void GrowthItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthItemInfo)
  // optional uint32 dwid = 1 [default = 0];
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dwid(), output);
  }

  // optional uint32 finishtimes = 2 [default = 0];
  if (has_finishtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishtimes(), output);
  }

  // optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthItemInfo)
}

::google::protobuf::uint8* GrowthItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthItemInfo)
  // optional uint32 dwid = 1 [default = 0];
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dwid(), target);
  }

  // optional uint32 finishtimes = 2 [default = 0];
  if (has_finishtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishtimes(), target);
  }

  // optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthItemInfo)
  return target;
}

int GrowthItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dwid = 1 [default = 0];
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

    // optional uint32 finishtimes = 2 [default = 0];
    if (has_finishtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtimes());
    }

    // optional .Cmd.EGrowthStatus status = 3 [default = EGROWTH_STATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthItemInfo::MergeFrom(const GrowthItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
    if (from.has_finishtimes()) {
      set_finishtimes(from.finishtimes());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthItemInfo::CopyFrom(const GrowthItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthItemInfo::IsInitialized() const {

  return true;
}

void GrowthItemInfo::Swap(GrowthItemInfo* other) {
  if (other != this) {
    std::swap(dwid_, other->dwid_);
    std::swap(finishtimes_, other->finishtimes_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthItemInfo_descriptor_;
  metadata.reflection = GrowthItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthValueInfo::kGroupidFieldNumber;
const int GrowthValueInfo::kGrowthFieldNumber;
const int GrowthValueInfo::kEverrewardFieldNumber;
#endif  // !_MSC_VER

GrowthValueInfo::GrowthValueInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthValueInfo)
}

void GrowthValueInfo::InitAsDefaultInstance() {
}

GrowthValueInfo::GrowthValueInfo(const GrowthValueInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthValueInfo)
}

void GrowthValueInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0u;
  growth_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthValueInfo::~GrowthValueInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthValueInfo)
  SharedDtor();
}

void GrowthValueInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthValueInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthValueInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthValueInfo_descriptor_;
}

const GrowthValueInfo& GrowthValueInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthValueInfo* GrowthValueInfo::default_instance_ = NULL;

GrowthValueInfo* GrowthValueInfo::New() const {
  return new GrowthValueInfo;
}

void GrowthValueInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GrowthValueInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(groupid_, growth_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  everreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthValueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthValueInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 groupid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_growth;
        break;
      }

      // optional uint32 growth = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_growth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &growth_)));
          set_has_growth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_everreward;
        break;
      }

      // repeated uint32 everreward = 3;
      case 3: {
        if (tag == 24) {
         parse_everreward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_everreward())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_everreward())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_everreward;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthValueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthValueInfo)
  return false;
#undef DO_
}

void GrowthValueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthValueInfo)
  // optional uint32 groupid = 1 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->groupid(), output);
  }

  // optional uint32 growth = 2 [default = 0];
  if (has_growth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->growth(), output);
  }

  // repeated uint32 everreward = 3;
  for (int i = 0; i < this->everreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->everreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthValueInfo)
}

::google::protobuf::uint8* GrowthValueInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthValueInfo)
  // optional uint32 groupid = 1 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->groupid(), target);
  }

  // optional uint32 growth = 2 [default = 0];
  if (has_growth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->growth(), target);
  }

  // repeated uint32 everreward = 3;
  for (int i = 0; i < this->everreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->everreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthValueInfo)
  return target;
}

int GrowthValueInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 groupid = 1 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

    // optional uint32 growth = 2 [default = 0];
    if (has_growth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->growth());
    }

  }
  // repeated uint32 everreward = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->everreward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->everreward(i));
    }
    total_size += 1 * this->everreward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthValueInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthValueInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthValueInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthValueInfo::MergeFrom(const GrowthValueInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  everreward_.MergeFrom(from.everreward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_growth()) {
      set_growth(from.growth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthValueInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthValueInfo::CopyFrom(const GrowthValueInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthValueInfo::IsInitialized() const {

  return true;
}

void GrowthValueInfo::Swap(GrowthValueInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(growth_, other->growth_);
    everreward_.Swap(&other->everreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthValueInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthValueInfo_descriptor_;
  metadata.reflection = GrowthValueInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthGroupInfo::kItemsFieldNumber;
const int GrowthGroupInfo::kValueitemsFieldNumber;
#endif  // !_MSC_VER

GrowthGroupInfo::GrowthGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthGroupInfo)
}

void GrowthGroupInfo::InitAsDefaultInstance() {
  valueitems_ = const_cast< ::Cmd::GrowthValueInfo*>(&::Cmd::GrowthValueInfo::default_instance());
}

GrowthGroupInfo::GrowthGroupInfo(const GrowthGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthGroupInfo)
}

void GrowthGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  valueitems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthGroupInfo::~GrowthGroupInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthGroupInfo)
  SharedDtor();
}

void GrowthGroupInfo::SharedDtor() {
  if (this != default_instance_) {
    delete valueitems_;
  }
}

void GrowthGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthGroupInfo_descriptor_;
}

const GrowthGroupInfo& GrowthGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthGroupInfo* GrowthGroupInfo::default_instance_ = NULL;

GrowthGroupInfo* GrowthGroupInfo::New() const {
  return new GrowthGroupInfo;
}

void GrowthGroupInfo::Clear() {
  if (has_valueitems()) {
    if (valueitems_ != NULL) valueitems_->::Cmd::GrowthValueInfo::Clear();
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthGroupInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Cmd.GrowthItemInfo items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectTag(18)) goto parse_valueitems;
        break;
      }

      // optional .Cmd.GrowthValueInfo valueitems = 2;
      case 2: {
        if (tag == 18) {
         parse_valueitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valueitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthGroupInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthGroupInfo)
  return false;
#undef DO_
}

void GrowthGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthGroupInfo)
  // repeated .Cmd.GrowthItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  // optional .Cmd.GrowthValueInfo valueitems = 2;
  if (has_valueitems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->valueitems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthGroupInfo)
}

::google::protobuf::uint8* GrowthGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthGroupInfo)
  // repeated .Cmd.GrowthItemInfo items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  // optional .Cmd.GrowthValueInfo valueitems = 2;
  if (has_valueitems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->valueitems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthGroupInfo)
  return target;
}

int GrowthGroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .Cmd.GrowthValueInfo valueitems = 2;
    if (has_valueitems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valueitems());
    }

  }
  // repeated .Cmd.GrowthItemInfo items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthGroupInfo::MergeFrom(const GrowthGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_valueitems()) {
      mutable_valueitems()->::Cmd::GrowthValueInfo::MergeFrom(from.valueitems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthGroupInfo::CopyFrom(const GrowthGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthGroupInfo::IsInitialized() const {

  return true;
}

void GrowthGroupInfo::Swap(GrowthGroupInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(valueitems_, other->valueitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthGroupInfo_descriptor_;
  metadata.reflection = GrowthGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthServantUserCmd::kCmdFieldNumber;
const int GrowthServantUserCmd::kParamFieldNumber;
const int GrowthServantUserCmd::kDatasFieldNumber;
const int GrowthServantUserCmd::kUnlockitemsFieldNumber;
#endif  // !_MSC_VER

GrowthServantUserCmd::GrowthServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthServantUserCmd)
}

void GrowthServantUserCmd::InitAsDefaultInstance() {
}

GrowthServantUserCmd::GrowthServantUserCmd(const GrowthServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthServantUserCmd)
}

void GrowthServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 154;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthServantUserCmd::~GrowthServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthServantUserCmd)
  SharedDtor();
}

void GrowthServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthServantUserCmd_descriptor_;
}

const GrowthServantUserCmd& GrowthServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthServantUserCmd* GrowthServantUserCmd::default_instance_ = NULL;

GrowthServantUserCmd* GrowthServantUserCmd::New() const {
  return new GrowthServantUserCmd;
}

void GrowthServantUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 9;
    param_ = 154;
  }
  datas_.Clear();
  unlockitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        break;
      }

      // repeated .Cmd.GrowthGroupInfo datas = 3;
      case 3: {
        if (tag == 26) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_datas;
        if (input->ExpectTag(32)) goto parse_unlockitems;
        break;
      }

      // repeated uint32 unlockitems = 4;
      case 4: {
        if (tag == 32) {
         parse_unlockitems:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_unlockitems())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_unlockitems())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unlockitems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthServantUserCmd)
  return false;
#undef DO_
}

void GrowthServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GrowthGroupInfo datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->datas(i), output);
  }

  // repeated uint32 unlockitems = 4;
  for (int i = 0; i < this->unlockitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->unlockitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthServantUserCmd)
}

::google::protobuf::uint8* GrowthServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GrowthGroupInfo datas = 3;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->datas(i), target);
  }

  // repeated uint32 unlockitems = 4;
  for (int i = 0; i < this->unlockitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->unlockitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthServantUserCmd)
  return target;
}

int GrowthServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GrowthGroupInfo datas = 3;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated uint32 unlockitems = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->unlockitems_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->unlockitems(i));
    }
    total_size += 1 * this->unlockitems_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthServantUserCmd::MergeFrom(const GrowthServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  unlockitems_.MergeFrom(from.unlockitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthServantUserCmd::CopyFrom(const GrowthServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthServantUserCmd::IsInitialized() const {

  return true;
}

void GrowthServantUserCmd::Swap(GrowthServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    datas_.Swap(&other->datas_);
    unlockitems_.Swap(&other->unlockitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthServantUserCmd_descriptor_;
  metadata.reflection = GrowthServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveGrowthServantUserCmd::kCmdFieldNumber;
const int ReceiveGrowthServantUserCmd::kParamFieldNumber;
const int ReceiveGrowthServantUserCmd::kDwidFieldNumber;
const int ReceiveGrowthServantUserCmd::kDwvalueFieldNumber;
#endif  // !_MSC_VER

ReceiveGrowthServantUserCmd::ReceiveGrowthServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReceiveGrowthServantUserCmd)
}

void ReceiveGrowthServantUserCmd::InitAsDefaultInstance() {
}

ReceiveGrowthServantUserCmd::ReceiveGrowthServantUserCmd(const ReceiveGrowthServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReceiveGrowthServantUserCmd)
}

void ReceiveGrowthServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 155;
  dwid_ = 0u;
  dwvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveGrowthServantUserCmd::~ReceiveGrowthServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReceiveGrowthServantUserCmd)
  SharedDtor();
}

void ReceiveGrowthServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReceiveGrowthServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveGrowthServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveGrowthServantUserCmd_descriptor_;
}

const ReceiveGrowthServantUserCmd& ReceiveGrowthServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

ReceiveGrowthServantUserCmd* ReceiveGrowthServantUserCmd::default_instance_ = NULL;

ReceiveGrowthServantUserCmd* ReceiveGrowthServantUserCmd::New() const {
  return new ReceiveGrowthServantUserCmd;
}

void ReceiveGrowthServantUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReceiveGrowthServantUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(dwid_, dwvalue_);
    cmd_ = 9;
    param_ = 155;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveGrowthServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReceiveGrowthServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwid;
        break;
      }

      // optional uint32 dwid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_dwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dwvalue;
        break;
      }

      // optional uint32 dwvalue = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_dwvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dwvalue_)));
          set_has_dwvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReceiveGrowthServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReceiveGrowthServantUserCmd)
  return false;
#undef DO_
}

void ReceiveGrowthServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReceiveGrowthServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 dwid = 3 [default = 0];
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dwid(), output);
  }

  // optional uint32 dwvalue = 4 [default = 0];
  if (has_dwvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dwvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReceiveGrowthServantUserCmd)
}

::google::protobuf::uint8* ReceiveGrowthServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReceiveGrowthServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 dwid = 3 [default = 0];
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dwid(), target);
  }

  // optional uint32 dwvalue = 4 [default = 0];
  if (has_dwvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dwvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReceiveGrowthServantUserCmd)
  return target;
}

int ReceiveGrowthServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_RECEIVE_GROWTH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 dwid = 3 [default = 0];
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwid());
    }

    // optional uint32 dwvalue = 4 [default = 0];
    if (has_dwvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dwvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveGrowthServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveGrowthServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveGrowthServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveGrowthServantUserCmd::MergeFrom(const ReceiveGrowthServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
    if (from.has_dwvalue()) {
      set_dwvalue(from.dwvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveGrowthServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveGrowthServantUserCmd::CopyFrom(const ReceiveGrowthServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveGrowthServantUserCmd::IsInitialized() const {

  return true;
}

void ReceiveGrowthServantUserCmd::Swap(ReceiveGrowthServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dwid_, other->dwid_);
    std::swap(dwvalue_, other->dwvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveGrowthServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveGrowthServantUserCmd_descriptor_;
  metadata.reflection = ReceiveGrowthServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowthOpenServantUserCmd::kCmdFieldNumber;
const int GrowthOpenServantUserCmd::kParamFieldNumber;
const int GrowthOpenServantUserCmd::kGroupidFieldNumber;
#endif  // !_MSC_VER

GrowthOpenServantUserCmd::GrowthOpenServantUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GrowthOpenServantUserCmd)
}

void GrowthOpenServantUserCmd::InitAsDefaultInstance() {
}

GrowthOpenServantUserCmd::GrowthOpenServantUserCmd(const GrowthOpenServantUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GrowthOpenServantUserCmd)
}

void GrowthOpenServantUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 156;
  groupid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowthOpenServantUserCmd::~GrowthOpenServantUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GrowthOpenServantUserCmd)
  SharedDtor();
}

void GrowthOpenServantUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowthOpenServantUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowthOpenServantUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowthOpenServantUserCmd_descriptor_;
}

const GrowthOpenServantUserCmd& GrowthOpenServantUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

GrowthOpenServantUserCmd* GrowthOpenServantUserCmd::default_instance_ = NULL;

GrowthOpenServantUserCmd* GrowthOpenServantUserCmd::New() const {
  return new GrowthOpenServantUserCmd;
}

void GrowthOpenServantUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 156;
    groupid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowthOpenServantUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GrowthOpenServantUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // optional uint32 groupid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GrowthOpenServantUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GrowthOpenServantUserCmd)
  return false;
#undef DO_
}

void GrowthOpenServantUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GrowthOpenServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 groupid = 3 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GrowthOpenServantUserCmd)
}

::google::protobuf::uint8* GrowthOpenServantUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GrowthOpenServantUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 groupid = 3 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GrowthOpenServantUserCmd)
  return target;
}

int GrowthOpenServantUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_SERVANT_GROWTH_OPEN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 groupid = 3 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowthOpenServantUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowthOpenServantUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowthOpenServantUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowthOpenServantUserCmd::MergeFrom(const GrowthOpenServantUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowthOpenServantUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowthOpenServantUserCmd::CopyFrom(const GrowthOpenServantUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowthOpenServantUserCmd::IsInitialized() const {

  return true;
}

void GrowthOpenServantUserCmd::Swap(GrowthOpenServantUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowthOpenServantUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowthOpenServantUserCmd_descriptor_;
  metadata.reflection = GrowthOpenServantUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheatTagUserCmd::kCmdFieldNumber;
const int CheatTagUserCmd::kParamFieldNumber;
const int CheatTagUserCmd::kIntervalFieldNumber;
const int CheatTagUserCmd::kFrameFieldNumber;
#endif  // !_MSC_VER

CheatTagUserCmd::CheatTagUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheatTagUserCmd)
}

void CheatTagUserCmd::InitAsDefaultInstance() {
}

CheatTagUserCmd::CheatTagUserCmd(const CheatTagUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheatTagUserCmd)
}

void CheatTagUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 157;
  interval_ = 0u;
  frame_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheatTagUserCmd::~CheatTagUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheatTagUserCmd)
  SharedDtor();
}

void CheatTagUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheatTagUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheatTagUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheatTagUserCmd_descriptor_;
}

const CheatTagUserCmd& CheatTagUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CheatTagUserCmd* CheatTagUserCmd::default_instance_ = NULL;

CheatTagUserCmd* CheatTagUserCmd::New() const {
  return new CheatTagUserCmd;
}

void CheatTagUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheatTagUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(interval_, frame_);
    cmd_ = 9;
    param_ = 157;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheatTagUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheatTagUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_interval;
        break;
      }

      // optional uint32 interval = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frame;
        break;
      }

      // optional uint32 frame = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_)));
          set_has_frame();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheatTagUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheatTagUserCmd)
  return false;
#undef DO_
}

void CheatTagUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheatTagUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 interval = 3 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->interval(), output);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frame(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheatTagUserCmd)
}

::google::protobuf::uint8* CheatTagUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheatTagUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 interval = 3 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->interval(), target);
  }

  // optional uint32 frame = 4 [default = 0];
  if (has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frame(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheatTagUserCmd)
  return target;
}

int CheatTagUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 interval = 3 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interval());
    }

    // optional uint32 frame = 4 [default = 0];
    if (has_frame()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheatTagUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheatTagUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheatTagUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheatTagUserCmd::MergeFrom(const CheatTagUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_frame()) {
      set_frame(from.frame());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheatTagUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheatTagUserCmd::CopyFrom(const CheatTagUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheatTagUserCmd::IsInitialized() const {

  return true;
}

void CheatTagUserCmd::Swap(CheatTagUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(interval_, other->interval_);
    std::swap(frame_, other->frame_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheatTagUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheatTagUserCmd_descriptor_;
  metadata.reflection = CheatTagUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheatTagStatUserCmd::kCmdFieldNumber;
const int CheatTagStatUserCmd::kParamFieldNumber;
const int CheatTagStatUserCmd::kCountFieldNumber;
#endif  // !_MSC_VER

CheatTagStatUserCmd::CheatTagStatUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheatTagStatUserCmd)
}

void CheatTagStatUserCmd::InitAsDefaultInstance() {
}

CheatTagStatUserCmd::CheatTagStatUserCmd(const CheatTagStatUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheatTagStatUserCmd)
}

void CheatTagStatUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 9;
  param_ = 158;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheatTagStatUserCmd::~CheatTagStatUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheatTagStatUserCmd)
  SharedDtor();
}

void CheatTagStatUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheatTagStatUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheatTagStatUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheatTagStatUserCmd_descriptor_;
}

const CheatTagStatUserCmd& CheatTagStatUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneUser2_2eproto();
  return *default_instance_;
}

CheatTagStatUserCmd* CheatTagStatUserCmd::default_instance_ = NULL;

CheatTagStatUserCmd* CheatTagStatUserCmd::New() const {
  return new CheatTagStatUserCmd;
}

void CheatTagStatUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 9;
    param_ = 158;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheatTagStatUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheatTagStatUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::User2Param_IsValid(value)) {
            set_param(static_cast< ::Cmd::User2Param >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheatTagStatUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheatTagStatUserCmd)
  return false;
#undef DO_
}

void CheatTagStatUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheatTagStatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheatTagStatUserCmd)
}

::google::protobuf::uint8* CheatTagStatUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheatTagStatUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 count = 3 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheatTagStatUserCmd)
  return target;
}

int CheatTagStatUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER2_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.User2Param param = 2 [default = USER2PARAM_CHEAT_TAG_STAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 count = 3 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheatTagStatUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheatTagStatUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheatTagStatUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheatTagStatUserCmd::MergeFrom(const CheatTagStatUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheatTagStatUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheatTagStatUserCmd::CopyFrom(const CheatTagStatUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheatTagStatUserCmd::IsInitialized() const {

  return true;
}

void CheatTagStatUserCmd::Swap(CheatTagStatUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheatTagStatUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheatTagStatUserCmd_descriptor_;
  metadata.reflection = CheatTagStatUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
