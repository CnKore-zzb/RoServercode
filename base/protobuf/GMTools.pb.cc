// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GMTools.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GMTools.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ExecGMCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecGMCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetExecGMCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetExecGMCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionGMCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionGMCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GMToolsParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMToolsAct_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GMTools_2eproto() {
  protobuf_AddDesc_GMTools_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GMTools.proto");
  GOOGLE_CHECK(file != NULL);
  ExecGMCmd_descriptor_ = file->message_type(0);
  static const int ExecGMCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, act_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, conid_),
  };
  ExecGMCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecGMCmd_descriptor_,
      ExecGMCmd::default_instance_,
      ExecGMCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecGMCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecGMCmd));
  RetExecGMCmd_descriptor_ = file->message_type(1);
  static const int RetExecGMCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, conid_),
  };
  RetExecGMCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetExecGMCmd_descriptor_,
      RetExecGMCmd::default_instance_,
      RetExecGMCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetExecGMCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetExecGMCmd));
  SessionGMCmd_descriptor_ = file->message_type(2);
  static const int SessionGMCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, data_),
  };
  SessionGMCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionGMCmd_descriptor_,
      SessionGMCmd::default_instance_,
      SessionGMCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionGMCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionGMCmd));
  GMToolsParam_descriptor_ = file->enum_type(0);
  GMToolsAct_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GMTools_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecGMCmd_descriptor_, &ExecGMCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetExecGMCmd_descriptor_, &RetExecGMCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionGMCmd_descriptor_, &SessionGMCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GMTools_2eproto() {
  delete ExecGMCmd::default_instance_;
  delete ExecGMCmd_reflection_;
  delete RetExecGMCmd::default_instance_;
  delete RetExecGMCmd_reflection_;
  delete SessionGMCmd::default_instance_;
  delete SessionGMCmd_reflection_;
}

void protobuf_AddDesc_GMTools_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGMTools.proto\022\003Cmd\032\nxCmd.proto\"\334\001\n\tExe"
    "cGMCmd\022+\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\020GMTOO"
    "LS_PROTOCMD\022-\n\005param\030\002 \001(\0162\021.Cmd.GMTools"
    "Param:\013EXEC_GM_CMD\022\"\n\003act\030\003 \001(\0162\017.Cmd.GM"
    "ToolsAct:\004null\022\014\n\004data\030\004 \001(\t\022\014\n\004sign\030\005 \001"
    "(\t\022\017\n\004time\030\006 \001(\r:\0010\022\023\n\010serverid\030\007 \001(\r:\0010"
    "\022\r\n\005conid\030\010 \001(\004\"\230\001\n\014RetExecGMCmd\022+\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\020GMTOOLS_PROTOCMD\0221\n"
    "\005param\030\002 \001(\0162\021.Cmd.GMToolsParam:\017RET_EXE"
    "C_GM_CMD\022\013\n\003ret\030\003 \001(\t\022\014\n\004data\030\004 \001(\t\022\r\n\005c"
    "onid\030\005 \001(\004\"\240\001\n\014SessionGMCmd\022+\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\020GMTOOLS_PROTOCMD\0220\n\005para"
    "m\030\002 \001(\0162\021.Cmd.GMToolsParam:\016SESSION_GM_C"
    "MD\022\021\n\006charid\030\003 \001(\004:\0010\022\020\n\005mapid\030\004 \001(\r:\0010\022"
    "\014\n\004data\030\005 \001(\t*H\n\014GMToolsParam\022\017\n\013EXEC_GM"
    "_CMD\020\001\022\023\n\017RET_EXEC_GM_CMD\020\002\022\022\n\016SESSION_G"
    "M_CMD\020\003*\221\003\n\nGMToolsAct\022\010\n\004null\020\000\022\016\n\ngag_"
    "player\020\002\022\017\n\013lock_player\020\003\022\020\n\014lock_accoun"
    "t\020\004\022\016\n\nsend_props\020\005\022\025\n\021send_compensation"
    "\020\006\022\020\n\014send_message\020\007\022\017\n\013send_notice\020\010\022\026\n"
    "\022set_welfare_player\020\t\022\026\n\022exec_gm_cmd_pla"
    "yer\020\n\022\r\n\tsend_mail\020\013\022\n\n\006charge\020\014\022\017\n\013load"
    "_config\020\r\022\020\n\014check_charge\020\016\022\016\n\nmove_guil"
    "d\020\017\022\014\n\010use_code\020\020\022\026\n\022trade_security_cmd\020"
    "\021\022\027\n\023modify_auction_time\020\022\022\020\n\014stop_aucti"
    "on\020\023\022\024\n\020verify_guildicon\020\024\022\027\n\023clear_mail"
    "_template\020\025", 1051);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GMTools.proto", &protobuf_RegisterTypes);
  ExecGMCmd::default_instance_ = new ExecGMCmd();
  RetExecGMCmd::default_instance_ = new RetExecGMCmd();
  SessionGMCmd::default_instance_ = new SessionGMCmd();
  ExecGMCmd::default_instance_->InitAsDefaultInstance();
  RetExecGMCmd::default_instance_->InitAsDefaultInstance();
  SessionGMCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GMTools_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GMTools_2eproto {
  StaticDescriptorInitializer_GMTools_2eproto() {
    protobuf_AddDesc_GMTools_2eproto();
  }
} static_descriptor_initializer_GMTools_2eproto_;
const ::google::protobuf::EnumDescriptor* GMToolsParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToolsParam_descriptor_;
}
bool GMToolsParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMToolsAct_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToolsAct_descriptor_;
}
bool GMToolsAct_IsValid(int value) {
  switch(value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ExecGMCmd::kCmdFieldNumber;
const int ExecGMCmd::kParamFieldNumber;
const int ExecGMCmd::kActFieldNumber;
const int ExecGMCmd::kDataFieldNumber;
const int ExecGMCmd::kSignFieldNumber;
const int ExecGMCmd::kTimeFieldNumber;
const int ExecGMCmd::kServeridFieldNumber;
const int ExecGMCmd::kConidFieldNumber;
#endif  // !_MSC_VER

ExecGMCmd::ExecGMCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExecGMCmd)
}

void ExecGMCmd::InitAsDefaultInstance() {
}

ExecGMCmd::ExecGMCmd(const ExecGMCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExecGMCmd)
}

void ExecGMCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 203;
  param_ = 1;
  act_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = 0u;
  serverid_ = 0u;
  conid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecGMCmd::~ExecGMCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ExecGMCmd)
  SharedDtor();
}

void ExecGMCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void ExecGMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecGMCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecGMCmd_descriptor_;
}

const ExecGMCmd& ExecGMCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMTools_2eproto();
  return *default_instance_;
}

ExecGMCmd* ExecGMCmd::default_instance_ = NULL;

ExecGMCmd* ExecGMCmd::New() const {
  return new ExecGMCmd;
}

void ExecGMCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExecGMCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(act_, time_);
    ZR_(conid_, serverid_);
    cmd_ = 203;
    param_ = 1;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecGMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExecGMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GMToolsParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GMToolsParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_act;
        break;
      }

      // optional .Cmd.GMToolsAct act = 3 [default = null];
      case 3: {
        if (tag == 24) {
         parse_act:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GMToolsAct_IsValid(value)) {
            set_act(static_cast< ::Cmd::GMToolsAct >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sign;
        break;
      }

      // optional string sign = 5;
      case 5: {
        if (tag == 42) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_conid;
        break;
      }

      // optional uint64 conid = 8;
      case 8: {
        if (tag == 64) {
         parse_conid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conid_)));
          set_has_conid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExecGMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExecGMCmd)
  return false;
#undef DO_
}

void ExecGMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExecGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GMToolsAct act = 3 [default = null];
  if (has_act()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->act(), output);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sign(), output);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional uint32 serverid = 7 [default = 0];
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serverid(), output);
  }

  // optional uint64 conid = 8;
  if (has_conid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->conid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExecGMCmd)
}

::google::protobuf::uint8* ExecGMCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExecGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GMToolsAct act = 3 [default = null];
  if (has_act()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->act(), target);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  // optional string sign = 5;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sign(), target);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional uint32 serverid = 7 [default = 0];
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serverid(), target);
  }

  // optional uint64 conid = 8;
  if (has_conid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->conid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExecGMCmd)
  return target;
}

int ExecGMCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GMToolsAct act = 3 [default = null];
    if (has_act()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->act());
    }

    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional string sign = 5;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 time = 6 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 serverid = 7 [default = 0];
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint64 conid = 8;
    if (has_conid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecGMCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecGMCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecGMCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecGMCmd::MergeFrom(const ExecGMCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_act()) {
      set_act(from.act());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_conid()) {
      set_conid(from.conid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecGMCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecGMCmd::CopyFrom(const ExecGMCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecGMCmd::IsInitialized() const {

  return true;
}

void ExecGMCmd::Swap(ExecGMCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(act_, other->act_);
    std::swap(data_, other->data_);
    std::swap(sign_, other->sign_);
    std::swap(time_, other->time_);
    std::swap(serverid_, other->serverid_);
    std::swap(conid_, other->conid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecGMCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecGMCmd_descriptor_;
  metadata.reflection = ExecGMCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetExecGMCmd::kCmdFieldNumber;
const int RetExecGMCmd::kParamFieldNumber;
const int RetExecGMCmd::kRetFieldNumber;
const int RetExecGMCmd::kDataFieldNumber;
const int RetExecGMCmd::kConidFieldNumber;
#endif  // !_MSC_VER

RetExecGMCmd::RetExecGMCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RetExecGMCmd)
}

void RetExecGMCmd::InitAsDefaultInstance() {
}

RetExecGMCmd::RetExecGMCmd(const RetExecGMCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RetExecGMCmd)
}

void RetExecGMCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 203;
  param_ = 2;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  conid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetExecGMCmd::~RetExecGMCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RetExecGMCmd)
  SharedDtor();
}

void RetExecGMCmd::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void RetExecGMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetExecGMCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetExecGMCmd_descriptor_;
}

const RetExecGMCmd& RetExecGMCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMTools_2eproto();
  return *default_instance_;
}

RetExecGMCmd* RetExecGMCmd::default_instance_ = NULL;

RetExecGMCmd* RetExecGMCmd::New() const {
  return new RetExecGMCmd;
}

void RetExecGMCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 203;
    param_ = 2;
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ret_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    conid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetExecGMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RetExecGMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GMToolsParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GMToolsParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ret;
        break;
      }

      // optional string ret = 3;
      case 3: {
        if (tag == 26) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ret");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_conid;
        break;
      }

      // optional uint64 conid = 5;
      case 5: {
        if (tag == 40) {
         parse_conid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &conid_)));
          set_has_conid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RetExecGMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RetExecGMCmd)
  return false;
#undef DO_
}

void RetExecGMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RetExecGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ret");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ret(), output);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data(), output);
  }

  // optional uint64 conid = 5;
  if (has_conid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->conid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RetExecGMCmd)
}

::google::protobuf::uint8* RetExecGMCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RetExecGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ret");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ret(), target);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  // optional uint64 conid = 5;
  if (has_conid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->conid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RetExecGMCmd)
  return target;
}

int RetExecGMCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret());
    }

    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional uint64 conid = 5;
    if (has_conid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->conid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetExecGMCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetExecGMCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetExecGMCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetExecGMCmd::MergeFrom(const RetExecGMCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_conid()) {
      set_conid(from.conid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetExecGMCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetExecGMCmd::CopyFrom(const RetExecGMCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetExecGMCmd::IsInitialized() const {

  return true;
}

void RetExecGMCmd::Swap(RetExecGMCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ret_, other->ret_);
    std::swap(data_, other->data_);
    std::swap(conid_, other->conid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetExecGMCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetExecGMCmd_descriptor_;
  metadata.reflection = RetExecGMCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionGMCmd::kCmdFieldNumber;
const int SessionGMCmd::kParamFieldNumber;
const int SessionGMCmd::kCharidFieldNumber;
const int SessionGMCmd::kMapidFieldNumber;
const int SessionGMCmd::kDataFieldNumber;
#endif  // !_MSC_VER

SessionGMCmd::SessionGMCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionGMCmd)
}

void SessionGMCmd::InitAsDefaultInstance() {
}

SessionGMCmd::SessionGMCmd(const SessionGMCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionGMCmd)
}

void SessionGMCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 203;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionGMCmd::~SessionGMCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SessionGMCmd)
  SharedDtor();
}

void SessionGMCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SessionGMCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionGMCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionGMCmd_descriptor_;
}

const SessionGMCmd& SessionGMCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMTools_2eproto();
  return *default_instance_;
}

SessionGMCmd* SessionGMCmd::default_instance_ = NULL;

SessionGMCmd* SessionGMCmd::New() const {
  return new SessionGMCmd;
}

void SessionGMCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 203;
    param_ = 3;
    charid_ = GOOGLE_ULONGLONG(0);
    mapid_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionGMCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionGMCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GMToolsParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GMToolsParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional string data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionGMCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionGMCmd)
  return false;
#undef DO_
}

void SessionGMCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionGMCmd)
}

::google::protobuf::uint8* SessionGMCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionGMCmd)
  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionGMCmd)
  return target;
}

int SessionGMCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional string data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionGMCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionGMCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionGMCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionGMCmd::MergeFrom(const SessionGMCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionGMCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionGMCmd::CopyFrom(const SessionGMCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionGMCmd::IsInitialized() const {

  return true;
}

void SessionGMCmd::Swap(SessionGMCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionGMCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionGMCmd_descriptor_;
  metadata.reflection = SessionGMCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
