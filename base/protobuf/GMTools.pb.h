// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GMTools.proto

#ifndef PROTOBUF_GMTools_2eproto__INCLUDED
#define PROTOBUF_GMTools_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GMTools_2eproto();
void protobuf_AssignDesc_GMTools_2eproto();
void protobuf_ShutdownFile_GMTools_2eproto();

class ExecGMCmd;
class RetExecGMCmd;
class SessionGMCmd;

enum GMToolsParam {
  EXEC_GM_CMD = 1,
  RET_EXEC_GM_CMD = 2,
  SESSION_GM_CMD = 3
};
bool GMToolsParam_IsValid(int value);
const GMToolsParam GMToolsParam_MIN = EXEC_GM_CMD;
const GMToolsParam GMToolsParam_MAX = SESSION_GM_CMD;
const int GMToolsParam_ARRAYSIZE = GMToolsParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMToolsParam_descriptor();
inline const ::std::string& GMToolsParam_Name(GMToolsParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMToolsParam_descriptor(), value);
}
inline bool GMToolsParam_Parse(
    const ::std::string& name, GMToolsParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMToolsParam>(
    GMToolsParam_descriptor(), name, value);
}
enum GMToolsAct {
  null = 0,
  gag_player = 2,
  lock_player = 3,
  lock_account = 4,
  send_props = 5,
  send_compensation = 6,
  send_message = 7,
  send_notice = 8,
  set_welfare_player = 9,
  exec_gm_cmd_player = 10,
  send_mail = 11,
  charge = 12,
  load_config = 13,
  check_charge = 14,
  move_guild = 15,
  use_code = 16,
  trade_security_cmd = 17,
  modify_auction_time = 18,
  stop_auction = 19,
  verify_guildicon = 20,
  clear_mail_template = 21
};
bool GMToolsAct_IsValid(int value);
const GMToolsAct GMToolsAct_MIN = null;
const GMToolsAct GMToolsAct_MAX = clear_mail_template;
const int GMToolsAct_ARRAYSIZE = GMToolsAct_MAX + 1;

const ::google::protobuf::EnumDescriptor* GMToolsAct_descriptor();
inline const ::std::string& GMToolsAct_Name(GMToolsAct value) {
  return ::google::protobuf::internal::NameOfEnum(
    GMToolsAct_descriptor(), value);
}
inline bool GMToolsAct_Parse(
    const ::std::string& name, GMToolsAct* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GMToolsAct>(
    GMToolsAct_descriptor(), name, value);
}
// ===================================================================

class ExecGMCmd : public ::google::protobuf::Message {
 public:
  ExecGMCmd();
  virtual ~ExecGMCmd();

  ExecGMCmd(const ExecGMCmd& from);

  inline ExecGMCmd& operator=(const ExecGMCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExecGMCmd& default_instance();

  void Swap(ExecGMCmd* other);

  // implements Message ----------------------------------------------

  ExecGMCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExecGMCmd& from);
  void MergeFrom(const ExecGMCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GMToolsParam param() const;
  inline void set_param(::Cmd::GMToolsParam value);

  // optional .Cmd.GMToolsAct act = 3 [default = null];
  inline bool has_act() const;
  inline void clear_act();
  static const int kActFieldNumber = 3;
  inline ::Cmd::GMToolsAct act() const;
  inline void set_act(::Cmd::GMToolsAct value);

  // optional string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string sign = 5;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 5;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional uint32 time = 6 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 serverid = 7 [default = 0];
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional uint64 conid = 8;
  inline bool has_conid() const;
  inline void clear_conid();
  static const int kConidFieldNumber = 8;
  inline ::google::protobuf::uint64 conid() const;
  inline void set_conid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ExecGMCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_act();
  inline void clear_has_act();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_conid();
  inline void clear_has_conid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  int act_;
  ::google::protobuf::uint32 time_;
  ::std::string* sign_;
  ::google::protobuf::uint64 conid_;
  ::google::protobuf::uint32 serverid_;
  friend void  protobuf_AddDesc_GMTools_2eproto();
  friend void protobuf_AssignDesc_GMTools_2eproto();
  friend void protobuf_ShutdownFile_GMTools_2eproto();

  void InitAsDefaultInstance();
  static ExecGMCmd* default_instance_;
};
// -------------------------------------------------------------------

class RetExecGMCmd : public ::google::protobuf::Message {
 public:
  RetExecGMCmd();
  virtual ~RetExecGMCmd();

  RetExecGMCmd(const RetExecGMCmd& from);

  inline RetExecGMCmd& operator=(const RetExecGMCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetExecGMCmd& default_instance();

  void Swap(RetExecGMCmd* other);

  // implements Message ----------------------------------------------

  RetExecGMCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetExecGMCmd& from);
  void MergeFrom(const RetExecGMCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GMToolsParam param() const;
  inline void set_param(::Cmd::GMToolsParam value);

  // optional string ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline const ::std::string& ret() const;
  inline void set_ret(const ::std::string& value);
  inline void set_ret(const char* value);
  inline void set_ret(const char* value, size_t size);
  inline ::std::string* mutable_ret();
  inline ::std::string* release_ret();
  inline void set_allocated_ret(::std::string* ret);

  // optional string data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint64 conid = 5;
  inline bool has_conid() const;
  inline void clear_conid();
  static const int kConidFieldNumber = 5;
  inline ::google::protobuf::uint64 conid() const;
  inline void set_conid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.RetExecGMCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_conid();
  inline void clear_has_conid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* ret_;
  ::std::string* data_;
  ::google::protobuf::uint64 conid_;
  friend void  protobuf_AddDesc_GMTools_2eproto();
  friend void protobuf_AssignDesc_GMTools_2eproto();
  friend void protobuf_ShutdownFile_GMTools_2eproto();

  void InitAsDefaultInstance();
  static RetExecGMCmd* default_instance_;
};
// -------------------------------------------------------------------

class SessionGMCmd : public ::google::protobuf::Message {
 public:
  SessionGMCmd();
  virtual ~SessionGMCmd();

  SessionGMCmd(const SessionGMCmd& from);

  inline SessionGMCmd& operator=(const SessionGMCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SessionGMCmd& default_instance();

  void Swap(SessionGMCmd* other);

  // implements Message ----------------------------------------------

  SessionGMCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SessionGMCmd& from);
  void MergeFrom(const SessionGMCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::GMToolsParam param() const;
  inline void set_param(::Cmd::GMToolsParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 mapid = 4 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 4;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional string data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const char* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:Cmd.SessionGMCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_GMTools_2eproto();
  friend void protobuf_AssignDesc_GMTools_2eproto();
  friend void protobuf_ShutdownFile_GMTools_2eproto();

  void InitAsDefaultInstance();
  static SessionGMCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ExecGMCmd

// optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
inline bool ExecGMCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExecGMCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExecGMCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExecGMCmd::clear_cmd() {
  cmd_ = 203;
  clear_has_cmd();
}
inline ::Cmd::Command ExecGMCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ExecGMCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.cmd)
}

// optional .Cmd.GMToolsParam param = 2 [default = EXEC_GM_CMD];
inline bool ExecGMCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExecGMCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExecGMCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExecGMCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::GMToolsParam ExecGMCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.param)
  return static_cast< ::Cmd::GMToolsParam >(param_);
}
inline void ExecGMCmd::set_param(::Cmd::GMToolsParam value) {
  assert(::Cmd::GMToolsParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.param)
}

// optional .Cmd.GMToolsAct act = 3 [default = null];
inline bool ExecGMCmd::has_act() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExecGMCmd::set_has_act() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExecGMCmd::clear_has_act() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExecGMCmd::clear_act() {
  act_ = 0;
  clear_has_act();
}
inline ::Cmd::GMToolsAct ExecGMCmd::act() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.act)
  return static_cast< ::Cmd::GMToolsAct >(act_);
}
inline void ExecGMCmd::set_act(::Cmd::GMToolsAct value) {
  assert(::Cmd::GMToolsAct_IsValid(value));
  set_has_act();
  act_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.act)
}

// optional string data = 4;
inline bool ExecGMCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExecGMCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExecGMCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExecGMCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ExecGMCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.data)
  return *data_;
}
inline void ExecGMCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.data)
}
inline void ExecGMCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ExecGMCmd.data)
}
inline void ExecGMCmd::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ExecGMCmd.data)
}
inline ::std::string* ExecGMCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ExecGMCmd.data)
  return data_;
}
inline ::std::string* ExecGMCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecGMCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ExecGMCmd.data)
}

// optional string sign = 5;
inline bool ExecGMCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExecGMCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExecGMCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExecGMCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ExecGMCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.sign)
  return *sign_;
}
inline void ExecGMCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.sign)
}
inline void ExecGMCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ExecGMCmd.sign)
}
inline void ExecGMCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ExecGMCmd.sign)
}
inline ::std::string* ExecGMCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ExecGMCmd.sign)
  return sign_;
}
inline ::std::string* ExecGMCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ExecGMCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ExecGMCmd.sign)
}

// optional uint32 time = 6 [default = 0];
inline bool ExecGMCmd::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExecGMCmd::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExecGMCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ExecGMCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ExecGMCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.time)
  return time_;
}
inline void ExecGMCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.time)
}

// optional uint32 serverid = 7 [default = 0];
inline bool ExecGMCmd::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ExecGMCmd::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ExecGMCmd::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ExecGMCmd::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 ExecGMCmd::serverid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.serverid)
  return serverid_;
}
inline void ExecGMCmd::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.serverid)
}

// optional uint64 conid = 8;
inline bool ExecGMCmd::has_conid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ExecGMCmd::set_has_conid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ExecGMCmd::clear_has_conid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ExecGMCmd::clear_conid() {
  conid_ = GOOGLE_ULONGLONG(0);
  clear_has_conid();
}
inline ::google::protobuf::uint64 ExecGMCmd::conid() const {
  // @@protoc_insertion_point(field_get:Cmd.ExecGMCmd.conid)
  return conid_;
}
inline void ExecGMCmd::set_conid(::google::protobuf::uint64 value) {
  set_has_conid();
  conid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ExecGMCmd.conid)
}

// -------------------------------------------------------------------

// RetExecGMCmd

// optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
inline bool RetExecGMCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetExecGMCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetExecGMCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetExecGMCmd::clear_cmd() {
  cmd_ = 203;
  clear_has_cmd();
}
inline ::Cmd::Command RetExecGMCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RetExecGMCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RetExecGMCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RetExecGMCmd.cmd)
}

// optional .Cmd.GMToolsParam param = 2 [default = RET_EXEC_GM_CMD];
inline bool RetExecGMCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetExecGMCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetExecGMCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetExecGMCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::GMToolsParam RetExecGMCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RetExecGMCmd.param)
  return static_cast< ::Cmd::GMToolsParam >(param_);
}
inline void RetExecGMCmd::set_param(::Cmd::GMToolsParam value) {
  assert(::Cmd::GMToolsParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RetExecGMCmd.param)
}

// optional string ret = 3;
inline bool RetExecGMCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetExecGMCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetExecGMCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetExecGMCmd::clear_ret() {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_->clear();
  }
  clear_has_ret();
}
inline const ::std::string& RetExecGMCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.RetExecGMCmd.ret)
  return *ret_;
}
inline void RetExecGMCmd::set_ret(const ::std::string& value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RetExecGMCmd.ret)
}
inline void RetExecGMCmd::set_ret(const char* value) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RetExecGMCmd.ret)
}
inline void RetExecGMCmd::set_ret(const char* value, size_t size) {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  ret_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RetExecGMCmd.ret)
}
inline ::std::string* RetExecGMCmd::mutable_ret() {
  set_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ret_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RetExecGMCmd.ret)
  return ret_;
}
inline ::std::string* RetExecGMCmd::release_ret() {
  clear_has_ret();
  if (ret_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ret_;
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RetExecGMCmd::set_allocated_ret(::std::string* ret) {
  if (ret_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ret_;
  }
  if (ret) {
    set_has_ret();
    ret_ = ret;
  } else {
    clear_has_ret();
    ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RetExecGMCmd.ret)
}

// optional string data = 4;
inline bool RetExecGMCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RetExecGMCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RetExecGMCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RetExecGMCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& RetExecGMCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.RetExecGMCmd.data)
  return *data_;
}
inline void RetExecGMCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RetExecGMCmd.data)
}
inline void RetExecGMCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RetExecGMCmd.data)
}
inline void RetExecGMCmd::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RetExecGMCmd.data)
}
inline ::std::string* RetExecGMCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RetExecGMCmd.data)
  return data_;
}
inline ::std::string* RetExecGMCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RetExecGMCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RetExecGMCmd.data)
}

// optional uint64 conid = 5;
inline bool RetExecGMCmd::has_conid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RetExecGMCmd::set_has_conid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RetExecGMCmd::clear_has_conid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RetExecGMCmd::clear_conid() {
  conid_ = GOOGLE_ULONGLONG(0);
  clear_has_conid();
}
inline ::google::protobuf::uint64 RetExecGMCmd::conid() const {
  // @@protoc_insertion_point(field_get:Cmd.RetExecGMCmd.conid)
  return conid_;
}
inline void RetExecGMCmd::set_conid(::google::protobuf::uint64 value) {
  set_has_conid();
  conid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RetExecGMCmd.conid)
}

// -------------------------------------------------------------------

// SessionGMCmd

// optional .Cmd.Command cmd = 1 [default = GMTOOLS_PROTOCMD];
inline bool SessionGMCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SessionGMCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SessionGMCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SessionGMCmd::clear_cmd() {
  cmd_ = 203;
  clear_has_cmd();
}
inline ::Cmd::Command SessionGMCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionGMCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SessionGMCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionGMCmd.cmd)
}

// optional .Cmd.GMToolsParam param = 2 [default = SESSION_GM_CMD];
inline bool SessionGMCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SessionGMCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SessionGMCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SessionGMCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::GMToolsParam SessionGMCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionGMCmd.param)
  return static_cast< ::Cmd::GMToolsParam >(param_);
}
inline void SessionGMCmd::set_param(::Cmd::GMToolsParam value) {
  assert(::Cmd::GMToolsParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionGMCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool SessionGMCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SessionGMCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SessionGMCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SessionGMCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SessionGMCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionGMCmd.charid)
  return charid_;
}
inline void SessionGMCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionGMCmd.charid)
}

// optional uint32 mapid = 4 [default = 0];
inline bool SessionGMCmd::has_mapid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SessionGMCmd::set_has_mapid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SessionGMCmd::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SessionGMCmd::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SessionGMCmd::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionGMCmd.mapid)
  return mapid_;
}
inline void SessionGMCmd::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SessionGMCmd.mapid)
}

// optional string data = 5;
inline bool SessionGMCmd::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SessionGMCmd::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SessionGMCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SessionGMCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& SessionGMCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.SessionGMCmd.data)
  return *data_;
}
inline void SessionGMCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SessionGMCmd.data)
}
inline void SessionGMCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SessionGMCmd.data)
}
inline void SessionGMCmd::set_data(const char* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SessionGMCmd.data)
}
inline ::std::string* SessionGMCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SessionGMCmd.data)
  return data_;
}
inline ::std::string* SessionGMCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SessionGMCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SessionGMCmd.data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::GMToolsParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::GMToolsParam>() {
  return ::Cmd::GMToolsParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::GMToolsAct> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::GMToolsAct>() {
  return ::Cmd::GMToolsAct_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GMTools_2eproto__INCLUDED
