// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildSCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildSCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* UserGuildInfoSyncGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGuildInfoSyncGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSyncGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSyncGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadLuaGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadLuaGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildUserInfoSyncGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildUserInfoSyncGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildSMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildSMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildArtifactQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildArtifactQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildGvgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildGvgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildInfoSyncGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildInfoSyncGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDataUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDataUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CityDataUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CityDataUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMemberDataUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMemberDataUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildQuestUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildQuestUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterGuildTerritoryGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterGuildTerritoryGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefreshGuildTerritoryGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefreshGuildTerritoryGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryPhotoListGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryPhotoListGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUserPhotoListGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUserPhotoListGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoLoad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoLoad_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryShowPhotoGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryShowPhotoGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PhotoUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PhotoUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildMusicDeleteGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildMusicDeleteGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameNTFGuildCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameNTFGuildCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildCityActionGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildCityActionGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVGRewardGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVGRewardGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildPrayGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildPrayGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildIconStateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildIconStateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingMaterial_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingMaterial_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubmitMaterialGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubmitMaterialGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryGuildInfoGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryGuildInfoGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendWelfareGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendWelfareGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildChallengeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildChallengeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeProgressGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeProgressGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildGM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildGM_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCommandGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCommandGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMCommandRespondGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMCommandRespondGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildingEffectGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildingEffectGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArtifactUpdateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArtifactUpdateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildArtifactQuestGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildArtifactQuestGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryTreasureGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryTreasureGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgUserPartInGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgUserPartInGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreasureResultNtfGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreasureResultNtfGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCityStateGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCityStateGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgOpenToServerGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgOpenToServerGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShopBuyItemGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShopBuyItemGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinSuperGvgGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinSuperGvgGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EndSuperGvgGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EndSuperGvgGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateCityGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateCityGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgResultInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgResultInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GvgResultGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GvgResultGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBrocastMailGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBrocastMailGuildSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildBrocastMsgGuildSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildBrocastMsgGuildSCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildSParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GuildOptConType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EPhotoAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildCityAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGuildCityResult_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildSCmd_2eproto() {
  protobuf_AddDesc_GuildSCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildSCmd.proto");
  GOOGLE_CHECK(file != NULL);
  UserGuildInfoSyncGuildSCmd_descriptor_ = file->message_type(0);
  static const int UserGuildInfoSyncGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, guildportrait_),
  };
  UserGuildInfoSyncGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGuildInfoSyncGuildSCmd_descriptor_,
      UserGuildInfoSyncGuildSCmd::default_instance_,
      UserGuildInfoSyncGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSyncGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGuildInfoSyncGuildSCmd));
  ChatSyncGuildSCmd_descriptor_ = file->message_type(1);
  static const int ChatSyncGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, len_),
  };
  ChatSyncGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSyncGuildSCmd_descriptor_,
      ChatSyncGuildSCmd::default_instance_,
      ChatSyncGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSyncGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSyncGuildSCmd));
  LoadLuaGuildSCmd_descriptor_ = file->message_type(2);
  static const int LoadLuaGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, lua_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, log_),
  };
  LoadLuaGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadLuaGuildSCmd_descriptor_,
      LoadLuaGuildSCmd::default_instance_,
      LoadLuaGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadLuaGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadLuaGuildSCmd));
  GuildUserInfo_descriptor_ = file->message_type(3);
  static const int GuildUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfo, giftpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfo, prays_),
  };
  GuildUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUserInfo_descriptor_,
      GuildUserInfo::default_instance_,
      GuildUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUserInfo));
  GuildUserInfoSyncGuildCmd_descriptor_ = file->message_type(4);
  static const int GuildUserInfoSyncGuildCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, levelup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, optcontype_),
  };
  GuildUserInfoSyncGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildUserInfoSyncGuildCmd_descriptor_,
      GuildUserInfoSyncGuildCmd::default_instance_,
      GuildUserInfoSyncGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildUserInfoSyncGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildUserInfoSyncGuildCmd));
  GuildSMember_descriptor_ = file->message_type(5);
  static const int GuildSMember_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, entertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, buildingeffect_),
  };
  GuildSMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildSMember_descriptor_,
      GuildSMember::default_instance_,
      GuildSMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildSMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildSMember));
  GuildArtifactQuest_descriptor_ = file->message_type(6);
  static const int GuildArtifactQuest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuest, submitids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuest, datas_),
  };
  GuildArtifactQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildArtifactQuest_descriptor_,
      GuildArtifactQuest::default_instance_,
      GuildArtifactQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildArtifactQuest));
  GuildGvgData_descriptor_ = file->message_type(7);
  static const int GuildGvgData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGvgData, insupergvg_),
  };
  GuildGvgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildGvgData_descriptor_,
      GuildGvgData::default_instance_,
      GuildGvgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGvgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGvgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildGvgData));
  GuildInfo_descriptor_ = file->message_type(8);
  static const int GuildInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, scene_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, auth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, create_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, jobname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, openfunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, challenges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, artifactitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, artifacequest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, gvg_),
  };
  GuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfo_descriptor_,
      GuildInfo::default_instance_,
      GuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfo));
  GuildInfoSyncGuildSCmd_descriptor_ = file->message_type(9);
  static const int GuildInfoSyncGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, info_),
  };
  GuildInfoSyncGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildInfoSyncGuildSCmd_descriptor_,
      GuildInfoSyncGuildSCmd::default_instance_,
      GuildInfoSyncGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildInfoSyncGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildInfoSyncGuildSCmd));
  GuildDataUpdateGuildSCmd_descriptor_ = file->message_type(10);
  static const int GuildDataUpdateGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, updates_),
  };
  GuildDataUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDataUpdateGuildSCmd_descriptor_,
      GuildDataUpdateGuildSCmd::default_instance_,
      GuildDataUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDataUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDataUpdateGuildSCmd));
  CityDataUpdateGuildSCmd_descriptor_ = file->message_type(11);
  static const int CityDataUpdateGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, membercount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, leadername_),
  };
  CityDataUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CityDataUpdateGuildSCmd_descriptor_,
      CityDataUpdateGuildSCmd::default_instance_,
      CityDataUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CityDataUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CityDataUpdateGuildSCmd));
  GuildMemberUpdateGuildSCmd_descriptor_ = file->message_type(12);
  static const int GuildMemberUpdateGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, dels_),
  };
  GuildMemberUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberUpdateGuildSCmd_descriptor_,
      GuildMemberUpdateGuildSCmd::default_instance_,
      GuildMemberUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberUpdateGuildSCmd));
  GuildMemberDataUpdateGuildSCmd_descriptor_ = file->message_type(13);
  static const int GuildMemberDataUpdateGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, updates_),
  };
  GuildMemberDataUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMemberDataUpdateGuildSCmd_descriptor_,
      GuildMemberDataUpdateGuildSCmd::default_instance_,
      GuildMemberDataUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMemberDataUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMemberDataUpdateGuildSCmd));
  GuildQuestUpdateGuildSCmd_descriptor_ = file->message_type(14);
  static const int GuildQuestUpdateGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, dels_),
  };
  GuildQuestUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildQuestUpdateGuildSCmd_descriptor_,
      GuildQuestUpdateGuildSCmd::default_instance_,
      GuildQuestUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildQuestUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildQuestUpdateGuildSCmd));
  EnterGuildTerritoryGuildSCmd_descriptor_ = file->message_type(15);
  static const int EnterGuildTerritoryGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, info_),
  };
  EnterGuildTerritoryGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterGuildTerritoryGuildSCmd_descriptor_,
      EnterGuildTerritoryGuildSCmd::default_instance_,
      EnterGuildTerritoryGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterGuildTerritoryGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterGuildTerritoryGuildSCmd));
  RefreshGuildTerritoryGuildSCmd_descriptor_ = file->message_type(16);
  static const int RefreshGuildTerritoryGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, info_),
  };
  RefreshGuildTerritoryGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefreshGuildTerritoryGuildSCmd_descriptor_,
      RefreshGuildTerritoryGuildSCmd::default_instance_,
      RefreshGuildTerritoryGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefreshGuildTerritoryGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefreshGuildTerritoryGuildSCmd));
  QueryPhotoListGuildSCmd_descriptor_ = file->message_type(17);
  static const int QueryPhotoListGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, frames_),
  };
  QueryPhotoListGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryPhotoListGuildSCmd_descriptor_,
      QueryPhotoListGuildSCmd::default_instance_,
      QueryPhotoListGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryPhotoListGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryPhotoListGuildSCmd));
  QueryUserPhotoListGuildSCmd_descriptor_ = file->message_type(18);
  static const int QueryUserPhotoListGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, frames_),
  };
  QueryUserPhotoListGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUserPhotoListGuildSCmd_descriptor_,
      QueryUserPhotoListGuildSCmd::default_instance_,
      QueryUserPhotoListGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUserPhotoListGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUserPhotoListGuildSCmd));
  PhotoLoad_descriptor_ = file->message_type(19);
  static const int PhotoLoad_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoLoad, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoLoad, count_),
  };
  PhotoLoad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoLoad_descriptor_,
      PhotoLoad::default_instance_,
      PhotoLoad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoLoad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoLoad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoLoad));
  QueryShowPhotoGuildSCmd_descriptor_ = file->message_type(20);
  static const int QueryShowPhotoGuildSCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, loads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, exists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, results_),
  };
  QueryShowPhotoGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryShowPhotoGuildSCmd_descriptor_,
      QueryShowPhotoGuildSCmd::default_instance_,
      QueryShowPhotoGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryShowPhotoGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryShowPhotoGuildSCmd));
  FrameUpdateGuildSCmd_descriptor_ = file->message_type(21);
  static const int FrameUpdateGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, frameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, del_),
  };
  FrameUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameUpdateGuildSCmd_descriptor_,
      FrameUpdateGuildSCmd::default_instance_,
      FrameUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameUpdateGuildSCmd));
  PhotoUpdateGuildSCmd_descriptor_ = file->message_type(22);
  static const int PhotoUpdateGuildSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, to_guild_),
  };
  PhotoUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PhotoUpdateGuildSCmd_descriptor_,
      PhotoUpdateGuildSCmd::default_instance_,
      PhotoUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PhotoUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PhotoUpdateGuildSCmd));
  JobUpdateGuildSCmd_descriptor_ = file->message_type(23);
  static const int JobUpdateGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, job_),
  };
  JobUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobUpdateGuildSCmd_descriptor_,
      JobUpdateGuildSCmd::default_instance_,
      JobUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobUpdateGuildSCmd));
  GuildMusicDeleteGuildSCmd_descriptor_ = file->message_type(24);
  static const int GuildMusicDeleteGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteGuildSCmd, guildid_),
  };
  GuildMusicDeleteGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildMusicDeleteGuildSCmd_descriptor_,
      GuildMusicDeleteGuildSCmd::default_instance_,
      GuildMusicDeleteGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildMusicDeleteGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildMusicDeleteGuildSCmd));
  RenameNTFGuildCmd_descriptor_ = file->message_type(25);
  static const int RenameNTFGuildCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, newname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, result_),
  };
  RenameNTFGuildCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameNTFGuildCmd_descriptor_,
      RenameNTFGuildCmd::default_instance_,
      RenameNTFGuildCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameNTFGuildCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameNTFGuildCmd));
  GuildCityActionGuildSCmd_descriptor_ = file->message_type(26);
  static const int GuildCityActionGuildSCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, scenename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, infos_),
  };
  GuildCityActionGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildCityActionGuildSCmd_descriptor_,
      GuildCityActionGuildSCmd::default_instance_,
      GuildCityActionGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildCityActionGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildCityActionGuildSCmd));
  SendMailGuildSCmd_descriptor_ = file->message_type(27);
  static const int SendMailGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailGuildSCmd, data_),
  };
  SendMailGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailGuildSCmd_descriptor_,
      SendMailGuildSCmd::default_instance_,
      SendMailGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailGuildSCmd));
  GVGRewardGuildSCmd_descriptor_ = file->message_type(28);
  static const int GVGRewardGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVGRewardGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVGRewardGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVGRewardGuildSCmd, guildid_),
  };
  GVGRewardGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVGRewardGuildSCmd_descriptor_,
      GVGRewardGuildSCmd::default_instance_,
      GVGRewardGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVGRewardGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVGRewardGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVGRewardGuildSCmd));
  GuildPrayGuildSCmd_descriptor_ = file->message_type(29);
  static const int GuildPrayGuildSCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, prayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, praylv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, needcon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, needmon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, prayitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, msgid_),
  };
  GuildPrayGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildPrayGuildSCmd_descriptor_,
      GuildPrayGuildSCmd::default_instance_,
      GuildPrayGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildPrayGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildPrayGuildSCmd));
  GuildIconStateGuildSCmd_descriptor_ = file->message_type(30);
  static const int GuildIconStateGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, state_),
  };
  GuildIconStateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildIconStateGuildSCmd_descriptor_,
      GuildIconStateGuildSCmd::default_instance_,
      GuildIconStateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildIconStateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildIconStateGuildSCmd));
  BuildingMaterial_descriptor_ = file->message_type(31);
  static const int BuildingMaterial_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingMaterial, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingMaterial, count_),
  };
  BuildingMaterial_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingMaterial_descriptor_,
      BuildingMaterial::default_instance_,
      BuildingMaterial_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingMaterial, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingMaterial, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingMaterial));
  SubmitMaterialGuildSCmd_descriptor_ = file->message_type(32);
  static const int SubmitMaterialGuildSCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, building_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, materials_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, submitcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, curlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, submitinc_),
  };
  SubmitMaterialGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SubmitMaterialGuildSCmd_descriptor_,
      SubmitMaterialGuildSCmd::default_instance_,
      SubmitMaterialGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubmitMaterialGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SubmitMaterialGuildSCmd));
  BuildingUpdateGuildSCmd_descriptor_ = file->message_type(33);
  static const int BuildingUpdateGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, charid_),
  };
  BuildingUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingUpdateGuildSCmd_descriptor_,
      BuildingUpdateGuildSCmd::default_instance_,
      BuildingUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingUpdateGuildSCmd));
  QueryGuildInfoGuildSCmd_descriptor_ = file->message_type(34);
  static const int QueryGuildInfoGuildSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, result_),
  };
  QueryGuildInfoGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryGuildInfoGuildSCmd_descriptor_,
      QueryGuildInfoGuildSCmd::default_instance_,
      QueryGuildInfoGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryGuildInfoGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryGuildInfoGuildSCmd));
  SendWelfareGuildSCmd_descriptor_ = file->message_type(35);
  static const int SendWelfareGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, items_),
  };
  SendWelfareGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendWelfareGuildSCmd_descriptor_,
      SendWelfareGuildSCmd::default_instance_,
      SendWelfareGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendWelfareGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendWelfareGuildSCmd));
  GuildChallengeItem_descriptor_ = file->message_type(36);
  static const int GuildChallengeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeItem, progress_),
  };
  GuildChallengeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildChallengeItem_descriptor_,
      GuildChallengeItem::default_instance_,
      GuildChallengeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildChallengeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildChallengeItem));
  ChallengeProgressGuildSCmd_descriptor_ = file->message_type(37);
  static const int ChallengeProgressGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, items_),
  };
  ChallengeProgressGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeProgressGuildSCmd_descriptor_,
      ChallengeProgressGuildSCmd::default_instance_,
      ChallengeProgressGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeProgressGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeProgressGuildSCmd));
  GuildGM_descriptor_ = file->message_type(38);
  static const int GuildGM_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, sessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, name_),
  };
  GuildGM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildGM_descriptor_,
      GuildGM::default_instance_,
      GuildGM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildGM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildGM));
  GMCommandGuildSCmd_descriptor_ = file->message_type(39);
  static const int GMCommandGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, command_),
  };
  GMCommandGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCommandGuildSCmd_descriptor_,
      GMCommandGuildSCmd::default_instance_,
      GMCommandGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCommandGuildSCmd));
  GMCommandRespondGuildSCmd_descriptor_ = file->message_type(40);
  static const int GMCommandRespondGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandRespondGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandRespondGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandRespondGuildSCmd, info_),
  };
  GMCommandRespondGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMCommandRespondGuildSCmd_descriptor_,
      GMCommandRespondGuildSCmd::default_instance_,
      GMCommandRespondGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandRespondGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMCommandRespondGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMCommandRespondGuildSCmd));
  BuildingEffectGuildSCmd_descriptor_ = file->message_type(41);
  static const int BuildingEffectGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingEffectGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingEffectGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingEffectGuildSCmd, charid_),
  };
  BuildingEffectGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildingEffectGuildSCmd_descriptor_,
      BuildingEffectGuildSCmd::default_instance_,
      BuildingEffectGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingEffectGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildingEffectGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildingEffectGuildSCmd));
  ArtifactUpdateGuildSCmd_descriptor_ = file->message_type(42);
  static const int ArtifactUpdateGuildSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, itemupdates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, itemdels_),
  };
  ArtifactUpdateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArtifactUpdateGuildSCmd_descriptor_,
      ArtifactUpdateGuildSCmd::default_instance_,
      ArtifactUpdateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArtifactUpdateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArtifactUpdateGuildSCmd));
  GuildArtifactQuestGuildSCmd_descriptor_ = file->message_type(43);
  static const int GuildArtifactQuestGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, quest_),
  };
  GuildArtifactQuestGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildArtifactQuestGuildSCmd_descriptor_,
      GuildArtifactQuestGuildSCmd::default_instance_,
      GuildArtifactQuestGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildArtifactQuestGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildArtifactQuestGuildSCmd));
  QueryTreasureGuildSCmd_descriptor_ = file->message_type(44);
  static const int QueryTreasureGuildSCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, treasures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, bcoin_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, asset_count_),
  };
  QueryTreasureGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryTreasureGuildSCmd_descriptor_,
      QueryTreasureGuildSCmd::default_instance_,
      QueryTreasureGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryTreasureGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryTreasureGuildSCmd));
  GvgUserPartInGuildSCmd_descriptor_ = file->message_type(45);
  static const int GvgUserPartInGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, charid_),
  };
  GvgUserPartInGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgUserPartInGuildSCmd_descriptor_,
      GvgUserPartInGuildSCmd::default_instance_,
      GvgUserPartInGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgUserPartInGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgUserPartInGuildSCmd));
  TreasureResultNtfGuildSCmd_descriptor_ = file->message_type(46);
  static const int TreasureResultNtfGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, result_),
  };
  TreasureResultNtfGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreasureResultNtfGuildSCmd_descriptor_,
      TreasureResultNtfGuildSCmd::default_instance_,
      TreasureResultNtfGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreasureResultNtfGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreasureResultNtfGuildSCmd));
  UpdateCityStateGuildSCmd_descriptor_ = file->message_type(47);
  static const int UpdateCityStateGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityStateGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityStateGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityStateGuildSCmd, infos_),
  };
  UpdateCityStateGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCityStateGuildSCmd_descriptor_,
      UpdateCityStateGuildSCmd::default_instance_,
      UpdateCityStateGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityStateGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityStateGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCityStateGuildSCmd));
  GvgOpenToServerGuildSCmd_descriptor_ = file->message_type(48);
  static const int GvgOpenToServerGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenToServerGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenToServerGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenToServerGuildSCmd, fire_),
  };
  GvgOpenToServerGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgOpenToServerGuildSCmd_descriptor_,
      GvgOpenToServerGuildSCmd::default_instance_,
      GvgOpenToServerGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenToServerGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgOpenToServerGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgOpenToServerGuildSCmd));
  ShopBuyItemGuildSCmd_descriptor_ = file->message_type(49);
  static const int ShopBuyItemGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, count_),
  };
  ShopBuyItemGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShopBuyItemGuildSCmd_descriptor_,
      ShopBuyItemGuildSCmd::default_instance_,
      ShopBuyItemGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShopBuyItemGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShopBuyItemGuildSCmd));
  JoinSuperGvgGuildSCmd_descriptor_ = file->message_type(50);
  static const int JoinSuperGvgGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, supergvgtime_),
  };
  JoinSuperGvgGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinSuperGvgGuildSCmd_descriptor_,
      JoinSuperGvgGuildSCmd::default_instance_,
      JoinSuperGvgGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinSuperGvgGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinSuperGvgGuildSCmd));
  EndSuperGvgGuildSCmd_descriptor_ = file->message_type(51);
  static const int EndSuperGvgGuildSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, rank_),
  };
  EndSuperGvgGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EndSuperGvgGuildSCmd_descriptor_,
      EndSuperGvgGuildSCmd::default_instance_,
      EndSuperGvgGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndSuperGvgGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EndSuperGvgGuildSCmd));
  UpdateCityGuildSCmd_descriptor_ = file->message_type(52);
  static const int UpdateCityGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, add_),
  };
  UpdateCityGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateCityGuildSCmd_descriptor_,
      UpdateCityGuildSCmd::default_instance_,
      UpdateCityGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateCityGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateCityGuildSCmd));
  GvgResultInfo_descriptor_ = file->message_type(53);
  static const int GvgResultInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, perfect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, times_),
  };
  GvgResultInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgResultInfo_descriptor_,
      GvgResultInfo::default_instance_,
      GvgResultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgResultInfo));
  GvgResultGuildSCmd_descriptor_ = file->message_type(54);
  static const int GvgResultGuildSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultGuildSCmd, infos_),
  };
  GvgResultGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GvgResultGuildSCmd_descriptor_,
      GvgResultGuildSCmd::default_instance_,
      GvgResultGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GvgResultGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GvgResultGuildSCmd));
  GuildBrocastMailGuildSCmd_descriptor_ = file->message_type(55);
  static const int GuildBrocastMailGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, items_),
  };
  GuildBrocastMailGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBrocastMailGuildSCmd_descriptor_,
      GuildBrocastMailGuildSCmd::default_instance_,
      GuildBrocastMailGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMailGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBrocastMailGuildSCmd));
  GuildBrocastMsgGuildSCmd_descriptor_ = file->message_type(56);
  static const int GuildBrocastMsgGuildSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, params_),
  };
  GuildBrocastMsgGuildSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildBrocastMsgGuildSCmd_descriptor_,
      GuildBrocastMsgGuildSCmd::default_instance_,
      GuildBrocastMsgGuildSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildBrocastMsgGuildSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildBrocastMsgGuildSCmd));
  GuildSParam_descriptor_ = file->enum_type(0);
  GuildOptConType_descriptor_ = file->enum_type(1);
  EPhotoAction_descriptor_ = file->enum_type(2);
  EGuildCityAction_descriptor_ = file->enum_type(3);
  EGuildCityResult_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildSCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGuildInfoSyncGuildSCmd_descriptor_, &UserGuildInfoSyncGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSyncGuildSCmd_descriptor_, &ChatSyncGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadLuaGuildSCmd_descriptor_, &LoadLuaGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUserInfo_descriptor_, &GuildUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildUserInfoSyncGuildCmd_descriptor_, &GuildUserInfoSyncGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildSMember_descriptor_, &GuildSMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildArtifactQuest_descriptor_, &GuildArtifactQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildGvgData_descriptor_, &GuildGvgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfo_descriptor_, &GuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildInfoSyncGuildSCmd_descriptor_, &GuildInfoSyncGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDataUpdateGuildSCmd_descriptor_, &GuildDataUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CityDataUpdateGuildSCmd_descriptor_, &CityDataUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberUpdateGuildSCmd_descriptor_, &GuildMemberUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMemberDataUpdateGuildSCmd_descriptor_, &GuildMemberDataUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildQuestUpdateGuildSCmd_descriptor_, &GuildQuestUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterGuildTerritoryGuildSCmd_descriptor_, &EnterGuildTerritoryGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefreshGuildTerritoryGuildSCmd_descriptor_, &RefreshGuildTerritoryGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryPhotoListGuildSCmd_descriptor_, &QueryPhotoListGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUserPhotoListGuildSCmd_descriptor_, &QueryUserPhotoListGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoLoad_descriptor_, &PhotoLoad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryShowPhotoGuildSCmd_descriptor_, &QueryShowPhotoGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameUpdateGuildSCmd_descriptor_, &FrameUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PhotoUpdateGuildSCmd_descriptor_, &PhotoUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobUpdateGuildSCmd_descriptor_, &JobUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildMusicDeleteGuildSCmd_descriptor_, &GuildMusicDeleteGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameNTFGuildCmd_descriptor_, &RenameNTFGuildCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildCityActionGuildSCmd_descriptor_, &GuildCityActionGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailGuildSCmd_descriptor_, &SendMailGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVGRewardGuildSCmd_descriptor_, &GVGRewardGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildPrayGuildSCmd_descriptor_, &GuildPrayGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildIconStateGuildSCmd_descriptor_, &GuildIconStateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingMaterial_descriptor_, &BuildingMaterial::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SubmitMaterialGuildSCmd_descriptor_, &SubmitMaterialGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingUpdateGuildSCmd_descriptor_, &BuildingUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryGuildInfoGuildSCmd_descriptor_, &QueryGuildInfoGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendWelfareGuildSCmd_descriptor_, &SendWelfareGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildChallengeItem_descriptor_, &GuildChallengeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeProgressGuildSCmd_descriptor_, &ChallengeProgressGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildGM_descriptor_, &GuildGM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCommandGuildSCmd_descriptor_, &GMCommandGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMCommandRespondGuildSCmd_descriptor_, &GMCommandRespondGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildingEffectGuildSCmd_descriptor_, &BuildingEffectGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArtifactUpdateGuildSCmd_descriptor_, &ArtifactUpdateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildArtifactQuestGuildSCmd_descriptor_, &GuildArtifactQuestGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryTreasureGuildSCmd_descriptor_, &QueryTreasureGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgUserPartInGuildSCmd_descriptor_, &GvgUserPartInGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreasureResultNtfGuildSCmd_descriptor_, &TreasureResultNtfGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCityStateGuildSCmd_descriptor_, &UpdateCityStateGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgOpenToServerGuildSCmd_descriptor_, &GvgOpenToServerGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShopBuyItemGuildSCmd_descriptor_, &ShopBuyItemGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinSuperGvgGuildSCmd_descriptor_, &JoinSuperGvgGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EndSuperGvgGuildSCmd_descriptor_, &EndSuperGvgGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateCityGuildSCmd_descriptor_, &UpdateCityGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgResultInfo_descriptor_, &GvgResultInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GvgResultGuildSCmd_descriptor_, &GvgResultGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBrocastMailGuildSCmd_descriptor_, &GuildBrocastMailGuildSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildBrocastMsgGuildSCmd_descriptor_, &GuildBrocastMsgGuildSCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildSCmd_2eproto() {
  delete UserGuildInfoSyncGuildSCmd::default_instance_;
  delete UserGuildInfoSyncGuildSCmd_reflection_;
  delete ChatSyncGuildSCmd::default_instance_;
  delete ChatSyncGuildSCmd_reflection_;
  delete LoadLuaGuildSCmd::default_instance_;
  delete LoadLuaGuildSCmd_reflection_;
  delete GuildUserInfo::default_instance_;
  delete GuildUserInfo_reflection_;
  delete GuildUserInfoSyncGuildCmd::default_instance_;
  delete GuildUserInfoSyncGuildCmd_reflection_;
  delete GuildSMember::default_instance_;
  delete GuildSMember_reflection_;
  delete GuildArtifactQuest::default_instance_;
  delete GuildArtifactQuest_reflection_;
  delete GuildGvgData::default_instance_;
  delete GuildGvgData_reflection_;
  delete GuildInfo::default_instance_;
  delete GuildInfo_reflection_;
  delete GuildInfoSyncGuildSCmd::default_instance_;
  delete GuildInfoSyncGuildSCmd_reflection_;
  delete GuildDataUpdateGuildSCmd::default_instance_;
  delete GuildDataUpdateGuildSCmd_reflection_;
  delete CityDataUpdateGuildSCmd::default_instance_;
  delete CityDataUpdateGuildSCmd_reflection_;
  delete GuildMemberUpdateGuildSCmd::default_instance_;
  delete GuildMemberUpdateGuildSCmd_reflection_;
  delete GuildMemberDataUpdateGuildSCmd::default_instance_;
  delete GuildMemberDataUpdateGuildSCmd_reflection_;
  delete GuildQuestUpdateGuildSCmd::default_instance_;
  delete GuildQuestUpdateGuildSCmd_reflection_;
  delete EnterGuildTerritoryGuildSCmd::default_instance_;
  delete EnterGuildTerritoryGuildSCmd_reflection_;
  delete RefreshGuildTerritoryGuildSCmd::default_instance_;
  delete RefreshGuildTerritoryGuildSCmd_reflection_;
  delete QueryPhotoListGuildSCmd::default_instance_;
  delete QueryPhotoListGuildSCmd_reflection_;
  delete QueryUserPhotoListGuildSCmd::default_instance_;
  delete QueryUserPhotoListGuildSCmd_reflection_;
  delete PhotoLoad::default_instance_;
  delete PhotoLoad_reflection_;
  delete QueryShowPhotoGuildSCmd::default_instance_;
  delete QueryShowPhotoGuildSCmd_reflection_;
  delete FrameUpdateGuildSCmd::default_instance_;
  delete FrameUpdateGuildSCmd_reflection_;
  delete PhotoUpdateGuildSCmd::default_instance_;
  delete PhotoUpdateGuildSCmd_reflection_;
  delete JobUpdateGuildSCmd::default_instance_;
  delete JobUpdateGuildSCmd_reflection_;
  delete GuildMusicDeleteGuildSCmd::default_instance_;
  delete GuildMusicDeleteGuildSCmd_reflection_;
  delete RenameNTFGuildCmd::default_instance_;
  delete RenameNTFGuildCmd_reflection_;
  delete GuildCityActionGuildSCmd::default_instance_;
  delete GuildCityActionGuildSCmd_reflection_;
  delete SendMailGuildSCmd::default_instance_;
  delete SendMailGuildSCmd_reflection_;
  delete GVGRewardGuildSCmd::default_instance_;
  delete GVGRewardGuildSCmd_reflection_;
  delete GuildPrayGuildSCmd::default_instance_;
  delete GuildPrayGuildSCmd_reflection_;
  delete GuildIconStateGuildSCmd::default_instance_;
  delete GuildIconStateGuildSCmd_reflection_;
  delete BuildingMaterial::default_instance_;
  delete BuildingMaterial_reflection_;
  delete SubmitMaterialGuildSCmd::default_instance_;
  delete SubmitMaterialGuildSCmd_reflection_;
  delete BuildingUpdateGuildSCmd::default_instance_;
  delete BuildingUpdateGuildSCmd_reflection_;
  delete QueryGuildInfoGuildSCmd::default_instance_;
  delete QueryGuildInfoGuildSCmd_reflection_;
  delete SendWelfareGuildSCmd::default_instance_;
  delete SendWelfareGuildSCmd_reflection_;
  delete GuildChallengeItem::default_instance_;
  delete GuildChallengeItem_reflection_;
  delete ChallengeProgressGuildSCmd::default_instance_;
  delete ChallengeProgressGuildSCmd_reflection_;
  delete GuildGM::default_instance_;
  delete GuildGM_reflection_;
  delete GMCommandGuildSCmd::default_instance_;
  delete GMCommandGuildSCmd_reflection_;
  delete GMCommandRespondGuildSCmd::default_instance_;
  delete GMCommandRespondGuildSCmd_reflection_;
  delete BuildingEffectGuildSCmd::default_instance_;
  delete BuildingEffectGuildSCmd_reflection_;
  delete ArtifactUpdateGuildSCmd::default_instance_;
  delete ArtifactUpdateGuildSCmd_reflection_;
  delete GuildArtifactQuestGuildSCmd::default_instance_;
  delete GuildArtifactQuestGuildSCmd_reflection_;
  delete QueryTreasureGuildSCmd::default_instance_;
  delete QueryTreasureGuildSCmd_reflection_;
  delete GvgUserPartInGuildSCmd::default_instance_;
  delete GvgUserPartInGuildSCmd_reflection_;
  delete TreasureResultNtfGuildSCmd::default_instance_;
  delete TreasureResultNtfGuildSCmd_reflection_;
  delete UpdateCityStateGuildSCmd::default_instance_;
  delete UpdateCityStateGuildSCmd_reflection_;
  delete GvgOpenToServerGuildSCmd::default_instance_;
  delete GvgOpenToServerGuildSCmd_reflection_;
  delete ShopBuyItemGuildSCmd::default_instance_;
  delete ShopBuyItemGuildSCmd_reflection_;
  delete JoinSuperGvgGuildSCmd::default_instance_;
  delete JoinSuperGvgGuildSCmd_reflection_;
  delete EndSuperGvgGuildSCmd::default_instance_;
  delete EndSuperGvgGuildSCmd_reflection_;
  delete UpdateCityGuildSCmd::default_instance_;
  delete UpdateCityGuildSCmd_reflection_;
  delete GvgResultInfo::default_instance_;
  delete GvgResultInfo_reflection_;
  delete GvgResultGuildSCmd::default_instance_;
  delete GvgResultGuildSCmd_reflection_;
  delete GuildBrocastMailGuildSCmd::default_instance_;
  delete GuildBrocastMailGuildSCmd_reflection_;
  delete GuildBrocastMsgGuildSCmd::default_instance_;
  delete GuildBrocastMsgGuildSCmd_reflection_;
}

void protobuf_AddDesc_GuildSCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_GuildCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SocialCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SessionMail_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GuildSCmd.proto\022\003Cmd\032\nxCmd.proto\032\016Guil"
    "dCmd.proto\032\017SocialCmd.proto\032\021SessionMail"
    ".proto\032\017SceneItem.proto\032\020SceneUser2.prot"
    "o\"\332\001\n\032UserGuildInfoSyncGuildSCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022@\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.GuildSParam:\037GUILDSPARA"
    "M_USER_GUILDINFO_SYNC\022\021\n\006charid\030\003 \001(\004:\0010"
    "\022\022\n\007guildid\030\004 \001(\004:\0010\022\021\n\tguildname\030\005 \001(\t\022"
    "\025\n\rguildportrait\030\006 \001(\t\"\247\001\n\021ChatSyncGuild"
    "SCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_P"
    "ROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam"
    ":\025GUILDSPARAM_CHAT_SYNC\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022\014\n\004data\030\004 \001(\014\022\016\n\003len\030\005 \001(\r:\0010\"\235\001\n\020Loa"
    "dLuaGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\016GUILD_PROTOCMD\0225\n\005param\030\002 \001(\0162\020.Cmd.Gu"
    "ildSParam:\024GUILDSPARAM_LOAD_LUA\022\r\n\005table"
    "\030\003 \001(\t\022\013\n\003lua\030\004 \001(\t\022\013\n\003log\030\005 \001(\t\"a\n\rGuil"
    "dUserInfo\022\024\n\tgiftpoint\030\001 \001(\r:\0010\022\025\n\ncontr"
    "ibute\030\002 \001(\r:\0010\022#\n\005prays\030\003 \003(\0132\024.Cmd.Guil"
    "dMemberPray\"\226\002\n\031GuildUserInfoSyncGuildCm"
    "d\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROT"
    "OCMD\022@\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\037G"
    "UILDSPARAM_GUILD_SYNC_USERINFO\022\021\n\006charid"
    "\030\003 \001(\004:\0010\022 \n\004info\030\004 \001(\0132\022.Cmd.GuildUserI"
    "nfo\022\026\n\007levelup\030\005 \001(\010:\005false\022\?\n\noptcontyp"
    "e\030\006 \001(\0162\024.Cmd.GuildOptConType:\025GUILDOPTC"
    "ONTYPE_LOGIN\"\342\001\n\014GuildSMember\022\021\n\006charid\030"
    "\001 \001(\004:\0010\022\025\n\nonlinetime\030\002 \001(\r:\0010\022\024\n\tenter"
    "time\030\003 \001(\r:\0010\022*\n\003job\030\004 \001(\0162\016.Cmd.EGuildJ"
    "ob:\rEGUILDJOB_MIN\022\014\n\004name\030\005 \001(\t\022\020\n\005accid"
    "\030\006 \001(\004:\0010\022\026\n\013offlinetime\030\007 \001(\r:\0010\022\017\n\004aut"
    "h\030\010 \001(\r:\0010\022\035\n\016buildingeffect\030\t \001(\010:\005fals"
    "e\"E\n\022GuildArtifactQuest\022\021\n\tsubmitids\030\001 \003"
    "(\r\022\034\n\005datas\030\002 \003(\0132\r.Cmd.ItemData\")\n\014Guil"
    "dGvgData\022\031\n\ninsupergvg\030\001 \001(\010:\005false\"\327\003\n\t"
    "GuildInfo\022\r\n\002id\030\001 \001(\004:\0010\022\021\n\006zoneid\030\002 \001(\r"
    ":\0010\022\r\n\002lv\030\003 \001(\r:\0010\022\020\n\005scene\030\004 \001(\r:\0010\022\017\n\004"
    "auth\030\014 \001(\r:\0010\022\025\n\006create\030\005 \001(\010:\005false\022\014\n\004"
    "name\030\006 \001(\t\022\020\n\010portrait\030\007 \001(\t\022\017\n\007jobname\030"
    "\010 \001(\t\022\"\n\007members\030\n \003(\0132\021.Cmd.GuildSMembe"
    "r\022\037\n\006quests\030\013 \003(\0132\017.Cmd.GuildQuest\022(\n\010bu"
    "ilding\030\r \001(\0132\026.Cmd.GuildBuildingData\022\027\n\014"
    "openfunction\030\016 \001(\004:\0010\022\'\n\nchallenges\030\017 \003("
    "\0132\023.Cmd.GuildChallenge\022-\n\rartifactitems\030"
    "\020 \003(\0132\026.Cmd.GuildArtifactItem\022.\n\rartifac"
    "equest\030\021 \001(\0132\027.Cmd.GuildArtifactQuest\022\036\n"
    "\003gvg\030\022 \001(\0132\021.Cmd.GuildGvgData\"\254\001\n\026GuildI"
    "nfoSyncGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\016GUILD_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd"
    ".GuildSParam:\025GUILDSPARAM_SYNC_INFO\022\021\n\006c"
    "harid\030\003 \001(\004:\0010\022\034\n\004info\030\004 \001(\0132\016.Cmd.Guild"
    "Info\"\276\001\n\030GuildDataUpdateGuildSCmd\022)\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022=\n\005"
    "param\030\002 \001(\0162\020.Cmd.GuildSParam:\034GUILDSPAR"
    "AM_UPDATE_GUILDDATA\022\021\n\006charid\030\003 \001(\004:\0010\022%"
    "\n\007updates\030\004 \003(\0132\024.Cmd.GuildDataUpdate\"\350\001"
    "\n\027CityDataUpdateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016GUILD_PROTOCMD\022<\n\005param\030\002 "
    "\001(\0162\020.Cmd.GuildSParam:\033GUILDSPARAM_UPDAT"
    "E_CITYDATA\022\021\n\006cityid\030\003 \001(\004:\0010\022\026\n\013memberc"
    "ount\030\004 \001(\r:\0010\022%\n\007updates\030\005 \003(\0132\024.Cmd.Gui"
    "ldDataUpdate\022\022\n\nleadername\030\006 \001(\t\"\310\001\n\032Gui"
    "ldMemberUpdateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\016GUILD_PROTOCMD\022:\n\005param\030\002 \001("
    "\0162\020.Cmd.GuildSParam:\031GUILDSPARAM_UPDATE_"
    "MEMBER\022\021\n\006charid\030\003 \001(\004:\0010\022\"\n\007updates\030\004 \003"
    "(\0132\021.Cmd.GuildSMember\022\014\n\004dels\030\005 \003(\004\"\336\001\n\036"
    "GuildMemberDataUpdateGuildSCmd\022)\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022>\n\005par"
    "am\030\002 \001(\0162\020.Cmd.GuildSParam:\035GUILDSPARAM_"
    "UPDATE_MEMBERDATA\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\006"
    "destid\030\004 \001(\004:\0010\022+\n\007updates\030\005 \003(\0132\032.Cmd.G"
    "uildMemberDataUpdate\"\304\001\n\031GuildQuestUpdat"
    "eGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016G"
    "UILD_PROTOCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.Guild"
    "SParam:\030GUILDSPARAM_UPDATE_QUEST\022\021\n\006char"
    "id\030\003 \001(\004:\0010\022 \n\007updates\030\004 \003(\0132\017.Cmd.Guild"
    "Quest\022\014\n\004dels\030\005 \003(\r\"\270\001\n\034EnterGuildTerrit"
    "oryGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\016GUILD_PROTOCMD\022<\n\005param\030\002 \001(\0162\020.Cmd.Gui"
    "ldSParam:\033GUILDSPARAM_ENTER_TERRITORY\022\021\n"
    "\006charid\030\003 \001(\004:\0010\022\034\n\004info\030\004 \001(\0132\016.Cmd.Gui"
    "ldInfo\"\275\001\n\036RefreshGuildTerritoryGuildSCm"
    "d\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROT"
    "OCMD\022>\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\035G"
    "UILDSPARAM_REFRESH_TERRITORY\022\022\n\007sceneid\030"
    "\003 \001(\004:\0010\022\034\n\004info\030\004 \001(\0132\016.Cmd.GuildInfo\"\342"
    "\001\n\027QueryPhotoListGuildSCmd\022)\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\016GUILD_PROTOCMD\022<\n\005param\030\002"
    " \001(\0162\020.Cmd.GuildSParam:\033GUILDSPARAM_QUER"
    "Y_PHOTOLIST\022\022\n\007guildid\030\003 \001(\004:\0010\022\022\n\007scene"
    "id\030\004 \001(\r:\0010\022\025\n\006result\030\005 \001(\010:\005false\022\037\n\006fr"
    "ames\030\006 \003(\0132\017.Cmd.PhotoFrame\"\365\001\n\033QueryUse"
    "rPhotoListGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016GUILD_PROTOCMD\022@\n\005param\030\002 \001(\0162\020."
    "Cmd.GuildSParam:\037GUILDSPARAM_QUERY_USERP"
    "HOTOLIST\022\022\n\007guildid\030\003 \001(\004:\0010\022\025\n\006result\030\004"
    " \001(\010:\005false\022\035\n\004user\030\005 \001(\0132\017.Cmd.SocialUs"
    "er\022\037\n\006frames\030\006 \003(\0132\017.Cmd.PhotoFrame\"1\n\tP"
    "hotoLoad\022\022\n\007frameid\030\001 \001(\r:\0010\022\020\n\005count\030\002 "
    "\001(\r:\0010\"\261\002\n\027QueryShowPhotoGuildSCmd\022)\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022@\n"
    "\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\037GUILDSPA"
    "RAM_QUERY_SHOWPHOTOLIST\0223\n\006action\030\003 \001(\0162"
    "\021.Cmd.EPhotoAction:\020EPHOTOACTION_MIN\022\022\n\007"
    "guildid\030\004 \001(\004:\0010\022\035\n\005loads\030\005 \003(\0132\016.Cmd.Ph"
    "otoLoad\022\016\n\006exists\030\006 \003(\t\022\017\n\007members\030\007 \003(\004"
    "\022 \n\007results\030\010 \003(\0132\017.Cmd.PhotoFrame\"\343\001\n\024F"
    "rameUpdateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016GUILD_PROTOCMD\0229\n\005param\030\002 \001(\0162\020."
    "Cmd.GuildSParam:\030GUILDSPARAM_FRAME_UPDAT"
    "E\022\022\n\007guildid\030\003 \001(\004:\0010\022\022\n\007frameid\030\004 \001(\r:\001"
    "0\022\037\n\006update\030\005 \001(\0132\017.Cmd.GuildPhoto\022\034\n\003de"
    "l\030\006 \001(\0132\017.Cmd.GuildPhoto\"\374\001\n\024PhotoUpdate"
    "GuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GU"
    "ILD_PROTOCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.GuildS"
    "Param:\030GUILDSPARAM_PHOTO_UPDATE\022\022\n\007guild"
    "id\030\003 \001(\004:\0010\022\022\n\007sceneid\030\004 \001(\r:\0010\022\037\n\006updat"
    "e\030\005 \001(\0132\017.Cmd.GuildPhoto\022\034\n\003del\030\006 \001(\0132\017."
    "Cmd.GuildPhoto\022\027\n\010to_guild\030\007 \001(\010:\005false\""
    "\273\001\n\022JobUpdateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\016GUILD_PROTOCMD\0227\n\005param\030\002 \001(\016"
    "2\020.Cmd.GuildSParam:\026GUILDSPARAM_JOB_UPDA"
    "TE\022\022\n\007guildid\030\003 \001(\004:\0010\022\021\n\006charid\030\004 \001(\004:\001"
    "0\022\032\n\003job\030\005 \001(\0132\r.Cmd.GuildJob\"\233\001\n\031GuildM"
    "usicDeleteGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016GUILD_PROTOCMD\022\?\n\005param\030\002 \001(\0162\020."
    "Cmd.GuildSParam:\036GUILDSPARAM_GUILD_MUSIC"
    "_DELETE\022\022\n\007guildid\030\003 \001(\004:\0010\"\275\001\n\021RenameNT"
    "FGuildCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GU"
    "ILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.GuildS"
    "Param:\026GUILDSPARAM_RENAME_NTF\022\035\n\004user\030\003 "
    "\001(\0132\017.Cmd.SocialUser\022\017\n\007newname\030\004 \001(\t\022\024\n"
    "\006result\030\005 \001(\010:\004true\"\205\003\n\030GuildCityActionG"
    "uildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUI"
    "LD_PROTOCMD\022>\n\005param\030\002 \001(\0162\020.Cmd.GuildSP"
    "aram:\035GUILDSPARAM_GUILD_CITY_ACTION\022;\n\006a"
    "ction\030\003 \001(\0162\025.Cmd.EGuildCityAction:\024EGUI"
    "LDCITYACTION_MIN\022;\n\006status\030\004 \001(\0162\025.Cmd.E"
    "GuildCityStatus:\024EGUILDCITYSTATUS_MIN\022;\n"
    "\006result\030\005 \001(\0162\025.Cmd.EGuildCityResult:\024EG"
    "UILDCITYRESULT_MIN\022\021\n\006zoneid\030\006 \001(\r:\0010\022\021\n"
    "\tscenename\030\007 \001(\t\022!\n\005infos\030\010 \003(\0132\022.Cmd.Gu"
    "ildCityInfo\"\223\001\n\021SendMailGuildSCmd\022)\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\0226\n\005"
    "param\030\002 \001(\0162\020.Cmd.GuildSParam:\025GUILDSPAR"
    "AM_SEND_MAIL\022\033\n\004data\030\003 \001(\0132\r.Cmd.MailDat"
    "a\"\214\001\n\022GVGRewardGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\016GUILD_PROTOCMD\0227\n\005param\030\002 \001"
    "(\0162\020.Cmd.GuildSParam:\026GUILDSPARAM_GVG_RE"
    "WARD\022\022\n\007guildid\030\003 \001(\004:\0010\"\235\002\n\022GuildPrayGu"
    "ildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUIL"
    "D_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.GuildSPa"
    "ram:\025GUILDSPARAM_GUILDPRAY\022\035\n\004user\030\003 \001(\013"
    "2\017.Cmd.SocialUser\022\020\n\005npcid\030\004 \001(\004:\0010\022\021\n\006p"
    "rayid\030\005 \001(\r:\0010\022\021\n\006praylv\030\006 \001(\r:\0010\022\022\n\007nee"
    "dcon\030\007 \001(\r:\0010\022\022\n\007needmon\030\010 \001(\r:\0010\022\023\n\010pra"
    "yitem\030\t \001(\r:\0010\022\020\n\005msgid\030\n \001(\r:\0010\"\274\001\n\027Gui"
    "ldIconStateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\016GUILD_PROTOCMD\022=\n\005param\030\002 \001(\0162\020"
    ".Cmd.GuildSParam:\034GUILDSPARAM_GUILD_ICON"
    "_STATE\022\013\n\003ids\030\003 \003(\004\022*\n\005state\030\004 \001(\0162\017.Cmd"
    ".EIconState:\nEICON_INIT\"3\n\020BuildingMater"
    "ial\022\r\n\002id\030\001 \001(\r:\0010\022\020\n\005count\030\002 \001(\r:\0010\"\351\002\n"
    "\027SubmitMaterialGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\016GUILD_PROTOCMD\022<\n\005param\030\002 \001"
    "(\0162\020.Cmd.GuildSParam:\033GUILDSPARAM_SUBMIT"
    "_MATERIAL\022\021\n\006charid\030\003 \001(\004:\0010\0229\n\010building"
    "\030\004 \001(\0162\023.Cmd.EGuildBuilding:\022EGUILDBUILD"
    "ING_MIN\022(\n\tmaterials\030\005 \003(\0132\025.Cmd.Buildin"
    "gMaterial\022\026\n\013submitcount\030\006 \001(\r:\0010\022\022\n\007cou"
    "nter\030\007 \001(\r:\0010\022\026\n\007success\030\010 \001(\010:\005false\022\023\n"
    "\010curlevel\030\t \001(\r:\0010\022\024\n\tsubmitinc\030\n \001(\r:\0010"
    "\"\342\001\n\027BuildingUpdateGuildSCmd\022)\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022<\n\005param"
    "\030\002 \001(\0162\020.Cmd.GuildSParam:\033GUILDSPARAM_BU"
    "ILDING_UPDATE\022\022\n\007guildid\030\003 \001(\004:\0010\022\022\n\007sce"
    "neid\030\004 \001(\004:\0010\022#\n\007updates\030\005 \003(\0132\022.Cmd.Gui"
    "ldBuilding\022\021\n\006charid\030\006 \001(\004:\0010\"\340\001\n\027QueryG"
    "uildInfoGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\016GUILD_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cm"
    "d.GuildSParam:\034GUILDSPARAM_QUERY_GUILD_I"
    "NFO\022\022\n\007guildid\030\003 \001(\004:\0010\022\022\n\007sceneid\030\004 \001(\004"
    ":\0010\022\034\n\004info\030\005 \001(\0132\016.Cmd.GuildInfo\022\025\n\006res"
    "ult\030\006 \001(\010:\005false\"\265\001\n\024SendWelfareGuildSCm"
    "d\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROT"
    "OCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\030G"
    "UILDSPARAM_SEND_WELFARE\022\021\n\006charid\030\003 \001(\004:"
    "\0010\022$\n\005items\030\004 \003(\0132\025.Cmd.GuildWelfareItem"
    "\"8\n\022GuildChallengeItem\022\r\n\002id\030\001 \001(\r:\0010\022\023\n"
    "\010progress\030\002 \001(\r:\0010\"\327\001\n\032ChallengeProgress"
    "GuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GU"
    "ILD_PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.GuildS"
    "Param:\036GUILDSPARAM_CHALLENGE_PROGRESS\022\022\n"
    "\007guildid\030\003 \001(\004:\0010\022\021\n\006charid\030\004 \001(\004:\0010\022&\n\005"
    "items\030\005 \003(\0132\027.Cmd.GuildChallengeItem\"g\n\007"
    "GuildGM\022\021\n\006zoneid\030\001 \001(\r:\0010\022\024\n\tsessionid\030"
    "\002 \001(\r:\0010\022\022\n\007guildid\030\003 \001(\004:\0010\022\021\n\006charid\030\004"
    " \001(\004:\0010\022\014\n\004name\030\005 \001(\t\"\245\001\n\022GMCommandGuild"
    "SCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_P"
    "ROTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam"
    ":\026GUILDSPARAM_GM_COMMAND\022\032\n\004info\030\003 \001(\0132\014"
    ".Cmd.GuildGM\022\017\n\007command\030\004 \001(\t\"\233\001\n\031GMComm"
    "andRespondGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\016GUILD_PROTOCMD\0227\n\005param\030\002 \001(\0162\020."
    "Cmd.GuildSParam:\026GUILDSPARAM_GM_RESPOND\022"
    "\032\n\004info\030\003 \001(\0132\014.Cmd.GuildGM\"\224\001\n\027Building"
    "EffectGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\016GUILD_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd."
    "GuildSParam:\032GUILDSPARAM_BUILDINGEFFECT\022"
    "\021\n\006charid\030\003 \001(\004:\0010\"\374\001\n\027ArtifactUpdateGui"
    "ldSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD"
    "_PROTOCMD\022<\n\005param\030\002 \001(\0162\020.Cmd.GuildSPar"
    "am:\033GUILDSPARAM_ARTIFACT_UPDATE\022\021\n\006chari"
    "d\030\004 \001(\004:\0010\022\022\n\007guildid\030\005 \001(\004:\0010\022\022\n\007scenei"
    "d\030\006 \001(\004:\0010\022+\n\013itemupdates\030\007 \003(\0132\026.Cmd.Gu"
    "ildArtifactItem\022\020\n\010itemdels\030\010 \003(\t\"\300\001\n\033Gu"
    "ildArtifactQuestGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016GUILD_PROTOCMD\022;\n\005param\030\002 "
    "\001(\0162\020.Cmd.GuildSParam:\032GUILDSPARAM_QUEST"
    "_ARTIFACT\022\021\n\006charid\030\003 \001(\004:\0010\022&\n\005quest\030\004 "
    "\001(\0132\027.Cmd.GuildArtifactQuest\"\226\002\n\026QueryTr"
    "easureGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\016GUILD_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd."
    "GuildSParam:\032GUILDSPARAM_TREASURE_QUERY\022"
    "\022\n\007guildid\030\003 \001(\004:\0010\022\022\n\007sceneid\030\004 \001(\r:\0010\022"
    "\025\n\006result\030\005 \001(\010:\005false\022%\n\ttreasures\030\006 \003("
    "\0132\022.Cmd.GuildTreasure\022\026\n\013bcoin_count\030\007 \001"
    "(\r:\0010\022\026\n\013asset_count\030\010 \001(\r:\0010\"\242\001\n\026GvgUse"
    "rPartInGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\016GUILD_PROTOCMD\022<\n\005param\030\002 \001(\0162\020.Cmd"
    ".GuildSParam:\033GUILDSPARAM_GVG_USER_PARTI"
    "N\022\017\n\007guildid\030\003 \002(\004\022\016\n\006charid\030\004 \002(\004\"\300\001\n\032T"
    "reasureResultNtfGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\016GUILD_PROTOCMD\022\?\n\005param\030\002 "
    "\001(\0162\020.Cmd.GuildSParam:\036GUILDSPARAM_TREAS"
    "URE_RESULTNTF\022\021\n\006charid\030\003 \001(\004:\0010\022#\n\006resu"
    "lt\030\004 \001(\0132\023.Cmd.TreasureResult\"\246\001\n\030Update"
    "CityStateGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\016GUILD_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.C"
    "md.GuildSParam:\034GUILDSPARAM_UPDATE_CITYS"
    "TATE\022 \n\005infos\030\003 \003(\0132\021.Cmd.CityShowInfo\"\221"
    "\001\n\030GvgOpenToServerGuildSCmd\022)\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\016GUILD_PROTOCMD\0225\n\005param\030"
    "\002 \001(\0162\020.Cmd.GuildSParam:\024GUILDSPARAM_OPE"
    "N_GVG\022\023\n\004fire\030\003 \001(\010:\005false\"\261\001\n\024ShopBuyIt"
    "emGuildSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016"
    "GUILD_PROTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd.Guil"
    "dSParam:\031GUILDSPARAM_SHOP_BUY_ITEM\022\021\n\006ch"
    "arid\030\003 \001(\004:\0010\022\r\n\002id\030\004 \001(\r:\0010\022\020\n\005count\030\005 "
    "\001(\r:\0010\"\253\001\n\025JoinSuperGvgGuildSCmd\022)\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD\022=\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.GuildSParam:\034GUILDSPARA"
    "M_JOINSUPERGVG_REQ\022\017\n\007guildid\030\003 \002(\004\022\027\n\014s"
    "upergvgtime\030\004 \001(\r:\0010\"\233\001\n\024EndSuperGvgGuil"
    "dSCmd\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_"
    "PROTOCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.GuildSPara"
    "m:\030GUILDSPARAM_SUPERGVG_END\022\017\n\007guildid\030\003"
    " \002(\004\022\014\n\004rank\030\004 \002(\r\"\265\001\n\023UpdateCityGuildSC"
    "md\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PRO"
    "TOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\027"
    "GUILDSPARAM_UPDATE_CITY\022\022\n\007guildid\030\003 \001(\004"
    ":\0010\022\021\n\006cityid\030\004 \001(\r:\0010\022\022\n\003add\030\005 \001(\010:\005fal"
    "se\"\201\001\n\rGvgResultInfo\022\016\n\006cityid\030\001 \002(\r\022\017\n\007"
    "guildid\030\002 \001(\004\022\021\n\tguildname\030\003 \001(\t\022\022\n\nlead"
    "ername\030\004 \001(\t\022\026\n\007perfect\030\005 \001(\010:\005false\022\020\n\005"
    "times\030\006 \001(\r:\0010\"\233\001\n\022GvgResultGuildSCmd\022)\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD"
    "\0227\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\026GUILD"
    "SPARAM_GVG_RESULT\022!\n\005infos\030\003 \003(\0132\022.Cmd.G"
    "vgResultInfo\"\301\001\n\031GuildBrocastMailGuildSC"
    "md\022)\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PRO"
    "TOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\026"
    "GUILDSPARAM_GUILD_MAIL\022\017\n\007guildid\030\003 \002(\004\022"
    "\021\n\006mailid\030\004 \001(\r:\0010\022\034\n\005items\030\005 \003(\0132\r.Cmd."
    "ItemInfo\"\274\001\n\030GuildBrocastMsgGuildSCmd\022)\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\016GUILD_PROTOCMD"
    "\0226\n\005param\030\002 \001(\0162\020.Cmd.GuildSParam:\025GUILD"
    "SPARAM_GUILD_MSG\022\017\n\007guildid\030\003 \002(\004\022\r\n\005msg"
    "id\030\004 \002(\r\022\035\n\006params\030\005 \003(\0132\r.Cmd.MsgParam*"
    "\327\013\n\013GuildSParam\022#\n\037GUILDSPARAM_USER_GUIL"
    "DINFO_SYNC\020\001\022\031\n\025GUILDSPARAM_CHAT_SYNC\020\002\022"
    "\030\n\024GUILDSPARAM_LOAD_LUA\020\003\022#\n\037GUILDSPARAM"
    "_GUILD_SYNC_USERINFO\020\004\022\031\n\025GUILDSPARAM_SY"
    "NC_INFO\020\005\022 \n\034GUILDSPARAM_UPDATE_GUILDDAT"
    "A\020\006\022\037\n\033GUILDSPARAM_UPDATE_CITYDATA\020\007\022\035\n\031"
    "GUILDSPARAM_UPDATE_MEMBER\020\010\022!\n\035GUILDSPAR"
    "AM_UPDATE_MEMBERDATA\020\t\022\034\n\030GUILDSPARAM_UP"
    "DATE_QUEST\020\n\022\037\n\033GUILDSPARAM_ENTER_TERRIT"
    "ORY\020\013\022!\n\035GUILDSPARAM_REFRESH_TERRITORY\020\014"
    "\022\037\n\033GUILDSPARAM_QUERY_PHOTOLIST\020\016\022#\n\037GUI"
    "LDSPARAM_QUERY_USERPHOTOLIST\020\017\022#\n\037GUILDS"
    "PARAM_QUERY_SHOWPHOTOLIST\020\020\022\034\n\030GUILDSPAR"
    "AM_FRAME_UPDATE\020\021\022\034\n\030GUILDSPARAM_PHOTO_U"
    "PDATE\020\022\022\032\n\026GUILDSPARAM_JOB_UPDATE\020\023\022\"\n\036G"
    "UILDSPARAM_GUILD_MUSIC_DELETE\020\024\022\032\n\026GUILD"
    "SPARAM_RENAME_NTF\020\025\022!\n\035GUILDSPARAM_GUILD"
    "_CITY_ACTION\020\026\022\031\n\025GUILDSPARAM_SEND_MAIL\020"
    "\027\022\032\n\026GUILDSPARAM_GVG_REWARD\020\030\022\031\n\025GUILDSP"
    "ARAM_GUILDPRAY\020\031\022 \n\034GUILDSPARAM_GUILD_IC"
    "ON_STATE\020\032\022\037\n\033GUILDSPARAM_SUBMIT_MATERIA"
    "L\020\033\022\037\n\033GUILDSPARAM_BUILDING_UPDATE\020\034\022 \n\034"
    "GUILDSPARAM_QUERY_GUILD_INFO\020\035\022\034\n\030GUILDS"
    "PARAM_SEND_WELFARE\020\036\022\"\n\036GUILDSPARAM_CHAL"
    "LENGE_PROGRESS\020\037\022\032\n\026GUILDSPARAM_GM_COMMA"
    "ND\020 \022\032\n\026GUILDSPARAM_GM_RESPOND\020!\022\036\n\032GUIL"
    "DSPARAM_BUILDINGEFFECT\020\"\022\037\n\033GUILDSPARAM_"
    "ARTIFACT_UPDATE\020#\022\036\n\032GUILDSPARAM_QUEST_A"
    "RTIFACT\020$\022\036\n\032GUILDSPARAM_TREASURE_QUERY\020"
    "%\022\037\n\033GUILDSPARAM_GVG_USER_PARTIN\020&\022\"\n\036GU"
    "ILDSPARAM_TREASURE_RESULTNTF\020\'\022\030\n\024GUILDS"
    "PARAM_OPEN_GVG\020(\022 \n\034GUILDSPARAM_UPDATE_C"
    "ITYSTATE\020)\022 \n\034GUILDSPARAM_JOINSUPERGVG_R"
    "EQ\020*\022\034\n\030GUILDSPARAM_SUPERGVG_END\020+\022\035\n\031GU"
    "ILDSPARAM_SHOP_BUY_ITEM\020,\022\032\n\026GUILDSPARAM"
    "_GVG_RESULT\020-\022\033\n\027GUILDSPARAM_UPDATE_CITY"
    "\020.\022\032\n\026GUILDSPARAM_GUILD_MAIL\0200\022\031\n\025GUILDS"
    "PARAM_GUILD_MSG\0201*^\n\017GuildOptConType\022\031\n\025"
    "GUILDOPTCONTYPE_LOGIN\020\000\022\027\n\023GUILDOPTCONTY"
    "PE_ADD\020\001\022\027\n\023GUILDOPTCONTYPE_SUB\020\002*\310\001\n\014EP"
    "hotoAction\022\024\n\020EPHOTOACTION_MIN\020\000\022!\n\035EPHO"
    "TOACTION_LOAD_FROM_RECORD\020\001\022#\n\037EPHOTOACT"
    "ION_UPDATE_FROM_RECORD\020\002\022 \n\034EPHOTOACTION"
    "_LOAD_FROM_SCENE\020\003\022\"\n\036EPHOTOACTION_UPDAT"
    "E_FROM_SCENE\020\004\022\024\n\020EPHOTOACTION_MAX\020\005*\242\002\n"
    "\020EGuildCityAction\022\030\n\024EGUILDCITYACTION_MI"
    "N\020\000\022\"\n\036EGUILDCITYACTION_TO_GUILD_SAVE\020\001\022"
    "#\n\037EGUILDCITYACTION_TO_GUILD_RESET\020\002\022#\n\037"
    "EGUILDCITYACTION_TO_RECORD_SAVE\020\003\022$\n EGU"
    "ILDCITYACTION_TO_GUILD_UPDATE\020\004\022$\n EGUIL"
    "DCITYACTION_TO_SCENE_UPDATE\020\005\022 \n\034EGUILDC"
    "ITYACTION_GUILD_QUERY\020\006\022\030\n\024EGUILDCITYACT"
    "ION_MAX\020\007*\325\001\n\020EGuildCityResult\022\030\n\024EGUILD"
    "CITYRESULT_MIN\020\000\022\031\n\025EGUILDCITYRESULT_LOA"
    "D\020\001\022\033\n\027EGUILDCITYRESULT_OCCUPY\020\002\022\034\n\030EGUI"
    "LDCITYRESULT_NOOWNER\020\003\022\033\n\027EGUILDCITYRESU"
    "LT_GIVEUP\020\004\022\032\n\026EGUILDCITYRESULT_OTHER\020\005\022"
    "\030\n\024EGUILDCITYRESULT_MAX\020\006", 13505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildSCmd.proto", &protobuf_RegisterTypes);
  UserGuildInfoSyncGuildSCmd::default_instance_ = new UserGuildInfoSyncGuildSCmd();
  ChatSyncGuildSCmd::default_instance_ = new ChatSyncGuildSCmd();
  LoadLuaGuildSCmd::default_instance_ = new LoadLuaGuildSCmd();
  GuildUserInfo::default_instance_ = new GuildUserInfo();
  GuildUserInfoSyncGuildCmd::default_instance_ = new GuildUserInfoSyncGuildCmd();
  GuildSMember::default_instance_ = new GuildSMember();
  GuildArtifactQuest::default_instance_ = new GuildArtifactQuest();
  GuildGvgData::default_instance_ = new GuildGvgData();
  GuildInfo::default_instance_ = new GuildInfo();
  GuildInfoSyncGuildSCmd::default_instance_ = new GuildInfoSyncGuildSCmd();
  GuildDataUpdateGuildSCmd::default_instance_ = new GuildDataUpdateGuildSCmd();
  CityDataUpdateGuildSCmd::default_instance_ = new CityDataUpdateGuildSCmd();
  GuildMemberUpdateGuildSCmd::default_instance_ = new GuildMemberUpdateGuildSCmd();
  GuildMemberDataUpdateGuildSCmd::default_instance_ = new GuildMemberDataUpdateGuildSCmd();
  GuildQuestUpdateGuildSCmd::default_instance_ = new GuildQuestUpdateGuildSCmd();
  EnterGuildTerritoryGuildSCmd::default_instance_ = new EnterGuildTerritoryGuildSCmd();
  RefreshGuildTerritoryGuildSCmd::default_instance_ = new RefreshGuildTerritoryGuildSCmd();
  QueryPhotoListGuildSCmd::default_instance_ = new QueryPhotoListGuildSCmd();
  QueryUserPhotoListGuildSCmd::default_instance_ = new QueryUserPhotoListGuildSCmd();
  PhotoLoad::default_instance_ = new PhotoLoad();
  QueryShowPhotoGuildSCmd::default_instance_ = new QueryShowPhotoGuildSCmd();
  FrameUpdateGuildSCmd::default_instance_ = new FrameUpdateGuildSCmd();
  PhotoUpdateGuildSCmd::default_instance_ = new PhotoUpdateGuildSCmd();
  JobUpdateGuildSCmd::default_instance_ = new JobUpdateGuildSCmd();
  GuildMusicDeleteGuildSCmd::default_instance_ = new GuildMusicDeleteGuildSCmd();
  RenameNTFGuildCmd::default_instance_ = new RenameNTFGuildCmd();
  GuildCityActionGuildSCmd::default_instance_ = new GuildCityActionGuildSCmd();
  SendMailGuildSCmd::default_instance_ = new SendMailGuildSCmd();
  GVGRewardGuildSCmd::default_instance_ = new GVGRewardGuildSCmd();
  GuildPrayGuildSCmd::default_instance_ = new GuildPrayGuildSCmd();
  GuildIconStateGuildSCmd::default_instance_ = new GuildIconStateGuildSCmd();
  BuildingMaterial::default_instance_ = new BuildingMaterial();
  SubmitMaterialGuildSCmd::default_instance_ = new SubmitMaterialGuildSCmd();
  BuildingUpdateGuildSCmd::default_instance_ = new BuildingUpdateGuildSCmd();
  QueryGuildInfoGuildSCmd::default_instance_ = new QueryGuildInfoGuildSCmd();
  SendWelfareGuildSCmd::default_instance_ = new SendWelfareGuildSCmd();
  GuildChallengeItem::default_instance_ = new GuildChallengeItem();
  ChallengeProgressGuildSCmd::default_instance_ = new ChallengeProgressGuildSCmd();
  GuildGM::default_instance_ = new GuildGM();
  GMCommandGuildSCmd::default_instance_ = new GMCommandGuildSCmd();
  GMCommandRespondGuildSCmd::default_instance_ = new GMCommandRespondGuildSCmd();
  BuildingEffectGuildSCmd::default_instance_ = new BuildingEffectGuildSCmd();
  ArtifactUpdateGuildSCmd::default_instance_ = new ArtifactUpdateGuildSCmd();
  GuildArtifactQuestGuildSCmd::default_instance_ = new GuildArtifactQuestGuildSCmd();
  QueryTreasureGuildSCmd::default_instance_ = new QueryTreasureGuildSCmd();
  GvgUserPartInGuildSCmd::default_instance_ = new GvgUserPartInGuildSCmd();
  TreasureResultNtfGuildSCmd::default_instance_ = new TreasureResultNtfGuildSCmd();
  UpdateCityStateGuildSCmd::default_instance_ = new UpdateCityStateGuildSCmd();
  GvgOpenToServerGuildSCmd::default_instance_ = new GvgOpenToServerGuildSCmd();
  ShopBuyItemGuildSCmd::default_instance_ = new ShopBuyItemGuildSCmd();
  JoinSuperGvgGuildSCmd::default_instance_ = new JoinSuperGvgGuildSCmd();
  EndSuperGvgGuildSCmd::default_instance_ = new EndSuperGvgGuildSCmd();
  UpdateCityGuildSCmd::default_instance_ = new UpdateCityGuildSCmd();
  GvgResultInfo::default_instance_ = new GvgResultInfo();
  GvgResultGuildSCmd::default_instance_ = new GvgResultGuildSCmd();
  GuildBrocastMailGuildSCmd::default_instance_ = new GuildBrocastMailGuildSCmd();
  GuildBrocastMsgGuildSCmd::default_instance_ = new GuildBrocastMsgGuildSCmd();
  UserGuildInfoSyncGuildSCmd::default_instance_->InitAsDefaultInstance();
  ChatSyncGuildSCmd::default_instance_->InitAsDefaultInstance();
  LoadLuaGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildUserInfo::default_instance_->InitAsDefaultInstance();
  GuildUserInfoSyncGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildSMember::default_instance_->InitAsDefaultInstance();
  GuildArtifactQuest::default_instance_->InitAsDefaultInstance();
  GuildGvgData::default_instance_->InitAsDefaultInstance();
  GuildInfo::default_instance_->InitAsDefaultInstance();
  GuildInfoSyncGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildDataUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  CityDataUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildMemberUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildMemberDataUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildQuestUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  EnterGuildTerritoryGuildSCmd::default_instance_->InitAsDefaultInstance();
  RefreshGuildTerritoryGuildSCmd::default_instance_->InitAsDefaultInstance();
  QueryPhotoListGuildSCmd::default_instance_->InitAsDefaultInstance();
  QueryUserPhotoListGuildSCmd::default_instance_->InitAsDefaultInstance();
  PhotoLoad::default_instance_->InitAsDefaultInstance();
  QueryShowPhotoGuildSCmd::default_instance_->InitAsDefaultInstance();
  FrameUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  PhotoUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  JobUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildMusicDeleteGuildSCmd::default_instance_->InitAsDefaultInstance();
  RenameNTFGuildCmd::default_instance_->InitAsDefaultInstance();
  GuildCityActionGuildSCmd::default_instance_->InitAsDefaultInstance();
  SendMailGuildSCmd::default_instance_->InitAsDefaultInstance();
  GVGRewardGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildPrayGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildIconStateGuildSCmd::default_instance_->InitAsDefaultInstance();
  BuildingMaterial::default_instance_->InitAsDefaultInstance();
  SubmitMaterialGuildSCmd::default_instance_->InitAsDefaultInstance();
  BuildingUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  QueryGuildInfoGuildSCmd::default_instance_->InitAsDefaultInstance();
  SendWelfareGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildChallengeItem::default_instance_->InitAsDefaultInstance();
  ChallengeProgressGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildGM::default_instance_->InitAsDefaultInstance();
  GMCommandGuildSCmd::default_instance_->InitAsDefaultInstance();
  GMCommandRespondGuildSCmd::default_instance_->InitAsDefaultInstance();
  BuildingEffectGuildSCmd::default_instance_->InitAsDefaultInstance();
  ArtifactUpdateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildArtifactQuestGuildSCmd::default_instance_->InitAsDefaultInstance();
  QueryTreasureGuildSCmd::default_instance_->InitAsDefaultInstance();
  GvgUserPartInGuildSCmd::default_instance_->InitAsDefaultInstance();
  TreasureResultNtfGuildSCmd::default_instance_->InitAsDefaultInstance();
  UpdateCityStateGuildSCmd::default_instance_->InitAsDefaultInstance();
  GvgOpenToServerGuildSCmd::default_instance_->InitAsDefaultInstance();
  ShopBuyItemGuildSCmd::default_instance_->InitAsDefaultInstance();
  JoinSuperGvgGuildSCmd::default_instance_->InitAsDefaultInstance();
  EndSuperGvgGuildSCmd::default_instance_->InitAsDefaultInstance();
  UpdateCityGuildSCmd::default_instance_->InitAsDefaultInstance();
  GvgResultInfo::default_instance_->InitAsDefaultInstance();
  GvgResultGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildBrocastMailGuildSCmd::default_instance_->InitAsDefaultInstance();
  GuildBrocastMsgGuildSCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildSCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildSCmd_2eproto {
  StaticDescriptorInitializer_GuildSCmd_2eproto() {
    protobuf_AddDesc_GuildSCmd_2eproto();
  }
} static_descriptor_initializer_GuildSCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* GuildSParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSParam_descriptor_;
}
bool GuildSParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 48:
    case 49:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GuildOptConType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildOptConType_descriptor_;
}
bool GuildOptConType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EPhotoAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPhotoAction_descriptor_;
}
bool EPhotoAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildCityAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildCityAction_descriptor_;
}
bool EGuildCityAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGuildCityResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGuildCityResult_descriptor_;
}
bool EGuildCityResult_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserGuildInfoSyncGuildSCmd::kCmdFieldNumber;
const int UserGuildInfoSyncGuildSCmd::kParamFieldNumber;
const int UserGuildInfoSyncGuildSCmd::kCharidFieldNumber;
const int UserGuildInfoSyncGuildSCmd::kGuildidFieldNumber;
const int UserGuildInfoSyncGuildSCmd::kGuildnameFieldNumber;
const int UserGuildInfoSyncGuildSCmd::kGuildportraitFieldNumber;
#endif  // !_MSC_VER

UserGuildInfoSyncGuildSCmd::UserGuildInfoSyncGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserGuildInfoSyncGuildSCmd)
}

void UserGuildInfoSyncGuildSCmd::InitAsDefaultInstance() {
}

UserGuildInfoSyncGuildSCmd::UserGuildInfoSyncGuildSCmd(const UserGuildInfoSyncGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserGuildInfoSyncGuildSCmd)
}

void UserGuildInfoSyncGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildportrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGuildInfoSyncGuildSCmd::~UserGuildInfoSyncGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserGuildInfoSyncGuildSCmd)
  SharedDtor();
}

void UserGuildInfoSyncGuildSCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildportrait_;
  }
  if (this != default_instance_) {
  }
}

void UserGuildInfoSyncGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGuildInfoSyncGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGuildInfoSyncGuildSCmd_descriptor_;
}

const UserGuildInfoSyncGuildSCmd& UserGuildInfoSyncGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

UserGuildInfoSyncGuildSCmd* UserGuildInfoSyncGuildSCmd::default_instance_ = NULL;

UserGuildInfoSyncGuildSCmd* UserGuildInfoSyncGuildSCmd::New() const {
  return new UserGuildInfoSyncGuildSCmd;
}

void UserGuildInfoSyncGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserGuildInfoSyncGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, guildid_);
    cmd_ = 210;
    param_ = 1;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_guildportrait()) {
      if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildportrait_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGuildInfoSyncGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserGuildInfoSyncGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_USER_GUILDINFO_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_guildname;
        break;
      }

      // optional string guildname = 5;
      case 5: {
        if (tag == 42) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guildportrait;
        break;
      }

      // optional string guildportrait = 6;
      case 6: {
        if (tag == 50) {
         parse_guildportrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildportrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildportrait().data(), this->guildportrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildportrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserGuildInfoSyncGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserGuildInfoSyncGuildSCmd)
  return false;
#undef DO_
}

void UserGuildInfoSyncGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserGuildInfoSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_USER_GUILDINFO_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->guildname(), output);
  }

  // optional string guildportrait = 6;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guildportrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserGuildInfoSyncGuildSCmd)
}

::google::protobuf::uint8* UserGuildInfoSyncGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserGuildInfoSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_USER_GUILDINFO_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional string guildname = 5;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildname(), target);
  }

  // optional string guildportrait = 6;
  if (has_guildportrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildportrait().data(), this->guildportrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildportrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildportrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserGuildInfoSyncGuildSCmd)
  return target;
}

int UserGuildInfoSyncGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_USER_GUILDINFO_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 5;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string guildportrait = 6;
    if (has_guildportrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildportrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGuildInfoSyncGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGuildInfoSyncGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGuildInfoSyncGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGuildInfoSyncGuildSCmd::MergeFrom(const UserGuildInfoSyncGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildportrait()) {
      set_guildportrait(from.guildportrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGuildInfoSyncGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGuildInfoSyncGuildSCmd::CopyFrom(const UserGuildInfoSyncGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGuildInfoSyncGuildSCmd::IsInitialized() const {

  return true;
}

void UserGuildInfoSyncGuildSCmd::Swap(UserGuildInfoSyncGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildportrait_, other->guildportrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGuildInfoSyncGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGuildInfoSyncGuildSCmd_descriptor_;
  metadata.reflection = UserGuildInfoSyncGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSyncGuildSCmd::kCmdFieldNumber;
const int ChatSyncGuildSCmd::kParamFieldNumber;
const int ChatSyncGuildSCmd::kCharidFieldNumber;
const int ChatSyncGuildSCmd::kDataFieldNumber;
const int ChatSyncGuildSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ChatSyncGuildSCmd::ChatSyncGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatSyncGuildSCmd)
}

void ChatSyncGuildSCmd::InitAsDefaultInstance() {
}

ChatSyncGuildSCmd::ChatSyncGuildSCmd(const ChatSyncGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatSyncGuildSCmd)
}

void ChatSyncGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSyncGuildSCmd::~ChatSyncGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatSyncGuildSCmd)
  SharedDtor();
}

void ChatSyncGuildSCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ChatSyncGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSyncGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSyncGuildSCmd_descriptor_;
}

const ChatSyncGuildSCmd& ChatSyncGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

ChatSyncGuildSCmd* ChatSyncGuildSCmd::default_instance_ = NULL;

ChatSyncGuildSCmd* ChatSyncGuildSCmd::New() const {
  return new ChatSyncGuildSCmd;
}

void ChatSyncGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 210;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSyncGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatSyncGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHAT_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatSyncGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatSyncGuildSCmd)
  return false;
#undef DO_
}

void ChatSyncGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHAT_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatSyncGuildSCmd)
}

::google::protobuf::uint8* ChatSyncGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHAT_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatSyncGuildSCmd)
  return target;
}

int ChatSyncGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHAT_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSyncGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSyncGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSyncGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSyncGuildSCmd::MergeFrom(const ChatSyncGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSyncGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSyncGuildSCmd::CopyFrom(const ChatSyncGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSyncGuildSCmd::IsInitialized() const {

  return true;
}

void ChatSyncGuildSCmd::Swap(ChatSyncGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSyncGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSyncGuildSCmd_descriptor_;
  metadata.reflection = ChatSyncGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadLuaGuildSCmd::kCmdFieldNumber;
const int LoadLuaGuildSCmd::kParamFieldNumber;
const int LoadLuaGuildSCmd::kTableFieldNumber;
const int LoadLuaGuildSCmd::kLuaFieldNumber;
const int LoadLuaGuildSCmd::kLogFieldNumber;
#endif  // !_MSC_VER

LoadLuaGuildSCmd::LoadLuaGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoadLuaGuildSCmd)
}

void LoadLuaGuildSCmd::InitAsDefaultInstance() {
}

LoadLuaGuildSCmd::LoadLuaGuildSCmd(const LoadLuaGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoadLuaGuildSCmd)
}

void LoadLuaGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 3;
  table_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lua_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadLuaGuildSCmd::~LoadLuaGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LoadLuaGuildSCmd)
  SharedDtor();
}

void LoadLuaGuildSCmd::SharedDtor() {
  if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete table_;
  }
  if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lua_;
  }
  if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete log_;
  }
  if (this != default_instance_) {
  }
}

void LoadLuaGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadLuaGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadLuaGuildSCmd_descriptor_;
}

const LoadLuaGuildSCmd& LoadLuaGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

LoadLuaGuildSCmd* LoadLuaGuildSCmd::default_instance_ = NULL;

LoadLuaGuildSCmd* LoadLuaGuildSCmd::New() const {
  return new LoadLuaGuildSCmd;
}

void LoadLuaGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 210;
    param_ = 3;
    if (has_table()) {
      if (table_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        table_->clear();
      }
    }
    if (has_lua()) {
      if (lua_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lua_->clear();
      }
    }
    if (has_log()) {
      if (log_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        log_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadLuaGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoadLuaGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_LOAD_LUA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_table;
        break;
      }

      // optional string table = 3;
      case 3: {
        if (tag == 26) {
         parse_table:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table().data(), this->table().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "table");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lua;
        break;
      }

      // optional string lua = 4;
      case 4: {
        if (tag == 34) {
         parse_lua:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lua()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lua().data(), this->lua().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lua");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_log;
        break;
      }

      // optional string log = 5;
      case 5: {
        if (tag == 42) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log().data(), this->log().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "log");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoadLuaGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoadLuaGuildSCmd)
  return false;
#undef DO_
}

void LoadLuaGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoadLuaGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_LOAD_LUA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lua(), output);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->log(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoadLuaGuildSCmd)
}

::google::protobuf::uint8* LoadLuaGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoadLuaGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_LOAD_LUA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table().data(), this->table().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table(), target);
  }

  // optional string lua = 4;
  if (has_lua()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lua().data(), this->lua().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lua");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lua(), target);
  }

  // optional string log = 5;
  if (has_log()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log().data(), this->log().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "log");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->log(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoadLuaGuildSCmd)
  return target;
}

int LoadLuaGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_LOAD_LUA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table());
    }

    // optional string lua = 4;
    if (has_lua()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lua());
    }

    // optional string log = 5;
    if (has_log()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadLuaGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadLuaGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadLuaGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadLuaGuildSCmd::MergeFrom(const LoadLuaGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_lua()) {
      set_lua(from.lua());
    }
    if (from.has_log()) {
      set_log(from.log());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadLuaGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadLuaGuildSCmd::CopyFrom(const LoadLuaGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadLuaGuildSCmd::IsInitialized() const {

  return true;
}

void LoadLuaGuildSCmd::Swap(LoadLuaGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(table_, other->table_);
    std::swap(lua_, other->lua_);
    std::swap(log_, other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadLuaGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadLuaGuildSCmd_descriptor_;
  metadata.reflection = LoadLuaGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUserInfo::kGiftpointFieldNumber;
const int GuildUserInfo::kContributeFieldNumber;
const int GuildUserInfo::kPraysFieldNumber;
#endif  // !_MSC_VER

GuildUserInfo::GuildUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildUserInfo)
}

void GuildUserInfo::InitAsDefaultInstance() {
}

GuildUserInfo::GuildUserInfo(const GuildUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildUserInfo)
}

void GuildUserInfo::SharedCtor() {
  _cached_size_ = 0;
  giftpoint_ = 0u;
  contribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUserInfo::~GuildUserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GuildUserInfo)
  SharedDtor();
}

void GuildUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUserInfo_descriptor_;
}

const GuildUserInfo& GuildUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildUserInfo* GuildUserInfo::default_instance_ = NULL;

GuildUserInfo* GuildUserInfo::New() const {
  return new GuildUserInfo;
}

void GuildUserInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildUserInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(giftpoint_, contribute_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  prays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 giftpoint = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giftpoint_)));
          set_has_giftpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prays;
        break;
      }

      // repeated .Cmd.GuildMemberPray prays = 3;
      case 3: {
        if (tag == 26) {
         parse_prays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prays()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_prays;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildUserInfo)
  return false;
#undef DO_
}

void GuildUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildUserInfo)
  // optional uint32 giftpoint = 1 [default = 0];
  if (has_giftpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->giftpoint(), output);
  }

  // optional uint32 contribute = 2 [default = 0];
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contribute(), output);
  }

  // repeated .Cmd.GuildMemberPray prays = 3;
  for (int i = 0; i < this->prays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->prays(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildUserInfo)
}

::google::protobuf::uint8* GuildUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildUserInfo)
  // optional uint32 giftpoint = 1 [default = 0];
  if (has_giftpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->giftpoint(), target);
  }

  // optional uint32 contribute = 2 [default = 0];
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contribute(), target);
  }

  // repeated .Cmd.GuildMemberPray prays = 3;
  for (int i = 0; i < this->prays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->prays(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildUserInfo)
  return target;
}

int GuildUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 giftpoint = 1 [default = 0];
    if (has_giftpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giftpoint());
    }

    // optional uint32 contribute = 2 [default = 0];
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

  }
  // repeated .Cmd.GuildMemberPray prays = 3;
  total_size += 1 * this->prays_size();
  for (int i = 0; i < this->prays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildUserInfo::MergeFrom(const GuildUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  prays_.MergeFrom(from.prays_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftpoint()) {
      set_giftpoint(from.giftpoint());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildUserInfo::CopyFrom(const GuildUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildUserInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->prays())) return false;
  return true;
}

void GuildUserInfo::Swap(GuildUserInfo* other) {
  if (other != this) {
    std::swap(giftpoint_, other->giftpoint_);
    std::swap(contribute_, other->contribute_);
    prays_.Swap(&other->prays_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUserInfo_descriptor_;
  metadata.reflection = GuildUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildUserInfoSyncGuildCmd::kCmdFieldNumber;
const int GuildUserInfoSyncGuildCmd::kParamFieldNumber;
const int GuildUserInfoSyncGuildCmd::kCharidFieldNumber;
const int GuildUserInfoSyncGuildCmd::kInfoFieldNumber;
const int GuildUserInfoSyncGuildCmd::kLevelupFieldNumber;
const int GuildUserInfoSyncGuildCmd::kOptcontypeFieldNumber;
#endif  // !_MSC_VER

GuildUserInfoSyncGuildCmd::GuildUserInfoSyncGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildUserInfoSyncGuildCmd)
}

void GuildUserInfoSyncGuildCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildUserInfo*>(&::Cmd::GuildUserInfo::default_instance());
}

GuildUserInfoSyncGuildCmd::GuildUserInfoSyncGuildCmd(const GuildUserInfoSyncGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildUserInfoSyncGuildCmd)
}

void GuildUserInfoSyncGuildCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  levelup_ = false;
  optcontype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildUserInfoSyncGuildCmd::~GuildUserInfoSyncGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildUserInfoSyncGuildCmd)
  SharedDtor();
}

void GuildUserInfoSyncGuildCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildUserInfoSyncGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildUserInfoSyncGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildUserInfoSyncGuildCmd_descriptor_;
}

const GuildUserInfoSyncGuildCmd& GuildUserInfoSyncGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildUserInfoSyncGuildCmd* GuildUserInfoSyncGuildCmd::default_instance_ = NULL;

GuildUserInfoSyncGuildCmd* GuildUserInfoSyncGuildCmd::New() const {
  return new GuildUserInfoSyncGuildCmd;
}

void GuildUserInfoSyncGuildCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildUserInfoSyncGuildCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(levelup_, optcontype_);
    cmd_ = 210;
    param_ = 4;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildUserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildUserInfoSyncGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildUserInfoSyncGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_SYNC_USERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildUserInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_levelup;
        break;
      }

      // optional bool levelup = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_levelup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelup_)));
          set_has_levelup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_optcontype;
        break;
      }

      // optional .Cmd.GuildOptConType optcontype = 6 [default = GUILDOPTCONTYPE_LOGIN];
      case 6: {
        if (tag == 48) {
         parse_optcontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildOptConType_IsValid(value)) {
            set_optcontype(static_cast< ::Cmd::GuildOptConType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildUserInfoSyncGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildUserInfoSyncGuildCmd)
  return false;
#undef DO_
}

void GuildUserInfoSyncGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildUserInfoSyncGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_SYNC_USERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.GuildUserInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  // optional bool levelup = 5 [default = false];
  if (has_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->levelup(), output);
  }

  // optional .Cmd.GuildOptConType optcontype = 6 [default = GUILDOPTCONTYPE_LOGIN];
  if (has_optcontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->optcontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildUserInfoSyncGuildCmd)
}

::google::protobuf::uint8* GuildUserInfoSyncGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildUserInfoSyncGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_SYNC_USERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.GuildUserInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  // optional bool levelup = 5 [default = false];
  if (has_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->levelup(), target);
  }

  // optional .Cmd.GuildOptConType optcontype = 6 [default = GUILDOPTCONTYPE_LOGIN];
  if (has_optcontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->optcontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildUserInfoSyncGuildCmd)
  return target;
}

int GuildUserInfoSyncGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_SYNC_USERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GuildUserInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool levelup = 5 [default = false];
    if (has_levelup()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.GuildOptConType optcontype = 6 [default = GUILDOPTCONTYPE_LOGIN];
    if (has_optcontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optcontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildUserInfoSyncGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildUserInfoSyncGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildUserInfoSyncGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildUserInfoSyncGuildCmd::MergeFrom(const GuildUserInfoSyncGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildUserInfo::MergeFrom(from.info());
    }
    if (from.has_levelup()) {
      set_levelup(from.levelup());
    }
    if (from.has_optcontype()) {
      set_optcontype(from.optcontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildUserInfoSyncGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildUserInfoSyncGuildCmd::CopyFrom(const GuildUserInfoSyncGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildUserInfoSyncGuildCmd::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GuildUserInfoSyncGuildCmd::Swap(GuildUserInfoSyncGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(levelup_, other->levelup_);
    std::swap(optcontype_, other->optcontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildUserInfoSyncGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildUserInfoSyncGuildCmd_descriptor_;
  metadata.reflection = GuildUserInfoSyncGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildSMember::kCharidFieldNumber;
const int GuildSMember::kOnlinetimeFieldNumber;
const int GuildSMember::kEntertimeFieldNumber;
const int GuildSMember::kJobFieldNumber;
const int GuildSMember::kNameFieldNumber;
const int GuildSMember::kAccidFieldNumber;
const int GuildSMember::kOfflinetimeFieldNumber;
const int GuildSMember::kAuthFieldNumber;
const int GuildSMember::kBuildingeffectFieldNumber;
#endif  // !_MSC_VER

GuildSMember::GuildSMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildSMember)
}

void GuildSMember::InitAsDefaultInstance() {
}

GuildSMember::GuildSMember(const GuildSMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildSMember)
}

void GuildSMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  onlinetime_ = 0u;
  entertime_ = 0u;
  job_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  accid_ = GOOGLE_ULONGLONG(0);
  offlinetime_ = 0u;
  auth_ = 0u;
  buildingeffect_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildSMember::~GuildSMember() {
  // @@protoc_insertion_point(destructor:Cmd.GuildSMember)
  SharedDtor();
}

void GuildSMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildSMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildSMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildSMember_descriptor_;
}

const GuildSMember& GuildSMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildSMember* GuildSMember::default_instance_ = NULL;

GuildSMember* GuildSMember::New() const {
  return new GuildSMember;
}

void GuildSMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildSMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(charid_, entertime_);
    ZR_(job_, auth_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  buildingeffect_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildSMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildSMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_onlinetime;
        break;
      }

      // optional uint32 onlinetime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_onlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entertime;
        break;
      }

      // optional uint32 entertime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_entertime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entertime_)));
          set_has_entertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
      case 4: {
        if (tag == 32) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EGuildJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_offlinetime;
        break;
      }

      // optional uint32 offlinetime = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_auth;
        break;
      }

      // optional uint32 auth = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_)));
          set_has_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_buildingeffect;
        break;
      }

      // optional bool buildingeffect = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_buildingeffect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &buildingeffect_)));
          set_has_buildingeffect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildSMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildSMember)
  return false;
#undef DO_
}

void GuildSMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildSMember)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 onlinetime = 2 [default = 0];
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlinetime(), output);
  }

  // optional uint32 entertime = 3 [default = 0];
  if (has_entertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entertime(), output);
  }

  // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->job(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional uint64 accid = 6 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->accid(), output);
  }

  // optional uint32 offlinetime = 7 [default = 0];
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->offlinetime(), output);
  }

  // optional uint32 auth = 8 [default = 0];
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->auth(), output);
  }

  // optional bool buildingeffect = 9 [default = false];
  if (has_buildingeffect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->buildingeffect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildSMember)
}

::google::protobuf::uint8* GuildSMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildSMember)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 onlinetime = 2 [default = 0];
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->onlinetime(), target);
  }

  // optional uint32 entertime = 3 [default = 0];
  if (has_entertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entertime(), target);
  }

  // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->job(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional uint64 accid = 6 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->accid(), target);
  }

  // optional uint32 offlinetime = 7 [default = 0];
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->offlinetime(), target);
  }

  // optional uint32 auth = 8 [default = 0];
  if (has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->auth(), target);
  }

  // optional bool buildingeffect = 9 [default = false];
  if (has_buildingeffect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->buildingeffect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildSMember)
  return target;
}

int GuildSMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 onlinetime = 2 [default = 0];
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

    // optional uint32 entertime = 3 [default = 0];
    if (has_entertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entertime());
    }

    // optional .Cmd.EGuildJob job = 4 [default = EGUILDJOB_MIN];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 accid = 6 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 offlinetime = 7 [default = 0];
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offlinetime());
    }

    // optional uint32 auth = 8 [default = 0];
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool buildingeffect = 9 [default = false];
    if (has_buildingeffect()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildSMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildSMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildSMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildSMember::MergeFrom(const GuildSMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_entertime()) {
      set_entertime(from.entertime());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_buildingeffect()) {
      set_buildingeffect(from.buildingeffect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildSMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildSMember::CopyFrom(const GuildSMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildSMember::IsInitialized() const {

  return true;
}

void GuildSMember::Swap(GuildSMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(entertime_, other->entertime_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(accid_, other->accid_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(auth_, other->auth_);
    std::swap(buildingeffect_, other->buildingeffect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildSMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildSMember_descriptor_;
  metadata.reflection = GuildSMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildArtifactQuest::kSubmitidsFieldNumber;
const int GuildArtifactQuest::kDatasFieldNumber;
#endif  // !_MSC_VER

GuildArtifactQuest::GuildArtifactQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildArtifactQuest)
}

void GuildArtifactQuest::InitAsDefaultInstance() {
}

GuildArtifactQuest::GuildArtifactQuest(const GuildArtifactQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildArtifactQuest)
}

void GuildArtifactQuest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildArtifactQuest::~GuildArtifactQuest() {
  // @@protoc_insertion_point(destructor:Cmd.GuildArtifactQuest)
  SharedDtor();
}

void GuildArtifactQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildArtifactQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildArtifactQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildArtifactQuest_descriptor_;
}

const GuildArtifactQuest& GuildArtifactQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildArtifactQuest* GuildArtifactQuest::default_instance_ = NULL;

GuildArtifactQuest* GuildArtifactQuest::New() const {
  return new GuildArtifactQuest;
}

void GuildArtifactQuest::Clear() {
  submitids_.Clear();
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildArtifactQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildArtifactQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 submitids = 1;
      case 1: {
        if (tag == 8) {
         parse_submitids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_submitids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_submitids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_submitids;
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.ItemData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildArtifactQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildArtifactQuest)
  return false;
#undef DO_
}

void GuildArtifactQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildArtifactQuest)
  // repeated uint32 submitids = 1;
  for (int i = 0; i < this->submitids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->submitids(i), output);
  }

  // repeated .Cmd.ItemData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildArtifactQuest)
}

::google::protobuf::uint8* GuildArtifactQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildArtifactQuest)
  // repeated uint32 submitids = 1;
  for (int i = 0; i < this->submitids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->submitids(i), target);
  }

  // repeated .Cmd.ItemData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildArtifactQuest)
  return target;
}

int GuildArtifactQuest::ByteSize() const {
  int total_size = 0;

  // repeated uint32 submitids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->submitids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->submitids(i));
    }
    total_size += 1 * this->submitids_size() + data_size;
  }

  // repeated .Cmd.ItemData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildArtifactQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildArtifactQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildArtifactQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildArtifactQuest::MergeFrom(const GuildArtifactQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  submitids_.MergeFrom(from.submitids_);
  datas_.MergeFrom(from.datas_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildArtifactQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildArtifactQuest::CopyFrom(const GuildArtifactQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildArtifactQuest::IsInitialized() const {

  return true;
}

void GuildArtifactQuest::Swap(GuildArtifactQuest* other) {
  if (other != this) {
    submitids_.Swap(&other->submitids_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildArtifactQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildArtifactQuest_descriptor_;
  metadata.reflection = GuildArtifactQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildGvgData::kInsupergvgFieldNumber;
#endif  // !_MSC_VER

GuildGvgData::GuildGvgData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildGvgData)
}

void GuildGvgData::InitAsDefaultInstance() {
}

GuildGvgData::GuildGvgData(const GuildGvgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildGvgData)
}

void GuildGvgData::SharedCtor() {
  _cached_size_ = 0;
  insupergvg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildGvgData::~GuildGvgData() {
  // @@protoc_insertion_point(destructor:Cmd.GuildGvgData)
  SharedDtor();
}

void GuildGvgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildGvgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildGvgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildGvgData_descriptor_;
}

const GuildGvgData& GuildGvgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildGvgData* GuildGvgData::default_instance_ = NULL;

GuildGvgData* GuildGvgData::New() const {
  return new GuildGvgData;
}

void GuildGvgData::Clear() {
  insupergvg_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildGvgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildGvgData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool insupergvg = 1 [default = false];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &insupergvg_)));
          set_has_insupergvg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildGvgData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildGvgData)
  return false;
#undef DO_
}

void GuildGvgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildGvgData)
  // optional bool insupergvg = 1 [default = false];
  if (has_insupergvg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->insupergvg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildGvgData)
}

::google::protobuf::uint8* GuildGvgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildGvgData)
  // optional bool insupergvg = 1 [default = false];
  if (has_insupergvg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->insupergvg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildGvgData)
  return target;
}

int GuildGvgData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool insupergvg = 1 [default = false];
    if (has_insupergvg()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildGvgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildGvgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildGvgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildGvgData::MergeFrom(const GuildGvgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_insupergvg()) {
      set_insupergvg(from.insupergvg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildGvgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildGvgData::CopyFrom(const GuildGvgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildGvgData::IsInitialized() const {

  return true;
}

void GuildGvgData::Swap(GuildGvgData* other) {
  if (other != this) {
    std::swap(insupergvg_, other->insupergvg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildGvgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildGvgData_descriptor_;
  metadata.reflection = GuildGvgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfo::kIdFieldNumber;
const int GuildInfo::kZoneidFieldNumber;
const int GuildInfo::kLvFieldNumber;
const int GuildInfo::kSceneFieldNumber;
const int GuildInfo::kAuthFieldNumber;
const int GuildInfo::kCreateFieldNumber;
const int GuildInfo::kNameFieldNumber;
const int GuildInfo::kPortraitFieldNumber;
const int GuildInfo::kJobnameFieldNumber;
const int GuildInfo::kMembersFieldNumber;
const int GuildInfo::kQuestsFieldNumber;
const int GuildInfo::kBuildingFieldNumber;
const int GuildInfo::kOpenfunctionFieldNumber;
const int GuildInfo::kChallengesFieldNumber;
const int GuildInfo::kArtifactitemsFieldNumber;
const int GuildInfo::kArtifacequestFieldNumber;
const int GuildInfo::kGvgFieldNumber;
#endif  // !_MSC_VER

GuildInfo::GuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildInfo)
}

void GuildInfo::InitAsDefaultInstance() {
  building_ = const_cast< ::Cmd::GuildBuildingData*>(&::Cmd::GuildBuildingData::default_instance());
  artifacequest_ = const_cast< ::Cmd::GuildArtifactQuest*>(&::Cmd::GuildArtifactQuest::default_instance());
  gvg_ = const_cast< ::Cmd::GuildGvgData*>(&::Cmd::GuildGvgData::default_instance());
}

GuildInfo::GuildInfo(const GuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildInfo)
}

void GuildInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  lv_ = 0u;
  scene_ = 0u;
  auth_ = 0u;
  create_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  jobname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  building_ = NULL;
  openfunction_ = GOOGLE_ULONGLONG(0);
  artifacequest_ = NULL;
  gvg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfo::~GuildInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GuildInfo)
  SharedDtor();
}

void GuildInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (jobname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete jobname_;
  }
  if (this != default_instance_) {
    delete building_;
    delete artifacequest_;
    delete gvg_;
  }
}

void GuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfo_descriptor_;
}

const GuildInfo& GuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildInfo* GuildInfo::default_instance_ = NULL;

GuildInfo* GuildInfo::New() const {
  return new GuildInfo;
}

void GuildInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, auth_);
    create_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 39168) {
    if (has_jobname()) {
      if (jobname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        jobname_->clear();
      }
    }
    if (has_building()) {
      if (building_ != NULL) building_->::Cmd::GuildBuildingData::Clear();
    }
    openfunction_ = GOOGLE_ULONGLONG(0);
    if (has_artifacequest()) {
      if (artifacequest_ != NULL) artifacequest_->::Cmd::GuildArtifactQuest::Clear();
    }
  }
  if (has_gvg()) {
    if (gvg_ != NULL) gvg_->::Cmd::GuildGvgData::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  quests_.Clear();
  challenges_.Clear();
  artifactitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_scene;
        break;
      }

      // optional uint32 scene = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_scene:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scene_)));
          set_has_scene();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_create;
        break;
      }

      // optional bool create = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_create:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_)));
          set_has_create();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (tag == 50) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_portrait;
        break;
      }

      // optional string portrait = 7;
      case 7: {
        if (tag == 58) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_jobname;
        break;
      }

      // optional string jobname = 8;
      case 8: {
        if (tag == 66) {
         parse_jobname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_jobname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->jobname().data(), this->jobname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "jobname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_members;
        break;
      }

      // repeated .Cmd.GuildSMember members = 10;
      case 10: {
        if (tag == 82) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_members;
        if (input->ExpectTag(90)) goto parse_quests;
        break;
      }

      // repeated .Cmd.GuildQuest quests = 11;
      case 11: {
        if (tag == 90) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_quests;
        if (input->ExpectTag(96)) goto parse_auth;
        break;
      }

      // optional uint32 auth = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_auth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &auth_)));
          set_has_auth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_building;
        break;
      }

      // optional .Cmd.GuildBuildingData building = 13;
      case 13: {
        if (tag == 106) {
         parse_building:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_building()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_openfunction;
        break;
      }

      // optional uint64 openfunction = 14 [default = 0];
      case 14: {
        if (tag == 112) {
         parse_openfunction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &openfunction_)));
          set_has_openfunction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_challenges;
        break;
      }

      // repeated .Cmd.GuildChallenge challenges = 15;
      case 15: {
        if (tag == 122) {
         parse_challenges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_challenges()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_challenges;
        if (input->ExpectTag(130)) goto parse_artifactitems;
        break;
      }

      // repeated .Cmd.GuildArtifactItem artifactitems = 16;
      case 16: {
        if (tag == 130) {
         parse_artifactitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_artifactitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_artifactitems;
        if (input->ExpectTag(138)) goto parse_artifacequest;
        break;
      }

      // optional .Cmd.GuildArtifactQuest artifacequest = 17;
      case 17: {
        if (tag == 138) {
         parse_artifacequest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_artifacequest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_gvg;
        break;
      }

      // optional .Cmd.GuildGvgData gvg = 18;
      case 18: {
        if (tag == 146) {
         parse_gvg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gvg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildInfo)
  return false;
#undef DO_
}

void GuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->lv(), output);
  }

  // optional uint32 scene = 4 [default = 0];
  if (has_scene()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->scene(), output);
  }

  // optional bool create = 5 [default = false];
  if (has_create()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->create(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->name(), output);
  }

  // optional string portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->portrait(), output);
  }

  // optional string jobname = 8;
  if (has_jobname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobname().data(), this->jobname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->jobname(), output);
  }

  // repeated .Cmd.GuildSMember members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->members(i), output);
  }

  // repeated .Cmd.GuildQuest quests = 11;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->quests(i), output);
  }

  // optional uint32 auth = 12 [default = 0];
  if (has_auth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->auth(), output);
  }

  // optional .Cmd.GuildBuildingData building = 13;
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->building(), output);
  }

  // optional uint64 openfunction = 14 [default = 0];
  if (has_openfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->openfunction(), output);
  }

  // repeated .Cmd.GuildChallenge challenges = 15;
  for (int i = 0; i < this->challenges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->challenges(i), output);
  }

  // repeated .Cmd.GuildArtifactItem artifactitems = 16;
  for (int i = 0; i < this->artifactitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->artifactitems(i), output);
  }

  // optional .Cmd.GuildArtifactQuest artifacequest = 17;
  if (has_artifacequest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->artifacequest(), output);
  }

  // optional .Cmd.GuildGvgData gvg = 18;
  if (has_gvg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->gvg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildInfo)
}

::google::protobuf::uint8* GuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildInfo)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional uint32 lv = 3 [default = 0];
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->lv(), target);
  }

  // optional uint32 scene = 4 [default = 0];
  if (has_scene()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->scene(), target);
  }

  // optional bool create = 5 [default = false];
  if (has_create()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->create(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional string portrait = 7;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->portrait(), target);
  }

  // optional string jobname = 8;
  if (has_jobname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->jobname().data(), this->jobname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "jobname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->jobname(), target);
  }

  // repeated .Cmd.GuildSMember members = 10;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->members(i), target);
  }

  // repeated .Cmd.GuildQuest quests = 11;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->quests(i), target);
  }

  // optional uint32 auth = 12 [default = 0];
  if (has_auth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->auth(), target);
  }

  // optional .Cmd.GuildBuildingData building = 13;
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->building(), target);
  }

  // optional uint64 openfunction = 14 [default = 0];
  if (has_openfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->openfunction(), target);
  }

  // repeated .Cmd.GuildChallenge challenges = 15;
  for (int i = 0; i < this->challenges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->challenges(i), target);
  }

  // repeated .Cmd.GuildArtifactItem artifactitems = 16;
  for (int i = 0; i < this->artifactitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->artifactitems(i), target);
  }

  // optional .Cmd.GuildArtifactQuest artifacequest = 17;
  if (has_artifacequest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->artifacequest(), target);
  }

  // optional .Cmd.GuildGvgData gvg = 18;
  if (has_gvg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->gvg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildInfo)
  return target;
}

int GuildInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 lv = 3 [default = 0];
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 scene = 4 [default = 0];
    if (has_scene()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scene());
    }

    // optional uint32 auth = 12 [default = 0];
    if (has_auth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->auth());
    }

    // optional bool create = 5 [default = false];
    if (has_create()) {
      total_size += 1 + 1;
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string portrait = 7;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string jobname = 8;
    if (has_jobname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->jobname());
    }

    // optional .Cmd.GuildBuildingData building = 13;
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->building());
    }

    // optional uint64 openfunction = 14 [default = 0];
    if (has_openfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->openfunction());
    }

    // optional .Cmd.GuildArtifactQuest artifacequest = 17;
    if (has_artifacequest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->artifacequest());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Cmd.GuildGvgData gvg = 18;
    if (has_gvg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvg());
    }

  }
  // repeated .Cmd.GuildSMember members = 10;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  // repeated .Cmd.GuildQuest quests = 11;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated .Cmd.GuildChallenge challenges = 15;
  total_size += 1 * this->challenges_size();
  for (int i = 0; i < this->challenges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->challenges(i));
  }

  // repeated .Cmd.GuildArtifactItem artifactitems = 16;
  total_size += 2 * this->artifactitems_size();
  for (int i = 0; i < this->artifactitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->artifactitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfo::MergeFrom(const GuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  quests_.MergeFrom(from.quests_);
  challenges_.MergeFrom(from.challenges_);
  artifactitems_.MergeFrom(from.artifactitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_scene()) {
      set_scene(from.scene());
    }
    if (from.has_auth()) {
      set_auth(from.auth());
    }
    if (from.has_create()) {
      set_create(from.create());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jobname()) {
      set_jobname(from.jobname());
    }
    if (from.has_building()) {
      mutable_building()->::Cmd::GuildBuildingData::MergeFrom(from.building());
    }
    if (from.has_openfunction()) {
      set_openfunction(from.openfunction());
    }
    if (from.has_artifacequest()) {
      mutable_artifacequest()->::Cmd::GuildArtifactQuest::MergeFrom(from.artifacequest());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gvg()) {
      mutable_gvg()->::Cmd::GuildGvgData::MergeFrom(from.gvg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfo::CopyFrom(const GuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfo::IsInitialized() const {

  return true;
}

void GuildInfo::Swap(GuildInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(lv_, other->lv_);
    std::swap(scene_, other->scene_);
    std::swap(auth_, other->auth_);
    std::swap(create_, other->create_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(jobname_, other->jobname_);
    members_.Swap(&other->members_);
    quests_.Swap(&other->quests_);
    std::swap(building_, other->building_);
    std::swap(openfunction_, other->openfunction_);
    challenges_.Swap(&other->challenges_);
    artifactitems_.Swap(&other->artifactitems_);
    std::swap(artifacequest_, other->artifacequest_);
    std::swap(gvg_, other->gvg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfo_descriptor_;
  metadata.reflection = GuildInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildInfoSyncGuildSCmd::kCmdFieldNumber;
const int GuildInfoSyncGuildSCmd::kParamFieldNumber;
const int GuildInfoSyncGuildSCmd::kCharidFieldNumber;
const int GuildInfoSyncGuildSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

GuildInfoSyncGuildSCmd::GuildInfoSyncGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildInfoSyncGuildSCmd)
}

void GuildInfoSyncGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

GuildInfoSyncGuildSCmd::GuildInfoSyncGuildSCmd(const GuildInfoSyncGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildInfoSyncGuildSCmd)
}

void GuildInfoSyncGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 5;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildInfoSyncGuildSCmd::~GuildInfoSyncGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildInfoSyncGuildSCmd)
  SharedDtor();
}

void GuildInfoSyncGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GuildInfoSyncGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildInfoSyncGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildInfoSyncGuildSCmd_descriptor_;
}

const GuildInfoSyncGuildSCmd& GuildInfoSyncGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildInfoSyncGuildSCmd* GuildInfoSyncGuildSCmd::default_instance_ = NULL;

GuildInfoSyncGuildSCmd* GuildInfoSyncGuildSCmd::New() const {
  return new GuildInfoSyncGuildSCmd;
}

void GuildInfoSyncGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 5;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildInfoSyncGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildInfoSyncGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SYNC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildInfoSyncGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildInfoSyncGuildSCmd)
  return false;
#undef DO_
}

void GuildInfoSyncGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildInfoSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SYNC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildInfoSyncGuildSCmd)
}

::google::protobuf::uint8* GuildInfoSyncGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildInfoSyncGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SYNC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildInfoSyncGuildSCmd)
  return target;
}

int GuildInfoSyncGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SYNC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GuildInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildInfoSyncGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildInfoSyncGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildInfoSyncGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildInfoSyncGuildSCmd::MergeFrom(const GuildInfoSyncGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildInfoSyncGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildInfoSyncGuildSCmd::CopyFrom(const GuildInfoSyncGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildInfoSyncGuildSCmd::IsInitialized() const {

  return true;
}

void GuildInfoSyncGuildSCmd::Swap(GuildInfoSyncGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildInfoSyncGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildInfoSyncGuildSCmd_descriptor_;
  metadata.reflection = GuildInfoSyncGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDataUpdateGuildSCmd::kCmdFieldNumber;
const int GuildDataUpdateGuildSCmd::kParamFieldNumber;
const int GuildDataUpdateGuildSCmd::kCharidFieldNumber;
const int GuildDataUpdateGuildSCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

GuildDataUpdateGuildSCmd::GuildDataUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildDataUpdateGuildSCmd)
}

void GuildDataUpdateGuildSCmd::InitAsDefaultInstance() {
}

GuildDataUpdateGuildSCmd::GuildDataUpdateGuildSCmd(const GuildDataUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildDataUpdateGuildSCmd)
}

void GuildDataUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 6;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDataUpdateGuildSCmd::~GuildDataUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildDataUpdateGuildSCmd)
  SharedDtor();
}

void GuildDataUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildDataUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDataUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDataUpdateGuildSCmd_descriptor_;
}

const GuildDataUpdateGuildSCmd& GuildDataUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildDataUpdateGuildSCmd* GuildDataUpdateGuildSCmd::default_instance_ = NULL;

GuildDataUpdateGuildSCmd* GuildDataUpdateGuildSCmd::New() const {
  return new GuildDataUpdateGuildSCmd;
}

void GuildDataUpdateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 6;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDataUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildDataUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_GUILDDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildDataUpdate updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildDataUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildDataUpdateGuildSCmd)
  return false;
#undef DO_
}

void GuildDataUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_GUILDDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.GuildDataUpdate updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildDataUpdateGuildSCmd)
}

::google::protobuf::uint8* GuildDataUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_GUILDDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.GuildDataUpdate updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildDataUpdateGuildSCmd)
  return target;
}

int GuildDataUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_GUILDDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildDataUpdate updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDataUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDataUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDataUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDataUpdateGuildSCmd::MergeFrom(const GuildDataUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDataUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDataUpdateGuildSCmd::CopyFrom(const GuildDataUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDataUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void GuildDataUpdateGuildSCmd::Swap(GuildDataUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDataUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDataUpdateGuildSCmd_descriptor_;
  metadata.reflection = GuildDataUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CityDataUpdateGuildSCmd::kCmdFieldNumber;
const int CityDataUpdateGuildSCmd::kParamFieldNumber;
const int CityDataUpdateGuildSCmd::kCityidFieldNumber;
const int CityDataUpdateGuildSCmd::kMembercountFieldNumber;
const int CityDataUpdateGuildSCmd::kUpdatesFieldNumber;
const int CityDataUpdateGuildSCmd::kLeadernameFieldNumber;
#endif  // !_MSC_VER

CityDataUpdateGuildSCmd::CityDataUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CityDataUpdateGuildSCmd)
}

void CityDataUpdateGuildSCmd::InitAsDefaultInstance() {
}

CityDataUpdateGuildSCmd::CityDataUpdateGuildSCmd(const CityDataUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CityDataUpdateGuildSCmd)
}

void CityDataUpdateGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 7;
  cityid_ = GOOGLE_ULONGLONG(0);
  membercount_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CityDataUpdateGuildSCmd::~CityDataUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CityDataUpdateGuildSCmd)
  SharedDtor();
}

void CityDataUpdateGuildSCmd::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void CityDataUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CityDataUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CityDataUpdateGuildSCmd_descriptor_;
}

const CityDataUpdateGuildSCmd& CityDataUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

CityDataUpdateGuildSCmd* CityDataUpdateGuildSCmd::default_instance_ = NULL;

CityDataUpdateGuildSCmd* CityDataUpdateGuildSCmd::New() const {
  return new CityDataUpdateGuildSCmd;
}

void CityDataUpdateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 47) {
    cmd_ = 210;
    param_ = 7;
    cityid_ = GOOGLE_ULONGLONG(0);
    membercount_ = 0u;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
  }
  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CityDataUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CityDataUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cityid;
        break;
      }

      // optional uint64 cityid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_membercount;
        break;
      }

      // optional uint32 membercount = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_membercount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &membercount_)));
          set_has_membercount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildDataUpdate updates = 5;
      case 5: {
        if (tag == 42) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        if (input->ExpectTag(50)) goto parse_leadername;
        break;
      }

      // optional string leadername = 6;
      case 6: {
        if (tag == 50) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CityDataUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CityDataUpdateGuildSCmd)
  return false;
#undef DO_
}

void CityDataUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CityDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 cityid = 3 [default = 0];
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cityid(), output);
  }

  // optional uint32 membercount = 4 [default = 0];
  if (has_membercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->membercount(), output);
  }

  // repeated .Cmd.GuildDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updates(i), output);
  }

  // optional string leadername = 6;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->leadername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CityDataUpdateGuildSCmd)
}

::google::protobuf::uint8* CityDataUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CityDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 cityid = 3 [default = 0];
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cityid(), target);
  }

  // optional uint32 membercount = 4 [default = 0];
  if (has_membercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->membercount(), target);
  }

  // repeated .Cmd.GuildDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updates(i), target);
  }

  // optional string leadername = 6;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->leadername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CityDataUpdateGuildSCmd)
  return target;
}

int CityDataUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 cityid = 3 [default = 0];
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cityid());
    }

    // optional uint32 membercount = 4 [default = 0];
    if (has_membercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->membercount());
    }

    // optional string leadername = 6;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

  }
  // repeated .Cmd.GuildDataUpdate updates = 5;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CityDataUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CityDataUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CityDataUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CityDataUpdateGuildSCmd::MergeFrom(const CityDataUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_membercount()) {
      set_membercount(from.membercount());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CityDataUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityDataUpdateGuildSCmd::CopyFrom(const CityDataUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityDataUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void CityDataUpdateGuildSCmd::Swap(CityDataUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(cityid_, other->cityid_);
    std::swap(membercount_, other->membercount_);
    updates_.Swap(&other->updates_);
    std::swap(leadername_, other->leadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CityDataUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CityDataUpdateGuildSCmd_descriptor_;
  metadata.reflection = CityDataUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberUpdateGuildSCmd::kCmdFieldNumber;
const int GuildMemberUpdateGuildSCmd::kParamFieldNumber;
const int GuildMemberUpdateGuildSCmd::kCharidFieldNumber;
const int GuildMemberUpdateGuildSCmd::kUpdatesFieldNumber;
const int GuildMemberUpdateGuildSCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

GuildMemberUpdateGuildSCmd::GuildMemberUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberUpdateGuildSCmd)
}

void GuildMemberUpdateGuildSCmd::InitAsDefaultInstance() {
}

GuildMemberUpdateGuildSCmd::GuildMemberUpdateGuildSCmd(const GuildMemberUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberUpdateGuildSCmd)
}

void GuildMemberUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 8;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberUpdateGuildSCmd::~GuildMemberUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberUpdateGuildSCmd)
  SharedDtor();
}

void GuildMemberUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMemberUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberUpdateGuildSCmd_descriptor_;
}

const GuildMemberUpdateGuildSCmd& GuildMemberUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildMemberUpdateGuildSCmd* GuildMemberUpdateGuildSCmd::default_instance_ = NULL;

GuildMemberUpdateGuildSCmd* GuildMemberUpdateGuildSCmd::New() const {
  return new GuildMemberUpdateGuildSCmd;
}

void GuildMemberUpdateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 8;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildSMember updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberUpdateGuildSCmd)
  return false;
#undef DO_
}

void GuildMemberUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.GuildSMember updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberUpdateGuildSCmd)
}

::google::protobuf::uint8* GuildMemberUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.GuildSMember updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberUpdateGuildSCmd)
  return target;
}

int GuildMemberUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildSMember updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberUpdateGuildSCmd::MergeFrom(const GuildMemberUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberUpdateGuildSCmd::CopyFrom(const GuildMemberUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void GuildMemberUpdateGuildSCmd::Swap(GuildMemberUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberUpdateGuildSCmd_descriptor_;
  metadata.reflection = GuildMemberUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMemberDataUpdateGuildSCmd::kCmdFieldNumber;
const int GuildMemberDataUpdateGuildSCmd::kParamFieldNumber;
const int GuildMemberDataUpdateGuildSCmd::kCharidFieldNumber;
const int GuildMemberDataUpdateGuildSCmd::kDestidFieldNumber;
const int GuildMemberDataUpdateGuildSCmd::kUpdatesFieldNumber;
#endif  // !_MSC_VER

GuildMemberDataUpdateGuildSCmd::GuildMemberDataUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMemberDataUpdateGuildSCmd)
}

void GuildMemberDataUpdateGuildSCmd::InitAsDefaultInstance() {
}

GuildMemberDataUpdateGuildSCmd::GuildMemberDataUpdateGuildSCmd(const GuildMemberDataUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMemberDataUpdateGuildSCmd)
}

void GuildMemberDataUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 9;
  charid_ = GOOGLE_ULONGLONG(0);
  destid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMemberDataUpdateGuildSCmd::~GuildMemberDataUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMemberDataUpdateGuildSCmd)
  SharedDtor();
}

void GuildMemberDataUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMemberDataUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMemberDataUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMemberDataUpdateGuildSCmd_descriptor_;
}

const GuildMemberDataUpdateGuildSCmd& GuildMemberDataUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildMemberDataUpdateGuildSCmd* GuildMemberDataUpdateGuildSCmd::default_instance_ = NULL;

GuildMemberDataUpdateGuildSCmd* GuildMemberDataUpdateGuildSCmd::New() const {
  return new GuildMemberDataUpdateGuildSCmd;
}

void GuildMemberDataUpdateGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildMemberDataUpdateGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, destid_);
    cmd_ = 210;
    param_ = 9;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMemberDataUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMemberDataUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBERDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destid;
        break;
      }

      // optional uint64 destid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_destid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildMemberDataUpdate updates = 5;
      case 5: {
        if (tag == 42) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMemberDataUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMemberDataUpdateGuildSCmd)
  return false;
#undef DO_
}

void GuildMemberDataUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMemberDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBERDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destid(), output);
  }

  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updates(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMemberDataUpdateGuildSCmd)
}

::google::protobuf::uint8* GuildMemberDataUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMemberDataUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBERDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destid(), target);
  }

  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updates(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMemberDataUpdateGuildSCmd)
  return target;
}

int GuildMemberDataUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_MEMBERDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 destid = 4 [default = 0];
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destid());
    }

  }
  // repeated .Cmd.GuildMemberDataUpdate updates = 5;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMemberDataUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMemberDataUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMemberDataUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMemberDataUpdateGuildSCmd::MergeFrom(const GuildMemberDataUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_destid()) {
      set_destid(from.destid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMemberDataUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMemberDataUpdateGuildSCmd::CopyFrom(const GuildMemberDataUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMemberDataUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void GuildMemberDataUpdateGuildSCmd::Swap(GuildMemberDataUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(destid_, other->destid_);
    updates_.Swap(&other->updates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMemberDataUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMemberDataUpdateGuildSCmd_descriptor_;
  metadata.reflection = GuildMemberDataUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildQuestUpdateGuildSCmd::kCmdFieldNumber;
const int GuildQuestUpdateGuildSCmd::kParamFieldNumber;
const int GuildQuestUpdateGuildSCmd::kCharidFieldNumber;
const int GuildQuestUpdateGuildSCmd::kUpdatesFieldNumber;
const int GuildQuestUpdateGuildSCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

GuildQuestUpdateGuildSCmd::GuildQuestUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildQuestUpdateGuildSCmd)
}

void GuildQuestUpdateGuildSCmd::InitAsDefaultInstance() {
}

GuildQuestUpdateGuildSCmd::GuildQuestUpdateGuildSCmd(const GuildQuestUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildQuestUpdateGuildSCmd)
}

void GuildQuestUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 10;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildQuestUpdateGuildSCmd::~GuildQuestUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildQuestUpdateGuildSCmd)
  SharedDtor();
}

void GuildQuestUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildQuestUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildQuestUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildQuestUpdateGuildSCmd_descriptor_;
}

const GuildQuestUpdateGuildSCmd& GuildQuestUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildQuestUpdateGuildSCmd* GuildQuestUpdateGuildSCmd::default_instance_ = NULL;

GuildQuestUpdateGuildSCmd* GuildQuestUpdateGuildSCmd::New() const {
  return new GuildQuestUpdateGuildSCmd;
}

void GuildQuestUpdateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 10;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildQuestUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildQuestUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_QUEST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildQuest updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint32 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildQuestUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildQuestUpdateGuildSCmd)
  return false;
#undef DO_
}

void GuildQuestUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildQuestUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_QUEST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.GuildQuest updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint32 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildQuestUpdateGuildSCmd)
}

::google::protobuf::uint8* GuildQuestUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildQuestUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_QUEST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.GuildQuest updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint32 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildQuestUpdateGuildSCmd)
  return target;
}

int GuildQuestUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_QUEST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildQuest updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint32 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildQuestUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildQuestUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildQuestUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildQuestUpdateGuildSCmd::MergeFrom(const GuildQuestUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildQuestUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildQuestUpdateGuildSCmd::CopyFrom(const GuildQuestUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildQuestUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void GuildQuestUpdateGuildSCmd::Swap(GuildQuestUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildQuestUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildQuestUpdateGuildSCmd_descriptor_;
  metadata.reflection = GuildQuestUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterGuildTerritoryGuildSCmd::kCmdFieldNumber;
const int EnterGuildTerritoryGuildSCmd::kParamFieldNumber;
const int EnterGuildTerritoryGuildSCmd::kCharidFieldNumber;
const int EnterGuildTerritoryGuildSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

EnterGuildTerritoryGuildSCmd::EnterGuildTerritoryGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterGuildTerritoryGuildSCmd)
}

void EnterGuildTerritoryGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

EnterGuildTerritoryGuildSCmd::EnterGuildTerritoryGuildSCmd(const EnterGuildTerritoryGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterGuildTerritoryGuildSCmd)
}

void EnterGuildTerritoryGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 11;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterGuildTerritoryGuildSCmd::~EnterGuildTerritoryGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterGuildTerritoryGuildSCmd)
  SharedDtor();
}

void EnterGuildTerritoryGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void EnterGuildTerritoryGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterGuildTerritoryGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterGuildTerritoryGuildSCmd_descriptor_;
}

const EnterGuildTerritoryGuildSCmd& EnterGuildTerritoryGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

EnterGuildTerritoryGuildSCmd* EnterGuildTerritoryGuildSCmd::default_instance_ = NULL;

EnterGuildTerritoryGuildSCmd* EnterGuildTerritoryGuildSCmd::New() const {
  return new EnterGuildTerritoryGuildSCmd;
}

void EnterGuildTerritoryGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 11;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterGuildTerritoryGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterGuildTerritoryGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ENTER_TERRITORY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterGuildTerritoryGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterGuildTerritoryGuildSCmd)
  return false;
#undef DO_
}

void EnterGuildTerritoryGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterGuildTerritoryGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ENTER_TERRITORY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterGuildTerritoryGuildSCmd)
}

::google::protobuf::uint8* EnterGuildTerritoryGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterGuildTerritoryGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ENTER_TERRITORY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterGuildTerritoryGuildSCmd)
  return target;
}

int EnterGuildTerritoryGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ENTER_TERRITORY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GuildInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterGuildTerritoryGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterGuildTerritoryGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterGuildTerritoryGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterGuildTerritoryGuildSCmd::MergeFrom(const EnterGuildTerritoryGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterGuildTerritoryGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterGuildTerritoryGuildSCmd::CopyFrom(const EnterGuildTerritoryGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterGuildTerritoryGuildSCmd::IsInitialized() const {

  return true;
}

void EnterGuildTerritoryGuildSCmd::Swap(EnterGuildTerritoryGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterGuildTerritoryGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterGuildTerritoryGuildSCmd_descriptor_;
  metadata.reflection = EnterGuildTerritoryGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefreshGuildTerritoryGuildSCmd::kCmdFieldNumber;
const int RefreshGuildTerritoryGuildSCmd::kParamFieldNumber;
const int RefreshGuildTerritoryGuildSCmd::kSceneidFieldNumber;
const int RefreshGuildTerritoryGuildSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

RefreshGuildTerritoryGuildSCmd::RefreshGuildTerritoryGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RefreshGuildTerritoryGuildSCmd)
}

void RefreshGuildTerritoryGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

RefreshGuildTerritoryGuildSCmd::RefreshGuildTerritoryGuildSCmd(const RefreshGuildTerritoryGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RefreshGuildTerritoryGuildSCmd)
}

void RefreshGuildTerritoryGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 12;
  sceneid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefreshGuildTerritoryGuildSCmd::~RefreshGuildTerritoryGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RefreshGuildTerritoryGuildSCmd)
  SharedDtor();
}

void RefreshGuildTerritoryGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RefreshGuildTerritoryGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefreshGuildTerritoryGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefreshGuildTerritoryGuildSCmd_descriptor_;
}

const RefreshGuildTerritoryGuildSCmd& RefreshGuildTerritoryGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

RefreshGuildTerritoryGuildSCmd* RefreshGuildTerritoryGuildSCmd::default_instance_ = NULL;

RefreshGuildTerritoryGuildSCmd* RefreshGuildTerritoryGuildSCmd::New() const {
  return new RefreshGuildTerritoryGuildSCmd;
}

void RefreshGuildTerritoryGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 12;
    sceneid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefreshGuildTerritoryGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RefreshGuildTerritoryGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_REFRESH_TERRITORY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RefreshGuildTerritoryGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RefreshGuildTerritoryGuildSCmd)
  return false;
#undef DO_
}

void RefreshGuildTerritoryGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RefreshGuildTerritoryGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_REFRESH_TERRITORY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 sceneid = 3 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sceneid(), output);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RefreshGuildTerritoryGuildSCmd)
}

::google::protobuf::uint8* RefreshGuildTerritoryGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RefreshGuildTerritoryGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_REFRESH_TERRITORY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 sceneid = 3 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sceneid(), target);
  }

  // optional .Cmd.GuildInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RefreshGuildTerritoryGuildSCmd)
  return target;
}

int RefreshGuildTerritoryGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_REFRESH_TERRITORY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 sceneid = 3 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional .Cmd.GuildInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefreshGuildTerritoryGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefreshGuildTerritoryGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefreshGuildTerritoryGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefreshGuildTerritoryGuildSCmd::MergeFrom(const RefreshGuildTerritoryGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefreshGuildTerritoryGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefreshGuildTerritoryGuildSCmd::CopyFrom(const RefreshGuildTerritoryGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefreshGuildTerritoryGuildSCmd::IsInitialized() const {

  return true;
}

void RefreshGuildTerritoryGuildSCmd::Swap(RefreshGuildTerritoryGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefreshGuildTerritoryGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefreshGuildTerritoryGuildSCmd_descriptor_;
  metadata.reflection = RefreshGuildTerritoryGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryPhotoListGuildSCmd::kCmdFieldNumber;
const int QueryPhotoListGuildSCmd::kParamFieldNumber;
const int QueryPhotoListGuildSCmd::kGuildidFieldNumber;
const int QueryPhotoListGuildSCmd::kSceneidFieldNumber;
const int QueryPhotoListGuildSCmd::kResultFieldNumber;
const int QueryPhotoListGuildSCmd::kFramesFieldNumber;
#endif  // !_MSC_VER

QueryPhotoListGuildSCmd::QueryPhotoListGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryPhotoListGuildSCmd)
}

void QueryPhotoListGuildSCmd::InitAsDefaultInstance() {
}

QueryPhotoListGuildSCmd::QueryPhotoListGuildSCmd(const QueryPhotoListGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryPhotoListGuildSCmd)
}

void QueryPhotoListGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 14;
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryPhotoListGuildSCmd::~QueryPhotoListGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryPhotoListGuildSCmd)
  SharedDtor();
}

void QueryPhotoListGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryPhotoListGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryPhotoListGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryPhotoListGuildSCmd_descriptor_;
}

const QueryPhotoListGuildSCmd& QueryPhotoListGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

QueryPhotoListGuildSCmd* QueryPhotoListGuildSCmd::default_instance_ = NULL;

QueryPhotoListGuildSCmd* QueryPhotoListGuildSCmd::New() const {
  return new QueryPhotoListGuildSCmd;
}

void QueryPhotoListGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryPhotoListGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guildid_, result_);
    cmd_ = 210;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryPhotoListGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryPhotoListGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_PHOTOLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional bool result = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        break;
      }

      // repeated .Cmd.PhotoFrame frames = 6;
      case 6: {
        if (tag == 50) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryPhotoListGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryPhotoListGuildSCmd)
  return false;
#undef DO_
}

void QueryPhotoListGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryPhotoListGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_PHOTOLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional bool result = 5 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->result(), output);
  }

  // repeated .Cmd.PhotoFrame frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryPhotoListGuildSCmd)
}

::google::protobuf::uint8* QueryPhotoListGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryPhotoListGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_PHOTOLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional bool result = 5 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->result(), target);
  }

  // repeated .Cmd.PhotoFrame frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryPhotoListGuildSCmd)
  return target;
}

int QueryPhotoListGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_PHOTOLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional bool result = 5 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.PhotoFrame frames = 6;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryPhotoListGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryPhotoListGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryPhotoListGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryPhotoListGuildSCmd::MergeFrom(const QueryPhotoListGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryPhotoListGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryPhotoListGuildSCmd::CopyFrom(const QueryPhotoListGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryPhotoListGuildSCmd::IsInitialized() const {

  return true;
}

void QueryPhotoListGuildSCmd::Swap(QueryPhotoListGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(result_, other->result_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryPhotoListGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryPhotoListGuildSCmd_descriptor_;
  metadata.reflection = QueryPhotoListGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUserPhotoListGuildSCmd::kCmdFieldNumber;
const int QueryUserPhotoListGuildSCmd::kParamFieldNumber;
const int QueryUserPhotoListGuildSCmd::kGuildidFieldNumber;
const int QueryUserPhotoListGuildSCmd::kResultFieldNumber;
const int QueryUserPhotoListGuildSCmd::kUserFieldNumber;
const int QueryUserPhotoListGuildSCmd::kFramesFieldNumber;
#endif  // !_MSC_VER

QueryUserPhotoListGuildSCmd::QueryUserPhotoListGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUserPhotoListGuildSCmd)
}

void QueryUserPhotoListGuildSCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

QueryUserPhotoListGuildSCmd::QueryUserPhotoListGuildSCmd(const QueryUserPhotoListGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUserPhotoListGuildSCmd)
}

void QueryUserPhotoListGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 15;
  guildid_ = GOOGLE_ULONGLONG(0);
  result_ = false;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUserPhotoListGuildSCmd::~QueryUserPhotoListGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUserPhotoListGuildSCmd)
  SharedDtor();
}

void QueryUserPhotoListGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void QueryUserPhotoListGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUserPhotoListGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUserPhotoListGuildSCmd_descriptor_;
}

const QueryUserPhotoListGuildSCmd& QueryUserPhotoListGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

QueryUserPhotoListGuildSCmd* QueryUserPhotoListGuildSCmd::default_instance_ = NULL;

QueryUserPhotoListGuildSCmd* QueryUserPhotoListGuildSCmd::New() const {
  return new QueryUserPhotoListGuildSCmd;
}

void QueryUserPhotoListGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 210;
    param_ = 15;
    guildid_ = GOOGLE_ULONGLONG(0);
    result_ = false;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }
  frames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUserPhotoListGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUserPhotoListGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_USERPHOTOLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional bool result = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 5;
      case 5: {
        if (tag == 42) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        break;
      }

      // repeated .Cmd.PhotoFrame frames = 6;
      case 6: {
        if (tag == 50) {
         parse_frames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frames()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_frames;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUserPhotoListGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUserPhotoListGuildSCmd)
  return false;
#undef DO_
}

void QueryUserPhotoListGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUserPhotoListGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_USERPHOTOLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional bool result = 4 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->result(), output);
  }

  // optional .Cmd.SocialUser user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->user(), output);
  }

  // repeated .Cmd.PhotoFrame frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->frames(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUserPhotoListGuildSCmd)
}

::google::protobuf::uint8* QueryUserPhotoListGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUserPhotoListGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_USERPHOTOLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional bool result = 4 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->result(), target);
  }

  // optional .Cmd.SocialUser user = 5;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->user(), target);
  }

  // repeated .Cmd.PhotoFrame frames = 6;
  for (int i = 0; i < this->frames_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->frames(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUserPhotoListGuildSCmd)
  return target;
}

int QueryUserPhotoListGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_USERPHOTOLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional bool result = 4 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.SocialUser user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .Cmd.PhotoFrame frames = 6;
  total_size += 1 * this->frames_size();
  for (int i = 0; i < this->frames_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frames(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUserPhotoListGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUserPhotoListGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUserPhotoListGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUserPhotoListGuildSCmd::MergeFrom(const QueryUserPhotoListGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  frames_.MergeFrom(from.frames_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUserPhotoListGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUserPhotoListGuildSCmd::CopyFrom(const QueryUserPhotoListGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUserPhotoListGuildSCmd::IsInitialized() const {

  return true;
}

void QueryUserPhotoListGuildSCmd::Swap(QueryUserPhotoListGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(result_, other->result_);
    std::swap(user_, other->user_);
    frames_.Swap(&other->frames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUserPhotoListGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUserPhotoListGuildSCmd_descriptor_;
  metadata.reflection = QueryUserPhotoListGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoLoad::kFrameidFieldNumber;
const int PhotoLoad::kCountFieldNumber;
#endif  // !_MSC_VER

PhotoLoad::PhotoLoad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoLoad)
}

void PhotoLoad::InitAsDefaultInstance() {
}

PhotoLoad::PhotoLoad(const PhotoLoad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoLoad)
}

void PhotoLoad::SharedCtor() {
  _cached_size_ = 0;
  frameid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoLoad::~PhotoLoad() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoLoad)
  SharedDtor();
}

void PhotoLoad::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PhotoLoad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoLoad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoLoad_descriptor_;
}

const PhotoLoad& PhotoLoad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

PhotoLoad* PhotoLoad::default_instance_ = NULL;

PhotoLoad* PhotoLoad::New() const {
  return new PhotoLoad;
}

void PhotoLoad::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhotoLoad*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(frameid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoLoad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoLoad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 frameid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoLoad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoLoad)
  return false;
#undef DO_
}

void PhotoLoad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoLoad)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->frameid(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoLoad)
}

::google::protobuf::uint8* PhotoLoad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoLoad)
  // optional uint32 frameid = 1 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->frameid(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoLoad)
  return target;
}

int PhotoLoad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 frameid = 1 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoLoad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoLoad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoLoad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoLoad::MergeFrom(const PhotoLoad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoLoad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoLoad::CopyFrom(const PhotoLoad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoLoad::IsInitialized() const {

  return true;
}

void PhotoLoad::Swap(PhotoLoad* other) {
  if (other != this) {
    std::swap(frameid_, other->frameid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoLoad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoLoad_descriptor_;
  metadata.reflection = PhotoLoad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryShowPhotoGuildSCmd::kCmdFieldNumber;
const int QueryShowPhotoGuildSCmd::kParamFieldNumber;
const int QueryShowPhotoGuildSCmd::kActionFieldNumber;
const int QueryShowPhotoGuildSCmd::kGuildidFieldNumber;
const int QueryShowPhotoGuildSCmd::kLoadsFieldNumber;
const int QueryShowPhotoGuildSCmd::kExistsFieldNumber;
const int QueryShowPhotoGuildSCmd::kMembersFieldNumber;
const int QueryShowPhotoGuildSCmd::kResultsFieldNumber;
#endif  // !_MSC_VER

QueryShowPhotoGuildSCmd::QueryShowPhotoGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryShowPhotoGuildSCmd)
}

void QueryShowPhotoGuildSCmd::InitAsDefaultInstance() {
}

QueryShowPhotoGuildSCmd::QueryShowPhotoGuildSCmd(const QueryShowPhotoGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryShowPhotoGuildSCmd)
}

void QueryShowPhotoGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 16;
  action_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryShowPhotoGuildSCmd::~QueryShowPhotoGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryShowPhotoGuildSCmd)
  SharedDtor();
}

void QueryShowPhotoGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryShowPhotoGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryShowPhotoGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryShowPhotoGuildSCmd_descriptor_;
}

const QueryShowPhotoGuildSCmd& QueryShowPhotoGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

QueryShowPhotoGuildSCmd* QueryShowPhotoGuildSCmd::default_instance_ = NULL;

QueryShowPhotoGuildSCmd* QueryShowPhotoGuildSCmd::New() const {
  return new QueryShowPhotoGuildSCmd;
}

void QueryShowPhotoGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 16;
    action_ = 0;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  loads_.Clear();
  exists_.Clear();
  members_.Clear();
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryShowPhotoGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryShowPhotoGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_SHOWPHOTOLIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EPhotoAction action = 3 [default = EPHOTOACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPhotoAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EPhotoAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loads;
        break;
      }

      // repeated .Cmd.PhotoLoad loads = 5;
      case 5: {
        if (tag == 42) {
         parse_loads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_loads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loads;
        if (input->ExpectTag(50)) goto parse_exists;
        break;
      }

      // repeated string exists = 6;
      case 6: {
        if (tag == 50) {
         parse_exists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_exists()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->exists(this->exists_size() - 1).data(),
            this->exists(this->exists_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "exists");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_exists;
        if (input->ExpectTag(56)) goto parse_members;
        break;
      }

      // repeated uint64 members = 7;
      case 7: {
        if (tag == 56) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_members())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_members;
        if (input->ExpectTag(66)) goto parse_results;
        break;
      }

      // repeated .Cmd.PhotoFrame results = 8;
      case 8: {
        if (tag == 66) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_results;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryShowPhotoGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryShowPhotoGuildSCmd)
  return false;
#undef DO_
}

void QueryShowPhotoGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryShowPhotoGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_SHOWPHOTOLIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EPhotoAction action = 3 [default = EPHOTOACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // repeated .Cmd.PhotoLoad loads = 5;
  for (int i = 0; i < this->loads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->loads(i), output);
  }

  // repeated string exists = 6;
  for (int i = 0; i < this->exists_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->exists(i).data(), this->exists(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "exists");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->exists(i), output);
  }

  // repeated uint64 members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->members(i), output);
  }

  // repeated .Cmd.PhotoFrame results = 8;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryShowPhotoGuildSCmd)
}

::google::protobuf::uint8* QueryShowPhotoGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryShowPhotoGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_SHOWPHOTOLIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EPhotoAction action = 3 [default = EPHOTOACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // repeated .Cmd.PhotoLoad loads = 5;
  for (int i = 0; i < this->loads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->loads(i), target);
  }

  // repeated string exists = 6;
  for (int i = 0; i < this->exists_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->exists(i).data(), this->exists(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "exists");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->exists(i), target);
  }

  // repeated uint64 members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->members(i), target);
  }

  // repeated .Cmd.PhotoFrame results = 8;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryShowPhotoGuildSCmd)
  return target;
}

int QueryShowPhotoGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_SHOWPHOTOLIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EPhotoAction action = 3 [default = EPHOTOACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  // repeated .Cmd.PhotoLoad loads = 5;
  total_size += 1 * this->loads_size();
  for (int i = 0; i < this->loads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->loads(i));
  }

  // repeated string exists = 6;
  total_size += 1 * this->exists_size();
  for (int i = 0; i < this->exists_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->exists(i));
  }

  // repeated uint64 members = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  // repeated .Cmd.PhotoFrame results = 8;
  total_size += 1 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryShowPhotoGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryShowPhotoGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryShowPhotoGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryShowPhotoGuildSCmd::MergeFrom(const QueryShowPhotoGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  loads_.MergeFrom(from.loads_);
  exists_.MergeFrom(from.exists_);
  members_.MergeFrom(from.members_);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryShowPhotoGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryShowPhotoGuildSCmd::CopyFrom(const QueryShowPhotoGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryShowPhotoGuildSCmd::IsInitialized() const {

  return true;
}

void QueryShowPhotoGuildSCmd::Swap(QueryShowPhotoGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(guildid_, other->guildid_);
    loads_.Swap(&other->loads_);
    exists_.Swap(&other->exists_);
    members_.Swap(&other->members_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryShowPhotoGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryShowPhotoGuildSCmd_descriptor_;
  metadata.reflection = QueryShowPhotoGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameUpdateGuildSCmd::kCmdFieldNumber;
const int FrameUpdateGuildSCmd::kParamFieldNumber;
const int FrameUpdateGuildSCmd::kGuildidFieldNumber;
const int FrameUpdateGuildSCmd::kFrameidFieldNumber;
const int FrameUpdateGuildSCmd::kUpdateFieldNumber;
const int FrameUpdateGuildSCmd::kDelFieldNumber;
#endif  // !_MSC_VER

FrameUpdateGuildSCmd::FrameUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FrameUpdateGuildSCmd)
}

void FrameUpdateGuildSCmd::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
  del_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
}

FrameUpdateGuildSCmd::FrameUpdateGuildSCmd(const FrameUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FrameUpdateGuildSCmd)
}

void FrameUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 17;
  guildid_ = GOOGLE_ULONGLONG(0);
  frameid_ = 0u;
  update_ = NULL;
  del_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameUpdateGuildSCmd::~FrameUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FrameUpdateGuildSCmd)
  SharedDtor();
}

void FrameUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
    delete del_;
  }
}

void FrameUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameUpdateGuildSCmd_descriptor_;
}

const FrameUpdateGuildSCmd& FrameUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

FrameUpdateGuildSCmd* FrameUpdateGuildSCmd::default_instance_ = NULL;

FrameUpdateGuildSCmd* FrameUpdateGuildSCmd::New() const {
  return new FrameUpdateGuildSCmd;
}

void FrameUpdateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 210;
    param_ = 17;
    guildid_ = GOOGLE_ULONGLONG(0);
    frameid_ = 0u;
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::GuildPhoto::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::Cmd::GuildPhoto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FrameUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_FRAME_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_frameid;
        break;
      }

      // optional uint32 frameid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_frameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frameid_)));
          set_has_frameid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_update;
        break;
      }

      // optional .Cmd.GuildPhoto update = 5;
      case 5: {
        if (tag == 42) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_del;
        break;
      }

      // optional .Cmd.GuildPhoto del = 6;
      case 6: {
        if (tag == 50) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FrameUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FrameUpdateGuildSCmd)
  return false;
#undef DO_
}

void FrameUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FrameUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_FRAME_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 frameid = 4 [default = 0];
  if (has_frameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->frameid(), output);
  }

  // optional .Cmd.GuildPhoto update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->update(), output);
  }

  // optional .Cmd.GuildPhoto del = 6;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->del(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FrameUpdateGuildSCmd)
}

::google::protobuf::uint8* FrameUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FrameUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_FRAME_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 frameid = 4 [default = 0];
  if (has_frameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->frameid(), target);
  }

  // optional .Cmd.GuildPhoto update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->update(), target);
  }

  // optional .Cmd.GuildPhoto del = 6;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->del(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FrameUpdateGuildSCmd)
  return target;
}

int FrameUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_FRAME_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 frameid = 4 [default = 0];
    if (has_frameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frameid());
    }

    // optional .Cmd.GuildPhoto update = 5;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional .Cmd.GuildPhoto del = 6;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameUpdateGuildSCmd::MergeFrom(const FrameUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_frameid()) {
      set_frameid(from.frameid());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::GuildPhoto::MergeFrom(from.update());
    }
    if (from.has_del()) {
      mutable_del()->::Cmd::GuildPhoto::MergeFrom(from.del());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameUpdateGuildSCmd::CopyFrom(const FrameUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void FrameUpdateGuildSCmd::Swap(FrameUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(frameid_, other->frameid_);
    std::swap(update_, other->update_);
    std::swap(del_, other->del_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameUpdateGuildSCmd_descriptor_;
  metadata.reflection = FrameUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PhotoUpdateGuildSCmd::kCmdFieldNumber;
const int PhotoUpdateGuildSCmd::kParamFieldNumber;
const int PhotoUpdateGuildSCmd::kGuildidFieldNumber;
const int PhotoUpdateGuildSCmd::kSceneidFieldNumber;
const int PhotoUpdateGuildSCmd::kUpdateFieldNumber;
const int PhotoUpdateGuildSCmd::kDelFieldNumber;
const int PhotoUpdateGuildSCmd::kToGuildFieldNumber;
#endif  // !_MSC_VER

PhotoUpdateGuildSCmd::PhotoUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PhotoUpdateGuildSCmd)
}

void PhotoUpdateGuildSCmd::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
  del_ = const_cast< ::Cmd::GuildPhoto*>(&::Cmd::GuildPhoto::default_instance());
}

PhotoUpdateGuildSCmd::PhotoUpdateGuildSCmd(const PhotoUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PhotoUpdateGuildSCmd)
}

void PhotoUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 18;
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  update_ = NULL;
  del_ = NULL;
  to_guild_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PhotoUpdateGuildSCmd::~PhotoUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PhotoUpdateGuildSCmd)
  SharedDtor();
}

void PhotoUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
    delete del_;
  }
}

void PhotoUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PhotoUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PhotoUpdateGuildSCmd_descriptor_;
}

const PhotoUpdateGuildSCmd& PhotoUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

PhotoUpdateGuildSCmd* PhotoUpdateGuildSCmd::default_instance_ = NULL;

PhotoUpdateGuildSCmd* PhotoUpdateGuildSCmd::New() const {
  return new PhotoUpdateGuildSCmd;
}

void PhotoUpdateGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PhotoUpdateGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(sceneid_, to_guild_);
    cmd_ = 210;
    param_ = 18;
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::GuildPhoto::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::Cmd::GuildPhoto::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PhotoUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PhotoUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_PHOTO_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_update;
        break;
      }

      // optional .Cmd.GuildPhoto update = 5;
      case 5: {
        if (tag == 42) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_del;
        break;
      }

      // optional .Cmd.GuildPhoto del = 6;
      case 6: {
        if (tag == 50) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_guild;
        break;
      }

      // optional bool to_guild = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_to_guild:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_guild_)));
          set_has_to_guild();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PhotoUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PhotoUpdateGuildSCmd)
  return false;
#undef DO_
}

void PhotoUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PhotoUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_PHOTO_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional .Cmd.GuildPhoto update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->update(), output);
  }

  // optional .Cmd.GuildPhoto del = 6;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->del(), output);
  }

  // optional bool to_guild = 7 [default = false];
  if (has_to_guild()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->to_guild(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PhotoUpdateGuildSCmd)
}

::google::protobuf::uint8* PhotoUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PhotoUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_PHOTO_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional .Cmd.GuildPhoto update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->update(), target);
  }

  // optional .Cmd.GuildPhoto del = 6;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->del(), target);
  }

  // optional bool to_guild = 7 [default = false];
  if (has_to_guild()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->to_guild(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PhotoUpdateGuildSCmd)
  return target;
}

int PhotoUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_PHOTO_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional .Cmd.GuildPhoto update = 5;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional .Cmd.GuildPhoto del = 6;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

    // optional bool to_guild = 7 [default = false];
    if (has_to_guild()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PhotoUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PhotoUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PhotoUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PhotoUpdateGuildSCmd::MergeFrom(const PhotoUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::GuildPhoto::MergeFrom(from.update());
    }
    if (from.has_del()) {
      mutable_del()->::Cmd::GuildPhoto::MergeFrom(from.del());
    }
    if (from.has_to_guild()) {
      set_to_guild(from.to_guild());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PhotoUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PhotoUpdateGuildSCmd::CopyFrom(const PhotoUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhotoUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void PhotoUpdateGuildSCmd::Swap(PhotoUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(update_, other->update_);
    std::swap(del_, other->del_);
    std::swap(to_guild_, other->to_guild_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PhotoUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PhotoUpdateGuildSCmd_descriptor_;
  metadata.reflection = PhotoUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobUpdateGuildSCmd::kCmdFieldNumber;
const int JobUpdateGuildSCmd::kParamFieldNumber;
const int JobUpdateGuildSCmd::kGuildidFieldNumber;
const int JobUpdateGuildSCmd::kCharidFieldNumber;
const int JobUpdateGuildSCmd::kJobFieldNumber;
#endif  // !_MSC_VER

JobUpdateGuildSCmd::JobUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JobUpdateGuildSCmd)
}

void JobUpdateGuildSCmd::InitAsDefaultInstance() {
  job_ = const_cast< ::Cmd::GuildJob*>(&::Cmd::GuildJob::default_instance());
}

JobUpdateGuildSCmd::JobUpdateGuildSCmd(const JobUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JobUpdateGuildSCmd)
}

void JobUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 19;
  guildid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  job_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobUpdateGuildSCmd::~JobUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JobUpdateGuildSCmd)
  SharedDtor();
}

void JobUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete job_;
  }
}

void JobUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobUpdateGuildSCmd_descriptor_;
}

const JobUpdateGuildSCmd& JobUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

JobUpdateGuildSCmd* JobUpdateGuildSCmd::default_instance_ = NULL;

JobUpdateGuildSCmd* JobUpdateGuildSCmd::New() const {
  return new JobUpdateGuildSCmd;
}

void JobUpdateGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JobUpdateGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guildid_, charid_);
    cmd_ = 210;
    param_ = 19;
    if (has_job()) {
      if (job_ != NULL) job_->::Cmd::GuildJob::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JobUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOB_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_job;
        break;
      }

      // optional .Cmd.GuildJob job = 5;
      case 5: {
        if (tag == 42) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JobUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JobUpdateGuildSCmd)
  return false;
#undef DO_
}

void JobUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JobUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOB_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.GuildJob job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JobUpdateGuildSCmd)
}

::google::protobuf::uint8* JobUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JobUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOB_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.GuildJob job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JobUpdateGuildSCmd)
  return target;
}

int JobUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOB_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GuildJob job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobUpdateGuildSCmd::MergeFrom(const JobUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_job()) {
      mutable_job()->::Cmd::GuildJob::MergeFrom(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobUpdateGuildSCmd::CopyFrom(const JobUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void JobUpdateGuildSCmd::Swap(JobUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(charid_, other->charid_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobUpdateGuildSCmd_descriptor_;
  metadata.reflection = JobUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildMusicDeleteGuildSCmd::kCmdFieldNumber;
const int GuildMusicDeleteGuildSCmd::kParamFieldNumber;
const int GuildMusicDeleteGuildSCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildMusicDeleteGuildSCmd::GuildMusicDeleteGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildMusicDeleteGuildSCmd)
}

void GuildMusicDeleteGuildSCmd::InitAsDefaultInstance() {
}

GuildMusicDeleteGuildSCmd::GuildMusicDeleteGuildSCmd(const GuildMusicDeleteGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildMusicDeleteGuildSCmd)
}

void GuildMusicDeleteGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 20;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildMusicDeleteGuildSCmd::~GuildMusicDeleteGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildMusicDeleteGuildSCmd)
  SharedDtor();
}

void GuildMusicDeleteGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildMusicDeleteGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildMusicDeleteGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildMusicDeleteGuildSCmd_descriptor_;
}

const GuildMusicDeleteGuildSCmd& GuildMusicDeleteGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildMusicDeleteGuildSCmd* GuildMusicDeleteGuildSCmd::default_instance_ = NULL;

GuildMusicDeleteGuildSCmd* GuildMusicDeleteGuildSCmd::New() const {
  return new GuildMusicDeleteGuildSCmd;
}

void GuildMusicDeleteGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 20;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildMusicDeleteGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildMusicDeleteGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MUSIC_DELETE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildMusicDeleteGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildMusicDeleteGuildSCmd)
  return false;
#undef DO_
}

void GuildMusicDeleteGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildMusicDeleteGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MUSIC_DELETE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildMusicDeleteGuildSCmd)
}

::google::protobuf::uint8* GuildMusicDeleteGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildMusicDeleteGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MUSIC_DELETE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildMusicDeleteGuildSCmd)
  return target;
}

int GuildMusicDeleteGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MUSIC_DELETE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildMusicDeleteGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildMusicDeleteGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildMusicDeleteGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildMusicDeleteGuildSCmd::MergeFrom(const GuildMusicDeleteGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildMusicDeleteGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildMusicDeleteGuildSCmd::CopyFrom(const GuildMusicDeleteGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildMusicDeleteGuildSCmd::IsInitialized() const {

  return true;
}

void GuildMusicDeleteGuildSCmd::Swap(GuildMusicDeleteGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildMusicDeleteGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildMusicDeleteGuildSCmd_descriptor_;
  metadata.reflection = GuildMusicDeleteGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameNTFGuildCmd::kCmdFieldNumber;
const int RenameNTFGuildCmd::kParamFieldNumber;
const int RenameNTFGuildCmd::kUserFieldNumber;
const int RenameNTFGuildCmd::kNewnameFieldNumber;
const int RenameNTFGuildCmd::kResultFieldNumber;
#endif  // !_MSC_VER

RenameNTFGuildCmd::RenameNTFGuildCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RenameNTFGuildCmd)
}

void RenameNTFGuildCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

RenameNTFGuildCmd::RenameNTFGuildCmd(const RenameNTFGuildCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RenameNTFGuildCmd)
}

void RenameNTFGuildCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 21;
  user_ = NULL;
  newname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameNTFGuildCmd::~RenameNTFGuildCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RenameNTFGuildCmd)
  SharedDtor();
}

void RenameNTFGuildCmd::SharedDtor() {
  if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete newname_;
  }
  if (this != default_instance_) {
    delete user_;
  }
}

void RenameNTFGuildCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameNTFGuildCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameNTFGuildCmd_descriptor_;
}

const RenameNTFGuildCmd& RenameNTFGuildCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

RenameNTFGuildCmd* RenameNTFGuildCmd::default_instance_ = NULL;

RenameNTFGuildCmd* RenameNTFGuildCmd::New() const {
  return new RenameNTFGuildCmd;
}

void RenameNTFGuildCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 210;
    param_ = 21;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    if (has_newname()) {
      if (newname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        newname_->clear();
      }
    }
    result_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameNTFGuildCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RenameNTFGuildCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_RENAME_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newname;
        break;
      }

      // optional string newname = 4;
      case 4: {
        if (tag == 34) {
         parse_newname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_newname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->newname().data(), this->newname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "newname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional bool result = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RenameNTFGuildCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RenameNTFGuildCmd)
  return false;
#undef DO_
}

void RenameNTFGuildCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RenameNTFGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_RENAME_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional string newname = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->newname(), output);
  }

  // optional bool result = 5 [default = true];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RenameNTFGuildCmd)
}

::google::protobuf::uint8* RenameNTFGuildCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RenameNTFGuildCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_RENAME_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional string newname = 4;
  if (has_newname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->newname().data(), this->newname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "newname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->newname(), target);
  }

  // optional bool result = 5 [default = true];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RenameNTFGuildCmd)
  return target;
}

int RenameNTFGuildCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_RENAME_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional string newname = 4;
    if (has_newname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->newname());
    }

    // optional bool result = 5 [default = true];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameNTFGuildCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameNTFGuildCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameNTFGuildCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameNTFGuildCmd::MergeFrom(const RenameNTFGuildCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_newname()) {
      set_newname(from.newname());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameNTFGuildCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameNTFGuildCmd::CopyFrom(const RenameNTFGuildCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameNTFGuildCmd::IsInitialized() const {

  return true;
}

void RenameNTFGuildCmd::Swap(RenameNTFGuildCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(newname_, other->newname_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameNTFGuildCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameNTFGuildCmd_descriptor_;
  metadata.reflection = RenameNTFGuildCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildCityActionGuildSCmd::kCmdFieldNumber;
const int GuildCityActionGuildSCmd::kParamFieldNumber;
const int GuildCityActionGuildSCmd::kActionFieldNumber;
const int GuildCityActionGuildSCmd::kStatusFieldNumber;
const int GuildCityActionGuildSCmd::kResultFieldNumber;
const int GuildCityActionGuildSCmd::kZoneidFieldNumber;
const int GuildCityActionGuildSCmd::kScenenameFieldNumber;
const int GuildCityActionGuildSCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

GuildCityActionGuildSCmd::GuildCityActionGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildCityActionGuildSCmd)
}

void GuildCityActionGuildSCmd::InitAsDefaultInstance() {
}

GuildCityActionGuildSCmd::GuildCityActionGuildSCmd(const GuildCityActionGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildCityActionGuildSCmd)
}

void GuildCityActionGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 22;
  action_ = 0;
  status_ = 0;
  result_ = 0;
  zoneid_ = 0u;
  scenename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildCityActionGuildSCmd::~GuildCityActionGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildCityActionGuildSCmd)
  SharedDtor();
}

void GuildCityActionGuildSCmd::SharedDtor() {
  if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete scenename_;
  }
  if (this != default_instance_) {
  }
}

void GuildCityActionGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildCityActionGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildCityActionGuildSCmd_descriptor_;
}

const GuildCityActionGuildSCmd& GuildCityActionGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildCityActionGuildSCmd* GuildCityActionGuildSCmd::default_instance_ = NULL;

GuildCityActionGuildSCmd* GuildCityActionGuildSCmd::New() const {
  return new GuildCityActionGuildSCmd;
}

void GuildCityActionGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildCityActionGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(action_, zoneid_);
    cmd_ = 210;
    param_ = 22;
    if (has_scenename()) {
      if (scenename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        scenename_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildCityActionGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildCityActionGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_CITY_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EGuildCityAction action = 3 [default = EGUILDCITYACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildCityAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EGuildCityAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional .Cmd.EGuildCityStatus status = 4 [default = EGUILDCITYSTATUS_MIN];
      case 4: {
        if (tag == 32) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildCityStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EGuildCityStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional .Cmd.EGuildCityResult result = 5 [default = EGUILDCITYRESULT_MIN];
      case 5: {
        if (tag == 40) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildCityResult_IsValid(value)) {
            set_result(static_cast< ::Cmd::EGuildCityResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_scenename;
        break;
      }

      // optional string scenename = 7;
      case 7: {
        if (tag == 58) {
         parse_scenename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scenename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scenename().data(), this->scenename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "scenename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_infos;
        break;
      }

      // repeated .Cmd.GuildCityInfo infos = 8;
      case 8: {
        if (tag == 66) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildCityActionGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildCityActionGuildSCmd)
  return false;
#undef DO_
}

void GuildCityActionGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildCityActionGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_CITY_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGuildCityAction action = 3 [default = EGUILDCITYACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional .Cmd.EGuildCityStatus status = 4 [default = EGUILDCITYSTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->status(), output);
  }

  // optional .Cmd.EGuildCityResult result = 5 [default = EGUILDCITYRESULT_MIN];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->result(), output);
  }

  // optional uint32 zoneid = 6 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zoneid(), output);
  }

  // optional string scenename = 7;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->scenename(), output);
  }

  // repeated .Cmd.GuildCityInfo infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildCityActionGuildSCmd)
}

::google::protobuf::uint8* GuildCityActionGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildCityActionGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_CITY_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGuildCityAction action = 3 [default = EGUILDCITYACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional .Cmd.EGuildCityStatus status = 4 [default = EGUILDCITYSTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->status(), target);
  }

  // optional .Cmd.EGuildCityResult result = 5 [default = EGUILDCITYRESULT_MIN];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->result(), target);
  }

  // optional uint32 zoneid = 6 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zoneid(), target);
  }

  // optional string scenename = 7;
  if (has_scenename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scenename().data(), this->scenename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "scenename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->scenename(), target);
  }

  // repeated .Cmd.GuildCityInfo infos = 8;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildCityActionGuildSCmd)
  return target;
}

int GuildCityActionGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_CITY_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGuildCityAction action = 3 [default = EGUILDCITYACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .Cmd.EGuildCityStatus status = 4 [default = EGUILDCITYSTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .Cmd.EGuildCityResult result = 5 [default = EGUILDCITYRESULT_MIN];
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 zoneid = 6 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string scenename = 7;
    if (has_scenename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scenename());
    }

  }
  // repeated .Cmd.GuildCityInfo infos = 8;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildCityActionGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildCityActionGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildCityActionGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildCityActionGuildSCmd::MergeFrom(const GuildCityActionGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_scenename()) {
      set_scenename(from.scenename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildCityActionGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildCityActionGuildSCmd::CopyFrom(const GuildCityActionGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildCityActionGuildSCmd::IsInitialized() const {

  return true;
}

void GuildCityActionGuildSCmd::Swap(GuildCityActionGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(status_, other->status_);
    std::swap(result_, other->result_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(scenename_, other->scenename_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildCityActionGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildCityActionGuildSCmd_descriptor_;
  metadata.reflection = GuildCityActionGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailGuildSCmd::kCmdFieldNumber;
const int SendMailGuildSCmd::kParamFieldNumber;
const int SendMailGuildSCmd::kDataFieldNumber;
#endif  // !_MSC_VER

SendMailGuildSCmd::SendMailGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendMailGuildSCmd)
}

void SendMailGuildSCmd::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::MailData*>(&::Cmd::MailData::default_instance());
}

SendMailGuildSCmd::SendMailGuildSCmd(const SendMailGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendMailGuildSCmd)
}

void SendMailGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 23;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailGuildSCmd::~SendMailGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SendMailGuildSCmd)
  SharedDtor();
}

void SendMailGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void SendMailGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailGuildSCmd_descriptor_;
}

const SendMailGuildSCmd& SendMailGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

SendMailGuildSCmd* SendMailGuildSCmd::default_instance_ = NULL;

SendMailGuildSCmd* SendMailGuildSCmd::New() const {
  return new SendMailGuildSCmd;
}

void SendMailGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 23;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::MailData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendMailGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_MAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.MailData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendMailGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendMailGuildSCmd)
  return false;
#undef DO_
}

void SendMailGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendMailGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_MAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendMailGuildSCmd)
}

::google::protobuf::uint8* SendMailGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendMailGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_MAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MailData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendMailGuildSCmd)
  return target;
}

int SendMailGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_MAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MailData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailGuildSCmd::MergeFrom(const SendMailGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::MailData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailGuildSCmd::CopyFrom(const SendMailGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailGuildSCmd::IsInitialized() const {

  return true;
}

void SendMailGuildSCmd::Swap(SendMailGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailGuildSCmd_descriptor_;
  metadata.reflection = SendMailGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVGRewardGuildSCmd::kCmdFieldNumber;
const int GVGRewardGuildSCmd::kParamFieldNumber;
const int GVGRewardGuildSCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

GVGRewardGuildSCmd::GVGRewardGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GVGRewardGuildSCmd)
}

void GVGRewardGuildSCmd::InitAsDefaultInstance() {
}

GVGRewardGuildSCmd::GVGRewardGuildSCmd(const GVGRewardGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GVGRewardGuildSCmd)
}

void GVGRewardGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 24;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVGRewardGuildSCmd::~GVGRewardGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GVGRewardGuildSCmd)
  SharedDtor();
}

void GVGRewardGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVGRewardGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVGRewardGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVGRewardGuildSCmd_descriptor_;
}

const GVGRewardGuildSCmd& GVGRewardGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GVGRewardGuildSCmd* GVGRewardGuildSCmd::default_instance_ = NULL;

GVGRewardGuildSCmd* GVGRewardGuildSCmd::New() const {
  return new GVGRewardGuildSCmd;
}

void GVGRewardGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 24;
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVGRewardGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GVGRewardGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GVGRewardGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GVGRewardGuildSCmd)
  return false;
#undef DO_
}

void GVGRewardGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GVGRewardGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GVGRewardGuildSCmd)
}

::google::protobuf::uint8* GVGRewardGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GVGRewardGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GVGRewardGuildSCmd)
  return target;
}

int GVGRewardGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVGRewardGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVGRewardGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVGRewardGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVGRewardGuildSCmd::MergeFrom(const GVGRewardGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVGRewardGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVGRewardGuildSCmd::CopyFrom(const GVGRewardGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVGRewardGuildSCmd::IsInitialized() const {

  return true;
}

void GVGRewardGuildSCmd::Swap(GVGRewardGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVGRewardGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVGRewardGuildSCmd_descriptor_;
  metadata.reflection = GVGRewardGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildPrayGuildSCmd::kCmdFieldNumber;
const int GuildPrayGuildSCmd::kParamFieldNumber;
const int GuildPrayGuildSCmd::kUserFieldNumber;
const int GuildPrayGuildSCmd::kNpcidFieldNumber;
const int GuildPrayGuildSCmd::kPrayidFieldNumber;
const int GuildPrayGuildSCmd::kPraylvFieldNumber;
const int GuildPrayGuildSCmd::kNeedconFieldNumber;
const int GuildPrayGuildSCmd::kNeedmonFieldNumber;
const int GuildPrayGuildSCmd::kPrayitemFieldNumber;
const int GuildPrayGuildSCmd::kMsgidFieldNumber;
#endif  // !_MSC_VER

GuildPrayGuildSCmd::GuildPrayGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildPrayGuildSCmd)
}

void GuildPrayGuildSCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

GuildPrayGuildSCmd::GuildPrayGuildSCmd(const GuildPrayGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildPrayGuildSCmd)
}

void GuildPrayGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 25;
  user_ = NULL;
  npcid_ = GOOGLE_ULONGLONG(0);
  prayid_ = 0u;
  praylv_ = 0u;
  needcon_ = 0u;
  needmon_ = 0u;
  prayitem_ = 0u;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildPrayGuildSCmd::~GuildPrayGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildPrayGuildSCmd)
  SharedDtor();
}

void GuildPrayGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void GuildPrayGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildPrayGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildPrayGuildSCmd_descriptor_;
}

const GuildPrayGuildSCmd& GuildPrayGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildPrayGuildSCmd* GuildPrayGuildSCmd::default_instance_ = NULL;

GuildPrayGuildSCmd* GuildPrayGuildSCmd::New() const {
  return new GuildPrayGuildSCmd;
}

void GuildPrayGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildPrayGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(npcid_, needmon_);
    cmd_ = 210;
    param_ = 25;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }
  ZR_(prayitem_, msgid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildPrayGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildPrayGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILDPRAY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_npcid;
        break;
      }

      // optional uint64 npcid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_npcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_prayid;
        break;
      }

      // optional uint32 prayid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_prayid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prayid_)));
          set_has_prayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_praylv;
        break;
      }

      // optional uint32 praylv = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_praylv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &praylv_)));
          set_has_praylv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_needcon;
        break;
      }

      // optional uint32 needcon = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_needcon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needcon_)));
          set_has_needcon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_needmon;
        break;
      }

      // optional uint32 needmon = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_needmon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needmon_)));
          set_has_needmon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_prayitem;
        break;
      }

      // optional uint32 prayitem = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_prayitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prayitem_)));
          set_has_prayitem();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildPrayGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildPrayGuildSCmd)
  return false;
#undef DO_
}

void GuildPrayGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildPrayGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILDPRAY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->npcid(), output);
  }

  // optional uint32 prayid = 5 [default = 0];
  if (has_prayid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->prayid(), output);
  }

  // optional uint32 praylv = 6 [default = 0];
  if (has_praylv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->praylv(), output);
  }

  // optional uint32 needcon = 7 [default = 0];
  if (has_needcon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->needcon(), output);
  }

  // optional uint32 needmon = 8 [default = 0];
  if (has_needmon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->needmon(), output);
  }

  // optional uint32 prayitem = 9 [default = 0];
  if (has_prayitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prayitem(), output);
  }

  // optional uint32 msgid = 10 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildPrayGuildSCmd)
}

::google::protobuf::uint8* GuildPrayGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildPrayGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILDPRAY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 npcid = 4 [default = 0];
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->npcid(), target);
  }

  // optional uint32 prayid = 5 [default = 0];
  if (has_prayid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->prayid(), target);
  }

  // optional uint32 praylv = 6 [default = 0];
  if (has_praylv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->praylv(), target);
  }

  // optional uint32 needcon = 7 [default = 0];
  if (has_needcon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->needcon(), target);
  }

  // optional uint32 needmon = 8 [default = 0];
  if (has_needmon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->needmon(), target);
  }

  // optional uint32 prayitem = 9 [default = 0];
  if (has_prayitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prayitem(), target);
  }

  // optional uint32 msgid = 10 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildPrayGuildSCmd)
  return target;
}

int GuildPrayGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILDPRAY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 npcid = 4 [default = 0];
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcid());
    }

    // optional uint32 prayid = 5 [default = 0];
    if (has_prayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prayid());
    }

    // optional uint32 praylv = 6 [default = 0];
    if (has_praylv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->praylv());
    }

    // optional uint32 needcon = 7 [default = 0];
    if (has_needcon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needcon());
    }

    // optional uint32 needmon = 8 [default = 0];
    if (has_needmon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needmon());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 prayitem = 9 [default = 0];
    if (has_prayitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prayitem());
    }

    // optional uint32 msgid = 10 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildPrayGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildPrayGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildPrayGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildPrayGuildSCmd::MergeFrom(const GuildPrayGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_prayid()) {
      set_prayid(from.prayid());
    }
    if (from.has_praylv()) {
      set_praylv(from.praylv());
    }
    if (from.has_needcon()) {
      set_needcon(from.needcon());
    }
    if (from.has_needmon()) {
      set_needmon(from.needmon());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prayitem()) {
      set_prayitem(from.prayitem());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildPrayGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildPrayGuildSCmd::CopyFrom(const GuildPrayGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildPrayGuildSCmd::IsInitialized() const {

  return true;
}

void GuildPrayGuildSCmd::Swap(GuildPrayGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(npcid_, other->npcid_);
    std::swap(prayid_, other->prayid_);
    std::swap(praylv_, other->praylv_);
    std::swap(needcon_, other->needcon_);
    std::swap(needmon_, other->needmon_);
    std::swap(prayitem_, other->prayitem_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildPrayGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildPrayGuildSCmd_descriptor_;
  metadata.reflection = GuildPrayGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildIconStateGuildSCmd::kCmdFieldNumber;
const int GuildIconStateGuildSCmd::kParamFieldNumber;
const int GuildIconStateGuildSCmd::kIdsFieldNumber;
const int GuildIconStateGuildSCmd::kStateFieldNumber;
#endif  // !_MSC_VER

GuildIconStateGuildSCmd::GuildIconStateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildIconStateGuildSCmd)
}

void GuildIconStateGuildSCmd::InitAsDefaultInstance() {
}

GuildIconStateGuildSCmd::GuildIconStateGuildSCmd(const GuildIconStateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildIconStateGuildSCmd)
}

void GuildIconStateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 26;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildIconStateGuildSCmd::~GuildIconStateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildIconStateGuildSCmd)
  SharedDtor();
}

void GuildIconStateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildIconStateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildIconStateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildIconStateGuildSCmd_descriptor_;
}

const GuildIconStateGuildSCmd& GuildIconStateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildIconStateGuildSCmd* GuildIconStateGuildSCmd::default_instance_ = NULL;

GuildIconStateGuildSCmd* GuildIconStateGuildSCmd::New() const {
  return new GuildIconStateGuildSCmd;
}

void GuildIconStateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 210;
    param_ = 26;
    state_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildIconStateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildIconStateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_ICON_STATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        break;
      }

      // repeated uint64 ids = 3;
      case 3: {
        if (tag == 24) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_ids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ids;
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EIconState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EIconState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildIconStateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildIconStateGuildSCmd)
  return false;
#undef DO_
}

void GuildIconStateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildIconStateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_ICON_STATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated uint64 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->ids(i), output);
  }

  // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildIconStateGuildSCmd)
}

::google::protobuf::uint8* GuildIconStateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildIconStateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_ICON_STATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated uint64 ids = 3;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->ids(i), target);
  }

  // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildIconStateGuildSCmd)
  return target;
}

int GuildIconStateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_ICON_STATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EIconState state = 4 [default = EICON_INIT];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  // repeated uint64 ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildIconStateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildIconStateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildIconStateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildIconStateGuildSCmd::MergeFrom(const GuildIconStateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildIconStateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildIconStateGuildSCmd::CopyFrom(const GuildIconStateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildIconStateGuildSCmd::IsInitialized() const {

  return true;
}

void GuildIconStateGuildSCmd::Swap(GuildIconStateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    ids_.Swap(&other->ids_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildIconStateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildIconStateGuildSCmd_descriptor_;
  metadata.reflection = GuildIconStateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingMaterial::kIdFieldNumber;
const int BuildingMaterial::kCountFieldNumber;
#endif  // !_MSC_VER

BuildingMaterial::BuildingMaterial()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingMaterial)
}

void BuildingMaterial::InitAsDefaultInstance() {
}

BuildingMaterial::BuildingMaterial(const BuildingMaterial& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingMaterial)
}

void BuildingMaterial::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingMaterial::~BuildingMaterial() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingMaterial)
  SharedDtor();
}

void BuildingMaterial::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingMaterial::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingMaterial::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingMaterial_descriptor_;
}

const BuildingMaterial& BuildingMaterial::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

BuildingMaterial* BuildingMaterial::default_instance_ = NULL;

BuildingMaterial* BuildingMaterial::New() const {
  return new BuildingMaterial;
}

void BuildingMaterial::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingMaterial*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingMaterial::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingMaterial)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingMaterial)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingMaterial)
  return false;
#undef DO_
}

void BuildingMaterial::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingMaterial)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingMaterial)
}

::google::protobuf::uint8* BuildingMaterial::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingMaterial)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 count = 2 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingMaterial)
  return target;
}

int BuildingMaterial::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 2 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingMaterial::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingMaterial* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingMaterial*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingMaterial::MergeFrom(const BuildingMaterial& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingMaterial::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingMaterial::CopyFrom(const BuildingMaterial& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingMaterial::IsInitialized() const {

  return true;
}

void BuildingMaterial::Swap(BuildingMaterial* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingMaterial::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingMaterial_descriptor_;
  metadata.reflection = BuildingMaterial_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SubmitMaterialGuildSCmd::kCmdFieldNumber;
const int SubmitMaterialGuildSCmd::kParamFieldNumber;
const int SubmitMaterialGuildSCmd::kCharidFieldNumber;
const int SubmitMaterialGuildSCmd::kBuildingFieldNumber;
const int SubmitMaterialGuildSCmd::kMaterialsFieldNumber;
const int SubmitMaterialGuildSCmd::kSubmitcountFieldNumber;
const int SubmitMaterialGuildSCmd::kCounterFieldNumber;
const int SubmitMaterialGuildSCmd::kSuccessFieldNumber;
const int SubmitMaterialGuildSCmd::kCurlevelFieldNumber;
const int SubmitMaterialGuildSCmd::kSubmitincFieldNumber;
#endif  // !_MSC_VER

SubmitMaterialGuildSCmd::SubmitMaterialGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SubmitMaterialGuildSCmd)
}

void SubmitMaterialGuildSCmd::InitAsDefaultInstance() {
}

SubmitMaterialGuildSCmd::SubmitMaterialGuildSCmd(const SubmitMaterialGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SubmitMaterialGuildSCmd)
}

void SubmitMaterialGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 27;
  charid_ = GOOGLE_ULONGLONG(0);
  building_ = 0;
  submitcount_ = 0u;
  counter_ = 0u;
  success_ = false;
  curlevel_ = 0u;
  submitinc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SubmitMaterialGuildSCmd::~SubmitMaterialGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SubmitMaterialGuildSCmd)
  SharedDtor();
}

void SubmitMaterialGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubmitMaterialGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubmitMaterialGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubmitMaterialGuildSCmd_descriptor_;
}

const SubmitMaterialGuildSCmd& SubmitMaterialGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

SubmitMaterialGuildSCmd* SubmitMaterialGuildSCmd::default_instance_ = NULL;

SubmitMaterialGuildSCmd* SubmitMaterialGuildSCmd::New() const {
  return new SubmitMaterialGuildSCmd;
}

void SubmitMaterialGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SubmitMaterialGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(building_, success_);
    cmd_ = 210;
    param_ = 27;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ZR_(curlevel_, submitinc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  materials_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SubmitMaterialGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SubmitMaterialGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUBMIT_MATERIAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_building;
        break;
      }

      // optional .Cmd.EGuildBuilding building = 4 [default = EGUILDBUILDING_MIN];
      case 4: {
        if (tag == 32) {
         parse_building:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildBuilding_IsValid(value)) {
            set_building(static_cast< ::Cmd::EGuildBuilding >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_materials;
        break;
      }

      // repeated .Cmd.BuildingMaterial materials = 5;
      case 5: {
        if (tag == 42) {
         parse_materials:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_materials()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_materials;
        if (input->ExpectTag(48)) goto parse_submitcount;
        break;
      }

      // optional uint32 submitcount = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_submitcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitcount_)));
          set_has_submitcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_counter;
        break;
      }

      // optional uint32 counter = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_counter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &counter_)));
          set_has_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_success;
        break;
      }

      // optional bool success = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_curlevel;
        break;
      }

      // optional uint32 curlevel = 9 [default = 0];
      case 9: {
        if (tag == 72) {
         parse_curlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlevel_)));
          set_has_curlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_submitinc;
        break;
      }

      // optional uint32 submitinc = 10 [default = 0];
      case 10: {
        if (tag == 80) {
         parse_submitinc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &submitinc_)));
          set_has_submitinc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SubmitMaterialGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SubmitMaterialGuildSCmd)
  return false;
#undef DO_
}

void SubmitMaterialGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SubmitMaterialGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUBMIT_MATERIAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.EGuildBuilding building = 4 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->building(), output);
  }

  // repeated .Cmd.BuildingMaterial materials = 5;
  for (int i = 0; i < this->materials_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->materials(i), output);
  }

  // optional uint32 submitcount = 6 [default = 0];
  if (has_submitcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->submitcount(), output);
  }

  // optional uint32 counter = 7 [default = 0];
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->counter(), output);
  }

  // optional bool success = 8 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->success(), output);
  }

  // optional uint32 curlevel = 9 [default = 0];
  if (has_curlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->curlevel(), output);
  }

  // optional uint32 submitinc = 10 [default = 0];
  if (has_submitinc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->submitinc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SubmitMaterialGuildSCmd)
}

::google::protobuf::uint8* SubmitMaterialGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SubmitMaterialGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUBMIT_MATERIAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.EGuildBuilding building = 4 [default = EGUILDBUILDING_MIN];
  if (has_building()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->building(), target);
  }

  // repeated .Cmd.BuildingMaterial materials = 5;
  for (int i = 0; i < this->materials_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->materials(i), target);
  }

  // optional uint32 submitcount = 6 [default = 0];
  if (has_submitcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->submitcount(), target);
  }

  // optional uint32 counter = 7 [default = 0];
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->counter(), target);
  }

  // optional bool success = 8 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->success(), target);
  }

  // optional uint32 curlevel = 9 [default = 0];
  if (has_curlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->curlevel(), target);
  }

  // optional uint32 submitinc = 10 [default = 0];
  if (has_submitinc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->submitinc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SubmitMaterialGuildSCmd)
  return target;
}

int SubmitMaterialGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUBMIT_MATERIAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.EGuildBuilding building = 4 [default = EGUILDBUILDING_MIN];
    if (has_building()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->building());
    }

    // optional uint32 submitcount = 6 [default = 0];
    if (has_submitcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitcount());
    }

    // optional uint32 counter = 7 [default = 0];
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->counter());
    }

    // optional bool success = 8 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 curlevel = 9 [default = 0];
    if (has_curlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlevel());
    }

    // optional uint32 submitinc = 10 [default = 0];
    if (has_submitinc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->submitinc());
    }

  }
  // repeated .Cmd.BuildingMaterial materials = 5;
  total_size += 1 * this->materials_size();
  for (int i = 0; i < this->materials_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->materials(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SubmitMaterialGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SubmitMaterialGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SubmitMaterialGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SubmitMaterialGuildSCmd::MergeFrom(const SubmitMaterialGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  materials_.MergeFrom(from.materials_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_building()) {
      set_building(from.building());
    }
    if (from.has_submitcount()) {
      set_submitcount(from.submitcount());
    }
    if (from.has_counter()) {
      set_counter(from.counter());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curlevel()) {
      set_curlevel(from.curlevel());
    }
    if (from.has_submitinc()) {
      set_submitinc(from.submitinc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SubmitMaterialGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubmitMaterialGuildSCmd::CopyFrom(const SubmitMaterialGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubmitMaterialGuildSCmd::IsInitialized() const {

  return true;
}

void SubmitMaterialGuildSCmd::Swap(SubmitMaterialGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(building_, other->building_);
    materials_.Swap(&other->materials_);
    std::swap(submitcount_, other->submitcount_);
    std::swap(counter_, other->counter_);
    std::swap(success_, other->success_);
    std::swap(curlevel_, other->curlevel_);
    std::swap(submitinc_, other->submitinc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SubmitMaterialGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubmitMaterialGuildSCmd_descriptor_;
  metadata.reflection = SubmitMaterialGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingUpdateGuildSCmd::kCmdFieldNumber;
const int BuildingUpdateGuildSCmd::kParamFieldNumber;
const int BuildingUpdateGuildSCmd::kGuildidFieldNumber;
const int BuildingUpdateGuildSCmd::kSceneidFieldNumber;
const int BuildingUpdateGuildSCmd::kUpdatesFieldNumber;
const int BuildingUpdateGuildSCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

BuildingUpdateGuildSCmd::BuildingUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingUpdateGuildSCmd)
}

void BuildingUpdateGuildSCmd::InitAsDefaultInstance() {
}

BuildingUpdateGuildSCmd::BuildingUpdateGuildSCmd(const BuildingUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingUpdateGuildSCmd)
}

void BuildingUpdateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 28;
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingUpdateGuildSCmd::~BuildingUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingUpdateGuildSCmd)
  SharedDtor();
}

void BuildingUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingUpdateGuildSCmd_descriptor_;
}

const BuildingUpdateGuildSCmd& BuildingUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

BuildingUpdateGuildSCmd* BuildingUpdateGuildSCmd::default_instance_ = NULL;

BuildingUpdateGuildSCmd* BuildingUpdateGuildSCmd::New() const {
  return new BuildingUpdateGuildSCmd;
}

void BuildingUpdateGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuildingUpdateGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(guildid_, sceneid_);
    cmd_ = 210;
    param_ = 28;
    charid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  updates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDING_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        break;
      }

      // repeated .Cmd.GuildBuilding updates = 5;
      case 5: {
        if (tag == 42) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_updates;
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingUpdateGuildSCmd)
  return false;
#undef DO_
}

void BuildingUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDING_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint64 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sceneid(), output);
  }

  // repeated .Cmd.GuildBuilding updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updates(i), output);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingUpdateGuildSCmd)
}

::google::protobuf::uint8* BuildingUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDING_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint64 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sceneid(), target);
  }

  // repeated .Cmd.GuildBuilding updates = 5;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updates(i), target);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingUpdateGuildSCmd)
  return target;
}

int BuildingUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDING_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 charid = 6 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildBuilding updates = 5;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingUpdateGuildSCmd::MergeFrom(const BuildingUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingUpdateGuildSCmd::CopyFrom(const BuildingUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void BuildingUpdateGuildSCmd::Swap(BuildingUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    updates_.Swap(&other->updates_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingUpdateGuildSCmd_descriptor_;
  metadata.reflection = BuildingUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryGuildInfoGuildSCmd::kCmdFieldNumber;
const int QueryGuildInfoGuildSCmd::kParamFieldNumber;
const int QueryGuildInfoGuildSCmd::kGuildidFieldNumber;
const int QueryGuildInfoGuildSCmd::kSceneidFieldNumber;
const int QueryGuildInfoGuildSCmd::kInfoFieldNumber;
const int QueryGuildInfoGuildSCmd::kResultFieldNumber;
#endif  // !_MSC_VER

QueryGuildInfoGuildSCmd::QueryGuildInfoGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryGuildInfoGuildSCmd)
}

void QueryGuildInfoGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildInfo*>(&::Cmd::GuildInfo::default_instance());
}

QueryGuildInfoGuildSCmd::QueryGuildInfoGuildSCmd(const QueryGuildInfoGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryGuildInfoGuildSCmd)
}

void QueryGuildInfoGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 29;
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryGuildInfoGuildSCmd::~QueryGuildInfoGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryGuildInfoGuildSCmd)
  SharedDtor();
}

void QueryGuildInfoGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void QueryGuildInfoGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGuildInfoGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryGuildInfoGuildSCmd_descriptor_;
}

const QueryGuildInfoGuildSCmd& QueryGuildInfoGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

QueryGuildInfoGuildSCmd* QueryGuildInfoGuildSCmd::default_instance_ = NULL;

QueryGuildInfoGuildSCmd* QueryGuildInfoGuildSCmd::New() const {
  return new QueryGuildInfoGuildSCmd;
}

void QueryGuildInfoGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryGuildInfoGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(guildid_, sceneid_);
    cmd_ = 210;
    param_ = 29;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildInfo::Clear();
    }
    result_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryGuildInfoGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryGuildInfoGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_GUILD_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildInfo info = 5;
      case 5: {
        if (tag == 42) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional bool result = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryGuildInfoGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryGuildInfoGuildSCmd)
  return false;
#undef DO_
}

void QueryGuildInfoGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryGuildInfoGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_GUILD_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint64 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sceneid(), output);
  }

  // optional .Cmd.GuildInfo info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional bool result = 6 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryGuildInfoGuildSCmd)
}

::google::protobuf::uint8* QueryGuildInfoGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryGuildInfoGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_GUILD_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint64 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sceneid(), target);
  }

  // optional .Cmd.GuildInfo info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional bool result = 6 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryGuildInfoGuildSCmd)
  return target;
}

int QueryGuildInfoGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUERY_GUILD_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional .Cmd.GuildInfo info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional bool result = 6 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGuildInfoGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryGuildInfoGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryGuildInfoGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryGuildInfoGuildSCmd::MergeFrom(const QueryGuildInfoGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildInfo::MergeFrom(from.info());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryGuildInfoGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGuildInfoGuildSCmd::CopyFrom(const QueryGuildInfoGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGuildInfoGuildSCmd::IsInitialized() const {

  return true;
}

void QueryGuildInfoGuildSCmd::Swap(QueryGuildInfoGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(info_, other->info_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryGuildInfoGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryGuildInfoGuildSCmd_descriptor_;
  metadata.reflection = QueryGuildInfoGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendWelfareGuildSCmd::kCmdFieldNumber;
const int SendWelfareGuildSCmd::kParamFieldNumber;
const int SendWelfareGuildSCmd::kCharidFieldNumber;
const int SendWelfareGuildSCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

SendWelfareGuildSCmd::SendWelfareGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendWelfareGuildSCmd)
}

void SendWelfareGuildSCmd::InitAsDefaultInstance() {
}

SendWelfareGuildSCmd::SendWelfareGuildSCmd(const SendWelfareGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendWelfareGuildSCmd)
}

void SendWelfareGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 30;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendWelfareGuildSCmd::~SendWelfareGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SendWelfareGuildSCmd)
  SharedDtor();
}

void SendWelfareGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendWelfareGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendWelfareGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendWelfareGuildSCmd_descriptor_;
}

const SendWelfareGuildSCmd& SendWelfareGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

SendWelfareGuildSCmd* SendWelfareGuildSCmd::default_instance_ = NULL;

SendWelfareGuildSCmd* SendWelfareGuildSCmd::New() const {
  return new SendWelfareGuildSCmd;
}

void SendWelfareGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 30;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendWelfareGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendWelfareGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_WELFARE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.GuildWelfareItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendWelfareGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendWelfareGuildSCmd)
  return false;
#undef DO_
}

void SendWelfareGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendWelfareGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_WELFARE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.GuildWelfareItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendWelfareGuildSCmd)
}

::google::protobuf::uint8* SendWelfareGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendWelfareGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_WELFARE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.GuildWelfareItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendWelfareGuildSCmd)
  return target;
}

int SendWelfareGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SEND_WELFARE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildWelfareItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendWelfareGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendWelfareGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendWelfareGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendWelfareGuildSCmd::MergeFrom(const SendWelfareGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendWelfareGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendWelfareGuildSCmd::CopyFrom(const SendWelfareGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendWelfareGuildSCmd::IsInitialized() const {

  return true;
}

void SendWelfareGuildSCmd::Swap(SendWelfareGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendWelfareGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendWelfareGuildSCmd_descriptor_;
  metadata.reflection = SendWelfareGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildChallengeItem::kIdFieldNumber;
const int GuildChallengeItem::kProgressFieldNumber;
#endif  // !_MSC_VER

GuildChallengeItem::GuildChallengeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildChallengeItem)
}

void GuildChallengeItem::InitAsDefaultInstance() {
}

GuildChallengeItem::GuildChallengeItem(const GuildChallengeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildChallengeItem)
}

void GuildChallengeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  progress_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildChallengeItem::~GuildChallengeItem() {
  // @@protoc_insertion_point(destructor:Cmd.GuildChallengeItem)
  SharedDtor();
}

void GuildChallengeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildChallengeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildChallengeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildChallengeItem_descriptor_;
}

const GuildChallengeItem& GuildChallengeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildChallengeItem* GuildChallengeItem::default_instance_ = NULL;

GuildChallengeItem* GuildChallengeItem::New() const {
  return new GuildChallengeItem;
}

void GuildChallengeItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildChallengeItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, progress_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildChallengeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildChallengeItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildChallengeItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildChallengeItem)
  return false;
#undef DO_
}

void GuildChallengeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildChallengeItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->progress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildChallengeItem)
}

::google::protobuf::uint8* GuildChallengeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildChallengeItem)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 progress = 2 [default = 0];
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->progress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildChallengeItem)
  return target;
}

int GuildChallengeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 progress = 2 [default = 0];
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildChallengeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildChallengeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildChallengeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildChallengeItem::MergeFrom(const GuildChallengeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildChallengeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildChallengeItem::CopyFrom(const GuildChallengeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildChallengeItem::IsInitialized() const {

  return true;
}

void GuildChallengeItem::Swap(GuildChallengeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildChallengeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildChallengeItem_descriptor_;
  metadata.reflection = GuildChallengeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeProgressGuildSCmd::kCmdFieldNumber;
const int ChallengeProgressGuildSCmd::kParamFieldNumber;
const int ChallengeProgressGuildSCmd::kGuildidFieldNumber;
const int ChallengeProgressGuildSCmd::kCharidFieldNumber;
const int ChallengeProgressGuildSCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

ChallengeProgressGuildSCmd::ChallengeProgressGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChallengeProgressGuildSCmd)
}

void ChallengeProgressGuildSCmd::InitAsDefaultInstance() {
}

ChallengeProgressGuildSCmd::ChallengeProgressGuildSCmd(const ChallengeProgressGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChallengeProgressGuildSCmd)
}

void ChallengeProgressGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 31;
  guildid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeProgressGuildSCmd::~ChallengeProgressGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChallengeProgressGuildSCmd)
  SharedDtor();
}

void ChallengeProgressGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeProgressGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeProgressGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeProgressGuildSCmd_descriptor_;
}

const ChallengeProgressGuildSCmd& ChallengeProgressGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

ChallengeProgressGuildSCmd* ChallengeProgressGuildSCmd::default_instance_ = NULL;

ChallengeProgressGuildSCmd* ChallengeProgressGuildSCmd::New() const {
  return new ChallengeProgressGuildSCmd;
}

void ChallengeProgressGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChallengeProgressGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildid_, charid_);
    cmd_ = 210;
    param_ = 31;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeProgressGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChallengeProgressGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHALLENGE_PROGRESS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .Cmd.GuildChallengeItem items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChallengeProgressGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChallengeProgressGuildSCmd)
  return false;
#undef DO_
}

void ChallengeProgressGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChallengeProgressGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHALLENGE_PROGRESS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // repeated .Cmd.GuildChallengeItem items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChallengeProgressGuildSCmd)
}

::google::protobuf::uint8* ChallengeProgressGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChallengeProgressGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHALLENGE_PROGRESS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // repeated .Cmd.GuildChallengeItem items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChallengeProgressGuildSCmd)
  return target;
}

int ChallengeProgressGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_CHALLENGE_PROGRESS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.GuildChallengeItem items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeProgressGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeProgressGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeProgressGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeProgressGuildSCmd::MergeFrom(const ChallengeProgressGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeProgressGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeProgressGuildSCmd::CopyFrom(const ChallengeProgressGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeProgressGuildSCmd::IsInitialized() const {

  return true;
}

void ChallengeProgressGuildSCmd::Swap(ChallengeProgressGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeProgressGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeProgressGuildSCmd_descriptor_;
  metadata.reflection = ChallengeProgressGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildGM::kZoneidFieldNumber;
const int GuildGM::kSessionidFieldNumber;
const int GuildGM::kGuildidFieldNumber;
const int GuildGM::kCharidFieldNumber;
const int GuildGM::kNameFieldNumber;
#endif  // !_MSC_VER

GuildGM::GuildGM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildGM)
}

void GuildGM::InitAsDefaultInstance() {
}

GuildGM::GuildGM(const GuildGM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildGM)
}

void GuildGM::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  zoneid_ = 0u;
  sessionid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildGM::~GuildGM() {
  // @@protoc_insertion_point(destructor:Cmd.GuildGM)
  SharedDtor();
}

void GuildGM::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuildGM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildGM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildGM_descriptor_;
}

const GuildGM& GuildGM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildGM* GuildGM::default_instance_ = NULL;

GuildGM* GuildGM::New() const {
  return new GuildGM;
}

void GuildGM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildGM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(zoneid_, charid_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildGM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildGM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 zoneid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sessionid;
        break;
      }

      // optional uint32 sessionid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_sessionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessionid_)));
          set_has_sessionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildGM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildGM)
  return false;
#undef DO_
}

void GuildGM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildGM)
  // optional uint32 zoneid = 1 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zoneid(), output);
  }

  // optional uint32 sessionid = 2 [default = 0];
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sessionid(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildGM)
}

::google::protobuf::uint8* GuildGM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildGM)
  // optional uint32 zoneid = 1 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zoneid(), target);
  }

  // optional uint32 sessionid = 2 [default = 0];
  if (has_sessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sessionid(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildGM)
  return target;
}

int GuildGM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 zoneid = 1 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 sessionid = 2 [default = 0];
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sessionid());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildGM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildGM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildGM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildGM::MergeFrom(const GuildGM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildGM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildGM::CopyFrom(const GuildGM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildGM::IsInitialized() const {

  return true;
}

void GuildGM::Swap(GuildGM* other) {
  if (other != this) {
    std::swap(zoneid_, other->zoneid_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(guildid_, other->guildid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildGM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildGM_descriptor_;
  metadata.reflection = GuildGM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCommandGuildSCmd::kCmdFieldNumber;
const int GMCommandGuildSCmd::kParamFieldNumber;
const int GMCommandGuildSCmd::kInfoFieldNumber;
const int GMCommandGuildSCmd::kCommandFieldNumber;
#endif  // !_MSC_VER

GMCommandGuildSCmd::GMCommandGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GMCommandGuildSCmd)
}

void GMCommandGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildGM*>(&::Cmd::GuildGM::default_instance());
}

GMCommandGuildSCmd::GMCommandGuildSCmd(const GMCommandGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GMCommandGuildSCmd)
}

void GMCommandGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 32;
  info_ = NULL;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCommandGuildSCmd::~GMCommandGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GMCommandGuildSCmd)
  SharedDtor();
}

void GMCommandGuildSCmd::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void GMCommandGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCommandGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCommandGuildSCmd_descriptor_;
}

const GMCommandGuildSCmd& GMCommandGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GMCommandGuildSCmd* GMCommandGuildSCmd::default_instance_ = NULL;

GMCommandGuildSCmd* GMCommandGuildSCmd::New() const {
  return new GMCommandGuildSCmd;
}

void GMCommandGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 32;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildGM::Clear();
    }
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCommandGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GMCommandGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_COMMAND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildGM info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional string command = 4;
      case 4: {
        if (tag == 34) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GMCommandGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GMCommandGuildSCmd)
  return false;
#undef DO_
}

void GMCommandGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GMCommandGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_COMMAND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GuildGM info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  // optional string command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GMCommandGuildSCmd)
}

::google::protobuf::uint8* GMCommandGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GMCommandGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_COMMAND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GuildGM info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  // optional string command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GMCommandGuildSCmd)
  return target;
}

int GMCommandGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_COMMAND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GuildGM info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional string command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCommandGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCommandGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCommandGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCommandGuildSCmd::MergeFrom(const GMCommandGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildGM::MergeFrom(from.info());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCommandGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCommandGuildSCmd::CopyFrom(const GMCommandGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommandGuildSCmd::IsInitialized() const {

  return true;
}

void GMCommandGuildSCmd::Swap(GMCommandGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCommandGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCommandGuildSCmd_descriptor_;
  metadata.reflection = GMCommandGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMCommandRespondGuildSCmd::kCmdFieldNumber;
const int GMCommandRespondGuildSCmd::kParamFieldNumber;
const int GMCommandRespondGuildSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

GMCommandRespondGuildSCmd::GMCommandRespondGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GMCommandRespondGuildSCmd)
}

void GMCommandRespondGuildSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::GuildGM*>(&::Cmd::GuildGM::default_instance());
}

GMCommandRespondGuildSCmd::GMCommandRespondGuildSCmd(const GMCommandRespondGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GMCommandRespondGuildSCmd)
}

void GMCommandRespondGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 33;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMCommandRespondGuildSCmd::~GMCommandRespondGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GMCommandRespondGuildSCmd)
  SharedDtor();
}

void GMCommandRespondGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GMCommandRespondGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMCommandRespondGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMCommandRespondGuildSCmd_descriptor_;
}

const GMCommandRespondGuildSCmd& GMCommandRespondGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GMCommandRespondGuildSCmd* GMCommandRespondGuildSCmd::default_instance_ = NULL;

GMCommandRespondGuildSCmd* GMCommandRespondGuildSCmd::New() const {
  return new GMCommandRespondGuildSCmd;
}

void GMCommandRespondGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 33;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::GuildGM::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMCommandRespondGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GMCommandRespondGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_RESPOND];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.GuildGM info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GMCommandRespondGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GMCommandRespondGuildSCmd)
  return false;
#undef DO_
}

void GMCommandRespondGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GMCommandRespondGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_RESPOND];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.GuildGM info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GMCommandRespondGuildSCmd)
}

::google::protobuf::uint8* GMCommandRespondGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GMCommandRespondGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_RESPOND];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.GuildGM info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GMCommandRespondGuildSCmd)
  return target;
}

int GMCommandRespondGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GM_RESPOND];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.GuildGM info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMCommandRespondGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMCommandRespondGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMCommandRespondGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMCommandRespondGuildSCmd::MergeFrom(const GMCommandRespondGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::GuildGM::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMCommandRespondGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMCommandRespondGuildSCmd::CopyFrom(const GMCommandRespondGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMCommandRespondGuildSCmd::IsInitialized() const {

  return true;
}

void GMCommandRespondGuildSCmd::Swap(GMCommandRespondGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMCommandRespondGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMCommandRespondGuildSCmd_descriptor_;
  metadata.reflection = GMCommandRespondGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuildingEffectGuildSCmd::kCmdFieldNumber;
const int BuildingEffectGuildSCmd::kParamFieldNumber;
const int BuildingEffectGuildSCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

BuildingEffectGuildSCmd::BuildingEffectGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuildingEffectGuildSCmd)
}

void BuildingEffectGuildSCmd::InitAsDefaultInstance() {
}

BuildingEffectGuildSCmd::BuildingEffectGuildSCmd(const BuildingEffectGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuildingEffectGuildSCmd)
}

void BuildingEffectGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 34;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildingEffectGuildSCmd::~BuildingEffectGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuildingEffectGuildSCmd)
  SharedDtor();
}

void BuildingEffectGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildingEffectGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildingEffectGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildingEffectGuildSCmd_descriptor_;
}

const BuildingEffectGuildSCmd& BuildingEffectGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

BuildingEffectGuildSCmd* BuildingEffectGuildSCmd::default_instance_ = NULL;

BuildingEffectGuildSCmd* BuildingEffectGuildSCmd::New() const {
  return new BuildingEffectGuildSCmd;
}

void BuildingEffectGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 34;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildingEffectGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuildingEffectGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDINGEFFECT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuildingEffectGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuildingEffectGuildSCmd)
  return false;
#undef DO_
}

void BuildingEffectGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuildingEffectGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDINGEFFECT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuildingEffectGuildSCmd)
}

::google::protobuf::uint8* BuildingEffectGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuildingEffectGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDINGEFFECT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuildingEffectGuildSCmd)
  return target;
}

int BuildingEffectGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_BUILDINGEFFECT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildingEffectGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildingEffectGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildingEffectGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildingEffectGuildSCmd::MergeFrom(const BuildingEffectGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildingEffectGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildingEffectGuildSCmd::CopyFrom(const BuildingEffectGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildingEffectGuildSCmd::IsInitialized() const {

  return true;
}

void BuildingEffectGuildSCmd::Swap(BuildingEffectGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildingEffectGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildingEffectGuildSCmd_descriptor_;
  metadata.reflection = BuildingEffectGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArtifactUpdateGuildSCmd::kCmdFieldNumber;
const int ArtifactUpdateGuildSCmd::kParamFieldNumber;
const int ArtifactUpdateGuildSCmd::kCharidFieldNumber;
const int ArtifactUpdateGuildSCmd::kGuildidFieldNumber;
const int ArtifactUpdateGuildSCmd::kSceneidFieldNumber;
const int ArtifactUpdateGuildSCmd::kItemupdatesFieldNumber;
const int ArtifactUpdateGuildSCmd::kItemdelsFieldNumber;
#endif  // !_MSC_VER

ArtifactUpdateGuildSCmd::ArtifactUpdateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ArtifactUpdateGuildSCmd)
}

void ArtifactUpdateGuildSCmd::InitAsDefaultInstance() {
}

ArtifactUpdateGuildSCmd::ArtifactUpdateGuildSCmd(const ArtifactUpdateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ArtifactUpdateGuildSCmd)
}

void ArtifactUpdateGuildSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 35;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArtifactUpdateGuildSCmd::~ArtifactUpdateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ArtifactUpdateGuildSCmd)
  SharedDtor();
}

void ArtifactUpdateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArtifactUpdateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArtifactUpdateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArtifactUpdateGuildSCmd_descriptor_;
}

const ArtifactUpdateGuildSCmd& ArtifactUpdateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

ArtifactUpdateGuildSCmd* ArtifactUpdateGuildSCmd::default_instance_ = NULL;

ArtifactUpdateGuildSCmd* ArtifactUpdateGuildSCmd::New() const {
  return new ArtifactUpdateGuildSCmd;
}

void ArtifactUpdateGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ArtifactUpdateGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, sceneid_);
    cmd_ = 210;
    param_ = 35;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  itemupdates_.Clear();
  itemdels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArtifactUpdateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ArtifactUpdateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ARTIFACT_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemupdates;
        break;
      }

      // repeated .Cmd.GuildArtifactItem itemupdates = 7;
      case 7: {
        if (tag == 58) {
         parse_itemupdates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemupdates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_itemupdates;
        if (input->ExpectTag(66)) goto parse_itemdels;
        break;
      }

      // repeated string itemdels = 8;
      case 8: {
        if (tag == 66) {
         parse_itemdels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_itemdels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemdels(this->itemdels_size() - 1).data(),
            this->itemdels(this->itemdels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemdels");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_itemdels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ArtifactUpdateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ArtifactUpdateGuildSCmd)
  return false;
#undef DO_
}

void ArtifactUpdateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ArtifactUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ARTIFACT_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guildid(), output);
  }

  // optional uint64 sceneid = 6 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->sceneid(), output);
  }

  // repeated .Cmd.GuildArtifactItem itemupdates = 7;
  for (int i = 0; i < this->itemupdates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->itemupdates(i), output);
  }

  // repeated string itemdels = 8;
  for (int i = 0; i < this->itemdels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->itemdels(i).data(), this->itemdels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "itemdels");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->itemdels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ArtifactUpdateGuildSCmd)
}

::google::protobuf::uint8* ArtifactUpdateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ArtifactUpdateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ARTIFACT_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guildid(), target);
  }

  // optional uint64 sceneid = 6 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->sceneid(), target);
  }

  // repeated .Cmd.GuildArtifactItem itemupdates = 7;
  for (int i = 0; i < this->itemupdates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->itemupdates(i), target);
  }

  // repeated string itemdels = 8;
  for (int i = 0; i < this->itemdels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemdels(i).data(), this->itemdels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemdels");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->itemdels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ArtifactUpdateGuildSCmd)
  return target;
}

int ArtifactUpdateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_ARTIFACT_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint64 sceneid = 6 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  // repeated .Cmd.GuildArtifactItem itemupdates = 7;
  total_size += 1 * this->itemupdates_size();
  for (int i = 0; i < this->itemupdates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemupdates(i));
  }

  // repeated string itemdels = 8;
  total_size += 1 * this->itemdels_size();
  for (int i = 0; i < this->itemdels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->itemdels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArtifactUpdateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArtifactUpdateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArtifactUpdateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArtifactUpdateGuildSCmd::MergeFrom(const ArtifactUpdateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemupdates_.MergeFrom(from.itemupdates_);
  itemdels_.MergeFrom(from.itemdels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArtifactUpdateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArtifactUpdateGuildSCmd::CopyFrom(const ArtifactUpdateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArtifactUpdateGuildSCmd::IsInitialized() const {

  return true;
}

void ArtifactUpdateGuildSCmd::Swap(ArtifactUpdateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    itemupdates_.Swap(&other->itemupdates_);
    itemdels_.Swap(&other->itemdels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArtifactUpdateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArtifactUpdateGuildSCmd_descriptor_;
  metadata.reflection = ArtifactUpdateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildArtifactQuestGuildSCmd::kCmdFieldNumber;
const int GuildArtifactQuestGuildSCmd::kParamFieldNumber;
const int GuildArtifactQuestGuildSCmd::kCharidFieldNumber;
const int GuildArtifactQuestGuildSCmd::kQuestFieldNumber;
#endif  // !_MSC_VER

GuildArtifactQuestGuildSCmd::GuildArtifactQuestGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildArtifactQuestGuildSCmd)
}

void GuildArtifactQuestGuildSCmd::InitAsDefaultInstance() {
  quest_ = const_cast< ::Cmd::GuildArtifactQuest*>(&::Cmd::GuildArtifactQuest::default_instance());
}

GuildArtifactQuestGuildSCmd::GuildArtifactQuestGuildSCmd(const GuildArtifactQuestGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildArtifactQuestGuildSCmd)
}

void GuildArtifactQuestGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 36;
  charid_ = GOOGLE_ULONGLONG(0);
  quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildArtifactQuestGuildSCmd::~GuildArtifactQuestGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildArtifactQuestGuildSCmd)
  SharedDtor();
}

void GuildArtifactQuestGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete quest_;
  }
}

void GuildArtifactQuestGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildArtifactQuestGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildArtifactQuestGuildSCmd_descriptor_;
}

const GuildArtifactQuestGuildSCmd& GuildArtifactQuestGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildArtifactQuestGuildSCmd* GuildArtifactQuestGuildSCmd::default_instance_ = NULL;

GuildArtifactQuestGuildSCmd* GuildArtifactQuestGuildSCmd::New() const {
  return new GuildArtifactQuestGuildSCmd;
}

void GuildArtifactQuestGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 36;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Cmd::GuildArtifactQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildArtifactQuestGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildArtifactQuestGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUEST_ARTIFACT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quest;
        break;
      }

      // optional .Cmd.GuildArtifactQuest quest = 4;
      case 4: {
        if (tag == 34) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildArtifactQuestGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildArtifactQuestGuildSCmd)
  return false;
#undef DO_
}

void GuildArtifactQuestGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildArtifactQuestGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUEST_ARTIFACT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.GuildArtifactQuest quest = 4;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildArtifactQuestGuildSCmd)
}

::google::protobuf::uint8* GuildArtifactQuestGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildArtifactQuestGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUEST_ARTIFACT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.GuildArtifactQuest quest = 4;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildArtifactQuestGuildSCmd)
  return target;
}

int GuildArtifactQuestGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_QUEST_ARTIFACT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.GuildArtifactQuest quest = 4;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildArtifactQuestGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildArtifactQuestGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildArtifactQuestGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildArtifactQuestGuildSCmd::MergeFrom(const GuildArtifactQuestGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_quest()) {
      mutable_quest()->::Cmd::GuildArtifactQuest::MergeFrom(from.quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildArtifactQuestGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildArtifactQuestGuildSCmd::CopyFrom(const GuildArtifactQuestGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildArtifactQuestGuildSCmd::IsInitialized() const {

  return true;
}

void GuildArtifactQuestGuildSCmd::Swap(GuildArtifactQuestGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(quest_, other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildArtifactQuestGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildArtifactQuestGuildSCmd_descriptor_;
  metadata.reflection = GuildArtifactQuestGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryTreasureGuildSCmd::kCmdFieldNumber;
const int QueryTreasureGuildSCmd::kParamFieldNumber;
const int QueryTreasureGuildSCmd::kGuildidFieldNumber;
const int QueryTreasureGuildSCmd::kSceneidFieldNumber;
const int QueryTreasureGuildSCmd::kResultFieldNumber;
const int QueryTreasureGuildSCmd::kTreasuresFieldNumber;
const int QueryTreasureGuildSCmd::kBcoinCountFieldNumber;
const int QueryTreasureGuildSCmd::kAssetCountFieldNumber;
#endif  // !_MSC_VER

QueryTreasureGuildSCmd::QueryTreasureGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryTreasureGuildSCmd)
}

void QueryTreasureGuildSCmd::InitAsDefaultInstance() {
}

QueryTreasureGuildSCmd::QueryTreasureGuildSCmd(const QueryTreasureGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryTreasureGuildSCmd)
}

void QueryTreasureGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 37;
  guildid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = 0u;
  result_ = false;
  bcoin_count_ = 0u;
  asset_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryTreasureGuildSCmd::~QueryTreasureGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryTreasureGuildSCmd)
  SharedDtor();
}

void QueryTreasureGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryTreasureGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTreasureGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryTreasureGuildSCmd_descriptor_;
}

const QueryTreasureGuildSCmd& QueryTreasureGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

QueryTreasureGuildSCmd* QueryTreasureGuildSCmd::default_instance_ = NULL;

QueryTreasureGuildSCmd* QueryTreasureGuildSCmd::New() const {
  return new QueryTreasureGuildSCmd;
}

void QueryTreasureGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryTreasureGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 223) {
    ZR_(guildid_, result_);
    ZR_(bcoin_count_, asset_count_);
    cmd_ = 210;
    param_ = 37;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  treasures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryTreasureGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryTreasureGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneid;
        break;
      }

      // optional uint32 sceneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_result;
        break;
      }

      // optional bool result = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_treasures;
        break;
      }

      // repeated .Cmd.GuildTreasure treasures = 6;
      case 6: {
        if (tag == 50) {
         parse_treasures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_treasures()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_treasures;
        if (input->ExpectTag(56)) goto parse_bcoin_count;
        break;
      }

      // optional uint32 bcoin_count = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_bcoin_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bcoin_count_)));
          set_has_bcoin_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_asset_count;
        break;
      }

      // optional uint32 asset_count = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_asset_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asset_count_)));
          set_has_asset_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryTreasureGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryTreasureGuildSCmd)
  return false;
#undef DO_
}

void QueryTreasureGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryTreasureGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneid(), output);
  }

  // optional bool result = 5 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->result(), output);
  }

  // repeated .Cmd.GuildTreasure treasures = 6;
  for (int i = 0; i < this->treasures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->treasures(i), output);
  }

  // optional uint32 bcoin_count = 7 [default = 0];
  if (has_bcoin_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->bcoin_count(), output);
  }

  // optional uint32 asset_count = 8 [default = 0];
  if (has_asset_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->asset_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryTreasureGuildSCmd)
}

::google::protobuf::uint8* QueryTreasureGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryTreasureGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 sceneid = 4 [default = 0];
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneid(), target);
  }

  // optional bool result = 5 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->result(), target);
  }

  // repeated .Cmd.GuildTreasure treasures = 6;
  for (int i = 0; i < this->treasures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->treasures(i), target);
  }

  // optional uint32 bcoin_count = 7 [default = 0];
  if (has_bcoin_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->bcoin_count(), target);
  }

  // optional uint32 asset_count = 8 [default = 0];
  if (has_asset_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->asset_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryTreasureGuildSCmd)
  return target;
}

int QueryTreasureGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 sceneid = 4 [default = 0];
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneid());
    }

    // optional bool result = 5 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 bcoin_count = 7 [default = 0];
    if (has_bcoin_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bcoin_count());
    }

    // optional uint32 asset_count = 8 [default = 0];
    if (has_asset_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asset_count());
    }

  }
  // repeated .Cmd.GuildTreasure treasures = 6;
  total_size += 1 * this->treasures_size();
  for (int i = 0; i < this->treasures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->treasures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTreasureGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryTreasureGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryTreasureGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryTreasureGuildSCmd::MergeFrom(const QueryTreasureGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasures_.MergeFrom(from.treasures_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bcoin_count()) {
      set_bcoin_count(from.bcoin_count());
    }
    if (from.has_asset_count()) {
      set_asset_count(from.asset_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryTreasureGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTreasureGuildSCmd::CopyFrom(const QueryTreasureGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTreasureGuildSCmd::IsInitialized() const {

  return true;
}

void QueryTreasureGuildSCmd::Swap(QueryTreasureGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(result_, other->result_);
    treasures_.Swap(&other->treasures_);
    std::swap(bcoin_count_, other->bcoin_count_);
    std::swap(asset_count_, other->asset_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryTreasureGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryTreasureGuildSCmd_descriptor_;
  metadata.reflection = QueryTreasureGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgUserPartInGuildSCmd::kCmdFieldNumber;
const int GvgUserPartInGuildSCmd::kParamFieldNumber;
const int GvgUserPartInGuildSCmd::kGuildidFieldNumber;
const int GvgUserPartInGuildSCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

GvgUserPartInGuildSCmd::GvgUserPartInGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgUserPartInGuildSCmd)
}

void GvgUserPartInGuildSCmd::InitAsDefaultInstance() {
}

GvgUserPartInGuildSCmd::GvgUserPartInGuildSCmd(const GvgUserPartInGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgUserPartInGuildSCmd)
}

void GvgUserPartInGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 38;
  guildid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgUserPartInGuildSCmd::~GvgUserPartInGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgUserPartInGuildSCmd)
  SharedDtor();
}

void GvgUserPartInGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgUserPartInGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgUserPartInGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgUserPartInGuildSCmd_descriptor_;
}

const GvgUserPartInGuildSCmd& GvgUserPartInGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GvgUserPartInGuildSCmd* GvgUserPartInGuildSCmd::default_instance_ = NULL;

GvgUserPartInGuildSCmd* GvgUserPartInGuildSCmd::New() const {
  return new GvgUserPartInGuildSCmd;
}

void GvgUserPartInGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgUserPartInGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildid_, charid_);
    cmd_ = 210;
    param_ = 38;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgUserPartInGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgUserPartInGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_USER_PARTIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // required uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgUserPartInGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgUserPartInGuildSCmd)
  return false;
#undef DO_
}

void GvgUserPartInGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgUserPartInGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_USER_PARTIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgUserPartInGuildSCmd)
}

::google::protobuf::uint8* GvgUserPartInGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgUserPartInGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_USER_PARTIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // required uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgUserPartInGuildSCmd)
  return target;
}

int GvgUserPartInGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_USER_PARTIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgUserPartInGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgUserPartInGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgUserPartInGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgUserPartInGuildSCmd::MergeFrom(const GvgUserPartInGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgUserPartInGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgUserPartInGuildSCmd::CopyFrom(const GvgUserPartInGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgUserPartInGuildSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void GvgUserPartInGuildSCmd::Swap(GvgUserPartInGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgUserPartInGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgUserPartInGuildSCmd_descriptor_;
  metadata.reflection = GvgUserPartInGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreasureResultNtfGuildSCmd::kCmdFieldNumber;
const int TreasureResultNtfGuildSCmd::kParamFieldNumber;
const int TreasureResultNtfGuildSCmd::kCharidFieldNumber;
const int TreasureResultNtfGuildSCmd::kResultFieldNumber;
#endif  // !_MSC_VER

TreasureResultNtfGuildSCmd::TreasureResultNtfGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TreasureResultNtfGuildSCmd)
}

void TreasureResultNtfGuildSCmd::InitAsDefaultInstance() {
  result_ = const_cast< ::Cmd::TreasureResult*>(&::Cmd::TreasureResult::default_instance());
}

TreasureResultNtfGuildSCmd::TreasureResultNtfGuildSCmd(const TreasureResultNtfGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TreasureResultNtfGuildSCmd)
}

void TreasureResultNtfGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 39;
  charid_ = GOOGLE_ULONGLONG(0);
  result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreasureResultNtfGuildSCmd::~TreasureResultNtfGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TreasureResultNtfGuildSCmd)
  SharedDtor();
}

void TreasureResultNtfGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete result_;
  }
}

void TreasureResultNtfGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreasureResultNtfGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreasureResultNtfGuildSCmd_descriptor_;
}

const TreasureResultNtfGuildSCmd& TreasureResultNtfGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

TreasureResultNtfGuildSCmd* TreasureResultNtfGuildSCmd::default_instance_ = NULL;

TreasureResultNtfGuildSCmd* TreasureResultNtfGuildSCmd::New() const {
  return new TreasureResultNtfGuildSCmd;
}

void TreasureResultNtfGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 39;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_result()) {
      if (result_ != NULL) result_->::Cmd::TreasureResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreasureResultNtfGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TreasureResultNtfGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_RESULTNTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_result;
        break;
      }

      // optional .Cmd.TreasureResult result = 4;
      case 4: {
        if (tag == 34) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TreasureResultNtfGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TreasureResultNtfGuildSCmd)
  return false;
#undef DO_
}

void TreasureResultNtfGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TreasureResultNtfGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_RESULTNTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.TreasureResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TreasureResultNtfGuildSCmd)
}

::google::protobuf::uint8* TreasureResultNtfGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TreasureResultNtfGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_RESULTNTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.TreasureResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TreasureResultNtfGuildSCmd)
  return target;
}

int TreasureResultNtfGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_TREASURE_RESULTNTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.TreasureResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreasureResultNtfGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreasureResultNtfGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreasureResultNtfGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreasureResultNtfGuildSCmd::MergeFrom(const TreasureResultNtfGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      mutable_result()->::Cmd::TreasureResult::MergeFrom(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreasureResultNtfGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreasureResultNtfGuildSCmd::CopyFrom(const TreasureResultNtfGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreasureResultNtfGuildSCmd::IsInitialized() const {

  return true;
}

void TreasureResultNtfGuildSCmd::Swap(TreasureResultNtfGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreasureResultNtfGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreasureResultNtfGuildSCmd_descriptor_;
  metadata.reflection = TreasureResultNtfGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCityStateGuildSCmd::kCmdFieldNumber;
const int UpdateCityStateGuildSCmd::kParamFieldNumber;
const int UpdateCityStateGuildSCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

UpdateCityStateGuildSCmd::UpdateCityStateGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateCityStateGuildSCmd)
}

void UpdateCityStateGuildSCmd::InitAsDefaultInstance() {
}

UpdateCityStateGuildSCmd::UpdateCityStateGuildSCmd(const UpdateCityStateGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateCityStateGuildSCmd)
}

void UpdateCityStateGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 41;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCityStateGuildSCmd::~UpdateCityStateGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateCityStateGuildSCmd)
  SharedDtor();
}

void UpdateCityStateGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateCityStateGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCityStateGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCityStateGuildSCmd_descriptor_;
}

const UpdateCityStateGuildSCmd& UpdateCityStateGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

UpdateCityStateGuildSCmd* UpdateCityStateGuildSCmd::default_instance_ = NULL;

UpdateCityStateGuildSCmd* UpdateCityStateGuildSCmd::New() const {
  return new UpdateCityStateGuildSCmd;
}

void UpdateCityStateGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 210;
    param_ = 41;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCityStateGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateCityStateGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYSTATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.CityShowInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateCityStateGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateCityStateGuildSCmd)
  return false;
#undef DO_
}

void UpdateCityStateGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateCityStateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYSTATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.CityShowInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateCityStateGuildSCmd)
}

::google::protobuf::uint8* UpdateCityStateGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateCityStateGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYSTATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.CityShowInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateCityStateGuildSCmd)
  return target;
}

int UpdateCityStateGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITYSTATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.CityShowInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCityStateGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCityStateGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCityStateGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCityStateGuildSCmd::MergeFrom(const UpdateCityStateGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCityStateGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCityStateGuildSCmd::CopyFrom(const UpdateCityStateGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCityStateGuildSCmd::IsInitialized() const {

  return true;
}

void UpdateCityStateGuildSCmd::Swap(UpdateCityStateGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCityStateGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCityStateGuildSCmd_descriptor_;
  metadata.reflection = UpdateCityStateGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgOpenToServerGuildSCmd::kCmdFieldNumber;
const int GvgOpenToServerGuildSCmd::kParamFieldNumber;
const int GvgOpenToServerGuildSCmd::kFireFieldNumber;
#endif  // !_MSC_VER

GvgOpenToServerGuildSCmd::GvgOpenToServerGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgOpenToServerGuildSCmd)
}

void GvgOpenToServerGuildSCmd::InitAsDefaultInstance() {
}

GvgOpenToServerGuildSCmd::GvgOpenToServerGuildSCmd(const GvgOpenToServerGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgOpenToServerGuildSCmd)
}

void GvgOpenToServerGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 40;
  fire_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgOpenToServerGuildSCmd::~GvgOpenToServerGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgOpenToServerGuildSCmd)
  SharedDtor();
}

void GvgOpenToServerGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgOpenToServerGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgOpenToServerGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgOpenToServerGuildSCmd_descriptor_;
}

const GvgOpenToServerGuildSCmd& GvgOpenToServerGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GvgOpenToServerGuildSCmd* GvgOpenToServerGuildSCmd::default_instance_ = NULL;

GvgOpenToServerGuildSCmd* GvgOpenToServerGuildSCmd::New() const {
  return new GvgOpenToServerGuildSCmd;
}

void GvgOpenToServerGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 210;
    param_ = 40;
    fire_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgOpenToServerGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgOpenToServerGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_OPEN_GVG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_fire;
        break;
      }

      // optional bool fire = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_fire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fire_)));
          set_has_fire();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgOpenToServerGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgOpenToServerGuildSCmd)
  return false;
#undef DO_
}

void GvgOpenToServerGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgOpenToServerGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_OPEN_GVG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fire(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgOpenToServerGuildSCmd)
}

::google::protobuf::uint8* GvgOpenToServerGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgOpenToServerGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_OPEN_GVG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool fire = 3 [default = false];
  if (has_fire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fire(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgOpenToServerGuildSCmd)
  return target;
}

int GvgOpenToServerGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_OPEN_GVG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool fire = 3 [default = false];
    if (has_fire()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgOpenToServerGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgOpenToServerGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgOpenToServerGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgOpenToServerGuildSCmd::MergeFrom(const GvgOpenToServerGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_fire()) {
      set_fire(from.fire());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgOpenToServerGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgOpenToServerGuildSCmd::CopyFrom(const GvgOpenToServerGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgOpenToServerGuildSCmd::IsInitialized() const {

  return true;
}

void GvgOpenToServerGuildSCmd::Swap(GvgOpenToServerGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(fire_, other->fire_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgOpenToServerGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgOpenToServerGuildSCmd_descriptor_;
  metadata.reflection = GvgOpenToServerGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShopBuyItemGuildSCmd::kCmdFieldNumber;
const int ShopBuyItemGuildSCmd::kParamFieldNumber;
const int ShopBuyItemGuildSCmd::kCharidFieldNumber;
const int ShopBuyItemGuildSCmd::kIdFieldNumber;
const int ShopBuyItemGuildSCmd::kCountFieldNumber;
#endif  // !_MSC_VER

ShopBuyItemGuildSCmd::ShopBuyItemGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ShopBuyItemGuildSCmd)
}

void ShopBuyItemGuildSCmd::InitAsDefaultInstance() {
}

ShopBuyItemGuildSCmd::ShopBuyItemGuildSCmd(const ShopBuyItemGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ShopBuyItemGuildSCmd)
}

void ShopBuyItemGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 44;
  charid_ = GOOGLE_ULONGLONG(0);
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShopBuyItemGuildSCmd::~ShopBuyItemGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ShopBuyItemGuildSCmd)
  SharedDtor();
}

void ShopBuyItemGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShopBuyItemGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShopBuyItemGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShopBuyItemGuildSCmd_descriptor_;
}

const ShopBuyItemGuildSCmd& ShopBuyItemGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

ShopBuyItemGuildSCmd* ShopBuyItemGuildSCmd::default_instance_ = NULL;

ShopBuyItemGuildSCmd* ShopBuyItemGuildSCmd::New() const {
  return new ShopBuyItemGuildSCmd;
}

void ShopBuyItemGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShopBuyItemGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, count_);
    cmd_ = 210;
    param_ = 44;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShopBuyItemGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ShopBuyItemGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SHOP_BUY_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_count;
        break;
      }

      // optional uint32 count = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ShopBuyItemGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ShopBuyItemGuildSCmd)
  return false;
#undef DO_
}

void ShopBuyItemGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ShopBuyItemGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SHOP_BUY_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  // optional uint32 count = 5 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ShopBuyItemGuildSCmd)
}

::google::protobuf::uint8* ShopBuyItemGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ShopBuyItemGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SHOP_BUY_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  // optional uint32 count = 5 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ShopBuyItemGuildSCmd)
  return target;
}

int ShopBuyItemGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SHOP_BUY_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 count = 5 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShopBuyItemGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShopBuyItemGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShopBuyItemGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShopBuyItemGuildSCmd::MergeFrom(const ShopBuyItemGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShopBuyItemGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShopBuyItemGuildSCmd::CopyFrom(const ShopBuyItemGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShopBuyItemGuildSCmd::IsInitialized() const {

  return true;
}

void ShopBuyItemGuildSCmd::Swap(ShopBuyItemGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShopBuyItemGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShopBuyItemGuildSCmd_descriptor_;
  metadata.reflection = ShopBuyItemGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinSuperGvgGuildSCmd::kCmdFieldNumber;
const int JoinSuperGvgGuildSCmd::kParamFieldNumber;
const int JoinSuperGvgGuildSCmd::kGuildidFieldNumber;
const int JoinSuperGvgGuildSCmd::kSupergvgtimeFieldNumber;
#endif  // !_MSC_VER

JoinSuperGvgGuildSCmd::JoinSuperGvgGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinSuperGvgGuildSCmd)
}

void JoinSuperGvgGuildSCmd::InitAsDefaultInstance() {
}

JoinSuperGvgGuildSCmd::JoinSuperGvgGuildSCmd(const JoinSuperGvgGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinSuperGvgGuildSCmd)
}

void JoinSuperGvgGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 42;
  guildid_ = GOOGLE_ULONGLONG(0);
  supergvgtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinSuperGvgGuildSCmd::~JoinSuperGvgGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinSuperGvgGuildSCmd)
  SharedDtor();
}

void JoinSuperGvgGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinSuperGvgGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinSuperGvgGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinSuperGvgGuildSCmd_descriptor_;
}

const JoinSuperGvgGuildSCmd& JoinSuperGvgGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

JoinSuperGvgGuildSCmd* JoinSuperGvgGuildSCmd::default_instance_ = NULL;

JoinSuperGvgGuildSCmd* JoinSuperGvgGuildSCmd::New() const {
  return new JoinSuperGvgGuildSCmd;
}

void JoinSuperGvgGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinSuperGvgGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildid_, supergvgtime_);
    cmd_ = 210;
    param_ = 42;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinSuperGvgGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinSuperGvgGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOINSUPERGVG_REQ];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_supergvgtime;
        break;
      }

      // optional uint32 supergvgtime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_supergvgtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &supergvgtime_)));
          set_has_supergvgtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinSuperGvgGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinSuperGvgGuildSCmd)
  return false;
#undef DO_
}

void JoinSuperGvgGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinSuperGvgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOINSUPERGVG_REQ];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 supergvgtime = 4 [default = 0];
  if (has_supergvgtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->supergvgtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinSuperGvgGuildSCmd)
}

::google::protobuf::uint8* JoinSuperGvgGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinSuperGvgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOINSUPERGVG_REQ];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 supergvgtime = 4 [default = 0];
  if (has_supergvgtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->supergvgtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinSuperGvgGuildSCmd)
  return target;
}

int JoinSuperGvgGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_JOINSUPERGVG_REQ];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 supergvgtime = 4 [default = 0];
    if (has_supergvgtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->supergvgtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinSuperGvgGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinSuperGvgGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinSuperGvgGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinSuperGvgGuildSCmd::MergeFrom(const JoinSuperGvgGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_supergvgtime()) {
      set_supergvgtime(from.supergvgtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinSuperGvgGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinSuperGvgGuildSCmd::CopyFrom(const JoinSuperGvgGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinSuperGvgGuildSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void JoinSuperGvgGuildSCmd::Swap(JoinSuperGvgGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(supergvgtime_, other->supergvgtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinSuperGvgGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinSuperGvgGuildSCmd_descriptor_;
  metadata.reflection = JoinSuperGvgGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EndSuperGvgGuildSCmd::kCmdFieldNumber;
const int EndSuperGvgGuildSCmd::kParamFieldNumber;
const int EndSuperGvgGuildSCmd::kGuildidFieldNumber;
const int EndSuperGvgGuildSCmd::kRankFieldNumber;
#endif  // !_MSC_VER

EndSuperGvgGuildSCmd::EndSuperGvgGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EndSuperGvgGuildSCmd)
}

void EndSuperGvgGuildSCmd::InitAsDefaultInstance() {
}

EndSuperGvgGuildSCmd::EndSuperGvgGuildSCmd(const EndSuperGvgGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EndSuperGvgGuildSCmd)
}

void EndSuperGvgGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 43;
  guildid_ = GOOGLE_ULONGLONG(0);
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EndSuperGvgGuildSCmd::~EndSuperGvgGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EndSuperGvgGuildSCmd)
  SharedDtor();
}

void EndSuperGvgGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EndSuperGvgGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndSuperGvgGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EndSuperGvgGuildSCmd_descriptor_;
}

const EndSuperGvgGuildSCmd& EndSuperGvgGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

EndSuperGvgGuildSCmd* EndSuperGvgGuildSCmd::default_instance_ = NULL;

EndSuperGvgGuildSCmd* EndSuperGvgGuildSCmd::New() const {
  return new EndSuperGvgGuildSCmd;
}

void EndSuperGvgGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EndSuperGvgGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(guildid_, rank_);
    cmd_ = 210;
    param_ = 43;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EndSuperGvgGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EndSuperGvgGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUPERGVG_END];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // required uint32 rank = 4;
      case 4: {
        if (tag == 32) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EndSuperGvgGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EndSuperGvgGuildSCmd)
  return false;
#undef DO_
}

void EndSuperGvgGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EndSuperGvgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUPERGVG_END];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // required uint32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EndSuperGvgGuildSCmd)
}

::google::protobuf::uint8* EndSuperGvgGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EndSuperGvgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUPERGVG_END];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // required uint32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EndSuperGvgGuildSCmd)
  return target;
}

int EndSuperGvgGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_SUPERGVG_END];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndSuperGvgGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EndSuperGvgGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EndSuperGvgGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EndSuperGvgGuildSCmd::MergeFrom(const EndSuperGvgGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EndSuperGvgGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndSuperGvgGuildSCmd::CopyFrom(const EndSuperGvgGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndSuperGvgGuildSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void EndSuperGvgGuildSCmd::Swap(EndSuperGvgGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EndSuperGvgGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EndSuperGvgGuildSCmd_descriptor_;
  metadata.reflection = EndSuperGvgGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateCityGuildSCmd::kCmdFieldNumber;
const int UpdateCityGuildSCmd::kParamFieldNumber;
const int UpdateCityGuildSCmd::kGuildidFieldNumber;
const int UpdateCityGuildSCmd::kCityidFieldNumber;
const int UpdateCityGuildSCmd::kAddFieldNumber;
#endif  // !_MSC_VER

UpdateCityGuildSCmd::UpdateCityGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateCityGuildSCmd)
}

void UpdateCityGuildSCmd::InitAsDefaultInstance() {
}

UpdateCityGuildSCmd::UpdateCityGuildSCmd(const UpdateCityGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateCityGuildSCmd)
}

void UpdateCityGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 46;
  guildid_ = GOOGLE_ULONGLONG(0);
  cityid_ = 0u;
  add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateCityGuildSCmd::~UpdateCityGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateCityGuildSCmd)
  SharedDtor();
}

void UpdateCityGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateCityGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateCityGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateCityGuildSCmd_descriptor_;
}

const UpdateCityGuildSCmd& UpdateCityGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

UpdateCityGuildSCmd* UpdateCityGuildSCmd::default_instance_ = NULL;

UpdateCityGuildSCmd* UpdateCityGuildSCmd::New() const {
  return new UpdateCityGuildSCmd;
}

void UpdateCityGuildSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateCityGuildSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guildid_, add_);
    cmd_ = 210;
    param_ = 46;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateCityGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateCityGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cityid;
        break;
      }

      // optional uint32 cityid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_add;
        break;
      }

      // optional bool add = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateCityGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateCityGuildSCmd)
  return false;
#undef DO_
}

void UpdateCityGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateCityGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 cityid = 4 [default = 0];
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cityid(), output);
  }

  // optional bool add = 5 [default = false];
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateCityGuildSCmd)
}

::google::protobuf::uint8* UpdateCityGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateCityGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 guildid = 3 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 cityid = 4 [default = 0];
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cityid(), target);
  }

  // optional bool add = 5 [default = false];
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateCityGuildSCmd)
  return target;
}

int UpdateCityGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_UPDATE_CITY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 guildid = 3 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 cityid = 4 [default = 0];
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional bool add = 5 [default = false];
    if (has_add()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateCityGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateCityGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateCityGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateCityGuildSCmd::MergeFrom(const UpdateCityGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateCityGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCityGuildSCmd::CopyFrom(const UpdateCityGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCityGuildSCmd::IsInitialized() const {

  return true;
}

void UpdateCityGuildSCmd::Swap(UpdateCityGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(cityid_, other->cityid_);
    std::swap(add_, other->add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateCityGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateCityGuildSCmd_descriptor_;
  metadata.reflection = UpdateCityGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgResultInfo::kCityidFieldNumber;
const int GvgResultInfo::kGuildidFieldNumber;
const int GvgResultInfo::kGuildnameFieldNumber;
const int GvgResultInfo::kLeadernameFieldNumber;
const int GvgResultInfo::kPerfectFieldNumber;
const int GvgResultInfo::kTimesFieldNumber;
#endif  // !_MSC_VER

GvgResultInfo::GvgResultInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgResultInfo)
}

void GvgResultInfo::InitAsDefaultInstance() {
}

GvgResultInfo::GvgResultInfo(const GvgResultInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgResultInfo)
}

void GvgResultInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cityid_ = 0u;
  guildid_ = GOOGLE_ULONGLONG(0);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  perfect_ = false;
  times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgResultInfo::~GvgResultInfo() {
  // @@protoc_insertion_point(destructor:Cmd.GvgResultInfo)
  SharedDtor();
}

void GvgResultInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (this != default_instance_) {
  }
}

void GvgResultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgResultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgResultInfo_descriptor_;
}

const GvgResultInfo& GvgResultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GvgResultInfo* GvgResultInfo::default_instance_ = NULL;

GvgResultInfo* GvgResultInfo::New() const {
  return new GvgResultInfo;
}

void GvgResultInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GvgResultInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cityid_, perfect_);
    guildid_ = GOOGLE_ULONGLONG(0);
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        leadername_->clear();
      }
    }
    times_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgResultInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgResultInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cityid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 2;
      case 2: {
        if (tag == 16) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_guildname;
        break;
      }

      // optional string guildname = 3;
      case 3: {
        if (tag == 26) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_leadername;
        break;
      }

      // optional string leadername = 4;
      case 4: {
        if (tag == 34) {
         parse_leadername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "leadername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_perfect;
        break;
      }

      // optional bool perfect = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_perfect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &perfect_)));
          set_has_perfect();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional uint32 times = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgResultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgResultInfo)
  return false;
#undef DO_
}

void GvgResultInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgResultInfo)
  // required uint32 cityid = 1;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cityid(), output);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->guildid(), output);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->guildname(), output);
  }

  // optional string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->leadername(), output);
  }

  // optional bool perfect = 5 [default = false];
  if (has_perfect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->perfect(), output);
  }

  // optional uint32 times = 6 [default = 0];
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgResultInfo)
}

::google::protobuf::uint8* GvgResultInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgResultInfo)
  // required uint32 cityid = 1;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cityid(), target);
  }

  // optional uint64 guildid = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->guildid(), target);
  }

  // optional string guildname = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional string leadername = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "leadername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->leadername(), target);
  }

  // optional bool perfect = 5 [default = false];
  if (has_perfect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->perfect(), target);
  }

  // optional uint32 times = 6 [default = 0];
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgResultInfo)
  return target;
}

int GvgResultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cityid = 1;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cityid());
    }

    // optional uint64 guildid = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional string guildname = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string leadername = 4;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional bool perfect = 5 [default = false];
    if (has_perfect()) {
      total_size += 1 + 1;
    }

    // optional uint32 times = 6 [default = 0];
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgResultInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgResultInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgResultInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgResultInfo::MergeFrom(const GvgResultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_perfect()) {
      set_perfect(from.perfect());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgResultInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgResultInfo::CopyFrom(const GvgResultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgResultInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GvgResultInfo::Swap(GvgResultInfo* other) {
  if (other != this) {
    std::swap(cityid_, other->cityid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(leadername_, other->leadername_);
    std::swap(perfect_, other->perfect_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgResultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgResultInfo_descriptor_;
  metadata.reflection = GvgResultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GvgResultGuildSCmd::kCmdFieldNumber;
const int GvgResultGuildSCmd::kParamFieldNumber;
const int GvgResultGuildSCmd::kInfosFieldNumber;
#endif  // !_MSC_VER

GvgResultGuildSCmd::GvgResultGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GvgResultGuildSCmd)
}

void GvgResultGuildSCmd::InitAsDefaultInstance() {
}

GvgResultGuildSCmd::GvgResultGuildSCmd(const GvgResultGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GvgResultGuildSCmd)
}

void GvgResultGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 45;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GvgResultGuildSCmd::~GvgResultGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GvgResultGuildSCmd)
  SharedDtor();
}

void GvgResultGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GvgResultGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GvgResultGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GvgResultGuildSCmd_descriptor_;
}

const GvgResultGuildSCmd& GvgResultGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GvgResultGuildSCmd* GvgResultGuildSCmd::default_instance_ = NULL;

GvgResultGuildSCmd* GvgResultGuildSCmd::New() const {
  return new GvgResultGuildSCmd;
}

void GvgResultGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 210;
    param_ = 45;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GvgResultGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GvgResultGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        break;
      }

      // repeated .Cmd.GvgResultInfo infos = 3;
      case 3: {
        if (tag == 26) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GvgResultGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GvgResultGuildSCmd)
  return false;
#undef DO_
}

void GvgResultGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GvgResultGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.GvgResultInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GvgResultGuildSCmd)
}

::google::protobuf::uint8* GvgResultGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GvgResultGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.GvgResultInfo infos = 3;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GvgResultGuildSCmd)
  return target;
}

int GvgResultGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GVG_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.GvgResultInfo infos = 3;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GvgResultGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GvgResultGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GvgResultGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GvgResultGuildSCmd::MergeFrom(const GvgResultGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GvgResultGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GvgResultGuildSCmd::CopyFrom(const GvgResultGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GvgResultGuildSCmd::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->infos())) return false;
  return true;
}

void GvgResultGuildSCmd::Swap(GvgResultGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GvgResultGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GvgResultGuildSCmd_descriptor_;
  metadata.reflection = GvgResultGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBrocastMailGuildSCmd::kCmdFieldNumber;
const int GuildBrocastMailGuildSCmd::kParamFieldNumber;
const int GuildBrocastMailGuildSCmd::kGuildidFieldNumber;
const int GuildBrocastMailGuildSCmd::kMailidFieldNumber;
const int GuildBrocastMailGuildSCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

GuildBrocastMailGuildSCmd::GuildBrocastMailGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildBrocastMailGuildSCmd)
}

void GuildBrocastMailGuildSCmd::InitAsDefaultInstance() {
}

GuildBrocastMailGuildSCmd::GuildBrocastMailGuildSCmd(const GuildBrocastMailGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildBrocastMailGuildSCmd)
}

void GuildBrocastMailGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 48;
  guildid_ = GOOGLE_ULONGLONG(0);
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBrocastMailGuildSCmd::~GuildBrocastMailGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildBrocastMailGuildSCmd)
  SharedDtor();
}

void GuildBrocastMailGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBrocastMailGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBrocastMailGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBrocastMailGuildSCmd_descriptor_;
}

const GuildBrocastMailGuildSCmd& GuildBrocastMailGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildBrocastMailGuildSCmd* GuildBrocastMailGuildSCmd::default_instance_ = NULL;

GuildBrocastMailGuildSCmd* GuildBrocastMailGuildSCmd::New() const {
  return new GuildBrocastMailGuildSCmd;
}

void GuildBrocastMailGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 48;
    guildid_ = GOOGLE_ULONGLONG(0);
    mailid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBrocastMailGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildBrocastMailGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mailid;
        break;
      }

      // optional uint32 mailid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildBrocastMailGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildBrocastMailGuildSCmd)
  return false;
#undef DO_
}

void GuildBrocastMailGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildBrocastMailGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // optional uint32 mailid = 4 [default = 0];
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mailid(), output);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildBrocastMailGuildSCmd)
}

::google::protobuf::uint8* GuildBrocastMailGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildBrocastMailGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // optional uint32 mailid = 4 [default = 0];
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mailid(), target);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildBrocastMailGuildSCmd)
  return target;
}

int GuildBrocastMailGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 mailid = 4 [default = 0];
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  // repeated .Cmd.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBrocastMailGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBrocastMailGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBrocastMailGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBrocastMailGuildSCmd::MergeFrom(const GuildBrocastMailGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBrocastMailGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBrocastMailGuildSCmd::CopyFrom(const GuildBrocastMailGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBrocastMailGuildSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void GuildBrocastMailGuildSCmd::Swap(GuildBrocastMailGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(mailid_, other->mailid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBrocastMailGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBrocastMailGuildSCmd_descriptor_;
  metadata.reflection = GuildBrocastMailGuildSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildBrocastMsgGuildSCmd::kCmdFieldNumber;
const int GuildBrocastMsgGuildSCmd::kParamFieldNumber;
const int GuildBrocastMsgGuildSCmd::kGuildidFieldNumber;
const int GuildBrocastMsgGuildSCmd::kMsgidFieldNumber;
const int GuildBrocastMsgGuildSCmd::kParamsFieldNumber;
#endif  // !_MSC_VER

GuildBrocastMsgGuildSCmd::GuildBrocastMsgGuildSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildBrocastMsgGuildSCmd)
}

void GuildBrocastMsgGuildSCmd::InitAsDefaultInstance() {
}

GuildBrocastMsgGuildSCmd::GuildBrocastMsgGuildSCmd(const GuildBrocastMsgGuildSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildBrocastMsgGuildSCmd)
}

void GuildBrocastMsgGuildSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 210;
  param_ = 49;
  guildid_ = GOOGLE_ULONGLONG(0);
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildBrocastMsgGuildSCmd::~GuildBrocastMsgGuildSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildBrocastMsgGuildSCmd)
  SharedDtor();
}

void GuildBrocastMsgGuildSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuildBrocastMsgGuildSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildBrocastMsgGuildSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildBrocastMsgGuildSCmd_descriptor_;
}

const GuildBrocastMsgGuildSCmd& GuildBrocastMsgGuildSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildSCmd_2eproto();
  return *default_instance_;
}

GuildBrocastMsgGuildSCmd* GuildBrocastMsgGuildSCmd::default_instance_ = NULL;

GuildBrocastMsgGuildSCmd* GuildBrocastMsgGuildSCmd::New() const {
  return new GuildBrocastMsgGuildSCmd;
}

void GuildBrocastMsgGuildSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 210;
    param_ = 49;
    guildid_ = GOOGLE_ULONGLONG(0);
    msgid_ = 0u;
  }
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildBrocastMsgGuildSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildBrocastMsgGuildSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::GuildSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::GuildSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_guildid;
        break;
      }

      // required uint64 guildid = 3;
      case 3: {
        if (tag == 24) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgid;
        break;
      }

      // required uint32 msgid = 4;
      case 4: {
        if (tag == 32) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated .Cmd.MsgParam params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildBrocastMsgGuildSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildBrocastMsgGuildSCmd)
  return false;
#undef DO_
}

void GuildBrocastMsgGuildSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildBrocastMsgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->guildid(), output);
  }

  // required uint32 msgid = 4;
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgid(), output);
  }

  // repeated .Cmd.MsgParam params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildBrocastMsgGuildSCmd)
}

::google::protobuf::uint8* GuildBrocastMsgGuildSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildBrocastMsgGuildSCmd)
  // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 guildid = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->guildid(), target);
  }

  // required uint32 msgid = 4;
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgid(), target);
  }

  // repeated .Cmd.MsgParam params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildBrocastMsgGuildSCmd)
  return target;
}

int GuildBrocastMsgGuildSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = GUILD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.GuildSParam param = 2 [default = GUILDSPARAM_GUILD_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 guildid = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // required uint32 msgid = 4;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

  }
  // repeated .Cmd.MsgParam params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildBrocastMsgGuildSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildBrocastMsgGuildSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildBrocastMsgGuildSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildBrocastMsgGuildSCmd::MergeFrom(const GuildBrocastMsgGuildSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildBrocastMsgGuildSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildBrocastMsgGuildSCmd::CopyFrom(const GuildBrocastMsgGuildSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildBrocastMsgGuildSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void GuildBrocastMsgGuildSCmd::Swap(GuildBrocastMsgGuildSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(guildid_, other->guildid_);
    std::swap(msgid_, other->msgid_);
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildBrocastMsgGuildSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildBrocastMsgGuildSCmd_descriptor_;
  metadata.reflection = GuildBrocastMsgGuildSCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
