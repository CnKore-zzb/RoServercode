// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneSeal.proto

#ifndef PROTOBUF_SceneSeal_2eproto__INCLUDED
#define PROTOBUF_SceneSeal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneSeal_2eproto();
void protobuf_AssignDesc_SceneSeal_2eproto();
void protobuf_ShutdownFile_SceneSeal_2eproto();

class SealItem;
class SealData;
class QuerySeal;
class UpdateSeal;
class SealTimer;
class BeginSeal;
class EndSeal;
class SealUserLeave;
class SealQueryList;
class SealAcceptCmd;

enum SealParam {
  SEALPARAM_QUERYSEAL = 1,
  SEALPARAM_UPDATESEAL = 2,
  SEALPARAM_SEALTIMER = 3,
  SEALPARAM_BEGINSEAL = 4,
  SEALPARAM_ENDSEAL = 5,
  SEALPARAM_USERLEAVE = 6,
  SEALPARAM_QUERYLIST = 7,
  SEALPARAM_ACCEPTSEAL = 8
};
bool SealParam_IsValid(int value);
const SealParam SealParam_MIN = SEALPARAM_QUERYSEAL;
const SealParam SealParam_MAX = SEALPARAM_ACCEPTSEAL;
const int SealParam_ARRAYSIZE = SealParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* SealParam_descriptor();
inline const ::std::string& SealParam_Name(SealParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    SealParam_descriptor(), value);
}
inline bool SealParam_Parse(
    const ::std::string& name, SealParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SealParam>(
    SealParam_descriptor(), name, value);
}
enum ESealType {
  ESEALTYPE_MIN = 0,
  ESEALTYPE_NORMAL = 1,
  ESEALTYPE_PERSONAL = 2,
  ESEALTYPE_ACTIVITY = 3,
  ESEALTYPE_MAX = 4
};
bool ESealType_IsValid(int value);
const ESealType ESealType_MIN = ESEALTYPE_MIN;
const ESealType ESealType_MAX = ESEALTYPE_MAX;
const int ESealType_ARRAYSIZE = ESealType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ESealType_descriptor();
inline const ::std::string& ESealType_Name(ESealType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ESealType_descriptor(), value);
}
inline bool ESealType_Parse(
    const ::std::string& name, ESealType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ESealType>(
    ESealType_descriptor(), name, value);
}
enum EFinishType {
  EFINISHTYPE_MIN = 0,
  EFINISHTYPE_NORMAL = 1,
  EFINISHTYPE_QUICK = 2
};
bool EFinishType_IsValid(int value);
const EFinishType EFinishType_MIN = EFINISHTYPE_MIN;
const EFinishType EFinishType_MAX = EFINISHTYPE_QUICK;
const int EFinishType_ARRAYSIZE = EFinishType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFinishType_descriptor();
inline const ::std::string& EFinishType_Name(EFinishType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFinishType_descriptor(), value);
}
inline bool EFinishType_Parse(
    const ::std::string& name, EFinishType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFinishType>(
    EFinishType_descriptor(), name, value);
}
// ===================================================================

class SealItem : public ::google::protobuf::Message {
 public:
  SealItem();
  virtual ~SealItem();

  SealItem(const SealItem& from);

  inline SealItem& operator=(const SealItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealItem& default_instance();

  void Swap(SealItem* other);

  // implements Message ----------------------------------------------

  SealItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealItem& from);
  void MergeFrom(const SealItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 config = 1 [default = 0];
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 1;
  inline ::google::protobuf::uint32 config() const;
  inline void set_config(::google::protobuf::uint32 value);

  // optional uint32 refreshtime = 2 [default = 0];
  inline bool has_refreshtime() const;
  inline void clear_refreshtime();
  static const int kRefreshtimeFieldNumber = 2;
  inline ::google::protobuf::uint32 refreshtime() const;
  inline void set_refreshtime(::google::protobuf::uint32 value);

  // optional bool ownseal = 3 [default = false];
  inline bool has_ownseal() const;
  inline void clear_ownseal();
  static const int kOwnsealFieldNumber = 3;
  inline bool ownseal() const;
  inline void set_ownseal(bool value);

  // optional .Cmd.ScenePos pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional uint64 sealid = 5 [default = 0];
  inline bool has_sealid() const;
  inline void clear_sealid();
  static const int kSealidFieldNumber = 5;
  inline ::google::protobuf::uint64 sealid() const;
  inline void set_sealid(::google::protobuf::uint64 value);

  // optional bool issealing = 6 [default = false];
  inline bool has_issealing() const;
  inline void clear_issealing();
  static const int kIssealingFieldNumber = 6;
  inline bool issealing() const;
  inline void set_issealing(bool value);

  // optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 7;
  inline ::Cmd::ESealType etype() const;
  inline void set_etype(::Cmd::ESealType value);

  // @@protoc_insertion_point(class_scope:Cmd.SealItem)
 private:
  inline void set_has_config();
  inline void clear_has_config();
  inline void set_has_refreshtime();
  inline void clear_has_refreshtime();
  inline void set_has_ownseal();
  inline void clear_has_ownseal();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_sealid();
  inline void clear_has_sealid();
  inline void set_has_issealing();
  inline void clear_has_issealing();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 config_;
  ::google::protobuf::uint32 refreshtime_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint64 sealid_;
  bool ownseal_;
  bool issealing_;
  int etype_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealItem* default_instance_;
};
// -------------------------------------------------------------------

class SealData : public ::google::protobuf::Message {
 public:
  SealData();
  virtual ~SealData();

  SealData(const SealData& from);

  inline SealData& operator=(const SealData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealData& default_instance();

  void Swap(SealData* other);

  // implements Message ----------------------------------------------

  SealData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealData& from);
  void MergeFrom(const SealData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // repeated .Cmd.SealItem items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Cmd::SealItem& items(int index) const;
  inline ::Cmd::SealItem* mutable_items(int index);
  inline ::Cmd::SealItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.SealData)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealItem > items_;
  ::google::protobuf::uint32 mapid_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealData* default_instance_;
};
// -------------------------------------------------------------------

class QuerySeal : public ::google::protobuf::Message {
 public:
  QuerySeal();
  virtual ~QuerySeal();

  QuerySeal(const QuerySeal& from);

  inline QuerySeal& operator=(const QuerySeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuerySeal& default_instance();

  void Swap(QuerySeal* other);

  // implements Message ----------------------------------------------

  QuerySeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuerySeal& from);
  void MergeFrom(const QuerySeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // repeated .Cmd.SealData datas = 3;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 3;
  inline const ::Cmd::SealData& datas(int index) const;
  inline ::Cmd::SealData* mutable_datas(int index);
  inline ::Cmd::SealData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:Cmd.QuerySeal)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealData > datas_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static QuerySeal* default_instance_;
};
// -------------------------------------------------------------------

class UpdateSeal : public ::google::protobuf::Message {
 public:
  UpdateSeal();
  virtual ~UpdateSeal();

  UpdateSeal(const UpdateSeal& from);

  inline UpdateSeal& operator=(const UpdateSeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSeal& default_instance();

  void Swap(UpdateSeal* other);

  // implements Message ----------------------------------------------

  UpdateSeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateSeal& from);
  void MergeFrom(const UpdateSeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // repeated .Cmd.SealData newdata = 3;
  inline int newdata_size() const;
  inline void clear_newdata();
  static const int kNewdataFieldNumber = 3;
  inline const ::Cmd::SealData& newdata(int index) const;
  inline ::Cmd::SealData* mutable_newdata(int index);
  inline ::Cmd::SealData* add_newdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
      newdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
      mutable_newdata();

  // repeated .Cmd.SealData deldata = 4;
  inline int deldata_size() const;
  inline void clear_deldata();
  static const int kDeldataFieldNumber = 4;
  inline const ::Cmd::SealData& deldata(int index) const;
  inline ::Cmd::SealData* mutable_deldata(int index);
  inline ::Cmd::SealData* add_deldata();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
      deldata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
      mutable_deldata();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateSeal)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealData > newdata_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::SealData > deldata_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static UpdateSeal* default_instance_;
};
// -------------------------------------------------------------------

class SealTimer : public ::google::protobuf::Message {
 public:
  SealTimer();
  virtual ~SealTimer();

  SealTimer(const SealTimer& from);

  inline SealTimer& operator=(const SealTimer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealTimer& default_instance();

  void Swap(SealTimer* other);

  // implements Message ----------------------------------------------

  SealTimer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealTimer& from);
  void MergeFrom(const SealTimer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // optional int32 speed = 3 [default = 0];
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline ::google::protobuf::int32 speed() const;
  inline void set_speed(::google::protobuf::int32 value);

  // optional uint32 curvalue = 4 [default = 0];
  inline bool has_curvalue() const;
  inline void clear_curvalue();
  static const int kCurvalueFieldNumber = 4;
  inline ::google::protobuf::uint32 curvalue() const;
  inline void set_curvalue(::google::protobuf::uint32 value);

  // optional uint32 maxvalue = 5 [default = 0];
  inline bool has_maxvalue() const;
  inline void clear_maxvalue();
  static const int kMaxvalueFieldNumber = 5;
  inline ::google::protobuf::uint32 maxvalue() const;
  inline void set_maxvalue(::google::protobuf::uint32 value);

  // optional uint32 stoptime = 6 [default = 0];
  inline bool has_stoptime() const;
  inline void clear_stoptime();
  static const int kStoptimeFieldNumber = 6;
  inline ::google::protobuf::uint32 stoptime() const;
  inline void set_stoptime(::google::protobuf::uint32 value);

  // optional uint32 maxtime = 7 [default = 0];
  inline bool has_maxtime() const;
  inline void clear_maxtime();
  static const int kMaxtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 maxtime() const;
  inline void set_maxtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SealTimer)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_curvalue();
  inline void clear_has_curvalue();
  inline void set_has_maxvalue();
  inline void clear_has_maxvalue();
  inline void set_has_stoptime();
  inline void clear_has_stoptime();
  inline void set_has_maxtime();
  inline void clear_has_maxtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::int32 speed_;
  ::google::protobuf::uint32 curvalue_;
  ::google::protobuf::uint32 maxvalue_;
  ::google::protobuf::uint32 stoptime_;
  ::google::protobuf::uint32 maxtime_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealTimer* default_instance_;
};
// -------------------------------------------------------------------

class BeginSeal : public ::google::protobuf::Message {
 public:
  BeginSeal();
  virtual ~BeginSeal();

  BeginSeal(const BeginSeal& from);

  inline BeginSeal& operator=(const BeginSeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginSeal& default_instance();

  void Swap(BeginSeal* other);

  // implements Message ----------------------------------------------

  BeginSeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeginSeal& from);
  void MergeFrom(const BeginSeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // optional uint64 sealid = 3 [default = 0];
  inline bool has_sealid() const;
  inline void clear_sealid();
  static const int kSealidFieldNumber = 3;
  inline ::google::protobuf::uint64 sealid() const;
  inline void set_sealid(::google::protobuf::uint64 value);

  // optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EFinishType etype() const;
  inline void set_etype(::Cmd::EFinishType value);

  // @@protoc_insertion_point(class_scope:Cmd.BeginSeal)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_sealid();
  inline void clear_has_sealid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 sealid_;
  int etype_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static BeginSeal* default_instance_;
};
// -------------------------------------------------------------------

class EndSeal : public ::google::protobuf::Message {
 public:
  EndSeal();
  virtual ~EndSeal();

  EndSeal(const EndSeal& from);

  inline EndSeal& operator=(const EndSeal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndSeal& default_instance();

  void Swap(EndSeal* other);

  // implements Message ----------------------------------------------

  EndSeal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EndSeal& from);
  void MergeFrom(const EndSeal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // optional bool success = 3 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // optional uint32 sealid = 4 [default = 0];
  inline bool has_sealid() const;
  inline void clear_sealid();
  static const int kSealidFieldNumber = 4;
  inline ::google::protobuf::uint32 sealid() const;
  inline void set_sealid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.EndSeal)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_success();
  inline void clear_has_success();
  inline void set_has_sealid();
  inline void clear_has_sealid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool success_;
  ::google::protobuf::uint32 sealid_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static EndSeal* default_instance_;
};
// -------------------------------------------------------------------

class SealUserLeave : public ::google::protobuf::Message {
 public:
  SealUserLeave();
  virtual ~SealUserLeave();

  SealUserLeave(const SealUserLeave& from);

  inline SealUserLeave& operator=(const SealUserLeave& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealUserLeave& default_instance();

  void Swap(SealUserLeave* other);

  // implements Message ----------------------------------------------

  SealUserLeave* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealUserLeave& from);
  void MergeFrom(const SealUserLeave& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // @@protoc_insertion_point(class_scope:Cmd.SealUserLeave)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealUserLeave* default_instance_;
};
// -------------------------------------------------------------------

class SealQueryList : public ::google::protobuf::Message {
 public:
  SealQueryList();
  virtual ~SealQueryList();

  SealQueryList(const SealQueryList& from);

  inline SealQueryList& operator=(const SealQueryList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealQueryList& default_instance();

  void Swap(SealQueryList* other);

  // implements Message ----------------------------------------------

  SealQueryList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealQueryList& from);
  void MergeFrom(const SealQueryList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // repeated uint32 configid = 3;
  inline int configid_size() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 3;
  inline ::google::protobuf::uint32 configid(int index) const;
  inline void set_configid(int index, ::google::protobuf::uint32 value);
  inline void add_configid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      configid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_configid();

  // optional uint32 donetimes = 4 [default = 0];
  inline bool has_donetimes() const;
  inline void clear_donetimes();
  static const int kDonetimesFieldNumber = 4;
  inline ::google::protobuf::uint32 donetimes() const;
  inline void set_donetimes(::google::protobuf::uint32 value);

  // optional uint32 maxtimes = 5 [default = 0];
  inline bool has_maxtimes() const;
  inline void clear_maxtimes();
  static const int kMaxtimesFieldNumber = 5;
  inline ::google::protobuf::uint32 maxtimes() const;
  inline void set_maxtimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.SealQueryList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_donetimes();
  inline void clear_has_donetimes();
  inline void set_has_maxtimes();
  inline void clear_has_maxtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > configid_;
  ::google::protobuf::uint32 donetimes_;
  ::google::protobuf::uint32 maxtimes_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealQueryList* default_instance_;
};
// -------------------------------------------------------------------

class SealAcceptCmd : public ::google::protobuf::Message {
 public:
  SealAcceptCmd();
  virtual ~SealAcceptCmd();

  SealAcceptCmd(const SealAcceptCmd& from);

  inline SealAcceptCmd& operator=(const SealAcceptCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SealAcceptCmd& default_instance();

  void Swap(SealAcceptCmd* other);

  // implements Message ----------------------------------------------

  SealAcceptCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SealAcceptCmd& from);
  void MergeFrom(const SealAcceptCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::SealParam param() const;
  inline void set_param(::Cmd::SealParam value);

  // optional uint32 seal = 3 [default = 0];
  inline bool has_seal() const;
  inline void clear_seal();
  static const int kSealFieldNumber = 3;
  inline ::google::protobuf::uint32 seal() const;
  inline void set_seal(::google::protobuf::uint32 value);

  // optional .Cmd.ScenePos pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline const ::Cmd::ScenePos& pos() const;
  inline ::Cmd::ScenePos* mutable_pos();
  inline ::Cmd::ScenePos* release_pos();
  inline void set_allocated_pos(::Cmd::ScenePos* pos);

  // optional bool abandon = 5 [default = false];
  inline bool has_abandon() const;
  inline void clear_abandon();
  static const int kAbandonFieldNumber = 5;
  inline bool abandon() const;
  inline void set_abandon(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.SealAcceptCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_seal();
  inline void clear_has_seal();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_abandon();
  inline void clear_has_abandon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ScenePos* pos_;
  ::google::protobuf::uint32 seal_;
  bool abandon_;
  friend void  protobuf_AddDesc_SceneSeal_2eproto();
  friend void protobuf_AssignDesc_SceneSeal_2eproto();
  friend void protobuf_ShutdownFile_SceneSeal_2eproto();

  void InitAsDefaultInstance();
  static SealAcceptCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// SealItem

// optional uint32 config = 1 [default = 0];
inline bool SealItem::has_config() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealItem::set_has_config() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealItem::clear_has_config() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealItem::clear_config() {
  config_ = 0u;
  clear_has_config();
}
inline ::google::protobuf::uint32 SealItem::config() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.config)
  return config_;
}
inline void SealItem::set_config(::google::protobuf::uint32 value) {
  set_has_config();
  config_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.config)
}

// optional uint32 refreshtime = 2 [default = 0];
inline bool SealItem::has_refreshtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SealItem::set_has_refreshtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SealItem::clear_has_refreshtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SealItem::clear_refreshtime() {
  refreshtime_ = 0u;
  clear_has_refreshtime();
}
inline ::google::protobuf::uint32 SealItem::refreshtime() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.refreshtime)
  return refreshtime_;
}
inline void SealItem::set_refreshtime(::google::protobuf::uint32 value) {
  set_has_refreshtime();
  refreshtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.refreshtime)
}

// optional bool ownseal = 3 [default = false];
inline bool SealItem::has_ownseal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SealItem::set_has_ownseal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SealItem::clear_has_ownseal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SealItem::clear_ownseal() {
  ownseal_ = false;
  clear_has_ownseal();
}
inline bool SealItem::ownseal() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.ownseal)
  return ownseal_;
}
inline void SealItem::set_ownseal(bool value) {
  set_has_ownseal();
  ownseal_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.ownseal)
}

// optional .Cmd.ScenePos pos = 4;
inline bool SealItem::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SealItem::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SealItem::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SealItem::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& SealItem::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* SealItem::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.SealItem.pos)
  return pos_;
}
inline ::Cmd::ScenePos* SealItem::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SealItem::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SealItem.pos)
}

// optional uint64 sealid = 5 [default = 0];
inline bool SealItem::has_sealid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SealItem::set_has_sealid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SealItem::clear_has_sealid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SealItem::clear_sealid() {
  sealid_ = GOOGLE_ULONGLONG(0);
  clear_has_sealid();
}
inline ::google::protobuf::uint64 SealItem::sealid() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.sealid)
  return sealid_;
}
inline void SealItem::set_sealid(::google::protobuf::uint64 value) {
  set_has_sealid();
  sealid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.sealid)
}

// optional bool issealing = 6 [default = false];
inline bool SealItem::has_issealing() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SealItem::set_has_issealing() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SealItem::clear_has_issealing() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SealItem::clear_issealing() {
  issealing_ = false;
  clear_has_issealing();
}
inline bool SealItem::issealing() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.issealing)
  return issealing_;
}
inline void SealItem::set_issealing(bool value) {
  set_has_issealing();
  issealing_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.issealing)
}

// optional .Cmd.ESealType etype = 7 [default = ESEALTYPE_NORMAL];
inline bool SealItem::has_etype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SealItem::set_has_etype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SealItem::clear_has_etype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SealItem::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Cmd::ESealType SealItem::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.SealItem.etype)
  return static_cast< ::Cmd::ESealType >(etype_);
}
inline void SealItem::set_etype(::Cmd::ESealType value) {
  assert(::Cmd::ESealType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealItem.etype)
}

// -------------------------------------------------------------------

// SealData

// optional uint32 mapid = 1 [default = 0];
inline bool SealData::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealData::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealData::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealData::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 SealData::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.SealData.mapid)
  return mapid_;
}
inline void SealData::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealData.mapid)
}

// repeated .Cmd.SealItem items = 2;
inline int SealData::items_size() const {
  return items_.size();
}
inline void SealData::clear_items() {
  items_.Clear();
}
inline const ::Cmd::SealItem& SealData::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SealData.items)
  return items_.Get(index);
}
inline ::Cmd::SealItem* SealData::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.SealData.items)
  return items_.Mutable(index);
}
inline ::Cmd::SealItem* SealData::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.SealData.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealItem >&
SealData::items() const {
  // @@protoc_insertion_point(field_list:Cmd.SealData.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealItem >*
SealData::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SealData.items)
  return &items_;
}

// -------------------------------------------------------------------

// QuerySeal

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool QuerySeal::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuerySeal::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuerySeal::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuerySeal::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command QuerySeal::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySeal.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuerySeal::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySeal.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYSEAL];
inline bool QuerySeal::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuerySeal::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuerySeal::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuerySeal::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::SealParam QuerySeal::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySeal.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void QuerySeal::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuerySeal.param)
}

// repeated .Cmd.SealData datas = 3;
inline int QuerySeal::datas_size() const {
  return datas_.size();
}
inline void QuerySeal::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::SealData& QuerySeal::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuerySeal.datas)
  return datas_.Get(index);
}
inline ::Cmd::SealData* QuerySeal::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuerySeal.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::SealData* QuerySeal::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.QuerySeal.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
QuerySeal::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.QuerySeal.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
QuerySeal::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuerySeal.datas)
  return &datas_;
}

// -------------------------------------------------------------------

// UpdateSeal

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool UpdateSeal::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateSeal::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateSeal::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateSeal::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateSeal::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateSeal.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateSeal::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateSeal.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_UPDATESEAL];
inline bool UpdateSeal::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateSeal::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateSeal::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateSeal::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::SealParam UpdateSeal::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateSeal.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void UpdateSeal::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateSeal.param)
}

// repeated .Cmd.SealData newdata = 3;
inline int UpdateSeal::newdata_size() const {
  return newdata_.size();
}
inline void UpdateSeal::clear_newdata() {
  newdata_.Clear();
}
inline const ::Cmd::SealData& UpdateSeal::newdata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateSeal.newdata)
  return newdata_.Get(index);
}
inline ::Cmd::SealData* UpdateSeal::mutable_newdata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateSeal.newdata)
  return newdata_.Mutable(index);
}
inline ::Cmd::SealData* UpdateSeal::add_newdata() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateSeal.newdata)
  return newdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
UpdateSeal::newdata() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateSeal.newdata)
  return newdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
UpdateSeal::mutable_newdata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateSeal.newdata)
  return &newdata_;
}

// repeated .Cmd.SealData deldata = 4;
inline int UpdateSeal::deldata_size() const {
  return deldata_.size();
}
inline void UpdateSeal::clear_deldata() {
  deldata_.Clear();
}
inline const ::Cmd::SealData& UpdateSeal::deldata(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateSeal.deldata)
  return deldata_.Get(index);
}
inline ::Cmd::SealData* UpdateSeal::mutable_deldata(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateSeal.deldata)
  return deldata_.Mutable(index);
}
inline ::Cmd::SealData* UpdateSeal::add_deldata() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateSeal.deldata)
  return deldata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >&
UpdateSeal::deldata() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateSeal.deldata)
  return deldata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::SealData >*
UpdateSeal::mutable_deldata() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateSeal.deldata)
  return &deldata_;
}

// -------------------------------------------------------------------

// SealTimer

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool SealTimer::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealTimer::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealTimer::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealTimer::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command SealTimer::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SealTimer::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_SEALTIMER];
inline bool SealTimer::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SealTimer::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SealTimer::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SealTimer::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::SealParam SealTimer::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void SealTimer::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.param)
}

// optional int32 speed = 3 [default = 0];
inline bool SealTimer::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SealTimer::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SealTimer::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SealTimer::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google::protobuf::int32 SealTimer::speed() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.speed)
  return speed_;
}
inline void SealTimer::set_speed(::google::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.speed)
}

// optional uint32 curvalue = 4 [default = 0];
inline bool SealTimer::has_curvalue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SealTimer::set_has_curvalue() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SealTimer::clear_has_curvalue() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SealTimer::clear_curvalue() {
  curvalue_ = 0u;
  clear_has_curvalue();
}
inline ::google::protobuf::uint32 SealTimer::curvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.curvalue)
  return curvalue_;
}
inline void SealTimer::set_curvalue(::google::protobuf::uint32 value) {
  set_has_curvalue();
  curvalue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.curvalue)
}

// optional uint32 maxvalue = 5 [default = 0];
inline bool SealTimer::has_maxvalue() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SealTimer::set_has_maxvalue() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SealTimer::clear_has_maxvalue() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SealTimer::clear_maxvalue() {
  maxvalue_ = 0u;
  clear_has_maxvalue();
}
inline ::google::protobuf::uint32 SealTimer::maxvalue() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.maxvalue)
  return maxvalue_;
}
inline void SealTimer::set_maxvalue(::google::protobuf::uint32 value) {
  set_has_maxvalue();
  maxvalue_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.maxvalue)
}

// optional uint32 stoptime = 6 [default = 0];
inline bool SealTimer::has_stoptime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SealTimer::set_has_stoptime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SealTimer::clear_has_stoptime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SealTimer::clear_stoptime() {
  stoptime_ = 0u;
  clear_has_stoptime();
}
inline ::google::protobuf::uint32 SealTimer::stoptime() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.stoptime)
  return stoptime_;
}
inline void SealTimer::set_stoptime(::google::protobuf::uint32 value) {
  set_has_stoptime();
  stoptime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.stoptime)
}

// optional uint32 maxtime = 7 [default = 0];
inline bool SealTimer::has_maxtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SealTimer::set_has_maxtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SealTimer::clear_has_maxtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SealTimer::clear_maxtime() {
  maxtime_ = 0u;
  clear_has_maxtime();
}
inline ::google::protobuf::uint32 SealTimer::maxtime() const {
  // @@protoc_insertion_point(field_get:Cmd.SealTimer.maxtime)
  return maxtime_;
}
inline void SealTimer::set_maxtime(::google::protobuf::uint32 value) {
  set_has_maxtime();
  maxtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealTimer.maxtime)
}

// -------------------------------------------------------------------

// BeginSeal

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool BeginSeal::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginSeal::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginSeal::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginSeal::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command BeginSeal::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginSeal.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BeginSeal::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginSeal.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_BEGINSEAL];
inline bool BeginSeal::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginSeal::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginSeal::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginSeal::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::SealParam BeginSeal::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginSeal.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void BeginSeal::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginSeal.param)
}

// optional uint64 sealid = 3 [default = 0];
inline bool BeginSeal::has_sealid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginSeal::set_has_sealid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginSeal::clear_has_sealid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginSeal::clear_sealid() {
  sealid_ = GOOGLE_ULONGLONG(0);
  clear_has_sealid();
}
inline ::google::protobuf::uint64 BeginSeal::sealid() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginSeal.sealid)
  return sealid_;
}
inline void BeginSeal::set_sealid(::google::protobuf::uint64 value) {
  set_has_sealid();
  sealid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginSeal.sealid)
}

// optional .Cmd.EFinishType etype = 4 [default = EFINISHTYPE_NORMAL];
inline bool BeginSeal::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeginSeal::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeginSeal::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeginSeal::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::Cmd::EFinishType BeginSeal::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.BeginSeal.etype)
  return static_cast< ::Cmd::EFinishType >(etype_);
}
inline void BeginSeal::set_etype(::Cmd::EFinishType value) {
  assert(::Cmd::EFinishType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BeginSeal.etype)
}

// -------------------------------------------------------------------

// EndSeal

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool EndSeal::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndSeal::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndSeal::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndSeal::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command EndSeal::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EndSeal.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EndSeal::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EndSeal.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_ENDSEAL];
inline bool EndSeal::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndSeal::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndSeal::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndSeal::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::SealParam EndSeal::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EndSeal.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void EndSeal::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EndSeal.param)
}

// optional bool success = 3 [default = false];
inline bool EndSeal::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndSeal::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndSeal::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndSeal::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool EndSeal::success() const {
  // @@protoc_insertion_point(field_get:Cmd.EndSeal.success)
  return success_;
}
inline void EndSeal::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EndSeal.success)
}

// optional uint32 sealid = 4 [default = 0];
inline bool EndSeal::has_sealid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EndSeal::set_has_sealid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EndSeal::clear_has_sealid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EndSeal::clear_sealid() {
  sealid_ = 0u;
  clear_has_sealid();
}
inline ::google::protobuf::uint32 EndSeal::sealid() const {
  // @@protoc_insertion_point(field_get:Cmd.EndSeal.sealid)
  return sealid_;
}
inline void EndSeal::set_sealid(::google::protobuf::uint32 value) {
  set_has_sealid();
  sealid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EndSeal.sealid)
}

// -------------------------------------------------------------------

// SealUserLeave

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool SealUserLeave::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealUserLeave::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealUserLeave::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealUserLeave::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command SealUserLeave::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SealUserLeave.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SealUserLeave::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealUserLeave.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_USERLEAVE];
inline bool SealUserLeave::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SealUserLeave::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SealUserLeave::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SealUserLeave::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::SealParam SealUserLeave::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SealUserLeave.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void SealUserLeave::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealUserLeave.param)
}

// -------------------------------------------------------------------

// SealQueryList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool SealQueryList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealQueryList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealQueryList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealQueryList::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command SealQueryList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SealQueryList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SealQueryList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealQueryList.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_QUERYLIST];
inline bool SealQueryList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SealQueryList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SealQueryList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SealQueryList::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::SealParam SealQueryList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SealQueryList.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void SealQueryList::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealQueryList.param)
}

// repeated uint32 configid = 3;
inline int SealQueryList::configid_size() const {
  return configid_.size();
}
inline void SealQueryList::clear_configid() {
  configid_.Clear();
}
inline ::google::protobuf::uint32 SealQueryList::configid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.SealQueryList.configid)
  return configid_.Get(index);
}
inline void SealQueryList::set_configid(int index, ::google::protobuf::uint32 value) {
  configid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.SealQueryList.configid)
}
inline void SealQueryList::add_configid(::google::protobuf::uint32 value) {
  configid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.SealQueryList.configid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SealQueryList::configid() const {
  // @@protoc_insertion_point(field_list:Cmd.SealQueryList.configid)
  return configid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SealQueryList::mutable_configid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.SealQueryList.configid)
  return &configid_;
}

// optional uint32 donetimes = 4 [default = 0];
inline bool SealQueryList::has_donetimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SealQueryList::set_has_donetimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SealQueryList::clear_has_donetimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SealQueryList::clear_donetimes() {
  donetimes_ = 0u;
  clear_has_donetimes();
}
inline ::google::protobuf::uint32 SealQueryList::donetimes() const {
  // @@protoc_insertion_point(field_get:Cmd.SealQueryList.donetimes)
  return donetimes_;
}
inline void SealQueryList::set_donetimes(::google::protobuf::uint32 value) {
  set_has_donetimes();
  donetimes_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealQueryList.donetimes)
}

// optional uint32 maxtimes = 5 [default = 0];
inline bool SealQueryList::has_maxtimes() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SealQueryList::set_has_maxtimes() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SealQueryList::clear_has_maxtimes() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SealQueryList::clear_maxtimes() {
  maxtimes_ = 0u;
  clear_has_maxtimes();
}
inline ::google::protobuf::uint32 SealQueryList::maxtimes() const {
  // @@protoc_insertion_point(field_get:Cmd.SealQueryList.maxtimes)
  return maxtimes_;
}
inline void SealQueryList::set_maxtimes(::google::protobuf::uint32 value) {
  set_has_maxtimes();
  maxtimes_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealQueryList.maxtimes)
}

// -------------------------------------------------------------------

// SealAcceptCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_SEAL_PROTOCMD];
inline bool SealAcceptCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SealAcceptCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SealAcceptCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SealAcceptCmd::clear_cmd() {
  cmd_ = 21;
  clear_has_cmd();
}
inline ::Cmd::Command SealAcceptCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SealAcceptCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SealAcceptCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealAcceptCmd.cmd)
}

// optional .Cmd.SealParam param = 2 [default = SEALPARAM_ACCEPTSEAL];
inline bool SealAcceptCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SealAcceptCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SealAcceptCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SealAcceptCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::SealParam SealAcceptCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SealAcceptCmd.param)
  return static_cast< ::Cmd::SealParam >(param_);
}
inline void SealAcceptCmd::set_param(::Cmd::SealParam value) {
  assert(::Cmd::SealParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealAcceptCmd.param)
}

// optional uint32 seal = 3 [default = 0];
inline bool SealAcceptCmd::has_seal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SealAcceptCmd::set_has_seal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SealAcceptCmd::clear_has_seal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SealAcceptCmd::clear_seal() {
  seal_ = 0u;
  clear_has_seal();
}
inline ::google::protobuf::uint32 SealAcceptCmd::seal() const {
  // @@protoc_insertion_point(field_get:Cmd.SealAcceptCmd.seal)
  return seal_;
}
inline void SealAcceptCmd::set_seal(::google::protobuf::uint32 value) {
  set_has_seal();
  seal_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealAcceptCmd.seal)
}

// optional .Cmd.ScenePos pos = 4;
inline bool SealAcceptCmd::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SealAcceptCmd::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SealAcceptCmd::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SealAcceptCmd::clear_pos() {
  if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
  clear_has_pos();
}
inline const ::Cmd::ScenePos& SealAcceptCmd::pos() const {
  // @@protoc_insertion_point(field_get:Cmd.SealAcceptCmd.pos)
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::Cmd::ScenePos* SealAcceptCmd::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.SealAcceptCmd.pos)
  return pos_;
}
inline ::Cmd::ScenePos* SealAcceptCmd::release_pos() {
  clear_has_pos();
  ::Cmd::ScenePos* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void SealAcceptCmd::set_allocated_pos(::Cmd::ScenePos* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SealAcceptCmd.pos)
}

// optional bool abandon = 5 [default = false];
inline bool SealAcceptCmd::has_abandon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SealAcceptCmd::set_has_abandon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SealAcceptCmd::clear_has_abandon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SealAcceptCmd::clear_abandon() {
  abandon_ = false;
  clear_has_abandon();
}
inline bool SealAcceptCmd::abandon() const {
  // @@protoc_insertion_point(field_get:Cmd.SealAcceptCmd.abandon)
  return abandon_;
}
inline void SealAcceptCmd::set_abandon(bool value) {
  set_has_abandon();
  abandon_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SealAcceptCmd.abandon)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::SealParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::SealParam>() {
  return ::Cmd::SealParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ESealType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ESealType>() {
  return ::Cmd::ESealType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFinishType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFinishType>() {
  return ::Cmd::EFinishType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneSeal_2eproto__INCLUDED
