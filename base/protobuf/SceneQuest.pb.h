// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneQuest.proto

#ifndef PROTOBUF_SceneQuest_2eproto__INCLUDED
#define PROTOBUF_SceneQuest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SceneItem.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneQuest_2eproto();
void protobuf_AssignDesc_SceneQuest_2eproto();
void protobuf_ShutdownFile_SceneQuest_2eproto();

class QuestPConfig;
class QuestStep;
class QuestData;
class QuestManualItem;
class QuestShop;
class QuestName;
class QuestPuzzle;
class QuestPreview;
class QuestManualMain;
class QuestManualBranch;
class QuestManualStory;
class QuestManual;
class QuestList;
class QuestUpdateItem;
class QuestUpdate;
class QuestStepUpdate;
class QuestAction;
class RunQuestStep;
class QuestTrace;
class QuestDetail;
class QuestDetailList;
class QuestDetailUpdate;
class QuestRaidCmd;
class QuestCanAcceptListChange;
class VisitNpcUserCmd;
class OtherData;
class QueryOtherData;
class QueryWantedInfoQuestCmd;
class InviteHelpAcceptQuestCmd;
class InviteAcceptQuestCmd;
class ReplyHelpAccelpQuestCmd;
class WorldQuest;
class QueryWorldQuestCmd;
class QuestGroupTraceQuestCmd;
class HelpQuickFinishBoardQuestCmd;
class QueryManualQuestCmd;
class OpenPuzzleQuestCmd;

enum QuestParam {
  QUESTPARAM_QUESTLIST = 1,
  QUESTPARAM_QUESTUPDATE = 2,
  QUESTPARAM_QUESTACTION = 3,
  QUESTPARAM_RUNQUESTSTEP = 4,
  QUESTPARAM_QUESTSTEPUPDATE = 5,
  QUESTPARAM_QUESTTRACE = 6,
  QUESTPARAM_QUESTDETAILLIST = 7,
  QUESTPARAM_QUESTDETAILUPDATE = 8,
  QUESTPARAM_QUESTRAIDCMD = 9,
  QUESTPARAM_CANACCEPTLISTCHANGED = 10,
  QUESTPARAM_VISIT_NPC = 11,
  QUESTPARAM_QUERYOTHERDATA = 12,
  QUESTPARAM_QUERYWANTEDINFO = 13,
  QUESTPARAM_HELP_ACCEPT_INVITE = 14,
  QUESTPARAM_HELP_ACCEPT_AGREE = 15,
  QUESTPARAM_INVITE_ACCEPT_QUEST = 16,
  QUESTPARAM_QUERY_WORLD_QUEST = 17,
  QUESTPARAM_QUESTGROUP_TRACE = 18,
  QUESTPARAM_HELP_QUICK_FINISH_BOARD = 19,
  QUESTPARAM_QUERY_MANUAL = 21,
  QUESTPARAM_OPEN_PUZZLE = 22
};
bool QuestParam_IsValid(int value);
const QuestParam QuestParam_MIN = QUESTPARAM_QUESTLIST;
const QuestParam QuestParam_MAX = QUESTPARAM_OPEN_PUZZLE;
const int QuestParam_ARRAYSIZE = QuestParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* QuestParam_descriptor();
inline const ::std::string& QuestParam_Name(QuestParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    QuestParam_descriptor(), value);
}
inline bool QuestParam_Parse(
    const ::std::string& name, QuestParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QuestParam>(
    QuestParam_descriptor(), name, value);
}
enum EWantedType {
  EWANTEDTYPE_TOTAL = 0,
  EWANTEDTYPE_ACTIVE = 1,
  EWANTEDTYPE_MAX = 2
};
bool EWantedType_IsValid(int value);
const EWantedType EWantedType_MIN = EWANTEDTYPE_TOTAL;
const EWantedType EWantedType_MAX = EWANTEDTYPE_MAX;
const int EWantedType_ARRAYSIZE = EWantedType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EWantedType_descriptor();
inline const ::std::string& EWantedType_Name(EWantedType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EWantedType_descriptor(), value);
}
inline bool EWantedType_Parse(
    const ::std::string& name, EWantedType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EWantedType>(
    EWantedType_descriptor(), name, value);
}
enum EQuestType {
  EQUESTTYPE_MIN = 0,
  EQUESTTYPE_MAIN = 1,
  EQUESTTYPE_BRANCH = 2,
  EQUESTTYPE_TALK = 3,
  EQUESTTYPE_TRIGGER = 4,
  EQUESTTYPE_WANTED = 5,
  EQUESTTYPE_DAILY = 6,
  EQUESTTYPE_DAILY_1 = 7,
  EQUESTTYPE_DAILY_3 = 8,
  EQUESTTYPE_DAILY_7 = 9,
  EQUESTTYPE_STORY = 10,
  EQUESTTYPE_DAILY_MAP = 11,
  EQUESTTYPE_SCENE = 12,
  EQUESTTYPE_HEAD = 13,
  EQUESTTYPE_RAIDTALK = 14,
  EQUESTTYPE_SATISFACTION = 15,
  EQUESTTYPE_ELITE = 16,
  EQUESTTYPE_CCRASTEHAM = 17,
  EQUESTTYPE_STORY_CCRASTEHAM = 18,
  EQUESTTYPE_GUILD = 19,
  EQUESTTYPE_CHILD = 20,
  EQUESTTYPE_DAILY_RESET = 21,
  EQUESTTYPE_ACC = 22,
  EQUESTTYPE_ACC_NORMAL = 23,
  EQUESTTYPE_ACC_DAILY = 24,
  EQUESTTYPE_ACC_CHOICE = 25,
  EQUESTTYPE_DAILY_MAPRAND = 26,
  EQUESTTYPE_ACC_MAIN = 27,
  EQUESTTYPE_ACC_BRANCH = 28,
  EQUESTTYPE_ACC_SATISFACTION = 29,
  EQUESTTYPE_ACC_DAILY_1 = 30,
  EQUESTTYPE_ACC_DAILY_3 = 31,
  EQUESTTYPE_ACC_DAILY_7 = 32,
  EQUESTTYPE_ACC_DAILY_RESET = 33,
  EQUESTTYPE_DAILY_BOX = 34,
  EQUESTTYPE_SIGN = 35,
  EQUESTTYPE_DAY = 36,
  EQUESTTYPE_NIGHT = 37,
  EQUESTTYPE_ARTIFACT = 38,
  EQUESTTYPE_WEDDING = 39,
  EQUESTTYPE_WEDDING_DAILY = 40,
  EQUESTTYPE_CAPRA = 41,
  EQUESTTYPE_DEAD = 42,
  EQUESTTYPE_MAX = 43
};
bool EQuestType_IsValid(int value);
const EQuestType EQuestType_MIN = EQUESTTYPE_MIN;
const EQuestType EQuestType_MAX = EQUESTTYPE_MAX;
const int EQuestType_ARRAYSIZE = EQuestType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestType_descriptor();
inline const ::std::string& EQuestType_Name(EQuestType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestType_descriptor(), value);
}
inline bool EQuestType_Parse(
    const ::std::string& name, EQuestType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestType>(
    EQuestType_descriptor(), name, value);
}
enum EQuestStep {
  EQUESTSTEP_MIN = 0,
  EQUESTSTEP_VISIT = 1,
  EQUESTSTEP_KILL = 2,
  EQUESTSTEP_REWARD = 3,
  EQUESTSTEP_COLLECT = 4,
  EQUESTSTEP_SUMMON = 5,
  EQUESTSTEP_GUARD = 6,
  EQUESTSTEP_GMCMD = 7,
  EQUESTSTEP_TESTFAIL = 8,
  EQUESTSTEP_USE = 9,
  EQUESTSTEP_GATHER = 10,
  EQUESTSTEP_DELETE = 11,
  EQUESTSTEP_RAID = 12,
  EQUESTSTEP_CAMERA = 13,
  EQUESTSTEP_LEVEL = 14,
  EQUESTSTEP_WAIT = 15,
  EQUESTSTEP_MOVE = 16,
  EQUESTSTEP_DIALOG = 17,
  EQUESTSTEP_PREQUEST = 18,
  EQUESTSTEP_CLEARNPC = 19,
  EQUESTSTEP_MOUNTRIDE = 20,
  EQUESTSTEP_SELFIE = 21,
  EQUESTSTEP_CHECKTEAM = 22,
  EQUESTSTEP_REMOVEMONEY = 23,
  EQUESTSTEP_CLASS = 24,
  EQUESTSTEP_ORGCLASS = 25,
  EQUESTSTEP_EVO = 26,
  EQUESTSTEP_CHECKQUEST = 27,
  EQUESTSTEP_CHECKITEM = 28,
  EQUESTSTEP_REMOVEITEM = 29,
  EQUESTSTEP_RANDOMJUMP = 30,
  EQUESTSTEP_CHECKLEVEL = 31,
  EQUESTSTEP_CHECKGEAR = 32,
  EQUESTSTEP_PURIFY = 33,
  EQUESTSTEP_ACTION = 34,
  EQUESTSTEP_SKILL = 35,
  EQUESTSTEP_INTERLOCUTION = 36,
  EQUESTSTEP_EMPTY = 37,
  EQUESTSTEP_CHECKEQUIPLV = 38,
  EQUESTSTEP_CHECKMONEY = 39,
  EQUESTSTEP_GUIDE = 40,
  EQUESTSTEP_GUIDE_CHECK = 41,
  EQUESTSTEP_GUIDE_HIGHLIGHT = 42,
  EQUESTSTEP_CHECKOPTION = 43,
  EQUESTSTEP_HINT = 44,
  EQUESTSTEP_CHECKGROUP = 45,
  EQUESTSTEP_SEAL = 46,
  EQUESTSTEP_EQUIPLV = 47,
  EQUESTSTEP_VIDEO = 48,
  EQUESTSTEP_ILLUSTRATION = 49,
  EQUESTSTEP_NPCPLAY = 50,
  EQUESTSTEP_ITEM = 51,
  EQUESTSTEP_DAILY = 52,
  EQUESTSTEP_CHECK_MANUAL = 53,
  EQUESTSTEP_MANUAL = 54,
  EQUESTSTEP_PLAY_MUSIC = 55,
  EQUESTSTEP_REWRADHELP = 56,
  EQUESTSTEP_GUIDELOCKMONSTER = 57,
  EQUESTSTEP_MONEY = 58,
  EQUESTSTEP_ACTIVITY = 59,
  EQUESTSTEP_OPTION = 60,
  EQUESTSTEP_PHOTO = 61,
  EQUESTSTEP_ITEMUSE = 62,
  EQUESTSTEP_HAND = 63,
  EQUESTSTEP_MUSIC = 64,
  EQUESTSTEP_RANDITEM = 65,
  EQUESTSTEP_CARRIER = 66,
  EQUESTSTEP_BATTLE = 67,
  EQUESTSTEP_COOKFOOD = 68,
  EQUESTSTEP_PET = 69,
  EQUESTSTEP_SCENE = 70,
  EQUESTSTEP_COOK = 71,
  EQUESTSTEP_BUFF = 72,
  EQUESTSTEP_TUTOR = 73,
  EQUESTSTEP_CHRISTMAS = 74,
  EQUESTSTEP_CHRISTMAS_RUN = 75,
  EQUESTSTEP_BEING = 76,
  EQUESTSTEP_CHECK_JOY = 77,
  EQUESTSTEP_ADD_JOY = 78,
  EQUESTSTEP_RAND_DIALOG = 79,
  EQUESTSTEP_CG = 80,
  EQUESTSTEP_CHECKSERVANT = 81,
  EQUESTSTEP_CLIENTPLOT = 84,
  EQUESTSTEP_CHAT = 85,
  EQUESTSTEP_TRANSFER = 86,
  EQUESTSTEP_REDIALOG = 87,
  EQUESTSTEP_CHAT_SYSTEM = 88,
  EQUESTSTEP_MAX = 89
};
bool EQuestStep_IsValid(int value);
const EQuestStep EQuestStep_MIN = EQUESTSTEP_MIN;
const EQuestStep EQuestStep_MAX = EQUESTSTEP_MAX;
const int EQuestStep_ARRAYSIZE = EQuestStep_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestStep_descriptor();
inline const ::std::string& EQuestStep_Name(EQuestStep value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestStep_descriptor(), value);
}
inline bool EQuestStep_Parse(
    const ::std::string& name, EQuestStep* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestStep>(
    EQuestStep_descriptor(), name, value);
}
enum EQuestList {
  EQUESTLIST_ACCEPT = 1,
  EQUESTLIST_SUBMIT = 2,
  EQUESTLIST_COMPLETE = 3,
  EQUESTLIST_CANACCEPT = 4
};
bool EQuestList_IsValid(int value);
const EQuestList EQuestList_MIN = EQUESTLIST_ACCEPT;
const EQuestList EQuestList_MAX = EQUESTLIST_CANACCEPT;
const int EQuestList_ARRAYSIZE = EQuestList_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestList_descriptor();
inline const ::std::string& EQuestList_Name(EQuestList value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestList_descriptor(), value);
}
inline bool EQuestList_Parse(
    const ::std::string& name, EQuestList* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestList>(
    EQuestList_descriptor(), name, value);
}
enum EQuestAction {
  EQUESTACTION_MIN = 0,
  EQUESTACTION_ACCEPT = 1,
  EQUESTACTION_SUBMIT = 2,
  EQUESTACTION_ABANDON_GROUP = 3,
  EQUESTACTION_ABANDON_QUEST = 4,
  EQUESTACTION_QUICK_SUBMIT_BOARD = 5,
  EQUESTACTION_QUICK_SUBMIT_BOARD_TEAM = 6,
  EQUESTACTION_MAX = 7
};
bool EQuestAction_IsValid(int value);
const EQuestAction EQuestAction_MIN = EQUESTACTION_MIN;
const EQuestAction EQuestAction_MAX = EQUESTACTION_MAX;
const int EQuestAction_ARRAYSIZE = EQuestAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* EQuestAction_descriptor();
inline const ::std::string& EQuestAction_Name(EQuestAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    EQuestAction_descriptor(), value);
}
inline bool EQuestAction_Parse(
    const ::std::string& name, EQuestAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EQuestAction>(
    EQuestAction_descriptor(), name, value);
}
enum EOtherData {
  EOTHERDATA_MIN = 0,
  EOTHERDATA_DAILY = 1,
  EOTHERDATA_CAT = 2,
  EOTHERDATA_MAX = 3
};
bool EOtherData_IsValid(int value);
const EOtherData EOtherData_MIN = EOTHERDATA_MIN;
const EOtherData EOtherData_MAX = EOTHERDATA_MAX;
const int EOtherData_ARRAYSIZE = EOtherData_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOtherData_descriptor();
inline const ::std::string& EOtherData_Name(EOtherData value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOtherData_descriptor(), value);
}
inline bool EOtherData_Parse(
    const ::std::string& name, EOtherData* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOtherData>(
    EOtherData_descriptor(), name, value);
}
enum EJoyActivityType {
  JOY_ACTIVITY_MIN = 0,
  JOY_ACTIVITY_GUESS = 1,
  JOY_ACTIVITY_MISCHIEF = 2,
  JOY_ACTIVITY_QUESTION = 3,
  JOY_ACTIVITY_FOOD = 4,
  JOY_ACTIVITY_YOYO = 5,
  JOY_ACTIVITY_ATF = 6,
  JOY_ACTIVITY_AUGURY = 7,
  JOY_ACTIVITY_MAX = 8
};
bool EJoyActivityType_IsValid(int value);
const EJoyActivityType EJoyActivityType_MIN = JOY_ACTIVITY_MIN;
const EJoyActivityType EJoyActivityType_MAX = JOY_ACTIVITY_MAX;
const int EJoyActivityType_ARRAYSIZE = EJoyActivityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EJoyActivityType_descriptor();
inline const ::std::string& EJoyActivityType_Name(EJoyActivityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EJoyActivityType_descriptor(), value);
}
inline bool EJoyActivityType_Parse(
    const ::std::string& name, EJoyActivityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EJoyActivityType>(
    EJoyActivityType_descriptor(), name, value);
}
// ===================================================================

class QuestPConfig : public ::google::protobuf::Message {
 public:
  QuestPConfig();
  virtual ~QuestPConfig();

  QuestPConfig(const QuestPConfig& from);

  inline QuestPConfig& operator=(const QuestPConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestPConfig& default_instance();

  void Swap(QuestPConfig* other);

  // implements Message ----------------------------------------------

  QuestPConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestPConfig& from);
  void MergeFrom(const QuestPConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 RewardGroup = 1 [default = 0];
  inline bool has_rewardgroup() const;
  inline void clear_rewardgroup();
  static const int kRewardGroupFieldNumber = 1;
  inline ::google::protobuf::uint32 rewardgroup() const;
  inline void set_rewardgroup(::google::protobuf::uint32 value);

  // optional uint32 SubGroup = 2 [default = 0];
  inline bool has_subgroup() const;
  inline void clear_subgroup();
  static const int kSubGroupFieldNumber = 2;
  inline ::google::protobuf::uint32 subgroup() const;
  inline void set_subgroup(::google::protobuf::uint32 value);

  // optional uint32 FinishJump = 3 [default = 0];
  inline bool has_finishjump() const;
  inline void clear_finishjump();
  static const int kFinishJumpFieldNumber = 3;
  inline ::google::protobuf::uint32 finishjump() const;
  inline void set_finishjump(::google::protobuf::uint32 value);

  // optional uint32 FailJump = 4 [default = 0];
  inline bool has_failjump() const;
  inline void clear_failjump();
  static const int kFailJumpFieldNumber = 4;
  inline ::google::protobuf::uint32 failjump() const;
  inline void set_failjump(::google::protobuf::uint32 value);

  // optional uint32 Map = 5 [default = 0];
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 5;
  inline ::google::protobuf::uint32 map() const;
  inline void set_map(::google::protobuf::uint32 value);

  // optional uint32 WhetherTrace = 6 [default = 0];
  inline bool has_whethertrace() const;
  inline void clear_whethertrace();
  static const int kWhetherTraceFieldNumber = 6;
  inline ::google::protobuf::uint32 whethertrace() const;
  inline void set_whethertrace(::google::protobuf::uint32 value);

  // optional uint32 Auto = 7 [default = 0];
  inline bool has_auto_() const;
  inline void clear_auto_();
  static const int kAutoFieldNumber = 7;
  inline ::google::protobuf::uint32 auto_() const;
  inline void set_auto_(::google::protobuf::uint32 value);

  // optional uint32 FirstClass = 8 [default = 0];
  inline bool has_firstclass() const;
  inline void clear_firstclass();
  static const int kFirstClassFieldNumber = 8;
  inline ::google::protobuf::uint32 firstclass() const;
  inline void set_firstclass(::google::protobuf::uint32 value);

  // optional uint32 Class = 9 [default = 0];
  inline bool has_class_() const;
  inline void clear_class_();
  static const int kClassFieldNumber = 9;
  inline ::google::protobuf::uint32 class_() const;
  inline void set_class_(::google::protobuf::uint32 value);

  // optional uint32 Level = 10 [default = 0];
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional string QuestName = 11;
  inline bool has_questname() const;
  inline void clear_questname();
  static const int kQuestNameFieldNumber = 11;
  inline const ::std::string& questname() const;
  inline void set_questname(const ::std::string& value);
  inline void set_questname(const char* value);
  inline void set_questname(const char* value, size_t size);
  inline ::std::string* mutable_questname();
  inline ::std::string* release_questname();
  inline void set_allocated_questname(::std::string* questname);

  // optional string Name = 12;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 12;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string Type = 13;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 13;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  inline void set_allocated_type(::std::string* type);

  // optional string Content = 14;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 14;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string TraceInfo = 15;
  inline bool has_traceinfo() const;
  inline void clear_traceinfo();
  static const int kTraceInfoFieldNumber = 15;
  inline const ::std::string& traceinfo() const;
  inline void set_traceinfo(const ::std::string& value);
  inline void set_traceinfo(const char* value);
  inline void set_traceinfo(const char* value, size_t size);
  inline ::std::string* mutable_traceinfo();
  inline ::std::string* release_traceinfo();
  inline void set_allocated_traceinfo(::std::string* traceinfo);

  // optional string Prefixion = 20;
  inline bool has_prefixion() const;
  inline void clear_prefixion();
  static const int kPrefixionFieldNumber = 20;
  inline const ::std::string& prefixion() const;
  inline void set_prefixion(const ::std::string& value);
  inline void set_prefixion(const char* value);
  inline void set_prefixion(const char* value, size_t size);
  inline ::std::string* mutable_prefixion();
  inline ::std::string* release_prefixion();
  inline void set_allocated_prefixion(::std::string* prefixion);

  // optional .Cmd.ConfigParam params = 16;
  inline bool has_params() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 16;
  inline const ::Cmd::ConfigParam& params() const;
  inline ::Cmd::ConfigParam* mutable_params();
  inline ::Cmd::ConfigParam* release_params();
  inline void set_allocated_params(::Cmd::ConfigParam* params);

  // repeated uint32 allrewardid = 17;
  inline int allrewardid_size() const;
  inline void clear_allrewardid();
  static const int kAllrewardidFieldNumber = 17;
  inline ::google::protobuf::uint32 allrewardid(int index) const;
  inline void set_allrewardid(int index, ::google::protobuf::uint32 value);
  inline void add_allrewardid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      allrewardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_allrewardid();

  // repeated uint32 PreQuest = 18;
  inline int prequest_size() const;
  inline void clear_prequest();
  static const int kPreQuestFieldNumber = 18;
  inline ::google::protobuf::uint32 prequest(int index) const;
  inline void set_prequest(int index, ::google::protobuf::uint32 value);
  inline void add_prequest(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      prequest() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_prequest();

  // repeated uint32 MustPreQuest = 19;
  inline int mustprequest_size() const;
  inline void clear_mustprequest();
  static const int kMustPreQuestFieldNumber = 19;
  inline ::google::protobuf::uint32 mustprequest(int index) const;
  inline void set_mustprequest(int index, ::google::protobuf::uint32 value);
  inline void add_mustprequest(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      mustprequest() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_mustprequest();

  // @@protoc_insertion_point(class_scope:Cmd.QuestPConfig)
 private:
  inline void set_has_rewardgroup();
  inline void clear_has_rewardgroup();
  inline void set_has_subgroup();
  inline void clear_has_subgroup();
  inline void set_has_finishjump();
  inline void clear_has_finishjump();
  inline void set_has_failjump();
  inline void clear_has_failjump();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_whethertrace();
  inline void clear_has_whethertrace();
  inline void set_has_auto_();
  inline void clear_has_auto_();
  inline void set_has_firstclass();
  inline void clear_has_firstclass();
  inline void set_has_class_();
  inline void clear_has_class_();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_questname();
  inline void clear_has_questname();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_traceinfo();
  inline void clear_has_traceinfo();
  inline void set_has_prefixion();
  inline void clear_has_prefixion();
  inline void set_has_params();
  inline void clear_has_params();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 rewardgroup_;
  ::google::protobuf::uint32 subgroup_;
  ::google::protobuf::uint32 finishjump_;
  ::google::protobuf::uint32 failjump_;
  ::google::protobuf::uint32 map_;
  ::google::protobuf::uint32 whethertrace_;
  ::google::protobuf::uint32 auto__;
  ::google::protobuf::uint32 firstclass_;
  ::google::protobuf::uint32 class__;
  ::google::protobuf::uint32 level_;
  ::std::string* questname_;
  ::std::string* name_;
  ::std::string* type_;
  ::std::string* content_;
  ::std::string* traceinfo_;
  ::std::string* prefixion_;
  ::Cmd::ConfigParam* params_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > allrewardid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > prequest_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > mustprequest_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestPConfig* default_instance_;
};
// -------------------------------------------------------------------

class QuestStep : public ::google::protobuf::Message {
 public:
  QuestStep();
  virtual ~QuestStep();

  QuestStep(const QuestStep& from);

  inline QuestStep& operator=(const QuestStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestStep& default_instance();

  void Swap(QuestStep* other);

  // implements Message ----------------------------------------------

  QuestStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestStep& from);
  void MergeFrom(const QuestStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 process = 1 [default = 0];
  inline bool has_process() const;
  inline void clear_process();
  static const int kProcessFieldNumber = 1;
  inline ::google::protobuf::uint32 process() const;
  inline void set_process(::google::protobuf::uint32 value);

  // repeated uint64 params = 2;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 2;
  inline ::google::protobuf::uint64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint64 value);
  inline void add_params(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_params();

  // repeated string names = 3;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 3;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // optional .Cmd.QuestPConfig config = 4;
  inline bool has_config() const;
  inline void clear_config();
  static const int kConfigFieldNumber = 4;
  inline const ::Cmd::QuestPConfig& config() const;
  inline ::Cmd::QuestPConfig* mutable_config();
  inline ::Cmd::QuestPConfig* release_config();
  inline void set_allocated_config(::Cmd::QuestPConfig* config);

  // @@protoc_insertion_point(class_scope:Cmd.QuestStep)
 private:
  inline void set_has_process();
  inline void clear_has_process();
  inline void set_has_config();
  inline void clear_has_config();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::Cmd::QuestPConfig* config_;
  ::google::protobuf::uint32 process_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestStep* default_instance_;
};
// -------------------------------------------------------------------

class QuestData : public ::google::protobuf::Message {
 public:
  QuestData();
  virtual ~QuestData();

  QuestData(const QuestData& from);

  inline QuestData& operator=(const QuestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestData& default_instance();

  void Swap(QuestData* other);

  // implements Message ----------------------------------------------

  QuestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestData& from);
  void MergeFrom(const QuestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 step = 2 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // optional uint32 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool complete = 4 [default = false];
  inline bool has_complete() const;
  inline void clear_complete();
  static const int kCompleteFieldNumber = 4;
  inline bool complete() const;
  inline void set_complete(bool value);

  // optional bool trace = 12 [default = true];
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 12;
  inline bool trace() const;
  inline void set_trace(bool value);

  // repeated .Cmd.QuestStep steps = 5;
  inline int steps_size() const;
  inline void clear_steps();
  static const int kStepsFieldNumber = 5;
  inline const ::Cmd::QuestStep& steps(int index) const;
  inline ::Cmd::QuestStep* mutable_steps(int index);
  inline ::Cmd::QuestStep* add_steps();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestStep >&
      steps() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestStep >*
      mutable_steps();

  // repeated .Cmd.ItemInfo rewards = 6;
  inline int rewards_size() const;
  inline void clear_rewards();
  static const int kRewardsFieldNumber = 6;
  inline const ::Cmd::ItemInfo& rewards(int index) const;
  inline ::Cmd::ItemInfo* mutable_rewards(int index);
  inline ::Cmd::ItemInfo* add_rewards();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      rewards() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_rewards();

  // optional uint32 version = 7 [default = 0];
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 7;
  inline ::google::protobuf::uint32 version() const;
  inline void set_version(::google::protobuf::uint32 value);

  // optional uint32 acceptlv = 8 [default = 0];
  inline bool has_acceptlv() const;
  inline void clear_acceptlv();
  static const int kAcceptlvFieldNumber = 8;
  inline ::google::protobuf::uint32 acceptlv() const;
  inline void set_acceptlv(::google::protobuf::uint32 value);

  // optional uint32 finishcount = 9 [default = 0];
  inline bool has_finishcount() const;
  inline void clear_finishcount();
  static const int kFinishcountFieldNumber = 9;
  inline ::google::protobuf::uint32 finishcount() const;
  inline void set_finishcount(::google::protobuf::uint32 value);

  // repeated uint64 params = 10;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 10;
  inline ::google::protobuf::uint64 params(int index) const;
  inline void set_params(int index, ::google::protobuf::uint64 value);
  inline void add_params(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      params() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_params();

  // repeated string names = 11;
  inline int names_size() const;
  inline void clear_names();
  static const int kNamesFieldNumber = 11;
  inline const ::std::string& names(int index) const;
  inline ::std::string* mutable_names(int index);
  inline void set_names(int index, const ::std::string& value);
  inline void set_names(int index, const char* value);
  inline void set_names(int index, const char* value, size_t size);
  inline ::std::string* add_names();
  inline void add_names(const ::std::string& value);
  inline void add_names(const char* value);
  inline void add_names(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_names();

  // @@protoc_insertion_point(class_scope:Cmd.QuestData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_complete();
  inline void clear_has_complete();
  inline void set_has_trace();
  inline void clear_has_trace();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_acceptlv();
  inline void clear_has_acceptlv();
  inline void set_has_finishcount();
  inline void clear_has_finishcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::uint32 time_;
  bool complete_;
  bool trace_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestStep > steps_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > rewards_;
  ::google::protobuf::uint32 version_;
  ::google::protobuf::uint32 acceptlv_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > params_;
  ::google::protobuf::RepeatedPtrField< ::std::string> names_;
  ::google::protobuf::uint32 finishcount_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestData* default_instance_;
};
// -------------------------------------------------------------------

class QuestManualItem : public ::google::protobuf::Message {
 public:
  QuestManualItem();
  virtual ~QuestManualItem();

  QuestManualItem(const QuestManualItem& from);

  inline QuestManualItem& operator=(const QuestManualItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestManualItem& default_instance();

  void Swap(QuestManualItem* other);

  // implements Message ----------------------------------------------

  QuestManualItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestManualItem& from);
  void MergeFrom(const QuestManualItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EQuestList type() const;
  inline void set_type(::Cmd::EQuestList value);

  // optional .Cmd.QuestData data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Cmd::QuestData& data() const;
  inline ::Cmd::QuestData* mutable_data();
  inline ::Cmd::QuestData* release_data();
  inline void set_allocated_data(::Cmd::QuestData* data);

  // repeated .Cmd.QuestManualItem subs = 3;
  inline int subs_size() const;
  inline void clear_subs();
  static const int kSubsFieldNumber = 3;
  inline const ::Cmd::QuestManualItem& subs(int index) const;
  inline ::Cmd::QuestManualItem* mutable_subs(int index);
  inline ::Cmd::QuestManualItem* add_subs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
      subs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
      mutable_subs();

  // @@protoc_insertion_point(class_scope:Cmd.QuestManualItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::Cmd::QuestData* data_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem > subs_;
  int type_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestManualItem* default_instance_;
};
// -------------------------------------------------------------------

class QuestShop : public ::google::protobuf::Message {
 public:
  QuestShop();
  virtual ~QuestShop();

  QuestShop(const QuestShop& from);

  inline QuestShop& operator=(const QuestShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestShop& default_instance();

  void Swap(QuestShop* other);

  // implements Message ----------------------------------------------

  QuestShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestShop& from);
  void MergeFrom(const QuestShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // repeated .Cmd.QuestManualItem quests = 2;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 2;
  inline const ::Cmd::QuestManualItem& quests(int index) const;
  inline ::Cmd::QuestManualItem* mutable_quests(int index);
  inline ::Cmd::QuestManualItem* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
      mutable_quests();

  // @@protoc_insertion_point(class_scope:Cmd.QuestShop)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem > quests_;
  ::google::protobuf::uint32 itemid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestShop* default_instance_;
};
// -------------------------------------------------------------------

class QuestName : public ::google::protobuf::Message {
 public:
  QuestName();
  virtual ~QuestName();

  QuestName(const QuestName& from);

  inline QuestName& operator=(const QuestName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestName& default_instance();

  void Swap(QuestName* other);

  // implements Message ----------------------------------------------

  QuestName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestName& from);
  void MergeFrom(const QuestName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.QuestName)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestName* default_instance_;
};
// -------------------------------------------------------------------

class QuestPuzzle : public ::google::protobuf::Message {
 public:
  QuestPuzzle();
  virtual ~QuestPuzzle();

  QuestPuzzle(const QuestPuzzle& from);

  inline QuestPuzzle& operator=(const QuestPuzzle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestPuzzle& default_instance();

  void Swap(QuestPuzzle* other);

  // implements Message ----------------------------------------------

  QuestPuzzle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestPuzzle& from);
  void MergeFrom(const QuestPuzzle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // repeated uint32 open_puzzles = 2;
  inline int open_puzzles_size() const;
  inline void clear_open_puzzles();
  static const int kOpenPuzzlesFieldNumber = 2;
  inline ::google::protobuf::uint32 open_puzzles(int index) const;
  inline void set_open_puzzles(int index, ::google::protobuf::uint32 value);
  inline void add_open_puzzles(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      open_puzzles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_open_puzzles();

  // repeated uint32 unlock_puzzles = 3;
  inline int unlock_puzzles_size() const;
  inline void clear_unlock_puzzles();
  static const int kUnlockPuzzlesFieldNumber = 3;
  inline ::google::protobuf::uint32 unlock_puzzles(int index) const;
  inline void set_unlock_puzzles(int index, ::google::protobuf::uint32 value);
  inline void add_unlock_puzzles(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      unlock_puzzles() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_unlock_puzzles();

  // @@protoc_insertion_point(class_scope:Cmd.QuestPuzzle)
 private:
  inline void set_has_version();
  inline void clear_has_version();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > open_puzzles_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > unlock_puzzles_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestPuzzle* default_instance_;
};
// -------------------------------------------------------------------

class QuestPreview : public ::google::protobuf::Message {
 public:
  QuestPreview();
  virtual ~QuestPreview();

  QuestPreview(const QuestPreview& from);

  inline QuestPreview& operator=(const QuestPreview& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestPreview& default_instance();

  void Swap(QuestPreview* other);

  // implements Message ----------------------------------------------

  QuestPreview* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestPreview& from);
  void MergeFrom(const QuestPreview& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 questid = 1 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 1;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool complete = 3 [default = false];
  inline bool has_complete() const;
  inline void clear_complete();
  static const int kCompleteFieldNumber = 3;
  inline bool complete() const;
  inline void set_complete(bool value);

  // optional uint32 RewardGroup = 4 [default = 0];
  inline bool has_rewardgroup() const;
  inline void clear_rewardgroup();
  static const int kRewardGroupFieldNumber = 4;
  inline ::google::protobuf::uint32 rewardgroup() const;
  inline void set_rewardgroup(::google::protobuf::uint32 value);

  // repeated uint32 allrewardid = 5;
  inline int allrewardid_size() const;
  inline void clear_allrewardid();
  static const int kAllrewardidFieldNumber = 5;
  inline ::google::protobuf::uint32 allrewardid(int index) const;
  inline void set_allrewardid(int index, ::google::protobuf::uint32 value);
  inline void add_allrewardid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      allrewardid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_allrewardid();

  // @@protoc_insertion_point(class_scope:Cmd.QuestPreview)
 private:
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_complete();
  inline void clear_has_complete();
  inline void set_has_rewardgroup();
  inline void clear_has_rewardgroup();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 questid_;
  bool complete_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > allrewardid_;
  ::google::protobuf::uint32 rewardgroup_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestPreview* default_instance_;
};
// -------------------------------------------------------------------

class QuestManualMain : public ::google::protobuf::Message {
 public:
  QuestManualMain();
  virtual ~QuestManualMain();

  QuestManualMain(const QuestManualMain& from);

  inline QuestManualMain& operator=(const QuestManualMain& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestManualMain& default_instance();

  void Swap(QuestManualMain* other);

  // implements Message ----------------------------------------------

  QuestManualMain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestManualMain& from);
  void MergeFrom(const QuestManualMain& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestManualItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Cmd::QuestManualItem& items(int index) const;
  inline ::Cmd::QuestManualItem* mutable_items(int index);
  inline ::Cmd::QuestManualItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
      mutable_items();

  // optional .Cmd.QuestPuzzle puzzle = 2;
  inline bool has_puzzle() const;
  inline void clear_puzzle();
  static const int kPuzzleFieldNumber = 2;
  inline const ::Cmd::QuestPuzzle& puzzle() const;
  inline ::Cmd::QuestPuzzle* mutable_puzzle();
  inline ::Cmd::QuestPuzzle* release_puzzle();
  inline void set_allocated_puzzle(::Cmd::QuestPuzzle* puzzle);

  // optional uint32 mainstoryid = 3 [default = 0];
  inline bool has_mainstoryid() const;
  inline void clear_mainstoryid();
  static const int kMainstoryidFieldNumber = 3;
  inline ::google::protobuf::uint32 mainstoryid() const;
  inline void set_mainstoryid(::google::protobuf::uint32 value);

  // repeated .Cmd.QuestPreview previews = 4;
  inline int previews_size() const;
  inline void clear_previews();
  static const int kPreviewsFieldNumber = 4;
  inline const ::Cmd::QuestPreview& previews(int index) const;
  inline ::Cmd::QuestPreview* mutable_previews(int index);
  inline ::Cmd::QuestPreview* add_previews();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >&
      previews() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >*
      mutable_previews();

  // @@protoc_insertion_point(class_scope:Cmd.QuestManualMain)
 private:
  inline void set_has_puzzle();
  inline void clear_has_puzzle();
  inline void set_has_mainstoryid();
  inline void clear_has_mainstoryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem > items_;
  ::Cmd::QuestPuzzle* puzzle_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview > previews_;
  ::google::protobuf::uint32 mainstoryid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestManualMain* default_instance_;
};
// -------------------------------------------------------------------

class QuestManualBranch : public ::google::protobuf::Message {
 public:
  QuestManualBranch();
  virtual ~QuestManualBranch();

  QuestManualBranch(const QuestManualBranch& from);

  inline QuestManualBranch& operator=(const QuestManualBranch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestManualBranch& default_instance();

  void Swap(QuestManualBranch* other);

  // implements Message ----------------------------------------------

  QuestManualBranch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestManualBranch& from);
  void MergeFrom(const QuestManualBranch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestShop shops = 1;
  inline int shops_size() const;
  inline void clear_shops();
  static const int kShopsFieldNumber = 1;
  inline const ::Cmd::QuestShop& shops(int index) const;
  inline ::Cmd::QuestShop* mutable_shops(int index);
  inline ::Cmd::QuestShop* add_shops();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestShop >&
      shops() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestShop >*
      mutable_shops();

  // @@protoc_insertion_point(class_scope:Cmd.QuestManualBranch)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestShop > shops_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestManualBranch* default_instance_;
};
// -------------------------------------------------------------------

class QuestManualStory : public ::google::protobuf::Message {
 public:
  QuestManualStory();
  virtual ~QuestManualStory();

  QuestManualStory(const QuestManualStory& from);

  inline QuestManualStory& operator=(const QuestManualStory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestManualStory& default_instance();

  void Swap(QuestManualStory* other);

  // implements Message ----------------------------------------------

  QuestManualStory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestManualStory& from);
  void MergeFrom(const QuestManualStory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestPreview previews = 1;
  inline int previews_size() const;
  inline void clear_previews();
  static const int kPreviewsFieldNumber = 1;
  inline const ::Cmd::QuestPreview& previews(int index) const;
  inline ::Cmd::QuestPreview* mutable_previews(int index);
  inline ::Cmd::QuestPreview* add_previews();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >&
      previews() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >*
      mutable_previews();

  // @@protoc_insertion_point(class_scope:Cmd.QuestManualStory)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview > previews_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestManualStory* default_instance_;
};
// -------------------------------------------------------------------

class QuestManual : public ::google::protobuf::Message {
 public:
  QuestManual();
  virtual ~QuestManual();

  QuestManual(const QuestManual& from);

  inline QuestManual& operator=(const QuestManual& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestManual& default_instance();

  void Swap(QuestManual* other);

  // implements Message ----------------------------------------------

  QuestManual* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestManual& from);
  void MergeFrom(const QuestManual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional .Cmd.QuestManualMain main = 2;
  inline bool has_main() const;
  inline void clear_main();
  static const int kMainFieldNumber = 2;
  inline const ::Cmd::QuestManualMain& main() const;
  inline ::Cmd::QuestManualMain* mutable_main();
  inline ::Cmd::QuestManualMain* release_main();
  inline void set_allocated_main(::Cmd::QuestManualMain* main);

  // optional .Cmd.QuestManualBranch branch = 3;
  inline bool has_branch() const;
  inline void clear_branch();
  static const int kBranchFieldNumber = 3;
  inline const ::Cmd::QuestManualBranch& branch() const;
  inline ::Cmd::QuestManualBranch* mutable_branch();
  inline ::Cmd::QuestManualBranch* release_branch();
  inline void set_allocated_branch(::Cmd::QuestManualBranch* branch);

  // optional .Cmd.QuestManualStory story = 4;
  inline bool has_story() const;
  inline void clear_story();
  static const int kStoryFieldNumber = 4;
  inline const ::Cmd::QuestManualStory& story() const;
  inline ::Cmd::QuestManualStory* mutable_story();
  inline ::Cmd::QuestManualStory* release_story();
  inline void set_allocated_story(::Cmd::QuestManualStory* story);

  // repeated .Cmd.QuestName prequest = 5;
  inline int prequest_size() const;
  inline void clear_prequest();
  static const int kPrequestFieldNumber = 5;
  inline const ::Cmd::QuestName& prequest(int index) const;
  inline ::Cmd::QuestName* mutable_prequest(int index);
  inline ::Cmd::QuestName* add_prequest();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestName >&
      prequest() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestName >*
      mutable_prequest();

  // @@protoc_insertion_point(class_scope:Cmd.QuestManual)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_main();
  inline void clear_has_main();
  inline void set_has_branch();
  inline void clear_has_branch();
  inline void set_has_story();
  inline void clear_has_story();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::Cmd::QuestManualMain* main_;
  ::Cmd::QuestManualBranch* branch_;
  ::Cmd::QuestManualStory* story_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestName > prequest_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestManual* default_instance_;
};
// -------------------------------------------------------------------

class QuestList : public ::google::protobuf::Message {
 public:
  QuestList();
  virtual ~QuestList();

  QuestList(const QuestList& from);

  inline QuestList& operator=(const QuestList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestList& default_instance();

  void Swap(QuestList* other);

  // implements Message ----------------------------------------------

  QuestList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestList& from);
  void MergeFrom(const QuestList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EQuestList type() const;
  inline void set_type(::Cmd::EQuestList value);

  // optional uint32 id = 4 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated .Cmd.QuestData list = 5;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 5;
  inline const ::Cmd::QuestData& list(int index) const;
  inline ::Cmd::QuestData* mutable_list(int index);
  inline ::Cmd::QuestData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
      mutable_list();

  // optional bool clear = 6 [default = false];
  inline bool has_clear() const;
  inline void clear_clear();
  static const int kClearFieldNumber = 6;
  inline bool clear() const;
  inline void set_clear(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_clear();
  inline void clear_has_clear();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData > list_;
  bool clear_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestList* default_instance_;
};
// -------------------------------------------------------------------

class QuestUpdateItem : public ::google::protobuf::Message {
 public:
  QuestUpdateItem();
  virtual ~QuestUpdateItem();

  QuestUpdateItem(const QuestUpdateItem& from);

  inline QuestUpdateItem& operator=(const QuestUpdateItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestUpdateItem& default_instance();

  void Swap(QuestUpdateItem* other);

  // implements Message ----------------------------------------------

  QuestUpdateItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestUpdateItem& from);
  void MergeFrom(const QuestUpdateItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.QuestData update = 1;
  inline int update_size() const;
  inline void clear_update();
  static const int kUpdateFieldNumber = 1;
  inline const ::Cmd::QuestData& update(int index) const;
  inline ::Cmd::QuestData* mutable_update(int index);
  inline ::Cmd::QuestData* add_update();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
      update() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
      mutable_update();

  // repeated uint32 del = 2;
  inline int del_size() const;
  inline void clear_del();
  static const int kDelFieldNumber = 2;
  inline ::google::protobuf::uint32 del(int index) const;
  inline void set_del(int index, ::google::protobuf::uint32 value);
  inline void add_del(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del();

  // optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EQuestList type() const;
  inline void set_type(::Cmd::EQuestList value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestUpdateItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData > update_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_;
  int type_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestUpdateItem* default_instance_;
};
// -------------------------------------------------------------------

class QuestUpdate : public ::google::protobuf::Message {
 public:
  QuestUpdate();
  virtual ~QuestUpdate();

  QuestUpdate(const QuestUpdate& from);

  inline QuestUpdate& operator=(const QuestUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestUpdate& default_instance();

  void Swap(QuestUpdate* other);

  // implements Message ----------------------------------------------

  QuestUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestUpdate& from);
  void MergeFrom(const QuestUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // repeated .Cmd.QuestUpdateItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::QuestUpdateItem& items(int index) const;
  inline ::Cmd::QuestUpdateItem* mutable_items(int index);
  inline ::Cmd::QuestUpdateItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestUpdateItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestUpdateItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.QuestUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestUpdateItem > items_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestUpdate* default_instance_;
};
// -------------------------------------------------------------------

class QuestStepUpdate : public ::google::protobuf::Message {
 public:
  QuestStepUpdate();
  virtual ~QuestStepUpdate();

  QuestStepUpdate(const QuestStepUpdate& from);

  inline QuestStepUpdate& operator=(const QuestStepUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestStepUpdate& default_instance();

  void Swap(QuestStepUpdate* other);

  // implements Message ----------------------------------------------

  QuestStepUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestStepUpdate& from);
  void MergeFrom(const QuestStepUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 step = 4 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // optional .Cmd.QuestStep data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::Cmd::QuestStep& data() const;
  inline ::Cmd::QuestStep* mutable_data();
  inline ::Cmd::QuestStep* release_data();
  inline void set_allocated_data(::Cmd::QuestStep* data);

  // @@protoc_insertion_point(class_scope:Cmd.QuestStepUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 step_;
  ::Cmd::QuestStep* data_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestStepUpdate* default_instance_;
};
// -------------------------------------------------------------------

class QuestAction : public ::google::protobuf::Message {
 public:
  QuestAction();
  virtual ~QuestAction();

  QuestAction(const QuestAction& from);

  inline QuestAction& operator=(const QuestAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestAction& default_instance();

  void Swap(QuestAction* other);

  // implements Message ----------------------------------------------

  QuestAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestAction& from);
  void MergeFrom(const QuestAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::Cmd::EQuestAction action() const;
  inline void set_action(::Cmd::EQuestAction value);

  // optional uint32 questid = 4 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 4;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestAction)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int action_;
  ::google::protobuf::uint32 questid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestAction* default_instance_;
};
// -------------------------------------------------------------------

class RunQuestStep : public ::google::protobuf::Message {
 public:
  RunQuestStep();
  virtual ~RunQuestStep();

  RunQuestStep(const RunQuestStep& from);

  inline RunQuestStep& operator=(const RunQuestStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunQuestStep& default_instance();

  void Swap(RunQuestStep* other);

  // implements Message ----------------------------------------------

  RunQuestStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RunQuestStep& from);
  void MergeFrom(const RunQuestStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 questid = 3 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 starid = 4 [default = 0];
  inline bool has_starid() const;
  inline void clear_starid();
  static const int kStaridFieldNumber = 4;
  inline ::google::protobuf::uint32 starid() const;
  inline void set_starid(::google::protobuf::uint32 value);

  // optional uint32 subgroup = 5 [default = 0];
  inline bool has_subgroup() const;
  inline void clear_subgroup();
  static const int kSubgroupFieldNumber = 5;
  inline ::google::protobuf::uint32 subgroup() const;
  inline void set_subgroup(::google::protobuf::uint32 value);

  // optional uint32 step = 6 [default = 0];
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 6;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RunQuestStep)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_starid();
  inline void clear_has_starid();
  inline void set_has_subgroup();
  inline void clear_has_subgroup();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 starid_;
  ::google::protobuf::uint32 subgroup_;
  ::google::protobuf::uint32 step_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static RunQuestStep* default_instance_;
};
// -------------------------------------------------------------------

class QuestTrace : public ::google::protobuf::Message {
 public:
  QuestTrace();
  virtual ~QuestTrace();

  QuestTrace(const QuestTrace& from);

  inline QuestTrace& operator=(const QuestTrace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestTrace& default_instance();

  void Swap(QuestTrace* other);

  // implements Message ----------------------------------------------

  QuestTrace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestTrace& from);
  void MergeFrom(const QuestTrace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 questid = 3 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional bool trace = 4 [default = false];
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 4;
  inline bool trace() const;
  inline void set_trace(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestTrace)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_trace();
  inline void clear_has_trace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 questid_;
  bool trace_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestTrace* default_instance_;
};
// -------------------------------------------------------------------

class QuestDetail : public ::google::protobuf::Message {
 public:
  QuestDetail();
  virtual ~QuestDetail();

  QuestDetail(const QuestDetail& from);

  inline QuestDetail& operator=(const QuestDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestDetail& default_instance();

  void Swap(QuestDetail* other);

  // implements Message ----------------------------------------------

  QuestDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestDetail& from);
  void MergeFrom(const QuestDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 time = 2 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 map = 3 [default = 0];
  inline bool has_map() const;
  inline void clear_map();
  static const int kMapFieldNumber = 3;
  inline ::google::protobuf::uint32 map() const;
  inline void set_map(::google::protobuf::uint32 value);

  // optional bool complete = 4 [default = false];
  inline bool has_complete() const;
  inline void clear_complete();
  static const int kCompleteFieldNumber = 4;
  inline bool complete() const;
  inline void set_complete(bool value);

  // optional bool trace = 5 [default = true];
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 5;
  inline bool trace() const;
  inline void set_trace(bool value);

  // repeated uint32 details = 6;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 6;
  inline ::google::protobuf::uint32 details(int index) const;
  inline void set_details(int index, ::google::protobuf::uint32 value);
  inline void add_details(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      details() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:Cmd.QuestDetail)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_map();
  inline void clear_has_map();
  inline void set_has_complete();
  inline void clear_has_complete();
  inline void set_has_trace();
  inline void clear_has_trace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 map_;
  bool complete_;
  bool trace_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > details_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestDetail* default_instance_;
};
// -------------------------------------------------------------------

class QuestDetailList : public ::google::protobuf::Message {
 public:
  QuestDetailList();
  virtual ~QuestDetailList();

  QuestDetailList(const QuestDetailList& from);

  inline QuestDetailList& operator=(const QuestDetailList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestDetailList& default_instance();

  void Swap(QuestDetailList* other);

  // implements Message ----------------------------------------------

  QuestDetailList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestDetailList& from);
  void MergeFrom(const QuestDetailList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // repeated .Cmd.QuestDetail details = 3;
  inline int details_size() const;
  inline void clear_details();
  static const int kDetailsFieldNumber = 3;
  inline const ::Cmd::QuestDetail& details(int index) const;
  inline ::Cmd::QuestDetail* mutable_details(int index);
  inline ::Cmd::QuestDetail* add_details();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
      details() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
      mutable_details();

  // @@protoc_insertion_point(class_scope:Cmd.QuestDetailList)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail > details_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestDetailList* default_instance_;
};
// -------------------------------------------------------------------

class QuestDetailUpdate : public ::google::protobuf::Message {
 public:
  QuestDetailUpdate();
  virtual ~QuestDetailUpdate();

  QuestDetailUpdate(const QuestDetailUpdate& from);

  inline QuestDetailUpdate& operator=(const QuestDetailUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestDetailUpdate& default_instance();

  void Swap(QuestDetailUpdate* other);

  // implements Message ----------------------------------------------

  QuestDetailUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestDetailUpdate& from);
  void MergeFrom(const QuestDetailUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // repeated .Cmd.QuestDetail detail = 3;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 3;
  inline const ::Cmd::QuestDetail& detail(int index) const;
  inline ::Cmd::QuestDetail* mutable_detail(int index);
  inline ::Cmd::QuestDetail* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
      mutable_detail();

  // repeated .Cmd.QuestDetail del = 4;
  inline int del_size() const;
  inline void clear_del();
  static const int kDelFieldNumber = 4;
  inline const ::Cmd::QuestDetail& del(int index) const;
  inline ::Cmd::QuestDetail* mutable_del(int index);
  inline ::Cmd::QuestDetail* add_del();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
      del() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
      mutable_del();

  // @@protoc_insertion_point(class_scope:Cmd.QuestDetailUpdate)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail > detail_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail > del_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestDetailUpdate* default_instance_;
};
// -------------------------------------------------------------------

class QuestRaidCmd : public ::google::protobuf::Message {
 public:
  QuestRaidCmd();
  virtual ~QuestRaidCmd();

  QuestRaidCmd(const QuestRaidCmd& from);

  inline QuestRaidCmd& operator=(const QuestRaidCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestRaidCmd& default_instance();

  void Swap(QuestRaidCmd* other);

  // implements Message ----------------------------------------------

  QuestRaidCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestRaidCmd& from);
  void MergeFrom(const QuestRaidCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 questid = 3;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestRaidCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 questid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestRaidCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuestCanAcceptListChange : public ::google::protobuf::Message {
 public:
  QuestCanAcceptListChange();
  virtual ~QuestCanAcceptListChange();

  QuestCanAcceptListChange(const QuestCanAcceptListChange& from);

  inline QuestCanAcceptListChange& operator=(const QuestCanAcceptListChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestCanAcceptListChange& default_instance();

  void Swap(QuestCanAcceptListChange* other);

  // implements Message ----------------------------------------------

  QuestCanAcceptListChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestCanAcceptListChange& from);
  void MergeFrom(const QuestCanAcceptListChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestCanAcceptListChange)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestCanAcceptListChange* default_instance_;
};
// -------------------------------------------------------------------

class VisitNpcUserCmd : public ::google::protobuf::Message {
 public:
  VisitNpcUserCmd();
  virtual ~VisitNpcUserCmd();

  VisitNpcUserCmd(const VisitNpcUserCmd& from);

  inline VisitNpcUserCmd& operator=(const VisitNpcUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VisitNpcUserCmd& default_instance();

  void Swap(VisitNpcUserCmd* other);

  // implements Message ----------------------------------------------

  VisitNpcUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VisitNpcUserCmd& from);
  void MergeFrom(const VisitNpcUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint64 npctempid = 3 [default = 0];
  inline bool has_npctempid() const;
  inline void clear_npctempid();
  static const int kNpctempidFieldNumber = 3;
  inline ::google::protobuf::uint64 npctempid() const;
  inline void set_npctempid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.VisitNpcUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_npctempid();
  inline void clear_has_npctempid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npctempid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static VisitNpcUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class OtherData : public ::google::protobuf::Message {
 public:
  OtherData();
  virtual ~OtherData();

  OtherData(const OtherData& from);

  inline OtherData& operator=(const OtherData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OtherData& default_instance();

  void Swap(OtherData* other);

  // implements Message ----------------------------------------------

  OtherData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OtherData& from);
  void MergeFrom(const OtherData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::Cmd::EOtherData data() const;
  inline void set_data(::Cmd::EOtherData value);

  // optional uint32 param1 = 2 [default = 0];
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline ::google::protobuf::uint32 param1() const;
  inline void set_param1(::google::protobuf::uint32 value);

  // optional uint32 param2 = 3 [default = 0];
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::uint32 param2() const;
  inline void set_param2(::google::protobuf::uint32 value);

  // optional uint32 param3 = 4 [default = 0];
  inline bool has_param3() const;
  inline void clear_param3();
  static const int kParam3FieldNumber = 4;
  inline ::google::protobuf::uint32 param3() const;
  inline void set_param3(::google::protobuf::uint32 value);

  // optional uint32 param4 = 5 [default = 0];
  inline bool has_param4() const;
  inline void clear_param4();
  static const int kParam4FieldNumber = 5;
  inline ::google::protobuf::uint32 param4() const;
  inline void set_param4(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.OtherData)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();
  inline void set_has_param3();
  inline void clear_has_param3();
  inline void set_has_param4();
  inline void clear_has_param4();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int data_;
  ::google::protobuf::uint32 param1_;
  ::google::protobuf::uint32 param2_;
  ::google::protobuf::uint32 param3_;
  ::google::protobuf::uint32 param4_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static OtherData* default_instance_;
};
// -------------------------------------------------------------------

class QueryOtherData : public ::google::protobuf::Message {
 public:
  QueryOtherData();
  virtual ~QueryOtherData();

  QueryOtherData(const QueryOtherData& from);

  inline QueryOtherData& operator=(const QueryOtherData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryOtherData& default_instance();

  void Swap(QueryOtherData* other);

  // implements Message ----------------------------------------------

  QueryOtherData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryOtherData& from);
  void MergeFrom(const QueryOtherData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EOtherData type() const;
  inline void set_type(::Cmd::EOtherData value);

  // optional .Cmd.OtherData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::OtherData& data() const;
  inline ::Cmd::OtherData* mutable_data();
  inline ::Cmd::OtherData* release_data();
  inline void set_allocated_data(::Cmd::OtherData* data);

  // @@protoc_insertion_point(class_scope:Cmd.QueryOtherData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::OtherData* data_;
  int type_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QueryOtherData* default_instance_;
};
// -------------------------------------------------------------------

class QueryWantedInfoQuestCmd : public ::google::protobuf::Message {
 public:
  QueryWantedInfoQuestCmd();
  virtual ~QueryWantedInfoQuestCmd();

  QueryWantedInfoQuestCmd(const QueryWantedInfoQuestCmd& from);

  inline QueryWantedInfoQuestCmd& operator=(const QueryWantedInfoQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryWantedInfoQuestCmd& default_instance();

  void Swap(QueryWantedInfoQuestCmd* other);

  // implements Message ----------------------------------------------

  QueryWantedInfoQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryWantedInfoQuestCmd& from);
  void MergeFrom(const QueryWantedInfoQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 maxcount = 3 [default = 0];
  inline bool has_maxcount() const;
  inline void clear_maxcount();
  static const int kMaxcountFieldNumber = 3;
  inline ::google::protobuf::uint32 maxcount() const;
  inline void set_maxcount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryWantedInfoQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_maxcount();
  inline void clear_has_maxcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 maxcount_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QueryWantedInfoQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteHelpAcceptQuestCmd : public ::google::protobuf::Message {
 public:
  InviteHelpAcceptQuestCmd();
  virtual ~InviteHelpAcceptQuestCmd();

  InviteHelpAcceptQuestCmd(const InviteHelpAcceptQuestCmd& from);

  inline InviteHelpAcceptQuestCmd& operator=(const InviteHelpAcceptQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteHelpAcceptQuestCmd& default_instance();

  void Swap(InviteHelpAcceptQuestCmd* other);

  // implements Message ----------------------------------------------

  InviteHelpAcceptQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteHelpAcceptQuestCmd& from);
  void MergeFrom(const InviteHelpAcceptQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint64 leaderid = 3 [default = 0];
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 3;
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // optional uint32 questid = 4 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 4;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bytes sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string leadername = 7;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeadernameFieldNumber = 7;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional bool issubmit = 8 [default = false];
  inline bool has_issubmit() const;
  inline void clear_issubmit();
  static const int kIssubmitFieldNumber = 8;
  inline bool issubmit() const;
  inline void set_issubmit(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.InviteHelpAcceptQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_issubmit();
  inline void clear_has_issubmit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 leaderid_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 time_;
  ::std::string* sign_;
  ::std::string* leadername_;
  bool issubmit_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static InviteHelpAcceptQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteAcceptQuestCmd : public ::google::protobuf::Message {
 public:
  InviteAcceptQuestCmd();
  virtual ~InviteAcceptQuestCmd();

  InviteAcceptQuestCmd(const InviteAcceptQuestCmd& from);

  inline InviteAcceptQuestCmd& operator=(const InviteAcceptQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteAcceptQuestCmd& default_instance();

  void Swap(InviteAcceptQuestCmd* other);

  // implements Message ----------------------------------------------

  InviteAcceptQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteAcceptQuestCmd& from);
  void MergeFrom(const InviteAcceptQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint64 leaderid = 3 [default = 0];
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 3;
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // optional uint32 questid = 4 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 4;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bytes sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional string leadername = 7;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeadernameFieldNumber = 7;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // optional bool issubmit = 8 [default = false];
  inline bool has_issubmit() const;
  inline void clear_issubmit();
  static const int kIssubmitFieldNumber = 8;
  inline bool issubmit() const;
  inline void set_issubmit(bool value);

  // optional bool isquickfinish = 9 [default = false];
  inline bool has_isquickfinish() const;
  inline void clear_isquickfinish();
  static const int kIsquickfinishFieldNumber = 9;
  inline bool isquickfinish() const;
  inline void set_isquickfinish(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.InviteAcceptQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_leadername();
  inline void clear_has_leadername();
  inline void set_has_issubmit();
  inline void clear_has_issubmit();
  inline void set_has_isquickfinish();
  inline void clear_has_isquickfinish();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 leaderid_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 time_;
  ::std::string* sign_;
  ::std::string* leadername_;
  bool issubmit_;
  bool isquickfinish_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static InviteAcceptQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReplyHelpAccelpQuestCmd : public ::google::protobuf::Message {
 public:
  ReplyHelpAccelpQuestCmd();
  virtual ~ReplyHelpAccelpQuestCmd();

  ReplyHelpAccelpQuestCmd(const ReplyHelpAccelpQuestCmd& from);

  inline ReplyHelpAccelpQuestCmd& operator=(const ReplyHelpAccelpQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyHelpAccelpQuestCmd& default_instance();

  void Swap(ReplyHelpAccelpQuestCmd* other);

  // implements Message ----------------------------------------------

  ReplyHelpAccelpQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyHelpAccelpQuestCmd& from);
  void MergeFrom(const ReplyHelpAccelpQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint64 leaderid = 3 [default = 0];
  inline bool has_leaderid() const;
  inline void clear_leaderid();
  static const int kLeaderidFieldNumber = 3;
  inline ::google::protobuf::uint64 leaderid() const;
  inline void set_leaderid(::google::protobuf::uint64 value);

  // optional uint32 questid = 4 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 4;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional uint32 time = 5 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bytes sign = 6;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 6;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const void* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional bool agree = 7 [default = false];
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 7;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional bool issubmit = 8 [default = false];
  inline bool has_issubmit() const;
  inline void clear_issubmit();
  static const int kIssubmitFieldNumber = 8;
  inline bool issubmit() const;
  inline void set_issubmit(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ReplyHelpAccelpQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_leaderid();
  inline void clear_has_leaderid();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_issubmit();
  inline void clear_has_issubmit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 leaderid_;
  ::google::protobuf::uint32 questid_;
  ::google::protobuf::uint32 time_;
  ::std::string* sign_;
  bool agree_;
  bool issubmit_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static ReplyHelpAccelpQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class WorldQuest : public ::google::protobuf::Message {
 public:
  WorldQuest();
  virtual ~WorldQuest();

  WorldQuest(const WorldQuest& from);

  inline WorldQuest& operator=(const WorldQuest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldQuest& default_instance();

  void Swap(WorldQuest* other);

  // implements Message ----------------------------------------------

  WorldQuest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldQuest& from);
  void MergeFrom(const WorldQuest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 mapid = 1 [default = 0];
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional bool type_main = 2 [default = false];
  inline bool has_type_main() const;
  inline void clear_type_main();
  static const int kTypeMainFieldNumber = 2;
  inline bool type_main() const;
  inline void set_type_main(bool value);

  // optional bool type_branch = 3 [default = false];
  inline bool has_type_branch() const;
  inline void clear_type_branch();
  static const int kTypeBranchFieldNumber = 3;
  inline bool type_branch() const;
  inline void set_type_branch(bool value);

  // optional bool type_daily = 4 [default = false];
  inline bool has_type_daily() const;
  inline void clear_type_daily();
  static const int kTypeDailyFieldNumber = 4;
  inline bool type_daily() const;
  inline void set_type_daily(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.WorldQuest)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_type_main();
  inline void clear_has_type_main();
  inline void set_has_type_branch();
  inline void clear_has_type_branch();
  inline void set_has_type_daily();
  inline void clear_has_type_daily();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 mapid_;
  bool type_main_;
  bool type_branch_;
  bool type_daily_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static WorldQuest* default_instance_;
};
// -------------------------------------------------------------------

class QueryWorldQuestCmd : public ::google::protobuf::Message {
 public:
  QueryWorldQuestCmd();
  virtual ~QueryWorldQuestCmd();

  QueryWorldQuestCmd(const QueryWorldQuestCmd& from);

  inline QueryWorldQuestCmd& operator=(const QueryWorldQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryWorldQuestCmd& default_instance();

  void Swap(QueryWorldQuestCmd* other);

  // implements Message ----------------------------------------------

  QueryWorldQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryWorldQuestCmd& from);
  void MergeFrom(const QueryWorldQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // repeated .Cmd.WorldQuest quests = 3;
  inline int quests_size() const;
  inline void clear_quests();
  static const int kQuestsFieldNumber = 3;
  inline const ::Cmd::WorldQuest& quests(int index) const;
  inline ::Cmd::WorldQuest* mutable_quests(int index);
  inline ::Cmd::WorldQuest* add_quests();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorldQuest >&
      quests() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorldQuest >*
      mutable_quests();

  // @@protoc_insertion_point(class_scope:Cmd.QueryWorldQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WorldQuest > quests_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QueryWorldQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuestGroupTraceQuestCmd : public ::google::protobuf::Message {
 public:
  QuestGroupTraceQuestCmd();
  virtual ~QuestGroupTraceQuestCmd();

  QuestGroupTraceQuestCmd(const QuestGroupTraceQuestCmd& from);

  inline QuestGroupTraceQuestCmd& operator=(const QuestGroupTraceQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestGroupTraceQuestCmd& default_instance();

  void Swap(QuestGroupTraceQuestCmd* other);

  // implements Message ----------------------------------------------

  QuestGroupTraceQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestGroupTraceQuestCmd& from);
  void MergeFrom(const QuestGroupTraceQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bool trace = 4 [default = false];
  inline bool has_trace() const;
  inline void clear_trace();
  static const int kTraceFieldNumber = 4;
  inline bool trace() const;
  inline void set_trace(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestGroupTraceQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_trace();
  inline void clear_has_trace();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  bool trace_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QuestGroupTraceQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class HelpQuickFinishBoardQuestCmd : public ::google::protobuf::Message {
 public:
  HelpQuickFinishBoardQuestCmd();
  virtual ~HelpQuickFinishBoardQuestCmd();

  HelpQuickFinishBoardQuestCmd(const HelpQuickFinishBoardQuestCmd& from);

  inline HelpQuickFinishBoardQuestCmd& operator=(const HelpQuickFinishBoardQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HelpQuickFinishBoardQuestCmd& default_instance();

  void Swap(HelpQuickFinishBoardQuestCmd* other);

  // implements Message ----------------------------------------------

  HelpQuickFinishBoardQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HelpQuickFinishBoardQuestCmd& from);
  void MergeFrom(const HelpQuickFinishBoardQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional uint32 questid = 3 [default = 0];
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 3;
  inline ::google::protobuf::uint32 questid() const;
  inline void set_questid(::google::protobuf::uint32 value);

  // optional string leadername = 4;
  inline bool has_leadername() const;
  inline void clear_leadername();
  static const int kLeadernameFieldNumber = 4;
  inline const ::std::string& leadername() const;
  inline void set_leadername(const ::std::string& value);
  inline void set_leadername(const char* value);
  inline void set_leadername(const char* value, size_t size);
  inline ::std::string* mutable_leadername();
  inline ::std::string* release_leadername();
  inline void set_allocated_leadername(::std::string* leadername);

  // @@protoc_insertion_point(class_scope:Cmd.HelpQuickFinishBoardQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questid();
  inline void clear_has_questid();
  inline void set_has_leadername();
  inline void clear_has_leadername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* leadername_;
  ::google::protobuf::uint32 questid_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static HelpQuickFinishBoardQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryManualQuestCmd : public ::google::protobuf::Message {
 public:
  QueryManualQuestCmd();
  virtual ~QueryManualQuestCmd();

  QueryManualQuestCmd(const QueryManualQuestCmd& from);

  inline QueryManualQuestCmd& operator=(const QueryManualQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryManualQuestCmd& default_instance();

  void Swap(QueryManualQuestCmd* other);

  // implements Message ----------------------------------------------

  QueryManualQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryManualQuestCmd& from);
  void MergeFrom(const QueryManualQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional .Cmd.QuestManual manual = 4;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 4;
  inline const ::Cmd::QuestManual& manual() const;
  inline ::Cmd::QuestManual* mutable_manual();
  inline ::Cmd::QuestManual* release_manual();
  inline void set_allocated_manual(::Cmd::QuestManual* manual);

  // @@protoc_insertion_point(class_scope:Cmd.QueryManualQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_manual();
  inline void clear_has_manual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* version_;
  ::Cmd::QuestManual* manual_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static QueryManualQuestCmd* default_instance_;
};
// -------------------------------------------------------------------

class OpenPuzzleQuestCmd : public ::google::protobuf::Message {
 public:
  OpenPuzzleQuestCmd();
  virtual ~OpenPuzzleQuestCmd();

  OpenPuzzleQuestCmd(const OpenPuzzleQuestCmd& from);

  inline OpenPuzzleQuestCmd& operator=(const OpenPuzzleQuestCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenPuzzleQuestCmd& default_instance();

  void Swap(OpenPuzzleQuestCmd* other);

  // implements Message ----------------------------------------------

  OpenPuzzleQuestCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenPuzzleQuestCmd& from);
  void MergeFrom(const OpenPuzzleQuestCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::QuestParam param() const;
  inline void set_param(::Cmd::QuestParam value);

  // optional string version = 3;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 3;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional uint32 id = 4 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.OpenPuzzleQuestCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* version_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_SceneQuest_2eproto();
  friend void protobuf_AssignDesc_SceneQuest_2eproto();
  friend void protobuf_ShutdownFile_SceneQuest_2eproto();

  void InitAsDefaultInstance();
  static OpenPuzzleQuestCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// QuestPConfig

// optional uint32 RewardGroup = 1 [default = 0];
inline bool QuestPConfig::has_rewardgroup() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestPConfig::set_has_rewardgroup() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestPConfig::clear_has_rewardgroup() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestPConfig::clear_rewardgroup() {
  rewardgroup_ = 0u;
  clear_has_rewardgroup();
}
inline ::google::protobuf::uint32 QuestPConfig::rewardgroup() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.RewardGroup)
  return rewardgroup_;
}
inline void QuestPConfig::set_rewardgroup(::google::protobuf::uint32 value) {
  set_has_rewardgroup();
  rewardgroup_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.RewardGroup)
}

// optional uint32 SubGroup = 2 [default = 0];
inline bool QuestPConfig::has_subgroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestPConfig::set_has_subgroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestPConfig::clear_has_subgroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestPConfig::clear_subgroup() {
  subgroup_ = 0u;
  clear_has_subgroup();
}
inline ::google::protobuf::uint32 QuestPConfig::subgroup() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.SubGroup)
  return subgroup_;
}
inline void QuestPConfig::set_subgroup(::google::protobuf::uint32 value) {
  set_has_subgroup();
  subgroup_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.SubGroup)
}

// optional uint32 FinishJump = 3 [default = 0];
inline bool QuestPConfig::has_finishjump() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestPConfig::set_has_finishjump() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestPConfig::clear_has_finishjump() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestPConfig::clear_finishjump() {
  finishjump_ = 0u;
  clear_has_finishjump();
}
inline ::google::protobuf::uint32 QuestPConfig::finishjump() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.FinishJump)
  return finishjump_;
}
inline void QuestPConfig::set_finishjump(::google::protobuf::uint32 value) {
  set_has_finishjump();
  finishjump_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.FinishJump)
}

// optional uint32 FailJump = 4 [default = 0];
inline bool QuestPConfig::has_failjump() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestPConfig::set_has_failjump() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestPConfig::clear_has_failjump() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestPConfig::clear_failjump() {
  failjump_ = 0u;
  clear_has_failjump();
}
inline ::google::protobuf::uint32 QuestPConfig::failjump() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.FailJump)
  return failjump_;
}
inline void QuestPConfig::set_failjump(::google::protobuf::uint32 value) {
  set_has_failjump();
  failjump_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.FailJump)
}

// optional uint32 Map = 5 [default = 0];
inline bool QuestPConfig::has_map() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestPConfig::set_has_map() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestPConfig::clear_has_map() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestPConfig::clear_map() {
  map_ = 0u;
  clear_has_map();
}
inline ::google::protobuf::uint32 QuestPConfig::map() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Map)
  return map_;
}
inline void QuestPConfig::set_map(::google::protobuf::uint32 value) {
  set_has_map();
  map_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Map)
}

// optional uint32 WhetherTrace = 6 [default = 0];
inline bool QuestPConfig::has_whethertrace() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestPConfig::set_has_whethertrace() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestPConfig::clear_has_whethertrace() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestPConfig::clear_whethertrace() {
  whethertrace_ = 0u;
  clear_has_whethertrace();
}
inline ::google::protobuf::uint32 QuestPConfig::whethertrace() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.WhetherTrace)
  return whethertrace_;
}
inline void QuestPConfig::set_whethertrace(::google::protobuf::uint32 value) {
  set_has_whethertrace();
  whethertrace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.WhetherTrace)
}

// optional uint32 Auto = 7 [default = 0];
inline bool QuestPConfig::has_auto_() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QuestPConfig::set_has_auto_() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QuestPConfig::clear_has_auto_() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QuestPConfig::clear_auto_() {
  auto__ = 0u;
  clear_has_auto_();
}
inline ::google::protobuf::uint32 QuestPConfig::auto_() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Auto)
  return auto__;
}
inline void QuestPConfig::set_auto_(::google::protobuf::uint32 value) {
  set_has_auto_();
  auto__ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Auto)
}

// optional uint32 FirstClass = 8 [default = 0];
inline bool QuestPConfig::has_firstclass() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuestPConfig::set_has_firstclass() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuestPConfig::clear_has_firstclass() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuestPConfig::clear_firstclass() {
  firstclass_ = 0u;
  clear_has_firstclass();
}
inline ::google::protobuf::uint32 QuestPConfig::firstclass() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.FirstClass)
  return firstclass_;
}
inline void QuestPConfig::set_firstclass(::google::protobuf::uint32 value) {
  set_has_firstclass();
  firstclass_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.FirstClass)
}

// optional uint32 Class = 9 [default = 0];
inline bool QuestPConfig::has_class_() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QuestPConfig::set_has_class_() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QuestPConfig::clear_has_class_() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QuestPConfig::clear_class_() {
  class__ = 0u;
  clear_has_class_();
}
inline ::google::protobuf::uint32 QuestPConfig::class_() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Class)
  return class__;
}
inline void QuestPConfig::set_class_(::google::protobuf::uint32 value) {
  set_has_class_();
  class__ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Class)
}

// optional uint32 Level = 10 [default = 0];
inline bool QuestPConfig::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QuestPConfig::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QuestPConfig::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QuestPConfig::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 QuestPConfig::level() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Level)
  return level_;
}
inline void QuestPConfig::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Level)
}

// optional string QuestName = 11;
inline bool QuestPConfig::has_questname() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void QuestPConfig::set_has_questname() {
  _has_bits_[0] |= 0x00000400u;
}
inline void QuestPConfig::clear_has_questname() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void QuestPConfig::clear_questname() {
  if (questname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questname_->clear();
  }
  clear_has_questname();
}
inline const ::std::string& QuestPConfig::questname() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.QuestName)
  return *questname_;
}
inline void QuestPConfig::set_questname(const ::std::string& value) {
  set_has_questname();
  if (questname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questname_ = new ::std::string;
  }
  questname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.QuestName)
}
inline void QuestPConfig::set_questname(const char* value) {
  set_has_questname();
  if (questname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questname_ = new ::std::string;
  }
  questname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.QuestName)
}
inline void QuestPConfig::set_questname(const char* value, size_t size) {
  set_has_questname();
  if (questname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questname_ = new ::std::string;
  }
  questname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.QuestName)
}
inline ::std::string* QuestPConfig::mutable_questname() {
  set_has_questname();
  if (questname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    questname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.QuestName)
  return questname_;
}
inline ::std::string* QuestPConfig::release_questname() {
  clear_has_questname();
  if (questname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = questname_;
    questname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_questname(::std::string* questname) {
  if (questname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete questname_;
  }
  if (questname) {
    set_has_questname();
    questname_ = questname;
  } else {
    clear_has_questname();
    questname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.QuestName)
}

// optional string Name = 12;
inline bool QuestPConfig::has_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QuestPConfig::set_has_name() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QuestPConfig::clear_has_name() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QuestPConfig::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QuestPConfig::name() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Name)
  return *name_;
}
inline void QuestPConfig::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Name)
}
inline void QuestPConfig::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.Name)
}
inline void QuestPConfig::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.Name)
}
inline ::std::string* QuestPConfig::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.Name)
  return name_;
}
inline ::std::string* QuestPConfig::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.Name)
}

// optional string Type = 13;
inline bool QuestPConfig::has_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void QuestPConfig::set_has_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void QuestPConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void QuestPConfig::clear_type() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& QuestPConfig::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Type)
  return *type_;
}
inline void QuestPConfig::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Type)
}
inline void QuestPConfig::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.Type)
}
inline void QuestPConfig::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.Type)
}
inline ::std::string* QuestPConfig::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    type_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.Type)
  return type_;
}
inline ::std::string* QuestPConfig::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_type(::std::string* type) {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (type) {
    set_has_type();
    type_ = type;
  } else {
    clear_has_type();
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.Type)
}

// optional string Content = 14;
inline bool QuestPConfig::has_content() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void QuestPConfig::set_has_content() {
  _has_bits_[0] |= 0x00002000u;
}
inline void QuestPConfig::clear_has_content() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void QuestPConfig::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& QuestPConfig::content() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Content)
  return *content_;
}
inline void QuestPConfig::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Content)
}
inline void QuestPConfig::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.Content)
}
inline void QuestPConfig::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.Content)
}
inline ::std::string* QuestPConfig::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.Content)
  return content_;
}
inline ::std::string* QuestPConfig::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.Content)
}

// optional string TraceInfo = 15;
inline bool QuestPConfig::has_traceinfo() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void QuestPConfig::set_has_traceinfo() {
  _has_bits_[0] |= 0x00004000u;
}
inline void QuestPConfig::clear_has_traceinfo() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void QuestPConfig::clear_traceinfo() {
  if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceinfo_->clear();
  }
  clear_has_traceinfo();
}
inline const ::std::string& QuestPConfig::traceinfo() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.TraceInfo)
  return *traceinfo_;
}
inline void QuestPConfig::set_traceinfo(const ::std::string& value) {
  set_has_traceinfo();
  if (traceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceinfo_ = new ::std::string;
  }
  traceinfo_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.TraceInfo)
}
inline void QuestPConfig::set_traceinfo(const char* value) {
  set_has_traceinfo();
  if (traceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceinfo_ = new ::std::string;
  }
  traceinfo_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.TraceInfo)
}
inline void QuestPConfig::set_traceinfo(const char* value, size_t size) {
  set_has_traceinfo();
  if (traceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceinfo_ = new ::std::string;
  }
  traceinfo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.TraceInfo)
}
inline ::std::string* QuestPConfig::mutable_traceinfo() {
  set_has_traceinfo();
  if (traceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    traceinfo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.TraceInfo)
  return traceinfo_;
}
inline ::std::string* QuestPConfig::release_traceinfo() {
  clear_has_traceinfo();
  if (traceinfo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = traceinfo_;
    traceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_traceinfo(::std::string* traceinfo) {
  if (traceinfo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete traceinfo_;
  }
  if (traceinfo) {
    set_has_traceinfo();
    traceinfo_ = traceinfo;
  } else {
    clear_has_traceinfo();
    traceinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.TraceInfo)
}

// optional string Prefixion = 20;
inline bool QuestPConfig::has_prefixion() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void QuestPConfig::set_has_prefixion() {
  _has_bits_[0] |= 0x00008000u;
}
inline void QuestPConfig::clear_has_prefixion() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void QuestPConfig::clear_prefixion() {
  if (prefixion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefixion_->clear();
  }
  clear_has_prefixion();
}
inline const ::std::string& QuestPConfig::prefixion() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.Prefixion)
  return *prefixion_;
}
inline void QuestPConfig::set_prefixion(const ::std::string& value) {
  set_has_prefixion();
  if (prefixion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefixion_ = new ::std::string;
  }
  prefixion_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.Prefixion)
}
inline void QuestPConfig::set_prefixion(const char* value) {
  set_has_prefixion();
  if (prefixion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefixion_ = new ::std::string;
  }
  prefixion_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPConfig.Prefixion)
}
inline void QuestPConfig::set_prefixion(const char* value, size_t size) {
  set_has_prefixion();
  if (prefixion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefixion_ = new ::std::string;
  }
  prefixion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPConfig.Prefixion)
}
inline ::std::string* QuestPConfig::mutable_prefixion() {
  set_has_prefixion();
  if (prefixion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    prefixion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.Prefixion)
  return prefixion_;
}
inline ::std::string* QuestPConfig::release_prefixion() {
  clear_has_prefixion();
  if (prefixion_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = prefixion_;
    prefixion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPConfig::set_allocated_prefixion(::std::string* prefixion) {
  if (prefixion_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete prefixion_;
  }
  if (prefixion) {
    set_has_prefixion();
    prefixion_ = prefixion;
  } else {
    clear_has_prefixion();
    prefixion_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.Prefixion)
}

// optional .Cmd.ConfigParam params = 16;
inline bool QuestPConfig::has_params() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void QuestPConfig::set_has_params() {
  _has_bits_[0] |= 0x00010000u;
}
inline void QuestPConfig::clear_has_params() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void QuestPConfig::clear_params() {
  if (params_ != NULL) params_->::Cmd::ConfigParam::Clear();
  clear_has_params();
}
inline const ::Cmd::ConfigParam& QuestPConfig::params() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.params)
  return params_ != NULL ? *params_ : *default_instance_->params_;
}
inline ::Cmd::ConfigParam* QuestPConfig::mutable_params() {
  set_has_params();
  if (params_ == NULL) params_ = new ::Cmd::ConfigParam;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPConfig.params)
  return params_;
}
inline ::Cmd::ConfigParam* QuestPConfig::release_params() {
  clear_has_params();
  ::Cmd::ConfigParam* temp = params_;
  params_ = NULL;
  return temp;
}
inline void QuestPConfig::set_allocated_params(::Cmd::ConfigParam* params) {
  delete params_;
  params_ = params;
  if (params) {
    set_has_params();
  } else {
    clear_has_params();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPConfig.params)
}

// repeated uint32 allrewardid = 17;
inline int QuestPConfig::allrewardid_size() const {
  return allrewardid_.size();
}
inline void QuestPConfig::clear_allrewardid() {
  allrewardid_.Clear();
}
inline ::google::protobuf::uint32 QuestPConfig::allrewardid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.allrewardid)
  return allrewardid_.Get(index);
}
inline void QuestPConfig::set_allrewardid(int index, ::google::protobuf::uint32 value) {
  allrewardid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.allrewardid)
}
inline void QuestPConfig::add_allrewardid(::google::protobuf::uint32 value) {
  allrewardid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPConfig.allrewardid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPConfig::allrewardid() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPConfig.allrewardid)
  return allrewardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPConfig::mutable_allrewardid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPConfig.allrewardid)
  return &allrewardid_;
}

// repeated uint32 PreQuest = 18;
inline int QuestPConfig::prequest_size() const {
  return prequest_.size();
}
inline void QuestPConfig::clear_prequest() {
  prequest_.Clear();
}
inline ::google::protobuf::uint32 QuestPConfig::prequest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.PreQuest)
  return prequest_.Get(index);
}
inline void QuestPConfig::set_prequest(int index, ::google::protobuf::uint32 value) {
  prequest_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.PreQuest)
}
inline void QuestPConfig::add_prequest(::google::protobuf::uint32 value) {
  prequest_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPConfig.PreQuest)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPConfig::prequest() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPConfig.PreQuest)
  return prequest_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPConfig::mutable_prequest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPConfig.PreQuest)
  return &prequest_;
}

// repeated uint32 MustPreQuest = 19;
inline int QuestPConfig::mustprequest_size() const {
  return mustprequest_.size();
}
inline void QuestPConfig::clear_mustprequest() {
  mustprequest_.Clear();
}
inline ::google::protobuf::uint32 QuestPConfig::mustprequest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPConfig.MustPreQuest)
  return mustprequest_.Get(index);
}
inline void QuestPConfig::set_mustprequest(int index, ::google::protobuf::uint32 value) {
  mustprequest_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPConfig.MustPreQuest)
}
inline void QuestPConfig::add_mustprequest(::google::protobuf::uint32 value) {
  mustprequest_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPConfig.MustPreQuest)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPConfig::mustprequest() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPConfig.MustPreQuest)
  return mustprequest_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPConfig::mutable_mustprequest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPConfig.MustPreQuest)
  return &mustprequest_;
}

// -------------------------------------------------------------------

// QuestStep

// optional uint32 process = 1 [default = 0];
inline bool QuestStep::has_process() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestStep::set_has_process() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestStep::clear_has_process() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestStep::clear_process() {
  process_ = 0u;
  clear_has_process();
}
inline ::google::protobuf::uint32 QuestStep::process() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStep.process)
  return process_;
}
inline void QuestStep::set_process(::google::protobuf::uint32 value) {
  set_has_process();
  process_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestStep.process)
}

// repeated uint64 params = 2;
inline int QuestStep::params_size() const {
  return params_.size();
}
inline void QuestStep::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint64 QuestStep::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStep.params)
  return params_.Get(index);
}
inline void QuestStep::set_params(int index, ::google::protobuf::uint64 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestStep.params)
}
inline void QuestStep::add_params(::google::protobuf::uint64 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestStep.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuestStep::params() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestStep.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuestStep::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestStep.params)
  return &params_;
}

// repeated string names = 3;
inline int QuestStep::names_size() const {
  return names_.size();
}
inline void QuestStep::clear_names() {
  names_.Clear();
}
inline const ::std::string& QuestStep::names(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStep.names)
  return names_.Get(index);
}
inline ::std::string* QuestStep::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestStep.names)
  return names_.Mutable(index);
}
inline void QuestStep::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.QuestStep.names)
  names_.Mutable(index)->assign(value);
}
inline void QuestStep::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestStep.names)
}
inline void QuestStep::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestStep.names)
}
inline ::std::string* QuestStep::add_names() {
  return names_.Add();
}
inline void QuestStep::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestStep.names)
}
inline void QuestStep::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.QuestStep.names)
}
inline void QuestStep::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.QuestStep.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QuestStep::names() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestStep.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QuestStep::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestStep.names)
  return &names_;
}

// optional .Cmd.QuestPConfig config = 4;
inline bool QuestStep::has_config() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestStep::set_has_config() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestStep::clear_has_config() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestStep::clear_config() {
  if (config_ != NULL) config_->::Cmd::QuestPConfig::Clear();
  clear_has_config();
}
inline const ::Cmd::QuestPConfig& QuestStep::config() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStep.config)
  return config_ != NULL ? *config_ : *default_instance_->config_;
}
inline ::Cmd::QuestPConfig* QuestStep::mutable_config() {
  set_has_config();
  if (config_ == NULL) config_ = new ::Cmd::QuestPConfig;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestStep.config)
  return config_;
}
inline ::Cmd::QuestPConfig* QuestStep::release_config() {
  clear_has_config();
  ::Cmd::QuestPConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void QuestStep::set_allocated_config(::Cmd::QuestPConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    set_has_config();
  } else {
    clear_has_config();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestStep.config)
}

// -------------------------------------------------------------------

// QuestData

// optional uint32 id = 1 [default = 0];
inline bool QuestData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestData::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestData::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.id)
  return id_;
}
inline void QuestData::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.id)
}

// optional uint32 step = 2 [default = 0];
inline bool QuestData::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestData::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestData::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestData::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 QuestData::step() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.step)
  return step_;
}
inline void QuestData::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.step)
}

// optional uint32 time = 3 [default = 0];
inline bool QuestData::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestData::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestData::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestData::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuestData::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.time)
  return time_;
}
inline void QuestData::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.time)
}

// optional bool complete = 4 [default = false];
inline bool QuestData::has_complete() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestData::set_has_complete() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestData::clear_has_complete() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestData::clear_complete() {
  complete_ = false;
  clear_has_complete();
}
inline bool QuestData::complete() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.complete)
  return complete_;
}
inline void QuestData::set_complete(bool value) {
  set_has_complete();
  complete_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.complete)
}

// optional bool trace = 12 [default = true];
inline bool QuestData::has_trace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestData::set_has_trace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestData::clear_has_trace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestData::clear_trace() {
  trace_ = true;
  clear_has_trace();
}
inline bool QuestData::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.trace)
  return trace_;
}
inline void QuestData::set_trace(bool value) {
  set_has_trace();
  trace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.trace)
}

// repeated .Cmd.QuestStep steps = 5;
inline int QuestData::steps_size() const {
  return steps_.size();
}
inline void QuestData::clear_steps() {
  steps_.Clear();
}
inline const ::Cmd::QuestStep& QuestData::steps(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.steps)
  return steps_.Get(index);
}
inline ::Cmd::QuestStep* QuestData::mutable_steps(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestData.steps)
  return steps_.Mutable(index);
}
inline ::Cmd::QuestStep* QuestData::add_steps() {
  // @@protoc_insertion_point(field_add:Cmd.QuestData.steps)
  return steps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestStep >&
QuestData::steps() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestData.steps)
  return steps_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestStep >*
QuestData::mutable_steps() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestData.steps)
  return &steps_;
}

// repeated .Cmd.ItemInfo rewards = 6;
inline int QuestData::rewards_size() const {
  return rewards_.size();
}
inline void QuestData::clear_rewards() {
  rewards_.Clear();
}
inline const ::Cmd::ItemInfo& QuestData::rewards(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.rewards)
  return rewards_.Get(index);
}
inline ::Cmd::ItemInfo* QuestData::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestData.rewards)
  return rewards_.Mutable(index);
}
inline ::Cmd::ItemInfo* QuestData::add_rewards() {
  // @@protoc_insertion_point(field_add:Cmd.QuestData.rewards)
  return rewards_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
QuestData::rewards() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestData.rewards)
  return rewards_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
QuestData::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestData.rewards)
  return &rewards_;
}

// optional uint32 version = 7 [default = 0];
inline bool QuestData::has_version() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void QuestData::set_has_version() {
  _has_bits_[0] |= 0x00000080u;
}
inline void QuestData::clear_has_version() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void QuestData::clear_version() {
  version_ = 0u;
  clear_has_version();
}
inline ::google::protobuf::uint32 QuestData::version() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.version)
  return version_;
}
inline void QuestData::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.version)
}

// optional uint32 acceptlv = 8 [default = 0];
inline bool QuestData::has_acceptlv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void QuestData::set_has_acceptlv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void QuestData::clear_has_acceptlv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void QuestData::clear_acceptlv() {
  acceptlv_ = 0u;
  clear_has_acceptlv();
}
inline ::google::protobuf::uint32 QuestData::acceptlv() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.acceptlv)
  return acceptlv_;
}
inline void QuestData::set_acceptlv(::google::protobuf::uint32 value) {
  set_has_acceptlv();
  acceptlv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.acceptlv)
}

// optional uint32 finishcount = 9 [default = 0];
inline bool QuestData::has_finishcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void QuestData::set_has_finishcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void QuestData::clear_has_finishcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void QuestData::clear_finishcount() {
  finishcount_ = 0u;
  clear_has_finishcount();
}
inline ::google::protobuf::uint32 QuestData::finishcount() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.finishcount)
  return finishcount_;
}
inline void QuestData::set_finishcount(::google::protobuf::uint32 value) {
  set_has_finishcount();
  finishcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestData.finishcount)
}

// repeated uint64 params = 10;
inline int QuestData::params_size() const {
  return params_.size();
}
inline void QuestData::clear_params() {
  params_.Clear();
}
inline ::google::protobuf::uint64 QuestData::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.params)
  return params_.Get(index);
}
inline void QuestData::set_params(int index, ::google::protobuf::uint64 value) {
  params_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestData.params)
}
inline void QuestData::add_params(::google::protobuf::uint64 value) {
  params_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestData.params)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuestData::params() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestData.params)
  return params_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuestData::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestData.params)
  return &params_;
}

// repeated string names = 11;
inline int QuestData::names_size() const {
  return names_.size();
}
inline void QuestData::clear_names() {
  names_.Clear();
}
inline const ::std::string& QuestData::names(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestData.names)
  return names_.Get(index);
}
inline ::std::string* QuestData::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestData.names)
  return names_.Mutable(index);
}
inline void QuestData::set_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Cmd.QuestData.names)
  names_.Mutable(index)->assign(value);
}
inline void QuestData::set_names(int index, const char* value) {
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestData.names)
}
inline void QuestData::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestData.names)
}
inline ::std::string* QuestData::add_names() {
  return names_.Add();
}
inline void QuestData::add_names(const ::std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestData.names)
}
inline void QuestData::add_names(const char* value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Cmd.QuestData.names)
}
inline void QuestData::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Cmd.QuestData.names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
QuestData::names() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestData.names)
  return names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
QuestData::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestData.names)
  return &names_;
}

// -------------------------------------------------------------------

// QuestManualItem

// optional .Cmd.EQuestList type = 1 [default = EQUESTLIST_ACCEPT];
inline bool QuestManualItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestManualItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestManualItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestManualItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EQuestList QuestManualItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualItem.type)
  return static_cast< ::Cmd::EQuestList >(type_);
}
inline void QuestManualItem::set_type(::Cmd::EQuestList value) {
  assert(::Cmd::EQuestList_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestManualItem.type)
}

// optional .Cmd.QuestData data = 2;
inline bool QuestManualItem::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestManualItem::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestManualItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestManualItem::clear_data() {
  if (data_ != NULL) data_->::Cmd::QuestData::Clear();
  clear_has_data();
}
inline const ::Cmd::QuestData& QuestManualItem::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualItem.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::QuestData* QuestManualItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::QuestData;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualItem.data)
  return data_;
}
inline ::Cmd::QuestData* QuestManualItem::release_data() {
  clear_has_data();
  ::Cmd::QuestData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QuestManualItem::set_allocated_data(::Cmd::QuestData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManualItem.data)
}

// repeated .Cmd.QuestManualItem subs = 3;
inline int QuestManualItem::subs_size() const {
  return subs_.size();
}
inline void QuestManualItem::clear_subs() {
  subs_.Clear();
}
inline const ::Cmd::QuestManualItem& QuestManualItem::subs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualItem.subs)
  return subs_.Get(index);
}
inline ::Cmd::QuestManualItem* QuestManualItem::mutable_subs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualItem.subs)
  return subs_.Mutable(index);
}
inline ::Cmd::QuestManualItem* QuestManualItem::add_subs() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManualItem.subs)
  return subs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
QuestManualItem::subs() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManualItem.subs)
  return subs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
QuestManualItem::mutable_subs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManualItem.subs)
  return &subs_;
}

// -------------------------------------------------------------------

// QuestShop

// optional uint32 itemid = 1 [default = 0];
inline bool QuestShop::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestShop::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestShop::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestShop::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 QuestShop::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestShop.itemid)
  return itemid_;
}
inline void QuestShop::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestShop.itemid)
}

// repeated .Cmd.QuestManualItem quests = 2;
inline int QuestShop::quests_size() const {
  return quests_.size();
}
inline void QuestShop::clear_quests() {
  quests_.Clear();
}
inline const ::Cmd::QuestManualItem& QuestShop::quests(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestShop.quests)
  return quests_.Get(index);
}
inline ::Cmd::QuestManualItem* QuestShop::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestShop.quests)
  return quests_.Mutable(index);
}
inline ::Cmd::QuestManualItem* QuestShop::add_quests() {
  // @@protoc_insertion_point(field_add:Cmd.QuestShop.quests)
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
QuestShop::quests() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestShop.quests)
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
QuestShop::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestShop.quests)
  return &quests_;
}

// -------------------------------------------------------------------

// QuestName

// optional uint32 id = 1 [default = 0];
inline bool QuestName::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestName::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestName::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestName::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestName::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestName.id)
  return id_;
}
inline void QuestName::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestName.id)
}

// optional string name = 2;
inline bool QuestName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestName::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QuestName::name() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestName.name)
  return *name_;
}
inline void QuestName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestName.name)
}
inline void QuestName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestName.name)
}
inline void QuestName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestName.name)
}
inline ::std::string* QuestName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestName.name)
  return name_;
}
inline ::std::string* QuestName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestName.name)
}

// -------------------------------------------------------------------

// QuestPuzzle

// optional string version = 1;
inline bool QuestPuzzle::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestPuzzle::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestPuzzle::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestPuzzle::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& QuestPuzzle::version() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPuzzle.version)
  return *version_;
}
inline void QuestPuzzle::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPuzzle.version)
}
inline void QuestPuzzle::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPuzzle.version)
}
inline void QuestPuzzle::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPuzzle.version)
}
inline ::std::string* QuestPuzzle::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPuzzle.version)
  return version_;
}
inline ::std::string* QuestPuzzle::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPuzzle::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPuzzle.version)
}

// repeated uint32 open_puzzles = 2;
inline int QuestPuzzle::open_puzzles_size() const {
  return open_puzzles_.size();
}
inline void QuestPuzzle::clear_open_puzzles() {
  open_puzzles_.Clear();
}
inline ::google::protobuf::uint32 QuestPuzzle::open_puzzles(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPuzzle.open_puzzles)
  return open_puzzles_.Get(index);
}
inline void QuestPuzzle::set_open_puzzles(int index, ::google::protobuf::uint32 value) {
  open_puzzles_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPuzzle.open_puzzles)
}
inline void QuestPuzzle::add_open_puzzles(::google::protobuf::uint32 value) {
  open_puzzles_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPuzzle.open_puzzles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPuzzle::open_puzzles() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPuzzle.open_puzzles)
  return open_puzzles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPuzzle::mutable_open_puzzles() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPuzzle.open_puzzles)
  return &open_puzzles_;
}

// repeated uint32 unlock_puzzles = 3;
inline int QuestPuzzle::unlock_puzzles_size() const {
  return unlock_puzzles_.size();
}
inline void QuestPuzzle::clear_unlock_puzzles() {
  unlock_puzzles_.Clear();
}
inline ::google::protobuf::uint32 QuestPuzzle::unlock_puzzles(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPuzzle.unlock_puzzles)
  return unlock_puzzles_.Get(index);
}
inline void QuestPuzzle::set_unlock_puzzles(int index, ::google::protobuf::uint32 value) {
  unlock_puzzles_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPuzzle.unlock_puzzles)
}
inline void QuestPuzzle::add_unlock_puzzles(::google::protobuf::uint32 value) {
  unlock_puzzles_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPuzzle.unlock_puzzles)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPuzzle::unlock_puzzles() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPuzzle.unlock_puzzles)
  return unlock_puzzles_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPuzzle::mutable_unlock_puzzles() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPuzzle.unlock_puzzles)
  return &unlock_puzzles_;
}

// -------------------------------------------------------------------

// QuestPreview

// optional uint32 questid = 1 [default = 0];
inline bool QuestPreview::has_questid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestPreview::set_has_questid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestPreview::clear_has_questid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestPreview::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 QuestPreview::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPreview.questid)
  return questid_;
}
inline void QuestPreview::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPreview.questid)
}

// optional string name = 2;
inline bool QuestPreview::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestPreview::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestPreview::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestPreview::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QuestPreview::name() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPreview.name)
  return *name_;
}
inline void QuestPreview::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPreview.name)
}
inline void QuestPreview::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestPreview.name)
}
inline void QuestPreview::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestPreview.name)
}
inline ::std::string* QuestPreview::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestPreview.name)
  return name_;
}
inline ::std::string* QuestPreview::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestPreview::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestPreview.name)
}

// optional bool complete = 3 [default = false];
inline bool QuestPreview::has_complete() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestPreview::set_has_complete() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestPreview::clear_has_complete() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestPreview::clear_complete() {
  complete_ = false;
  clear_has_complete();
}
inline bool QuestPreview::complete() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPreview.complete)
  return complete_;
}
inline void QuestPreview::set_complete(bool value) {
  set_has_complete();
  complete_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPreview.complete)
}

// optional uint32 RewardGroup = 4 [default = 0];
inline bool QuestPreview::has_rewardgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestPreview::set_has_rewardgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestPreview::clear_has_rewardgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestPreview::clear_rewardgroup() {
  rewardgroup_ = 0u;
  clear_has_rewardgroup();
}
inline ::google::protobuf::uint32 QuestPreview::rewardgroup() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPreview.RewardGroup)
  return rewardgroup_;
}
inline void QuestPreview::set_rewardgroup(::google::protobuf::uint32 value) {
  set_has_rewardgroup();
  rewardgroup_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestPreview.RewardGroup)
}

// repeated uint32 allrewardid = 5;
inline int QuestPreview::allrewardid_size() const {
  return allrewardid_.size();
}
inline void QuestPreview::clear_allrewardid() {
  allrewardid_.Clear();
}
inline ::google::protobuf::uint32 QuestPreview::allrewardid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestPreview.allrewardid)
  return allrewardid_.Get(index);
}
inline void QuestPreview::set_allrewardid(int index, ::google::protobuf::uint32 value) {
  allrewardid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestPreview.allrewardid)
}
inline void QuestPreview::add_allrewardid(::google::protobuf::uint32 value) {
  allrewardid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestPreview.allrewardid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestPreview::allrewardid() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestPreview.allrewardid)
  return allrewardid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestPreview::mutable_allrewardid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestPreview.allrewardid)
  return &allrewardid_;
}

// -------------------------------------------------------------------

// QuestManualMain

// repeated .Cmd.QuestManualItem items = 1;
inline int QuestManualMain::items_size() const {
  return items_.size();
}
inline void QuestManualMain::clear_items() {
  items_.Clear();
}
inline const ::Cmd::QuestManualItem& QuestManualMain::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualMain.items)
  return items_.Get(index);
}
inline ::Cmd::QuestManualItem* QuestManualMain::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualMain.items)
  return items_.Mutable(index);
}
inline ::Cmd::QuestManualItem* QuestManualMain::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManualMain.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >&
QuestManualMain::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManualMain.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestManualItem >*
QuestManualMain::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManualMain.items)
  return &items_;
}

// optional .Cmd.QuestPuzzle puzzle = 2;
inline bool QuestManualMain::has_puzzle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestManualMain::set_has_puzzle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestManualMain::clear_has_puzzle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestManualMain::clear_puzzle() {
  if (puzzle_ != NULL) puzzle_->::Cmd::QuestPuzzle::Clear();
  clear_has_puzzle();
}
inline const ::Cmd::QuestPuzzle& QuestManualMain::puzzle() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualMain.puzzle)
  return puzzle_ != NULL ? *puzzle_ : *default_instance_->puzzle_;
}
inline ::Cmd::QuestPuzzle* QuestManualMain::mutable_puzzle() {
  set_has_puzzle();
  if (puzzle_ == NULL) puzzle_ = new ::Cmd::QuestPuzzle;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualMain.puzzle)
  return puzzle_;
}
inline ::Cmd::QuestPuzzle* QuestManualMain::release_puzzle() {
  clear_has_puzzle();
  ::Cmd::QuestPuzzle* temp = puzzle_;
  puzzle_ = NULL;
  return temp;
}
inline void QuestManualMain::set_allocated_puzzle(::Cmd::QuestPuzzle* puzzle) {
  delete puzzle_;
  puzzle_ = puzzle;
  if (puzzle) {
    set_has_puzzle();
  } else {
    clear_has_puzzle();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManualMain.puzzle)
}

// optional uint32 mainstoryid = 3 [default = 0];
inline bool QuestManualMain::has_mainstoryid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestManualMain::set_has_mainstoryid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestManualMain::clear_has_mainstoryid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestManualMain::clear_mainstoryid() {
  mainstoryid_ = 0u;
  clear_has_mainstoryid();
}
inline ::google::protobuf::uint32 QuestManualMain::mainstoryid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualMain.mainstoryid)
  return mainstoryid_;
}
inline void QuestManualMain::set_mainstoryid(::google::protobuf::uint32 value) {
  set_has_mainstoryid();
  mainstoryid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestManualMain.mainstoryid)
}

// repeated .Cmd.QuestPreview previews = 4;
inline int QuestManualMain::previews_size() const {
  return previews_.size();
}
inline void QuestManualMain::clear_previews() {
  previews_.Clear();
}
inline const ::Cmd::QuestPreview& QuestManualMain::previews(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualMain.previews)
  return previews_.Get(index);
}
inline ::Cmd::QuestPreview* QuestManualMain::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualMain.previews)
  return previews_.Mutable(index);
}
inline ::Cmd::QuestPreview* QuestManualMain::add_previews() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManualMain.previews)
  return previews_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >&
QuestManualMain::previews() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManualMain.previews)
  return previews_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >*
QuestManualMain::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManualMain.previews)
  return &previews_;
}

// -------------------------------------------------------------------

// QuestManualBranch

// repeated .Cmd.QuestShop shops = 1;
inline int QuestManualBranch::shops_size() const {
  return shops_.size();
}
inline void QuestManualBranch::clear_shops() {
  shops_.Clear();
}
inline const ::Cmd::QuestShop& QuestManualBranch::shops(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualBranch.shops)
  return shops_.Get(index);
}
inline ::Cmd::QuestShop* QuestManualBranch::mutable_shops(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualBranch.shops)
  return shops_.Mutable(index);
}
inline ::Cmd::QuestShop* QuestManualBranch::add_shops() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManualBranch.shops)
  return shops_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestShop >&
QuestManualBranch::shops() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManualBranch.shops)
  return shops_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestShop >*
QuestManualBranch::mutable_shops() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManualBranch.shops)
  return &shops_;
}

// -------------------------------------------------------------------

// QuestManualStory

// repeated .Cmd.QuestPreview previews = 1;
inline int QuestManualStory::previews_size() const {
  return previews_.size();
}
inline void QuestManualStory::clear_previews() {
  previews_.Clear();
}
inline const ::Cmd::QuestPreview& QuestManualStory::previews(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManualStory.previews)
  return previews_.Get(index);
}
inline ::Cmd::QuestPreview* QuestManualStory::mutable_previews(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManualStory.previews)
  return previews_.Mutable(index);
}
inline ::Cmd::QuestPreview* QuestManualStory::add_previews() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManualStory.previews)
  return previews_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >&
QuestManualStory::previews() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManualStory.previews)
  return previews_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestPreview >*
QuestManualStory::mutable_previews() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManualStory.previews)
  return &previews_;
}

// -------------------------------------------------------------------

// QuestManual

// optional string version = 1;
inline bool QuestManual::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestManual::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestManual::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestManual::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& QuestManual::version() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManual.version)
  return *version_;
}
inline void QuestManual::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QuestManual.version)
}
inline void QuestManual::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QuestManual.version)
}
inline void QuestManual::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QuestManual.version)
}
inline ::std::string* QuestManual::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManual.version)
  return version_;
}
inline ::std::string* QuestManual::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QuestManual::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManual.version)
}

// optional .Cmd.QuestManualMain main = 2;
inline bool QuestManual::has_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestManual::set_has_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestManual::clear_has_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestManual::clear_main() {
  if (main_ != NULL) main_->::Cmd::QuestManualMain::Clear();
  clear_has_main();
}
inline const ::Cmd::QuestManualMain& QuestManual::main() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManual.main)
  return main_ != NULL ? *main_ : *default_instance_->main_;
}
inline ::Cmd::QuestManualMain* QuestManual::mutable_main() {
  set_has_main();
  if (main_ == NULL) main_ = new ::Cmd::QuestManualMain;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManual.main)
  return main_;
}
inline ::Cmd::QuestManualMain* QuestManual::release_main() {
  clear_has_main();
  ::Cmd::QuestManualMain* temp = main_;
  main_ = NULL;
  return temp;
}
inline void QuestManual::set_allocated_main(::Cmd::QuestManualMain* main) {
  delete main_;
  main_ = main;
  if (main) {
    set_has_main();
  } else {
    clear_has_main();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManual.main)
}

// optional .Cmd.QuestManualBranch branch = 3;
inline bool QuestManual::has_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestManual::set_has_branch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestManual::clear_has_branch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestManual::clear_branch() {
  if (branch_ != NULL) branch_->::Cmd::QuestManualBranch::Clear();
  clear_has_branch();
}
inline const ::Cmd::QuestManualBranch& QuestManual::branch() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManual.branch)
  return branch_ != NULL ? *branch_ : *default_instance_->branch_;
}
inline ::Cmd::QuestManualBranch* QuestManual::mutable_branch() {
  set_has_branch();
  if (branch_ == NULL) branch_ = new ::Cmd::QuestManualBranch;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManual.branch)
  return branch_;
}
inline ::Cmd::QuestManualBranch* QuestManual::release_branch() {
  clear_has_branch();
  ::Cmd::QuestManualBranch* temp = branch_;
  branch_ = NULL;
  return temp;
}
inline void QuestManual::set_allocated_branch(::Cmd::QuestManualBranch* branch) {
  delete branch_;
  branch_ = branch;
  if (branch) {
    set_has_branch();
  } else {
    clear_has_branch();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManual.branch)
}

// optional .Cmd.QuestManualStory story = 4;
inline bool QuestManual::has_story() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestManual::set_has_story() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestManual::clear_has_story() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestManual::clear_story() {
  if (story_ != NULL) story_->::Cmd::QuestManualStory::Clear();
  clear_has_story();
}
inline const ::Cmd::QuestManualStory& QuestManual::story() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManual.story)
  return story_ != NULL ? *story_ : *default_instance_->story_;
}
inline ::Cmd::QuestManualStory* QuestManual::mutable_story() {
  set_has_story();
  if (story_ == NULL) story_ = new ::Cmd::QuestManualStory;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManual.story)
  return story_;
}
inline ::Cmd::QuestManualStory* QuestManual::release_story() {
  clear_has_story();
  ::Cmd::QuestManualStory* temp = story_;
  story_ = NULL;
  return temp;
}
inline void QuestManual::set_allocated_story(::Cmd::QuestManualStory* story) {
  delete story_;
  story_ = story;
  if (story) {
    set_has_story();
  } else {
    clear_has_story();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestManual.story)
}

// repeated .Cmd.QuestName prequest = 5;
inline int QuestManual::prequest_size() const {
  return prequest_.size();
}
inline void QuestManual::clear_prequest() {
  prequest_.Clear();
}
inline const ::Cmd::QuestName& QuestManual::prequest(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestManual.prequest)
  return prequest_.Get(index);
}
inline ::Cmd::QuestName* QuestManual::mutable_prequest(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestManual.prequest)
  return prequest_.Mutable(index);
}
inline ::Cmd::QuestName* QuestManual::add_prequest() {
  // @@protoc_insertion_point(field_add:Cmd.QuestManual.prequest)
  return prequest_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestName >&
QuestManual::prequest() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestManual.prequest)
  return prequest_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestName >*
QuestManual::mutable_prequest() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestManual.prequest)
  return &prequest_;
}

// -------------------------------------------------------------------

// QuestList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestList::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestList.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTLIST];
inline bool QuestList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestList::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestList::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestList.param)
}

// optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
inline bool QuestList::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestList::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestList::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestList::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EQuestList QuestList::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.type)
  return static_cast< ::Cmd::EQuestList >(type_);
}
inline void QuestList::set_type(::Cmd::EQuestList value) {
  assert(::Cmd::EQuestList_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestList.type)
}

// optional uint32 id = 4 [default = 0];
inline bool QuestList::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestList::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestList::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestList::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestList::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.id)
  return id_;
}
inline void QuestList::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestList.id)
}

// repeated .Cmd.QuestData list = 5;
inline int QuestList::list_size() const {
  return list_.size();
}
inline void QuestList::clear_list() {
  list_.Clear();
}
inline const ::Cmd::QuestData& QuestList::list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.list)
  return list_.Get(index);
}
inline ::Cmd::QuestData* QuestList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestList.list)
  return list_.Mutable(index);
}
inline ::Cmd::QuestData* QuestList::add_list() {
  // @@protoc_insertion_point(field_add:Cmd.QuestList.list)
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
QuestList::list() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestList.list)
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
QuestList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestList.list)
  return &list_;
}

// optional bool clear = 6 [default = false];
inline bool QuestList::has_clear() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QuestList::set_has_clear() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QuestList::clear_has_clear() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QuestList::clear_clear() {
  clear_ = false;
  clear_has_clear();
}
inline bool QuestList::clear() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestList.clear)
  return clear_;
}
inline void QuestList::set_clear(bool value) {
  set_has_clear();
  clear_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestList.clear)
}

// -------------------------------------------------------------------

// QuestUpdateItem

// repeated .Cmd.QuestData update = 1;
inline int QuestUpdateItem::update_size() const {
  return update_.size();
}
inline void QuestUpdateItem::clear_update() {
  update_.Clear();
}
inline const ::Cmd::QuestData& QuestUpdateItem::update(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdateItem.update)
  return update_.Get(index);
}
inline ::Cmd::QuestData* QuestUpdateItem::mutable_update(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestUpdateItem.update)
  return update_.Mutable(index);
}
inline ::Cmd::QuestData* QuestUpdateItem::add_update() {
  // @@protoc_insertion_point(field_add:Cmd.QuestUpdateItem.update)
  return update_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >&
QuestUpdateItem::update() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestUpdateItem.update)
  return update_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestData >*
QuestUpdateItem::mutable_update() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestUpdateItem.update)
  return &update_;
}

// repeated uint32 del = 2;
inline int QuestUpdateItem::del_size() const {
  return del_.size();
}
inline void QuestUpdateItem::clear_del() {
  del_.Clear();
}
inline ::google::protobuf::uint32 QuestUpdateItem::del(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdateItem.del)
  return del_.Get(index);
}
inline void QuestUpdateItem::set_del(int index, ::google::protobuf::uint32 value) {
  del_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestUpdateItem.del)
}
inline void QuestUpdateItem::add_del(::google::protobuf::uint32 value) {
  del_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestUpdateItem.del)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestUpdateItem::del() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestUpdateItem.del)
  return del_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestUpdateItem::mutable_del() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestUpdateItem.del)
  return &del_;
}

// optional .Cmd.EQuestList type = 3 [default = EQUESTLIST_ACCEPT];
inline bool QuestUpdateItem::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestUpdateItem::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestUpdateItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestUpdateItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EQuestList QuestUpdateItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdateItem.type)
  return static_cast< ::Cmd::EQuestList >(type_);
}
inline void QuestUpdateItem::set_type(::Cmd::EQuestList value) {
  assert(::Cmd::EQuestList_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestUpdateItem.type)
}

// -------------------------------------------------------------------

// QuestUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestUpdate::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestUpdate.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTUPDATE];
inline bool QuestUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestUpdate::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdate.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestUpdate::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestUpdate.param)
}

// repeated .Cmd.QuestUpdateItem items = 3;
inline int QuestUpdate::items_size() const {
  return items_.size();
}
inline void QuestUpdate::clear_items() {
  items_.Clear();
}
inline const ::Cmd::QuestUpdateItem& QuestUpdate::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestUpdate.items)
  return items_.Get(index);
}
inline ::Cmd::QuestUpdateItem* QuestUpdate::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestUpdate.items)
  return items_.Mutable(index);
}
inline ::Cmd::QuestUpdateItem* QuestUpdate::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QuestUpdate.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestUpdateItem >&
QuestUpdate::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestUpdate.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestUpdateItem >*
QuestUpdate::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestUpdate.items)
  return &items_;
}

// -------------------------------------------------------------------

// QuestStepUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestStepUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestStepUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestStepUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestStepUpdate::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestStepUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStepUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestStepUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestStepUpdate.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTSTEPUPDATE];
inline bool QuestStepUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestStepUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestStepUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestStepUpdate::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestStepUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStepUpdate.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestStepUpdate::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestStepUpdate.param)
}

// optional uint32 id = 3 [default = 0];
inline bool QuestStepUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestStepUpdate::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestStepUpdate::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestStepUpdate::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestStepUpdate::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStepUpdate.id)
  return id_;
}
inline void QuestStepUpdate::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestStepUpdate.id)
}

// optional uint32 step = 4 [default = 0];
inline bool QuestStepUpdate::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestStepUpdate::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestStepUpdate::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestStepUpdate::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 QuestStepUpdate::step() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStepUpdate.step)
  return step_;
}
inline void QuestStepUpdate::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestStepUpdate.step)
}

// optional .Cmd.QuestStep data = 5;
inline bool QuestStepUpdate::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestStepUpdate::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestStepUpdate::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestStepUpdate::clear_data() {
  if (data_ != NULL) data_->::Cmd::QuestStep::Clear();
  clear_has_data();
}
inline const ::Cmd::QuestStep& QuestStepUpdate::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestStepUpdate.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::QuestStep* QuestStepUpdate::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::QuestStep;
  // @@protoc_insertion_point(field_mutable:Cmd.QuestStepUpdate.data)
  return data_;
}
inline ::Cmd::QuestStep* QuestStepUpdate::release_data() {
  clear_has_data();
  ::Cmd::QuestStep* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QuestStepUpdate::set_allocated_data(::Cmd::QuestStep* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QuestStepUpdate.data)
}

// -------------------------------------------------------------------

// QuestAction

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestAction::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestAction::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestAction::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestAction::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestAction::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestAction.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestAction::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestAction.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTACTION];
inline bool QuestAction::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestAction::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestAction::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestAction::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestAction::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestAction.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestAction::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestAction.param)
}

// optional .Cmd.EQuestAction action = 3 [default = EQUESTACTION_MIN];
inline bool QuestAction::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestAction::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::Cmd::EQuestAction QuestAction::action() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestAction.action)
  return static_cast< ::Cmd::EQuestAction >(action_);
}
inline void QuestAction::set_action(::Cmd::EQuestAction value) {
  assert(::Cmd::EQuestAction_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestAction.action)
}

// optional uint32 questid = 4 [default = 0];
inline bool QuestAction::has_questid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestAction::set_has_questid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestAction::clear_has_questid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestAction::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 QuestAction::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestAction.questid)
  return questid_;
}
inline void QuestAction::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestAction.questid)
}

// -------------------------------------------------------------------

// RunQuestStep

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool RunQuestStep::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunQuestStep::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunQuestStep::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunQuestStep::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command RunQuestStep::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RunQuestStep::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_RUNQUESTSTEP];
inline bool RunQuestStep::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunQuestStep::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunQuestStep::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunQuestStep::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::QuestParam RunQuestStep::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void RunQuestStep::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.param)
}

// optional uint32 questid = 3 [default = 0];
inline bool RunQuestStep::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunQuestStep::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunQuestStep::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunQuestStep::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 RunQuestStep::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.questid)
  return questid_;
}
inline void RunQuestStep::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.questid)
}

// optional uint32 starid = 4 [default = 0];
inline bool RunQuestStep::has_starid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RunQuestStep::set_has_starid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RunQuestStep::clear_has_starid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RunQuestStep::clear_starid() {
  starid_ = 0u;
  clear_has_starid();
}
inline ::google::protobuf::uint32 RunQuestStep::starid() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.starid)
  return starid_;
}
inline void RunQuestStep::set_starid(::google::protobuf::uint32 value) {
  set_has_starid();
  starid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.starid)
}

// optional uint32 subgroup = 5 [default = 0];
inline bool RunQuestStep::has_subgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RunQuestStep::set_has_subgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RunQuestStep::clear_has_subgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RunQuestStep::clear_subgroup() {
  subgroup_ = 0u;
  clear_has_subgroup();
}
inline ::google::protobuf::uint32 RunQuestStep::subgroup() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.subgroup)
  return subgroup_;
}
inline void RunQuestStep::set_subgroup(::google::protobuf::uint32 value) {
  set_has_subgroup();
  subgroup_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.subgroup)
}

// optional uint32 step = 6 [default = 0];
inline bool RunQuestStep::has_step() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RunQuestStep::set_has_step() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RunQuestStep::clear_has_step() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RunQuestStep::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 RunQuestStep::step() const {
  // @@protoc_insertion_point(field_get:Cmd.RunQuestStep.step)
  return step_;
}
inline void RunQuestStep::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RunQuestStep.step)
}

// -------------------------------------------------------------------

// QuestTrace

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestTrace::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestTrace::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestTrace::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestTrace::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestTrace::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestTrace.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestTrace::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestTrace.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTTRACE];
inline bool QuestTrace::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestTrace::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestTrace::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestTrace::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestTrace::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestTrace.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestTrace::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestTrace.param)
}

// optional uint32 questid = 3 [default = 0];
inline bool QuestTrace::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestTrace::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestTrace::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestTrace::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 QuestTrace::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestTrace.questid)
  return questid_;
}
inline void QuestTrace::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestTrace.questid)
}

// optional bool trace = 4 [default = false];
inline bool QuestTrace::has_trace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestTrace::set_has_trace() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestTrace::clear_has_trace() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestTrace::clear_trace() {
  trace_ = false;
  clear_has_trace();
}
inline bool QuestTrace::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestTrace.trace)
  return trace_;
}
inline void QuestTrace::set_trace(bool value) {
  set_has_trace();
  trace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestTrace.trace)
}

// -------------------------------------------------------------------

// QuestDetail

// optional uint32 id = 1 [default = 0];
inline bool QuestDetail::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestDetail::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestDetail::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestDetail::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestDetail::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.id)
  return id_;
}
inline void QuestDetail::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.id)
}

// optional uint32 time = 2 [default = 0];
inline bool QuestDetail::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestDetail::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestDetail::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestDetail::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 QuestDetail::time() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.time)
  return time_;
}
inline void QuestDetail::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.time)
}

// optional uint32 map = 3 [default = 0];
inline bool QuestDetail::has_map() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestDetail::set_has_map() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestDetail::clear_has_map() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestDetail::clear_map() {
  map_ = 0u;
  clear_has_map();
}
inline ::google::protobuf::uint32 QuestDetail::map() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.map)
  return map_;
}
inline void QuestDetail::set_map(::google::protobuf::uint32 value) {
  set_has_map();
  map_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.map)
}

// optional bool complete = 4 [default = false];
inline bool QuestDetail::has_complete() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestDetail::set_has_complete() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestDetail::clear_has_complete() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestDetail::clear_complete() {
  complete_ = false;
  clear_has_complete();
}
inline bool QuestDetail::complete() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.complete)
  return complete_;
}
inline void QuestDetail::set_complete(bool value) {
  set_has_complete();
  complete_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.complete)
}

// optional bool trace = 5 [default = true];
inline bool QuestDetail::has_trace() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestDetail::set_has_trace() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestDetail::clear_has_trace() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestDetail::clear_trace() {
  trace_ = true;
  clear_has_trace();
}
inline bool QuestDetail::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.trace)
  return trace_;
}
inline void QuestDetail::set_trace(bool value) {
  set_has_trace();
  trace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.trace)
}

// repeated uint32 details = 6;
inline int QuestDetail::details_size() const {
  return details_.size();
}
inline void QuestDetail::clear_details() {
  details_.Clear();
}
inline ::google::protobuf::uint32 QuestDetail::details(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetail.details)
  return details_.Get(index);
}
inline void QuestDetail::set_details(int index, ::google::protobuf::uint32 value) {
  details_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestDetail.details)
}
inline void QuestDetail::add_details(::google::protobuf::uint32 value) {
  details_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestDetail.details)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
QuestDetail::details() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestDetail.details)
  return details_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
QuestDetail::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestDetail.details)
  return &details_;
}

// -------------------------------------------------------------------

// QuestDetailList

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestDetailList::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestDetailList::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestDetailList::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestDetailList::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestDetailList::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailList.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestDetailList::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetailList.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILLIST];
inline bool QuestDetailList::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestDetailList::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestDetailList::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestDetailList::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestDetailList::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailList.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestDetailList::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetailList.param)
}

// repeated .Cmd.QuestDetail details = 3;
inline int QuestDetailList::details_size() const {
  return details_.size();
}
inline void QuestDetailList::clear_details() {
  details_.Clear();
}
inline const ::Cmd::QuestDetail& QuestDetailList::details(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailList.details)
  return details_.Get(index);
}
inline ::Cmd::QuestDetail* QuestDetailList::mutable_details(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestDetailList.details)
  return details_.Mutable(index);
}
inline ::Cmd::QuestDetail* QuestDetailList::add_details() {
  // @@protoc_insertion_point(field_add:Cmd.QuestDetailList.details)
  return details_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
QuestDetailList::details() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestDetailList.details)
  return details_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
QuestDetailList::mutable_details() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestDetailList.details)
  return &details_;
}

// -------------------------------------------------------------------

// QuestDetailUpdate

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestDetailUpdate::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestDetailUpdate::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestDetailUpdate::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestDetailUpdate::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestDetailUpdate::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailUpdate.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestDetailUpdate::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetailUpdate.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTDETAILUPDATE];
inline bool QuestDetailUpdate::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestDetailUpdate::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestDetailUpdate::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestDetailUpdate::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestDetailUpdate::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailUpdate.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestDetailUpdate::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestDetailUpdate.param)
}

// repeated .Cmd.QuestDetail detail = 3;
inline int QuestDetailUpdate::detail_size() const {
  return detail_.size();
}
inline void QuestDetailUpdate::clear_detail() {
  detail_.Clear();
}
inline const ::Cmd::QuestDetail& QuestDetailUpdate::detail(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailUpdate.detail)
  return detail_.Get(index);
}
inline ::Cmd::QuestDetail* QuestDetailUpdate::mutable_detail(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestDetailUpdate.detail)
  return detail_.Mutable(index);
}
inline ::Cmd::QuestDetail* QuestDetailUpdate::add_detail() {
  // @@protoc_insertion_point(field_add:Cmd.QuestDetailUpdate.detail)
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
QuestDetailUpdate::detail() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestDetailUpdate.detail)
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
QuestDetailUpdate::mutable_detail() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestDetailUpdate.detail)
  return &detail_;
}

// repeated .Cmd.QuestDetail del = 4;
inline int QuestDetailUpdate::del_size() const {
  return del_.size();
}
inline void QuestDetailUpdate::clear_del() {
  del_.Clear();
}
inline const ::Cmd::QuestDetail& QuestDetailUpdate::del(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestDetailUpdate.del)
  return del_.Get(index);
}
inline ::Cmd::QuestDetail* QuestDetailUpdate::mutable_del(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QuestDetailUpdate.del)
  return del_.Mutable(index);
}
inline ::Cmd::QuestDetail* QuestDetailUpdate::add_del() {
  // @@protoc_insertion_point(field_add:Cmd.QuestDetailUpdate.del)
  return del_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >&
QuestDetailUpdate::del() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestDetailUpdate.del)
  return del_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::QuestDetail >*
QuestDetailUpdate::mutable_del() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestDetailUpdate.del)
  return &del_;
}

// -------------------------------------------------------------------

// QuestRaidCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestRaidCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestRaidCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestRaidCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestRaidCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestRaidCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestRaidCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestRaidCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestRaidCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTRAIDCMD];
inline bool QuestRaidCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestRaidCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestRaidCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestRaidCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestRaidCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestRaidCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestRaidCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestRaidCmd.param)
}

// optional uint32 questid = 3;
inline bool QuestRaidCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestRaidCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestRaidCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestRaidCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 QuestRaidCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestRaidCmd.questid)
  return questid_;
}
inline void QuestRaidCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestRaidCmd.questid)
}

// -------------------------------------------------------------------

// QuestCanAcceptListChange

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestCanAcceptListChange::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestCanAcceptListChange::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestCanAcceptListChange::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestCanAcceptListChange::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestCanAcceptListChange::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestCanAcceptListChange.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestCanAcceptListChange::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestCanAcceptListChange.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_CANACCEPTLISTCHANGED];
inline bool QuestCanAcceptListChange::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestCanAcceptListChange::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestCanAcceptListChange::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestCanAcceptListChange::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestCanAcceptListChange::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestCanAcceptListChange.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestCanAcceptListChange::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestCanAcceptListChange.param)
}

// -------------------------------------------------------------------

// VisitNpcUserCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool VisitNpcUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VisitNpcUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VisitNpcUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VisitNpcUserCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command VisitNpcUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.VisitNpcUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void VisitNpcUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VisitNpcUserCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_VISIT_NPC];
inline bool VisitNpcUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VisitNpcUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VisitNpcUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VisitNpcUserCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::QuestParam VisitNpcUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.VisitNpcUserCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void VisitNpcUserCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VisitNpcUserCmd.param)
}

// optional uint64 npctempid = 3 [default = 0];
inline bool VisitNpcUserCmd::has_npctempid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VisitNpcUserCmd::set_has_npctempid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VisitNpcUserCmd::clear_has_npctempid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VisitNpcUserCmd::clear_npctempid() {
  npctempid_ = GOOGLE_ULONGLONG(0);
  clear_has_npctempid();
}
inline ::google::protobuf::uint64 VisitNpcUserCmd::npctempid() const {
  // @@protoc_insertion_point(field_get:Cmd.VisitNpcUserCmd.npctempid)
  return npctempid_;
}
inline void VisitNpcUserCmd::set_npctempid(::google::protobuf::uint64 value) {
  set_has_npctempid();
  npctempid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.VisitNpcUserCmd.npctempid)
}

// -------------------------------------------------------------------

// OtherData

// optional .Cmd.EOtherData data = 1 [default = EOTHERDATA_MIN];
inline bool OtherData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OtherData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OtherData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OtherData::clear_data() {
  data_ = 0;
  clear_has_data();
}
inline ::Cmd::EOtherData OtherData::data() const {
  // @@protoc_insertion_point(field_get:Cmd.OtherData.data)
  return static_cast< ::Cmd::EOtherData >(data_);
}
inline void OtherData::set_data(::Cmd::EOtherData value) {
  assert(::Cmd::EOtherData_IsValid(value));
  set_has_data();
  data_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OtherData.data)
}

// optional uint32 param1 = 2 [default = 0];
inline bool OtherData::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OtherData::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OtherData::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OtherData::clear_param1() {
  param1_ = 0u;
  clear_has_param1();
}
inline ::google::protobuf::uint32 OtherData::param1() const {
  // @@protoc_insertion_point(field_get:Cmd.OtherData.param1)
  return param1_;
}
inline void OtherData::set_param1(::google::protobuf::uint32 value) {
  set_has_param1();
  param1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OtherData.param1)
}

// optional uint32 param2 = 3 [default = 0];
inline bool OtherData::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OtherData::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OtherData::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OtherData::clear_param2() {
  param2_ = 0u;
  clear_has_param2();
}
inline ::google::protobuf::uint32 OtherData::param2() const {
  // @@protoc_insertion_point(field_get:Cmd.OtherData.param2)
  return param2_;
}
inline void OtherData::set_param2(::google::protobuf::uint32 value) {
  set_has_param2();
  param2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OtherData.param2)
}

// optional uint32 param3 = 4 [default = 0];
inline bool OtherData::has_param3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OtherData::set_has_param3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OtherData::clear_has_param3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OtherData::clear_param3() {
  param3_ = 0u;
  clear_has_param3();
}
inline ::google::protobuf::uint32 OtherData::param3() const {
  // @@protoc_insertion_point(field_get:Cmd.OtherData.param3)
  return param3_;
}
inline void OtherData::set_param3(::google::protobuf::uint32 value) {
  set_has_param3();
  param3_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OtherData.param3)
}

// optional uint32 param4 = 5 [default = 0];
inline bool OtherData::has_param4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OtherData::set_has_param4() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OtherData::clear_has_param4() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OtherData::clear_param4() {
  param4_ = 0u;
  clear_has_param4();
}
inline ::google::protobuf::uint32 OtherData::param4() const {
  // @@protoc_insertion_point(field_get:Cmd.OtherData.param4)
  return param4_;
}
inline void OtherData::set_param4(::google::protobuf::uint32 value) {
  set_has_param4();
  param4_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OtherData.param4)
}

// -------------------------------------------------------------------

// QueryOtherData

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QueryOtherData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryOtherData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryOtherData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryOtherData::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QueryOtherData::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryOtherData.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryOtherData::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryOtherData.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYOTHERDATA];
inline bool QueryOtherData::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryOtherData::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryOtherData::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryOtherData::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::QuestParam QueryOtherData::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryOtherData.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QueryOtherData::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryOtherData.param)
}

// optional .Cmd.EOtherData type = 3 [default = EOTHERDATA_MIN];
inline bool QueryOtherData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryOtherData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryOtherData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryOtherData::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOtherData QueryOtherData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryOtherData.type)
  return static_cast< ::Cmd::EOtherData >(type_);
}
inline void QueryOtherData::set_type(::Cmd::EOtherData value) {
  assert(::Cmd::EOtherData_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryOtherData.type)
}

// optional .Cmd.OtherData data = 4;
inline bool QueryOtherData::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryOtherData::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryOtherData::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryOtherData::clear_data() {
  if (data_ != NULL) data_->::Cmd::OtherData::Clear();
  clear_has_data();
}
inline const ::Cmd::OtherData& QueryOtherData::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryOtherData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::OtherData* QueryOtherData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::OtherData;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryOtherData.data)
  return data_;
}
inline ::Cmd::OtherData* QueryOtherData::release_data() {
  clear_has_data();
  ::Cmd::OtherData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QueryOtherData::set_allocated_data(::Cmd::OtherData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryOtherData.data)
}

// -------------------------------------------------------------------

// QueryWantedInfoQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QueryWantedInfoQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryWantedInfoQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryWantedInfoQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryWantedInfoQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QueryWantedInfoQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWantedInfoQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryWantedInfoQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryWantedInfoQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERYWANTEDINFO];
inline bool QueryWantedInfoQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryWantedInfoQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryWantedInfoQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryWantedInfoQuestCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::QuestParam QueryWantedInfoQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWantedInfoQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QueryWantedInfoQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryWantedInfoQuestCmd.param)
}

// optional uint32 maxcount = 3 [default = 0];
inline bool QueryWantedInfoQuestCmd::has_maxcount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryWantedInfoQuestCmd::set_has_maxcount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryWantedInfoQuestCmd::clear_has_maxcount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryWantedInfoQuestCmd::clear_maxcount() {
  maxcount_ = 0u;
  clear_has_maxcount();
}
inline ::google::protobuf::uint32 QueryWantedInfoQuestCmd::maxcount() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWantedInfoQuestCmd.maxcount)
  return maxcount_;
}
inline void QueryWantedInfoQuestCmd::set_maxcount(::google::protobuf::uint32 value) {
  set_has_maxcount();
  maxcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryWantedInfoQuestCmd.maxcount)
}

// -------------------------------------------------------------------

// InviteHelpAcceptQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool InviteHelpAcceptQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteHelpAcceptQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command InviteHelpAcceptQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteHelpAcceptQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_INVITE];
inline bool InviteHelpAcceptQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteHelpAcceptQuestCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::QuestParam InviteHelpAcceptQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void InviteHelpAcceptQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.param)
}

// optional uint64 leaderid = 3 [default = 0];
inline bool InviteHelpAcceptQuestCmd::has_leaderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_leaderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteHelpAcceptQuestCmd::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 InviteHelpAcceptQuestCmd::leaderid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.leaderid)
  return leaderid_;
}
inline void InviteHelpAcceptQuestCmd::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.leaderid)
}

// optional uint32 questid = 4 [default = 0];
inline bool InviteHelpAcceptQuestCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteHelpAcceptQuestCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 InviteHelpAcceptQuestCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.questid)
  return questid_;
}
inline void InviteHelpAcceptQuestCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.questid)
}

// optional uint32 time = 5 [default = 0];
inline bool InviteHelpAcceptQuestCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InviteHelpAcceptQuestCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 InviteHelpAcceptQuestCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.time)
  return time_;
}
inline void InviteHelpAcceptQuestCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.time)
}

// optional bytes sign = 6;
inline bool InviteHelpAcceptQuestCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InviteHelpAcceptQuestCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& InviteHelpAcceptQuestCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.sign)
  return *sign_;
}
inline void InviteHelpAcceptQuestCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.sign)
}
inline void InviteHelpAcceptQuestCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteHelpAcceptQuestCmd.sign)
}
inline void InviteHelpAcceptQuestCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteHelpAcceptQuestCmd.sign)
}
inline ::std::string* InviteHelpAcceptQuestCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteHelpAcceptQuestCmd.sign)
  return sign_;
}
inline ::std::string* InviteHelpAcceptQuestCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteHelpAcceptQuestCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteHelpAcceptQuestCmd.sign)
}

// optional string leadername = 7;
inline bool InviteHelpAcceptQuestCmd::has_leadername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_leadername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InviteHelpAcceptQuestCmd::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& InviteHelpAcceptQuestCmd::leadername() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.leadername)
  return *leadername_;
}
inline void InviteHelpAcceptQuestCmd::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.leadername)
}
inline void InviteHelpAcceptQuestCmd::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteHelpAcceptQuestCmd.leadername)
}
inline void InviteHelpAcceptQuestCmd::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteHelpAcceptQuestCmd.leadername)
}
inline ::std::string* InviteHelpAcceptQuestCmd::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteHelpAcceptQuestCmd.leadername)
  return leadername_;
}
inline ::std::string* InviteHelpAcceptQuestCmd::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteHelpAcceptQuestCmd::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteHelpAcceptQuestCmd.leadername)
}

// optional bool issubmit = 8 [default = false];
inline bool InviteHelpAcceptQuestCmd::has_issubmit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InviteHelpAcceptQuestCmd::set_has_issubmit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InviteHelpAcceptQuestCmd::clear_has_issubmit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InviteHelpAcceptQuestCmd::clear_issubmit() {
  issubmit_ = false;
  clear_has_issubmit();
}
inline bool InviteHelpAcceptQuestCmd::issubmit() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteHelpAcceptQuestCmd.issubmit)
  return issubmit_;
}
inline void InviteHelpAcceptQuestCmd::set_issubmit(bool value) {
  set_has_issubmit();
  issubmit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteHelpAcceptQuestCmd.issubmit)
}

// -------------------------------------------------------------------

// InviteAcceptQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool InviteAcceptQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteAcceptQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteAcceptQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command InviteAcceptQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteAcceptQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_INVITE_ACCEPT_QUEST];
inline bool InviteAcceptQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteAcceptQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteAcceptQuestCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::QuestParam InviteAcceptQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void InviteAcceptQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.param)
}

// optional uint64 leaderid = 3 [default = 0];
inline bool InviteAcceptQuestCmd::has_leaderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_leaderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteAcceptQuestCmd::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteAcceptQuestCmd::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 InviteAcceptQuestCmd::leaderid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.leaderid)
  return leaderid_;
}
inline void InviteAcceptQuestCmd::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.leaderid)
}

// optional uint32 questid = 4 [default = 0];
inline bool InviteAcceptQuestCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteAcceptQuestCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteAcceptQuestCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 InviteAcceptQuestCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.questid)
  return questid_;
}
inline void InviteAcceptQuestCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.questid)
}

// optional uint32 time = 5 [default = 0];
inline bool InviteAcceptQuestCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InviteAcceptQuestCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InviteAcceptQuestCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 InviteAcceptQuestCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.time)
  return time_;
}
inline void InviteAcceptQuestCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.time)
}

// optional bytes sign = 6;
inline bool InviteAcceptQuestCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void InviteAcceptQuestCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void InviteAcceptQuestCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& InviteAcceptQuestCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.sign)
  return *sign_;
}
inline void InviteAcceptQuestCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.sign)
}
inline void InviteAcceptQuestCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteAcceptQuestCmd.sign)
}
inline void InviteAcceptQuestCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteAcceptQuestCmd.sign)
}
inline ::std::string* InviteAcceptQuestCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteAcceptQuestCmd.sign)
  return sign_;
}
inline ::std::string* InviteAcceptQuestCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteAcceptQuestCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteAcceptQuestCmd.sign)
}

// optional string leadername = 7;
inline bool InviteAcceptQuestCmd::has_leadername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_leadername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void InviteAcceptQuestCmd::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void InviteAcceptQuestCmd::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& InviteAcceptQuestCmd::leadername() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.leadername)
  return *leadername_;
}
inline void InviteAcceptQuestCmd::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.leadername)
}
inline void InviteAcceptQuestCmd::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteAcceptQuestCmd.leadername)
}
inline void InviteAcceptQuestCmd::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteAcceptQuestCmd.leadername)
}
inline ::std::string* InviteAcceptQuestCmd::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteAcceptQuestCmd.leadername)
  return leadername_;
}
inline ::std::string* InviteAcceptQuestCmd::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteAcceptQuestCmd::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteAcceptQuestCmd.leadername)
}

// optional bool issubmit = 8 [default = false];
inline bool InviteAcceptQuestCmd::has_issubmit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_issubmit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void InviteAcceptQuestCmd::clear_has_issubmit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void InviteAcceptQuestCmd::clear_issubmit() {
  issubmit_ = false;
  clear_has_issubmit();
}
inline bool InviteAcceptQuestCmd::issubmit() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.issubmit)
  return issubmit_;
}
inline void InviteAcceptQuestCmd::set_issubmit(bool value) {
  set_has_issubmit();
  issubmit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.issubmit)
}

// optional bool isquickfinish = 9 [default = false];
inline bool InviteAcceptQuestCmd::has_isquickfinish() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void InviteAcceptQuestCmd::set_has_isquickfinish() {
  _has_bits_[0] |= 0x00000100u;
}
inline void InviteAcceptQuestCmd::clear_has_isquickfinish() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void InviteAcceptQuestCmd::clear_isquickfinish() {
  isquickfinish_ = false;
  clear_has_isquickfinish();
}
inline bool InviteAcceptQuestCmd::isquickfinish() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteAcceptQuestCmd.isquickfinish)
  return isquickfinish_;
}
inline void InviteAcceptQuestCmd::set_isquickfinish(bool value) {
  set_has_isquickfinish();
  isquickfinish_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteAcceptQuestCmd.isquickfinish)
}

// -------------------------------------------------------------------

// ReplyHelpAccelpQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool ReplyHelpAccelpQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyHelpAccelpQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command ReplyHelpAccelpQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReplyHelpAccelpQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_ACCEPT_AGREE];
inline bool ReplyHelpAccelpQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyHelpAccelpQuestCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::QuestParam ReplyHelpAccelpQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void ReplyHelpAccelpQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.param)
}

// optional uint64 leaderid = 3 [default = 0];
inline bool ReplyHelpAccelpQuestCmd::has_leaderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_leaderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_leaderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyHelpAccelpQuestCmd::clear_leaderid() {
  leaderid_ = GOOGLE_ULONGLONG(0);
  clear_has_leaderid();
}
inline ::google::protobuf::uint64 ReplyHelpAccelpQuestCmd::leaderid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.leaderid)
  return leaderid_;
}
inline void ReplyHelpAccelpQuestCmd::set_leaderid(::google::protobuf::uint64 value) {
  set_has_leaderid();
  leaderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.leaderid)
}

// optional uint32 questid = 4 [default = 0];
inline bool ReplyHelpAccelpQuestCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyHelpAccelpQuestCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 ReplyHelpAccelpQuestCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.questid)
  return questid_;
}
inline void ReplyHelpAccelpQuestCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.questid)
}

// optional uint32 time = 5 [default = 0];
inline bool ReplyHelpAccelpQuestCmd::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplyHelpAccelpQuestCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ReplyHelpAccelpQuestCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.time)
  return time_;
}
inline void ReplyHelpAccelpQuestCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.time)
}

// optional bytes sign = 6;
inline bool ReplyHelpAccelpQuestCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplyHelpAccelpQuestCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ReplyHelpAccelpQuestCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.sign)
  return *sign_;
}
inline void ReplyHelpAccelpQuestCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.sign)
}
inline void ReplyHelpAccelpQuestCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReplyHelpAccelpQuestCmd.sign)
}
inline void ReplyHelpAccelpQuestCmd::set_sign(const void* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReplyHelpAccelpQuestCmd.sign)
}
inline ::std::string* ReplyHelpAccelpQuestCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReplyHelpAccelpQuestCmd.sign)
  return sign_;
}
inline ::std::string* ReplyHelpAccelpQuestCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyHelpAccelpQuestCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReplyHelpAccelpQuestCmd.sign)
}

// optional bool agree = 7 [default = false];
inline bool ReplyHelpAccelpQuestCmd::has_agree() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_agree() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_agree() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplyHelpAccelpQuestCmd::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool ReplyHelpAccelpQuestCmd::agree() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.agree)
  return agree_;
}
inline void ReplyHelpAccelpQuestCmd::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.agree)
}

// optional bool issubmit = 8 [default = false];
inline bool ReplyHelpAccelpQuestCmd::has_issubmit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReplyHelpAccelpQuestCmd::set_has_issubmit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReplyHelpAccelpQuestCmd::clear_has_issubmit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReplyHelpAccelpQuestCmd::clear_issubmit() {
  issubmit_ = false;
  clear_has_issubmit();
}
inline bool ReplyHelpAccelpQuestCmd::issubmit() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyHelpAccelpQuestCmd.issubmit)
  return issubmit_;
}
inline void ReplyHelpAccelpQuestCmd::set_issubmit(bool value) {
  set_has_issubmit();
  issubmit_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyHelpAccelpQuestCmd.issubmit)
}

// -------------------------------------------------------------------

// WorldQuest

// optional uint32 mapid = 1 [default = 0];
inline bool WorldQuest::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldQuest::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldQuest::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldQuest::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 WorldQuest::mapid() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldQuest.mapid)
  return mapid_;
}
inline void WorldQuest::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldQuest.mapid)
}

// optional bool type_main = 2 [default = false];
inline bool WorldQuest::has_type_main() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldQuest::set_has_type_main() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldQuest::clear_has_type_main() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldQuest::clear_type_main() {
  type_main_ = false;
  clear_has_type_main();
}
inline bool WorldQuest::type_main() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldQuest.type_main)
  return type_main_;
}
inline void WorldQuest::set_type_main(bool value) {
  set_has_type_main();
  type_main_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldQuest.type_main)
}

// optional bool type_branch = 3 [default = false];
inline bool WorldQuest::has_type_branch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldQuest::set_has_type_branch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldQuest::clear_has_type_branch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldQuest::clear_type_branch() {
  type_branch_ = false;
  clear_has_type_branch();
}
inline bool WorldQuest::type_branch() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldQuest.type_branch)
  return type_branch_;
}
inline void WorldQuest::set_type_branch(bool value) {
  set_has_type_branch();
  type_branch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldQuest.type_branch)
}

// optional bool type_daily = 4 [default = false];
inline bool WorldQuest::has_type_daily() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldQuest::set_has_type_daily() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldQuest::clear_has_type_daily() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldQuest::clear_type_daily() {
  type_daily_ = false;
  clear_has_type_daily();
}
inline bool WorldQuest::type_daily() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldQuest.type_daily)
  return type_daily_;
}
inline void WorldQuest::set_type_daily(bool value) {
  set_has_type_daily();
  type_daily_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldQuest.type_daily)
}

// -------------------------------------------------------------------

// QueryWorldQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QueryWorldQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryWorldQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryWorldQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryWorldQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QueryWorldQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWorldQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryWorldQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryWorldQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_WORLD_QUEST];
inline bool QueryWorldQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryWorldQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryWorldQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryWorldQuestCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::QuestParam QueryWorldQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWorldQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QueryWorldQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryWorldQuestCmd.param)
}

// repeated .Cmd.WorldQuest quests = 3;
inline int QueryWorldQuestCmd::quests_size() const {
  return quests_.size();
}
inline void QueryWorldQuestCmd::clear_quests() {
  quests_.Clear();
}
inline const ::Cmd::WorldQuest& QueryWorldQuestCmd::quests(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryWorldQuestCmd.quests)
  return quests_.Get(index);
}
inline ::Cmd::WorldQuest* QueryWorldQuestCmd::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryWorldQuestCmd.quests)
  return quests_.Mutable(index);
}
inline ::Cmd::WorldQuest* QueryWorldQuestCmd::add_quests() {
  // @@protoc_insertion_point(field_add:Cmd.QueryWorldQuestCmd.quests)
  return quests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WorldQuest >&
QueryWorldQuestCmd::quests() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryWorldQuestCmd.quests)
  return quests_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WorldQuest >*
QueryWorldQuestCmd::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryWorldQuestCmd.quests)
  return &quests_;
}

// -------------------------------------------------------------------

// QuestGroupTraceQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QuestGroupTraceQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestGroupTraceQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestGroupTraceQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestGroupTraceQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QuestGroupTraceQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestGroupTraceQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestGroupTraceQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestGroupTraceQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUESTGROUP_TRACE];
inline bool QuestGroupTraceQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestGroupTraceQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestGroupTraceQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestGroupTraceQuestCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::QuestParam QuestGroupTraceQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestGroupTraceQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QuestGroupTraceQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestGroupTraceQuestCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool QuestGroupTraceQuestCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestGroupTraceQuestCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestGroupTraceQuestCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestGroupTraceQuestCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 QuestGroupTraceQuestCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestGroupTraceQuestCmd.id)
  return id_;
}
inline void QuestGroupTraceQuestCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestGroupTraceQuestCmd.id)
}

// optional bool trace = 4 [default = false];
inline bool QuestGroupTraceQuestCmd::has_trace() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QuestGroupTraceQuestCmd::set_has_trace() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QuestGroupTraceQuestCmd::clear_has_trace() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QuestGroupTraceQuestCmd::clear_trace() {
  trace_ = false;
  clear_has_trace();
}
inline bool QuestGroupTraceQuestCmd::trace() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestGroupTraceQuestCmd.trace)
  return trace_;
}
inline void QuestGroupTraceQuestCmd::set_trace(bool value) {
  set_has_trace();
  trace_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestGroupTraceQuestCmd.trace)
}

// -------------------------------------------------------------------

// HelpQuickFinishBoardQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool HelpQuickFinishBoardQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HelpQuickFinishBoardQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command HelpQuickFinishBoardQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HelpQuickFinishBoardQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HelpQuickFinishBoardQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HelpQuickFinishBoardQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_HELP_QUICK_FINISH_BOARD];
inline bool HelpQuickFinishBoardQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HelpQuickFinishBoardQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::QuestParam HelpQuickFinishBoardQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HelpQuickFinishBoardQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void HelpQuickFinishBoardQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HelpQuickFinishBoardQuestCmd.param)
}

// optional uint32 questid = 3 [default = 0];
inline bool HelpQuickFinishBoardQuestCmd::has_questid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HelpQuickFinishBoardQuestCmd::set_has_questid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_has_questid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_questid() {
  questid_ = 0u;
  clear_has_questid();
}
inline ::google::protobuf::uint32 HelpQuickFinishBoardQuestCmd::questid() const {
  // @@protoc_insertion_point(field_get:Cmd.HelpQuickFinishBoardQuestCmd.questid)
  return questid_;
}
inline void HelpQuickFinishBoardQuestCmd::set_questid(::google::protobuf::uint32 value) {
  set_has_questid();
  questid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HelpQuickFinishBoardQuestCmd.questid)
}

// optional string leadername = 4;
inline bool HelpQuickFinishBoardQuestCmd::has_leadername() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HelpQuickFinishBoardQuestCmd::set_has_leadername() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_has_leadername() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HelpQuickFinishBoardQuestCmd::clear_leadername() {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_->clear();
  }
  clear_has_leadername();
}
inline const ::std::string& HelpQuickFinishBoardQuestCmd::leadername() const {
  // @@protoc_insertion_point(field_get:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
  return *leadername_;
}
inline void HelpQuickFinishBoardQuestCmd::set_leadername(const ::std::string& value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
}
inline void HelpQuickFinishBoardQuestCmd::set_leadername(const char* value) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
}
inline void HelpQuickFinishBoardQuestCmd::set_leadername(const char* value, size_t size) {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  leadername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
}
inline ::std::string* HelpQuickFinishBoardQuestCmd::mutable_leadername() {
  set_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    leadername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
  return leadername_;
}
inline ::std::string* HelpQuickFinishBoardQuestCmd::release_leadername() {
  clear_has_leadername();
  if (leadername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = leadername_;
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void HelpQuickFinishBoardQuestCmd::set_allocated_leadername(::std::string* leadername) {
  if (leadername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete leadername_;
  }
  if (leadername) {
    set_has_leadername();
    leadername_ = leadername;
  } else {
    clear_has_leadername();
    leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.HelpQuickFinishBoardQuestCmd.leadername)
}

// -------------------------------------------------------------------

// QueryManualQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool QueryManualQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryManualQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryManualQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryManualQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command QueryManualQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryManualQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryManualQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryManualQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_QUERY_MANUAL];
inline bool QueryManualQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryManualQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryManualQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryManualQuestCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::QuestParam QueryManualQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryManualQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void QueryManualQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryManualQuestCmd.param)
}

// optional string version = 3;
inline bool QueryManualQuestCmd::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryManualQuestCmd::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryManualQuestCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryManualQuestCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& QueryManualQuestCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryManualQuestCmd.version)
  return *version_;
}
inline void QueryManualQuestCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryManualQuestCmd.version)
}
inline void QueryManualQuestCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryManualQuestCmd.version)
}
inline void QueryManualQuestCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryManualQuestCmd.version)
}
inline ::std::string* QueryManualQuestCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryManualQuestCmd.version)
  return version_;
}
inline ::std::string* QueryManualQuestCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryManualQuestCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryManualQuestCmd.version)
}

// optional .Cmd.QuestManual manual = 4;
inline bool QueryManualQuestCmd::has_manual() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryManualQuestCmd::set_has_manual() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryManualQuestCmd::clear_has_manual() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryManualQuestCmd::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::QuestManual::Clear();
  clear_has_manual();
}
inline const ::Cmd::QuestManual& QueryManualQuestCmd::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryManualQuestCmd.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::QuestManual* QueryManualQuestCmd::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::QuestManual;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryManualQuestCmd.manual)
  return manual_;
}
inline ::Cmd::QuestManual* QueryManualQuestCmd::release_manual() {
  clear_has_manual();
  ::Cmd::QuestManual* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void QueryManualQuestCmd::set_allocated_manual(::Cmd::QuestManual* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryManualQuestCmd.manual)
}

// -------------------------------------------------------------------

// OpenPuzzleQuestCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_QUEST_PROTOCMD];
inline bool OpenPuzzleQuestCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenPuzzleQuestCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenPuzzleQuestCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenPuzzleQuestCmd::clear_cmd() {
  cmd_ = 8;
  clear_has_cmd();
}
inline ::Cmd::Command OpenPuzzleQuestCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenPuzzleQuestCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OpenPuzzleQuestCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenPuzzleQuestCmd.cmd)
}

// optional .Cmd.QuestParam param = 2 [default = QUESTPARAM_OPEN_PUZZLE];
inline bool OpenPuzzleQuestCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenPuzzleQuestCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenPuzzleQuestCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenPuzzleQuestCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::QuestParam OpenPuzzleQuestCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenPuzzleQuestCmd.param)
  return static_cast< ::Cmd::QuestParam >(param_);
}
inline void OpenPuzzleQuestCmd::set_param(::Cmd::QuestParam value) {
  assert(::Cmd::QuestParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenPuzzleQuestCmd.param)
}

// optional string version = 3;
inline bool OpenPuzzleQuestCmd::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenPuzzleQuestCmd::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenPuzzleQuestCmd::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenPuzzleQuestCmd::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& OpenPuzzleQuestCmd::version() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenPuzzleQuestCmd.version)
  return *version_;
}
inline void OpenPuzzleQuestCmd::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OpenPuzzleQuestCmd.version)
}
inline void OpenPuzzleQuestCmd::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OpenPuzzleQuestCmd.version)
}
inline void OpenPuzzleQuestCmd::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OpenPuzzleQuestCmd.version)
}
inline ::std::string* OpenPuzzleQuestCmd::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OpenPuzzleQuestCmd.version)
  return version_;
}
inline ::std::string* OpenPuzzleQuestCmd::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OpenPuzzleQuestCmd::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OpenPuzzleQuestCmd.version)
}

// optional uint32 id = 4 [default = 0];
inline bool OpenPuzzleQuestCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OpenPuzzleQuestCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OpenPuzzleQuestCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OpenPuzzleQuestCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 OpenPuzzleQuestCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenPuzzleQuestCmd.id)
  return id_;
}
inline void OpenPuzzleQuestCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenPuzzleQuestCmd.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::QuestParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::QuestParam>() {
  return ::Cmd::QuestParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EWantedType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EWantedType>() {
  return ::Cmd::EWantedType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuestType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuestType>() {
  return ::Cmd::EQuestType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuestStep> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuestStep>() {
  return ::Cmd::EQuestStep_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuestList> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuestList>() {
  return ::Cmd::EQuestList_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EQuestAction> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EQuestAction>() {
  return ::Cmd::EQuestAction_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EOtherData> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EOtherData>() {
  return ::Cmd::EOtherData_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EJoyActivityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EJoyActivityType>() {
  return ::Cmd::EJoyActivityType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneQuest_2eproto__INCLUDED
