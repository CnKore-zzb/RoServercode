// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SystemCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* IpPort_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IpPort_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeartBeatSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeatSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* VerifyConnSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VerifyConnSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerListSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerListSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerListSystemCmd_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerListSystemCmd_Item_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerInitOkConnSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerInitOkConnSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerTimeSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerTimeSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistRegionSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistRegionSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonReloadSystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonReloadSystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InfoProxySystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InfoProxySystemCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegistProxySystemCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegistProxySystemCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SystemParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EComLoadType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SystemCmd_2eproto() {
  protobuf_AddDesc_SystemCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SystemCmd.proto");
  GOOGLE_CHECK(file != NULL);
  IpPort_descriptor_ = file->message_type(0);
  static const int IpPort_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPort, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPort, port_),
  };
  IpPort_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IpPort_descriptor_,
      IpPort::default_instance_,
      IpPort_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPort, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IpPort, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IpPort));
  HeartBeatSystemCmd_descriptor_ = file->message_type(1);
  static const int HeartBeatSystemCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSystemCmd, param_),
  };
  HeartBeatSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeartBeatSystemCmd_descriptor_,
      HeartBeatSystemCmd::default_instance_,
      HeartBeatSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeatSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeartBeatSystemCmd));
  VerifyConnSystemCmd_descriptor_ = file->message_type(2);
  static const int VerifyConnSystemCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, ret_),
  };
  VerifyConnSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VerifyConnSystemCmd_descriptor_,
      VerifyConnSystemCmd::default_instance_,
      VerifyConnSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VerifyConnSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VerifyConnSystemCmd));
  ServerListSystemCmd_descriptor_ = file->message_type(3);
  static const int ServerListSystemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd, list_),
  };
  ServerListSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerListSystemCmd_descriptor_,
      ServerListSystemCmd::default_instance_,
      ServerListSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerListSystemCmd));
  ServerListSystemCmd_Item_descriptor_ = ServerListSystemCmd_descriptor_->nested_type(0);
  static const int ServerListSystemCmd_Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, port_),
  };
  ServerListSystemCmd_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerListSystemCmd_Item_descriptor_,
      ServerListSystemCmd_Item::default_instance_,
      ServerListSystemCmd_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerListSystemCmd_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerListSystemCmd_Item));
  ServerInitOkConnSystemCmd_descriptor_ = file->message_type(4);
  static const int ServerInitOkConnSystemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInitOkConnSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInitOkConnSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInitOkConnSystemCmd, name_),
  };
  ServerInitOkConnSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerInitOkConnSystemCmd_descriptor_,
      ServerInitOkConnSystemCmd::default_instance_,
      ServerInitOkConnSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInitOkConnSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerInitOkConnSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerInitOkConnSystemCmd));
  ServerTimeSystemCmd_descriptor_ = file->message_type(5);
  static const int ServerTimeSystemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeSystemCmd, adjust_),
  };
  ServerTimeSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerTimeSystemCmd_descriptor_,
      ServerTimeSystemCmd::default_instance_,
      ServerTimeSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerTimeSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerTimeSystemCmd));
  RegistRegionSystemCmd_descriptor_ = file->message_type(6);
  static const int RegistRegionSystemCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, regiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, client_),
  };
  RegistRegionSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistRegionSystemCmd_descriptor_,
      RegistRegionSystemCmd::default_instance_,
      RegistRegionSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistRegionSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistRegionSystemCmd));
  CommonReloadSystemCmd_descriptor_ = file->message_type(7);
  static const int CommonReloadSystemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReloadSystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReloadSystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReloadSystemCmd, type_),
  };
  CommonReloadSystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonReloadSystemCmd_descriptor_,
      CommonReloadSystemCmd::default_instance_,
      CommonReloadSystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReloadSystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonReloadSystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonReloadSystemCmd));
  InfoProxySystemCmd_descriptor_ = file->message_type(8);
  static const int InfoProxySystemCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, proxyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, tasknum_),
  };
  InfoProxySystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InfoProxySystemCmd_descriptor_,
      InfoProxySystemCmd::default_instance_,
      InfoProxySystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InfoProxySystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InfoProxySystemCmd));
  RegistProxySystemCmd_descriptor_ = file->message_type(9);
  static const int RegistProxySystemCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistProxySystemCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistProxySystemCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistProxySystemCmd, proxyid_),
  };
  RegistProxySystemCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegistProxySystemCmd_descriptor_,
      RegistProxySystemCmd::default_instance_,
      RegistProxySystemCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistProxySystemCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegistProxySystemCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegistProxySystemCmd));
  SystemParam_descriptor_ = file->enum_type(0);
  EComLoadType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SystemCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IpPort_descriptor_, &IpPort::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeartBeatSystemCmd_descriptor_, &HeartBeatSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VerifyConnSystemCmd_descriptor_, &VerifyConnSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerListSystemCmd_descriptor_, &ServerListSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerListSystemCmd_Item_descriptor_, &ServerListSystemCmd_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerInitOkConnSystemCmd_descriptor_, &ServerInitOkConnSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerTimeSystemCmd_descriptor_, &ServerTimeSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistRegionSystemCmd_descriptor_, &RegistRegionSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonReloadSystemCmd_descriptor_, &CommonReloadSystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InfoProxySystemCmd_descriptor_, &InfoProxySystemCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegistProxySystemCmd_descriptor_, &RegistProxySystemCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SystemCmd_2eproto() {
  delete IpPort::default_instance_;
  delete IpPort_reflection_;
  delete HeartBeatSystemCmd::default_instance_;
  delete HeartBeatSystemCmd_reflection_;
  delete VerifyConnSystemCmd::default_instance_;
  delete VerifyConnSystemCmd_reflection_;
  delete ServerListSystemCmd::default_instance_;
  delete ServerListSystemCmd_reflection_;
  delete ServerListSystemCmd_Item::default_instance_;
  delete ServerListSystemCmd_Item_reflection_;
  delete ServerInitOkConnSystemCmd::default_instance_;
  delete ServerInitOkConnSystemCmd_reflection_;
  delete ServerTimeSystemCmd::default_instance_;
  delete ServerTimeSystemCmd_reflection_;
  delete RegistRegionSystemCmd::default_instance_;
  delete RegistRegionSystemCmd_reflection_;
  delete CommonReloadSystemCmd::default_instance_;
  delete CommonReloadSystemCmd_reflection_;
  delete InfoProxySystemCmd::default_instance_;
  delete InfoProxySystemCmd_reflection_;
  delete RegistProxySystemCmd::default_instance_;
  delete RegistProxySystemCmd_reflection_;
}

void protobuf_AddDesc_SystemCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SystemCmd.proto\022\003Cmd\032\nxCmd.proto\"\"\n\006Ip"
    "Port\022\n\n\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\r\"t\n\022HeartB"
    "eatSystemCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017SYSTEM_PROTOCMD\0222\n\005param\030\002 \001(\0162\020.Cmd.Sy"
    "stemParam:\021HEART_BEAT_SYSCMD\"\237\001\n\023VerifyC"
    "onnSystemCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017SYSTEM_PROTOCMD\0223\n\005param\030\002 \001(\0162\020.Cmd.Sy"
    "stemParam:\022VERIFY_CONN_SYSCMD\022\014\n\004type\030\003 "
    "\001(\t\022\014\n\004name\030\004 \001(\t\022\013\n\003ret\030\005 \001(\010\"\341\001\n\023Serve"
    "rListSystemCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\017SYSTEM_PROTOCMD\0223\n\005param\030\002 \001(\0162\020.Cmd."
    "SystemParam:\022SERVER_LIST_SYSCMD\022+\n\004list\030"
    "\003 \003(\0132\035.Cmd.ServerListSystemCmd.Item\032<\n\004"
    "Item\022\014\n\004type\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\n\n\002ip\030\003"
    " \001(\t\022\014\n\004port\030\004 \001(\r\"\215\001\n\031ServerInitOkConnS"
    "ystemCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SYS"
    "TEM_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.System"
    "Param:\025SERVER_INIT_OK_SYSCMD\022\014\n\004name\030\003 \001"
    "(\t\"\206\001\n\023ServerTimeSystemCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017SYSTEM_PROTOCMD\0223\n\005param\030"
    "\002 \001(\0162\020.Cmd.SystemParam:\022SERVER_TIME_SYS"
    "CMD\022\016\n\006adjust\030\003 \001(\r\"\302\001\n\025RegistRegionSyst"
    "emCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SYSTEM"
    "_PROTOCMD\0225\n\005param\030\002 \001(\0162\020.Cmd.SystemPar"
    "am:\024REGIST_REGION_SYSCMD\022\016\n\006zoneid\030\003 \001(\r"
    "\022\022\n\nregiontype\030\004 \001(\r\022\022\n\nservertype\030\005 \001(\r"
    "\022\016\n\006client\030\006 \001(\r\"\233\001\n\025CommonReloadSystemC"
    "md\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SYSTEM_PR"
    "OTOCMD\0225\n\005param\030\002 \001(\0162\020.Cmd.SystemParam:"
    "\024COMMON_RELOAD_SYSCMD\022\037\n\004type\030\003 \001(\0162\021.Cm"
    "d.EComLoadType\"\226\001\n\022InfoProxySystemCmd\022*\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SYSTEM_PROTOCM"
    "D\0222\n\005param\030\002 \001(\0162\020.Cmd.SystemParam:\021INFO"
    "_PROXY_SYSCMD\022\017\n\007proxyid\030\003 \001(\t\022\017\n\007tasknu"
    "m\030\004 \001(\r\"\211\001\n\024RegistProxySystemCmd\022*\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\017SYSTEM_PROTOCMD\0224\n\005"
    "param\030\002 \001(\0162\020.Cmd.SystemParam:\023REGIST_PR"
    "OXY_SYSCMD\022\017\n\007proxyid\030\003 \001(\t*\353\001\n\013SystemPa"
    "ram\022\025\n\021HEART_BEAT_SYSCMD\020\001\022\026\n\022VERIFY_CON"
    "N_SYSCMD\020\002\022\026\n\022SERVER_LIST_SYSCMD\020\003\022\031\n\025SE"
    "RVER_INIT_OK_SYSCMD\020\004\022\026\n\022SERVER_TIME_SYS"
    "CMD\020\005\022\030\n\024REGIST_REGION_SYSCMD\020\006\022\030\n\024COMMO"
    "N_RELOAD_SYSCMD\020\007\022\025\n\021INFO_PROXY_SYSCMD\020\010"
    "\022\027\n\023REGIST_PROXY_SYSCMD\020\t*o\n\014EComLoadTyp"
    "e\022\025\n\021EComLoadType_None\020\000\022\024\n\020EComLoadType"
    "_Lua\020\001\022\035\n\031EComLoadType_BranchConfig\020\002\022\023\n"
    "\017EComLoadType_Db\020\003", 1858);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SystemCmd.proto", &protobuf_RegisterTypes);
  IpPort::default_instance_ = new IpPort();
  HeartBeatSystemCmd::default_instance_ = new HeartBeatSystemCmd();
  VerifyConnSystemCmd::default_instance_ = new VerifyConnSystemCmd();
  ServerListSystemCmd::default_instance_ = new ServerListSystemCmd();
  ServerListSystemCmd_Item::default_instance_ = new ServerListSystemCmd_Item();
  ServerInitOkConnSystemCmd::default_instance_ = new ServerInitOkConnSystemCmd();
  ServerTimeSystemCmd::default_instance_ = new ServerTimeSystemCmd();
  RegistRegionSystemCmd::default_instance_ = new RegistRegionSystemCmd();
  CommonReloadSystemCmd::default_instance_ = new CommonReloadSystemCmd();
  InfoProxySystemCmd::default_instance_ = new InfoProxySystemCmd();
  RegistProxySystemCmd::default_instance_ = new RegistProxySystemCmd();
  IpPort::default_instance_->InitAsDefaultInstance();
  HeartBeatSystemCmd::default_instance_->InitAsDefaultInstance();
  VerifyConnSystemCmd::default_instance_->InitAsDefaultInstance();
  ServerListSystemCmd::default_instance_->InitAsDefaultInstance();
  ServerListSystemCmd_Item::default_instance_->InitAsDefaultInstance();
  ServerInitOkConnSystemCmd::default_instance_->InitAsDefaultInstance();
  ServerTimeSystemCmd::default_instance_->InitAsDefaultInstance();
  RegistRegionSystemCmd::default_instance_->InitAsDefaultInstance();
  CommonReloadSystemCmd::default_instance_->InitAsDefaultInstance();
  InfoProxySystemCmd::default_instance_->InitAsDefaultInstance();
  RegistProxySystemCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SystemCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SystemCmd_2eproto {
  StaticDescriptorInitializer_SystemCmd_2eproto() {
    protobuf_AddDesc_SystemCmd_2eproto();
  }
} static_descriptor_initializer_SystemCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* SystemParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemParam_descriptor_;
}
bool SystemParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EComLoadType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EComLoadType_descriptor_;
}
bool EComLoadType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int IpPort::kIpFieldNumber;
const int IpPort::kPortFieldNumber;
#endif  // !_MSC_VER

IpPort::IpPort()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.IpPort)
}

void IpPort::InitAsDefaultInstance() {
}

IpPort::IpPort(const IpPort& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.IpPort)
}

void IpPort::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IpPort::~IpPort() {
  // @@protoc_insertion_point(destructor:Cmd.IpPort)
  SharedDtor();
}

void IpPort::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void IpPort::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IpPort::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IpPort_descriptor_;
}

const IpPort& IpPort::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

IpPort* IpPort::default_instance_ = NULL;

IpPort* IpPort::New() const {
  return new IpPort;
}

void IpPort::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IpPort::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.IpPort)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.IpPort)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.IpPort)
  return false;
#undef DO_
}

void IpPort::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.IpPort)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.IpPort)
}

::google::protobuf::uint8* IpPort::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.IpPort)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.IpPort)
  return target;
}

int IpPort::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IpPort::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IpPort* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IpPort*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IpPort::MergeFrom(const IpPort& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IpPort::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IpPort::CopyFrom(const IpPort& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IpPort::IsInitialized() const {

  return true;
}

void IpPort::Swap(IpPort* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IpPort::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IpPort_descriptor_;
  metadata.reflection = IpPort_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeartBeatSystemCmd::kCmdFieldNumber;
const int HeartBeatSystemCmd::kParamFieldNumber;
#endif  // !_MSC_VER

HeartBeatSystemCmd::HeartBeatSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HeartBeatSystemCmd)
}

void HeartBeatSystemCmd::InitAsDefaultInstance() {
}

HeartBeatSystemCmd::HeartBeatSystemCmd(const HeartBeatSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HeartBeatSystemCmd)
}

void HeartBeatSystemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeatSystemCmd::~HeartBeatSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.HeartBeatSystemCmd)
  SharedDtor();
}

void HeartBeatSystemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeatSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeatSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeatSystemCmd_descriptor_;
}

const HeartBeatSystemCmd& HeartBeatSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

HeartBeatSystemCmd* HeartBeatSystemCmd::default_instance_ = NULL;

HeartBeatSystemCmd* HeartBeatSystemCmd::New() const {
  return new HeartBeatSystemCmd;
}

void HeartBeatSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 255;
    param_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeartBeatSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HeartBeatSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HeartBeatSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HeartBeatSystemCmd)
  return false;
#undef DO_
}

void HeartBeatSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HeartBeatSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HeartBeatSystemCmd)
}

::google::protobuf::uint8* HeartBeatSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HeartBeatSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HeartBeatSystemCmd)
  return target;
}

int HeartBeatSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = HEART_BEAT_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeatSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeartBeatSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeartBeatSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeatSystemCmd::MergeFrom(const HeartBeatSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeartBeatSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeatSystemCmd::CopyFrom(const HeartBeatSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeatSystemCmd::IsInitialized() const {

  return true;
}

void HeartBeatSystemCmd::Swap(HeartBeatSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeartBeatSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeatSystemCmd_descriptor_;
  metadata.reflection = HeartBeatSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VerifyConnSystemCmd::kCmdFieldNumber;
const int VerifyConnSystemCmd::kParamFieldNumber;
const int VerifyConnSystemCmd::kTypeFieldNumber;
const int VerifyConnSystemCmd::kNameFieldNumber;
const int VerifyConnSystemCmd::kRetFieldNumber;
#endif  // !_MSC_VER

VerifyConnSystemCmd::VerifyConnSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.VerifyConnSystemCmd)
}

void VerifyConnSystemCmd::InitAsDefaultInstance() {
}

VerifyConnSystemCmd::VerifyConnSystemCmd(const VerifyConnSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.VerifyConnSystemCmd)
}

void VerifyConnSystemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 2;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VerifyConnSystemCmd::~VerifyConnSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.VerifyConnSystemCmd)
  SharedDtor();
}

void VerifyConnSystemCmd::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void VerifyConnSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VerifyConnSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VerifyConnSystemCmd_descriptor_;
}

const VerifyConnSystemCmd& VerifyConnSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

VerifyConnSystemCmd* VerifyConnSystemCmd::default_instance_ = NULL;

VerifyConnSystemCmd* VerifyConnSystemCmd::New() const {
  return new VerifyConnSystemCmd;
}

void VerifyConnSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 255;
    param_ = 2;
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VerifyConnSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.VerifyConnSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (tag == 26) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional bool ret = 5;
      case 5: {
        if (tag == 40) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.VerifyConnSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.VerifyConnSystemCmd)
  return false;
#undef DO_
}

void VerifyConnSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.VerifyConnSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->type(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.VerifyConnSystemCmd)
}

::google::protobuf::uint8* VerifyConnSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.VerifyConnSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional bool ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.VerifyConnSystemCmd)
  return target;
}

int VerifyConnSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = VERIFY_CONN_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool ret = 5;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VerifyConnSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VerifyConnSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VerifyConnSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VerifyConnSystemCmd::MergeFrom(const VerifyConnSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VerifyConnSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VerifyConnSystemCmd::CopyFrom(const VerifyConnSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VerifyConnSystemCmd::IsInitialized() const {

  return true;
}

void VerifyConnSystemCmd::Swap(VerifyConnSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VerifyConnSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VerifyConnSystemCmd_descriptor_;
  metadata.reflection = VerifyConnSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerListSystemCmd_Item::kTypeFieldNumber;
const int ServerListSystemCmd_Item::kNameFieldNumber;
const int ServerListSystemCmd_Item::kIpFieldNumber;
const int ServerListSystemCmd_Item::kPortFieldNumber;
#endif  // !_MSC_VER

ServerListSystemCmd_Item::ServerListSystemCmd_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerListSystemCmd.Item)
}

void ServerListSystemCmd_Item::InitAsDefaultInstance() {
}

ServerListSystemCmd_Item::ServerListSystemCmd_Item(const ServerListSystemCmd_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerListSystemCmd.Item)
}

void ServerListSystemCmd_Item::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerListSystemCmd_Item::~ServerListSystemCmd_Item() {
  // @@protoc_insertion_point(destructor:Cmd.ServerListSystemCmd.Item)
  SharedDtor();
}

void ServerListSystemCmd_Item::SharedDtor() {
  if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete type_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ServerListSystemCmd_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerListSystemCmd_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerListSystemCmd_Item_descriptor_;
}

const ServerListSystemCmd_Item& ServerListSystemCmd_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

ServerListSystemCmd_Item* ServerListSystemCmd_Item::default_instance_ = NULL;

ServerListSystemCmd_Item* ServerListSystemCmd_Item::New() const {
  return new ServerListSystemCmd_Item;
}

void ServerListSystemCmd_Item::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        type_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerListSystemCmd_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerListSystemCmd.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "type");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (tag == 26) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (tag == 32) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerListSystemCmd.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerListSystemCmd.Item)
  return false;
#undef DO_
}

void ServerListSystemCmd_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerListSystemCmd.Item)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerListSystemCmd.Item)
}

::google::protobuf::uint8* ServerListSystemCmd_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerListSystemCmd.Item)
  // optional string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerListSystemCmd.Item)
  return target;
}

int ServerListSystemCmd_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerListSystemCmd_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerListSystemCmd_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerListSystemCmd_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerListSystemCmd_Item::MergeFrom(const ServerListSystemCmd_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerListSystemCmd_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerListSystemCmd_Item::CopyFrom(const ServerListSystemCmd_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerListSystemCmd_Item::IsInitialized() const {

  return true;
}

void ServerListSystemCmd_Item::Swap(ServerListSystemCmd_Item* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerListSystemCmd_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerListSystemCmd_Item_descriptor_;
  metadata.reflection = ServerListSystemCmd_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ServerListSystemCmd::kCmdFieldNumber;
const int ServerListSystemCmd::kParamFieldNumber;
const int ServerListSystemCmd::kListFieldNumber;
#endif  // !_MSC_VER

ServerListSystemCmd::ServerListSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerListSystemCmd)
}

void ServerListSystemCmd::InitAsDefaultInstance() {
}

ServerListSystemCmd::ServerListSystemCmd(const ServerListSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerListSystemCmd)
}

void ServerListSystemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerListSystemCmd::~ServerListSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ServerListSystemCmd)
  SharedDtor();
}

void ServerListSystemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerListSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerListSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerListSystemCmd_descriptor_;
}

const ServerListSystemCmd& ServerListSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

ServerListSystemCmd* ServerListSystemCmd::default_instance_ = NULL;

ServerListSystemCmd* ServerListSystemCmd::New() const {
  return new ServerListSystemCmd;
}

void ServerListSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 255;
    param_ = 3;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerListSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerListSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .Cmd.ServerListSystemCmd.Item list = 3;
      case 3: {
        if (tag == 26) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerListSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerListSystemCmd)
  return false;
#undef DO_
}

void ServerListSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerListSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ServerListSystemCmd.Item list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerListSystemCmd)
}

::google::protobuf::uint8* ServerListSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerListSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ServerListSystemCmd.Item list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerListSystemCmd)
  return target;
}

int ServerListSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = SERVER_LIST_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ServerListSystemCmd.Item list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerListSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerListSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerListSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerListSystemCmd::MergeFrom(const ServerListSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerListSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerListSystemCmd::CopyFrom(const ServerListSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerListSystemCmd::IsInitialized() const {

  return true;
}

void ServerListSystemCmd::Swap(ServerListSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerListSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerListSystemCmd_descriptor_;
  metadata.reflection = ServerListSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerInitOkConnSystemCmd::kCmdFieldNumber;
const int ServerInitOkConnSystemCmd::kParamFieldNumber;
const int ServerInitOkConnSystemCmd::kNameFieldNumber;
#endif  // !_MSC_VER

ServerInitOkConnSystemCmd::ServerInitOkConnSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerInitOkConnSystemCmd)
}

void ServerInitOkConnSystemCmd::InitAsDefaultInstance() {
}

ServerInitOkConnSystemCmd::ServerInitOkConnSystemCmd(const ServerInitOkConnSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerInitOkConnSystemCmd)
}

void ServerInitOkConnSystemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 4;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerInitOkConnSystemCmd::~ServerInitOkConnSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ServerInitOkConnSystemCmd)
  SharedDtor();
}

void ServerInitOkConnSystemCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ServerInitOkConnSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerInitOkConnSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerInitOkConnSystemCmd_descriptor_;
}

const ServerInitOkConnSystemCmd& ServerInitOkConnSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

ServerInitOkConnSystemCmd* ServerInitOkConnSystemCmd::default_instance_ = NULL;

ServerInitOkConnSystemCmd* ServerInitOkConnSystemCmd::New() const {
  return new ServerInitOkConnSystemCmd;
}

void ServerInitOkConnSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 255;
    param_ = 4;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerInitOkConnSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerInitOkConnSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerInitOkConnSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerInitOkConnSystemCmd)
  return false;
#undef DO_
}

void ServerInitOkConnSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerInitOkConnSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerInitOkConnSystemCmd)
}

::google::protobuf::uint8* ServerInitOkConnSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerInitOkConnSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerInitOkConnSystemCmd)
  return target;
}

int ServerInitOkConnSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = SERVER_INIT_OK_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerInitOkConnSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerInitOkConnSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerInitOkConnSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerInitOkConnSystemCmd::MergeFrom(const ServerInitOkConnSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerInitOkConnSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerInitOkConnSystemCmd::CopyFrom(const ServerInitOkConnSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerInitOkConnSystemCmd::IsInitialized() const {

  return true;
}

void ServerInitOkConnSystemCmd::Swap(ServerInitOkConnSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerInitOkConnSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerInitOkConnSystemCmd_descriptor_;
  metadata.reflection = ServerInitOkConnSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerTimeSystemCmd::kCmdFieldNumber;
const int ServerTimeSystemCmd::kParamFieldNumber;
const int ServerTimeSystemCmd::kAdjustFieldNumber;
#endif  // !_MSC_VER

ServerTimeSystemCmd::ServerTimeSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ServerTimeSystemCmd)
}

void ServerTimeSystemCmd::InitAsDefaultInstance() {
}

ServerTimeSystemCmd::ServerTimeSystemCmd(const ServerTimeSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ServerTimeSystemCmd)
}

void ServerTimeSystemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 5;
  adjust_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerTimeSystemCmd::~ServerTimeSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ServerTimeSystemCmd)
  SharedDtor();
}

void ServerTimeSystemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerTimeSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerTimeSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerTimeSystemCmd_descriptor_;
}

const ServerTimeSystemCmd& ServerTimeSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

ServerTimeSystemCmd* ServerTimeSystemCmd::default_instance_ = NULL;

ServerTimeSystemCmd* ServerTimeSystemCmd::New() const {
  return new ServerTimeSystemCmd;
}

void ServerTimeSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 255;
    param_ = 5;
    adjust_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerTimeSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ServerTimeSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_adjust;
        break;
      }

      // optional uint32 adjust = 3;
      case 3: {
        if (tag == 24) {
         parse_adjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adjust_)));
          set_has_adjust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ServerTimeSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ServerTimeSystemCmd)
  return false;
#undef DO_
}

void ServerTimeSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ServerTimeSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 adjust = 3;
  if (has_adjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->adjust(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ServerTimeSystemCmd)
}

::google::protobuf::uint8* ServerTimeSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ServerTimeSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 adjust = 3;
  if (has_adjust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->adjust(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ServerTimeSystemCmd)
  return target;
}

int ServerTimeSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = SERVER_TIME_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 adjust = 3;
    if (has_adjust()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adjust());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerTimeSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerTimeSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerTimeSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerTimeSystemCmd::MergeFrom(const ServerTimeSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_adjust()) {
      set_adjust(from.adjust());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerTimeSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerTimeSystemCmd::CopyFrom(const ServerTimeSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerTimeSystemCmd::IsInitialized() const {

  return true;
}

void ServerTimeSystemCmd::Swap(ServerTimeSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(adjust_, other->adjust_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerTimeSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerTimeSystemCmd_descriptor_;
  metadata.reflection = ServerTimeSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistRegionSystemCmd::kCmdFieldNumber;
const int RegistRegionSystemCmd::kParamFieldNumber;
const int RegistRegionSystemCmd::kZoneidFieldNumber;
const int RegistRegionSystemCmd::kRegiontypeFieldNumber;
const int RegistRegionSystemCmd::kServertypeFieldNumber;
const int RegistRegionSystemCmd::kClientFieldNumber;
#endif  // !_MSC_VER

RegistRegionSystemCmd::RegistRegionSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegistRegionSystemCmd)
}

void RegistRegionSystemCmd::InitAsDefaultInstance() {
}

RegistRegionSystemCmd::RegistRegionSystemCmd(const RegistRegionSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegistRegionSystemCmd)
}

void RegistRegionSystemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 6;
  zoneid_ = 0u;
  regiontype_ = 0u;
  servertype_ = 0u;
  client_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistRegionSystemCmd::~RegistRegionSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegistRegionSystemCmd)
  SharedDtor();
}

void RegistRegionSystemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegistRegionSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistRegionSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistRegionSystemCmd_descriptor_;
}

const RegistRegionSystemCmd& RegistRegionSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

RegistRegionSystemCmd* RegistRegionSystemCmd::default_instance_ = NULL;

RegistRegionSystemCmd* RegistRegionSystemCmd::New() const {
  return new RegistRegionSystemCmd;
}

void RegistRegionSystemCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegistRegionSystemCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(zoneid_, client_);
    cmd_ = 255;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistRegionSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegistRegionSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_regiontype;
        break;
      }

      // optional uint32 regiontype = 4;
      case 4: {
        if (tag == 32) {
         parse_regiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regiontype_)));
          set_has_regiontype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_servertype;
        break;
      }

      // optional uint32 servertype = 5;
      case 5: {
        if (tag == 40) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_client;
        break;
      }

      // optional uint32 client = 6;
      case 6: {
        if (tag == 48) {
         parse_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegistRegionSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegistRegionSystemCmd)
  return false;
#undef DO_
}

void RegistRegionSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegistRegionSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 regiontype = 4;
  if (has_regiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->regiontype(), output);
  }

  // optional uint32 servertype = 5;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->servertype(), output);
  }

  // optional uint32 client = 6;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->client(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegistRegionSystemCmd)
}

::google::protobuf::uint8* RegistRegionSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegistRegionSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 regiontype = 4;
  if (has_regiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->regiontype(), target);
  }

  // optional uint32 servertype = 5;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->servertype(), target);
  }

  // optional uint32 client = 6;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->client(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegistRegionSystemCmd)
  return target;
}

int RegistRegionSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = REGIST_REGION_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 regiontype = 4;
    if (has_regiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regiontype());
    }

    // optional uint32 servertype = 5;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->servertype());
    }

    // optional uint32 client = 6;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistRegionSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistRegionSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistRegionSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistRegionSystemCmd::MergeFrom(const RegistRegionSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_regiontype()) {
      set_regiontype(from.regiontype());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_client()) {
      set_client(from.client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistRegionSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistRegionSystemCmd::CopyFrom(const RegistRegionSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistRegionSystemCmd::IsInitialized() const {

  return true;
}

void RegistRegionSystemCmd::Swap(RegistRegionSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(regiontype_, other->regiontype_);
    std::swap(servertype_, other->servertype_);
    std::swap(client_, other->client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistRegionSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistRegionSystemCmd_descriptor_;
  metadata.reflection = RegistRegionSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonReloadSystemCmd::kCmdFieldNumber;
const int CommonReloadSystemCmd::kParamFieldNumber;
const int CommonReloadSystemCmd::kTypeFieldNumber;
#endif  // !_MSC_VER

CommonReloadSystemCmd::CommonReloadSystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CommonReloadSystemCmd)
}

void CommonReloadSystemCmd::InitAsDefaultInstance() {
}

CommonReloadSystemCmd::CommonReloadSystemCmd(const CommonReloadSystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CommonReloadSystemCmd)
}

void CommonReloadSystemCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 7;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonReloadSystemCmd::~CommonReloadSystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CommonReloadSystemCmd)
  SharedDtor();
}

void CommonReloadSystemCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonReloadSystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonReloadSystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonReloadSystemCmd_descriptor_;
}

const CommonReloadSystemCmd& CommonReloadSystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

CommonReloadSystemCmd* CommonReloadSystemCmd::default_instance_ = NULL;

CommonReloadSystemCmd* CommonReloadSystemCmd::New() const {
  return new CommonReloadSystemCmd;
}

void CommonReloadSystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 255;
    param_ = 7;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonReloadSystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CommonReloadSystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EComLoadType type = 3;
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EComLoadType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EComLoadType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CommonReloadSystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CommonReloadSystemCmd)
  return false;
#undef DO_
}

void CommonReloadSystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CommonReloadSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EComLoadType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CommonReloadSystemCmd)
}

::google::protobuf::uint8* CommonReloadSystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CommonReloadSystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EComLoadType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CommonReloadSystemCmd)
  return target;
}

int CommonReloadSystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = COMMON_RELOAD_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EComLoadType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonReloadSystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonReloadSystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonReloadSystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonReloadSystemCmd::MergeFrom(const CommonReloadSystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonReloadSystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonReloadSystemCmd::CopyFrom(const CommonReloadSystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonReloadSystemCmd::IsInitialized() const {

  return true;
}

void CommonReloadSystemCmd::Swap(CommonReloadSystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonReloadSystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonReloadSystemCmd_descriptor_;
  metadata.reflection = CommonReloadSystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InfoProxySystemCmd::kCmdFieldNumber;
const int InfoProxySystemCmd::kParamFieldNumber;
const int InfoProxySystemCmd::kProxyidFieldNumber;
const int InfoProxySystemCmd::kTasknumFieldNumber;
#endif  // !_MSC_VER

InfoProxySystemCmd::InfoProxySystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InfoProxySystemCmd)
}

void InfoProxySystemCmd::InitAsDefaultInstance() {
}

InfoProxySystemCmd::InfoProxySystemCmd(const InfoProxySystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InfoProxySystemCmd)
}

void InfoProxySystemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 8;
  proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasknum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InfoProxySystemCmd::~InfoProxySystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InfoProxySystemCmd)
  SharedDtor();
}

void InfoProxySystemCmd::SharedDtor() {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyid_;
  }
  if (this != default_instance_) {
  }
}

void InfoProxySystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InfoProxySystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InfoProxySystemCmd_descriptor_;
}

const InfoProxySystemCmd& InfoProxySystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

InfoProxySystemCmd* InfoProxySystemCmd::default_instance_ = NULL;

InfoProxySystemCmd* InfoProxySystemCmd::New() const {
  return new InfoProxySystemCmd;
}

void InfoProxySystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 255;
    param_ = 8;
    if (has_proxyid()) {
      if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyid_->clear();
      }
    }
    tasknum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InfoProxySystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InfoProxySystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proxyid;
        break;
      }

      // optional string proxyid = 3;
      case 3: {
        if (tag == 26) {
         parse_proxyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyid().data(), this->proxyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tasknum;
        break;
      }

      // optional uint32 tasknum = 4;
      case 4: {
        if (tag == 32) {
         parse_tasknum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasknum_)));
          set_has_tasknum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InfoProxySystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InfoProxySystemCmd)
  return false;
#undef DO_
}

void InfoProxySystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InfoProxySystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string proxyid = 3;
  if (has_proxyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyid().data(), this->proxyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxyid(), output);
  }

  // optional uint32 tasknum = 4;
  if (has_tasknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tasknum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InfoProxySystemCmd)
}

::google::protobuf::uint8* InfoProxySystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InfoProxySystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string proxyid = 3;
  if (has_proxyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyid().data(), this->proxyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxyid(), target);
  }

  // optional uint32 tasknum = 4;
  if (has_tasknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tasknum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InfoProxySystemCmd)
  return target;
}

int InfoProxySystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = INFO_PROXY_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string proxyid = 3;
    if (has_proxyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyid());
    }

    // optional uint32 tasknum = 4;
    if (has_tasknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasknum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InfoProxySystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InfoProxySystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InfoProxySystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InfoProxySystemCmd::MergeFrom(const InfoProxySystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_proxyid()) {
      set_proxyid(from.proxyid());
    }
    if (from.has_tasknum()) {
      set_tasknum(from.tasknum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InfoProxySystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InfoProxySystemCmd::CopyFrom(const InfoProxySystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoProxySystemCmd::IsInitialized() const {

  return true;
}

void InfoProxySystemCmd::Swap(InfoProxySystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(proxyid_, other->proxyid_);
    std::swap(tasknum_, other->tasknum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InfoProxySystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InfoProxySystemCmd_descriptor_;
  metadata.reflection = InfoProxySystemCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegistProxySystemCmd::kCmdFieldNumber;
const int RegistProxySystemCmd::kParamFieldNumber;
const int RegistProxySystemCmd::kProxyidFieldNumber;
#endif  // !_MSC_VER

RegistProxySystemCmd::RegistProxySystemCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegistProxySystemCmd)
}

void RegistProxySystemCmd::InitAsDefaultInstance() {
}

RegistProxySystemCmd::RegistProxySystemCmd(const RegistProxySystemCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegistProxySystemCmd)
}

void RegistProxySystemCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 255;
  param_ = 9;
  proxyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegistProxySystemCmd::~RegistProxySystemCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegistProxySystemCmd)
  SharedDtor();
}

void RegistProxySystemCmd::SharedDtor() {
  if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete proxyid_;
  }
  if (this != default_instance_) {
  }
}

void RegistProxySystemCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegistProxySystemCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegistProxySystemCmd_descriptor_;
}

const RegistProxySystemCmd& RegistProxySystemCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SystemCmd_2eproto();
  return *default_instance_;
}

RegistProxySystemCmd* RegistProxySystemCmd::default_instance_ = NULL;

RegistProxySystemCmd* RegistProxySystemCmd::New() const {
  return new RegistProxySystemCmd;
}

void RegistProxySystemCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 255;
    param_ = 9;
    if (has_proxyid()) {
      if (proxyid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        proxyid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegistProxySystemCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegistProxySystemCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SystemParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SystemParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_proxyid;
        break;
      }

      // optional string proxyid = 3;
      case 3: {
        if (tag == 26) {
         parse_proxyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_proxyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->proxyid().data(), this->proxyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proxyid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegistProxySystemCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegistProxySystemCmd)
  return false;
#undef DO_
}

void RegistProxySystemCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegistProxySystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string proxyid = 3;
  if (has_proxyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyid().data(), this->proxyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->proxyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegistProxySystemCmd)
}

::google::protobuf::uint8* RegistProxySystemCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegistProxySystemCmd)
  // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string proxyid = 3;
  if (has_proxyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->proxyid().data(), this->proxyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proxyid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->proxyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegistProxySystemCmd)
  return target;
}

int RegistProxySystemCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SYSTEM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SystemParam param = 2 [default = REGIST_PROXY_SYSCMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string proxyid = 3;
    if (has_proxyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->proxyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegistProxySystemCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegistProxySystemCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegistProxySystemCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegistProxySystemCmd::MergeFrom(const RegistProxySystemCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_proxyid()) {
      set_proxyid(from.proxyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegistProxySystemCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistProxySystemCmd::CopyFrom(const RegistProxySystemCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistProxySystemCmd::IsInitialized() const {

  return true;
}

void RegistProxySystemCmd::Swap(RegistProxySystemCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(proxyid_, other->proxyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegistProxySystemCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegistProxySystemCmd_descriptor_;
  metadata.reflection = RegistProxySystemCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
