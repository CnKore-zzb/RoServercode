// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CarrierCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CarrierCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* CarrierMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierInfoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierInfoUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetJoinCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetJoinCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReachCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReachCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierMoveUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierMoveUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierStartUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierStartUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CarrierWaitListUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CarrierWaitListUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FerrisWheelInviteCarrierCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FerrisWheelInviteCarrierCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FerrisWheelProcessInviteCarrierCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FerrisWheelProcessInviteCarrierCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartFerrisWheelUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartFerrisWheelUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CatchUserJoinCarrierUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CatchUserJoinCarrierUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CarrierParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFerrisAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_CarrierCmd_2eproto() {
  protobuf_AddDesc_CarrierCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CarrierCmd.proto");
  GOOGLE_CHECK(file != NULL);
  CarrierMember_descriptor_ = file->message_type(0);
  static const int CarrierMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMember, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMember, name_),
  };
  CarrierMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierMember_descriptor_,
      CarrierMember::default_instance_,
      CarrierMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierMember));
  CarrierInfoUserCmd_descriptor_ = file->message_type(1);
  static const int CarrierInfoUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, carrierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, needanimation_),
  };
  CarrierInfoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierInfoUserCmd_descriptor_,
      CarrierInfoUserCmd::default_instance_,
      CarrierInfoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierInfoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierInfoUserCmd));
  CreateCarrierUserCmd_descriptor_ = file->message_type(2);
  static const int CreateCarrierUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, carrierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, line_),
  };
  CreateCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateCarrierUserCmd_descriptor_,
      CreateCarrierUserCmd::default_instance_,
      CreateCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateCarrierUserCmd));
  InviteCarrierUserCmd_descriptor_ = file->message_type(3);
  static const int InviteCarrierUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, carrierid_),
  };
  InviteCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteCarrierUserCmd_descriptor_,
      InviteCarrierUserCmd::default_instance_,
      InviteCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteCarrierUserCmd));
  JoinCarrierUserCmd_descriptor_ = file->message_type(4);
  static const int JoinCarrierUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, mastername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, carrierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, agree_),
  };
  JoinCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinCarrierUserCmd_descriptor_,
      JoinCarrierUserCmd::default_instance_,
      JoinCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinCarrierUserCmd));
  RetJoinCarrierUserCmd_descriptor_ = file->message_type(5);
  static const int RetJoinCarrierUserCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, membername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, masterid_),
  };
  RetJoinCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetJoinCarrierUserCmd_descriptor_,
      RetJoinCarrierUserCmd::default_instance_,
      RetJoinCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetJoinCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetJoinCarrierUserCmd));
  LeaveCarrierUserCmd_descriptor_ = file->message_type(6);
  static const int LeaveCarrierUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, newmasterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, all_),
  };
  LeaveCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveCarrierUserCmd_descriptor_,
      LeaveCarrierUserCmd::default_instance_,
      LeaveCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveCarrierUserCmd));
  ReachCarrierUserCmd_descriptor_ = file->message_type(7);
  static const int ReachCarrierUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, masterid_),
  };
  ReachCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReachCarrierUserCmd_descriptor_,
      ReachCarrierUserCmd::default_instance_,
      ReachCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReachCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReachCarrierUserCmd));
  CarrierMoveUserCmd_descriptor_ = file->message_type(8);
  static const int CarrierMoveUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, masterid_),
  };
  CarrierMoveUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierMoveUserCmd_descriptor_,
      CarrierMoveUserCmd::default_instance_,
      CarrierMoveUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierMoveUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierMoveUserCmd));
  CarrierStartUserCmd_descriptor_ = file->message_type(9);
  static const int CarrierStartUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, masterid_),
  };
  CarrierStartUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierStartUserCmd_descriptor_,
      CarrierStartUserCmd::default_instance_,
      CarrierStartUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierStartUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierStartUserCmd));
  CarrierWaitListUserCmd_descriptor_ = file->message_type(10);
  static const int CarrierWaitListUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, masterid_),
  };
  CarrierWaitListUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CarrierWaitListUserCmd_descriptor_,
      CarrierWaitListUserCmd::default_instance_,
      CarrierWaitListUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CarrierWaitListUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CarrierWaitListUserCmd));
  ChangeCarrierUserCmd_descriptor_ = file->message_type(11);
  static const int ChangeCarrierUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, carrierid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, masterid_),
  };
  ChangeCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeCarrierUserCmd_descriptor_,
      ChangeCarrierUserCmd::default_instance_,
      ChangeCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeCarrierUserCmd));
  FerrisWheelInviteCarrierCmd_descriptor_ = file->message_type(12);
  static const int FerrisWheelInviteCarrierCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, targetname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, id_),
  };
  FerrisWheelInviteCarrierCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FerrisWheelInviteCarrierCmd_descriptor_,
      FerrisWheelInviteCarrierCmd::default_instance_,
      FerrisWheelInviteCarrierCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelInviteCarrierCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FerrisWheelInviteCarrierCmd));
  FerrisWheelProcessInviteCarrierCmd_descriptor_ = file->message_type(13);
  static const int FerrisWheelProcessInviteCarrierCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, id_),
  };
  FerrisWheelProcessInviteCarrierCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FerrisWheelProcessInviteCarrierCmd_descriptor_,
      FerrisWheelProcessInviteCarrierCmd::default_instance_,
      FerrisWheelProcessInviteCarrierCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FerrisWheelProcessInviteCarrierCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FerrisWheelProcessInviteCarrierCmd));
  StartFerrisWheelUserCmd_descriptor_ = file->message_type(14);
  static const int StartFerrisWheelUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, masterid_),
  };
  StartFerrisWheelUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartFerrisWheelUserCmd_descriptor_,
      StartFerrisWheelUserCmd::default_instance_,
      StartFerrisWheelUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFerrisWheelUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartFerrisWheelUserCmd));
  CatchUserJoinCarrierUserCmd_descriptor_ = file->message_type(15);
  static const int CatchUserJoinCarrierUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, mapid_),
  };
  CatchUserJoinCarrierUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CatchUserJoinCarrierUserCmd_descriptor_,
      CatchUserJoinCarrierUserCmd::default_instance_,
      CatchUserJoinCarrierUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CatchUserJoinCarrierUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CatchUserJoinCarrierUserCmd));
  CarrierParam_descriptor_ = file->enum_type(0);
  EFerrisAction_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CarrierCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierMember_descriptor_, &CarrierMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierInfoUserCmd_descriptor_, &CarrierInfoUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateCarrierUserCmd_descriptor_, &CreateCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteCarrierUserCmd_descriptor_, &InviteCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinCarrierUserCmd_descriptor_, &JoinCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetJoinCarrierUserCmd_descriptor_, &RetJoinCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveCarrierUserCmd_descriptor_, &LeaveCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReachCarrierUserCmd_descriptor_, &ReachCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierMoveUserCmd_descriptor_, &CarrierMoveUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierStartUserCmd_descriptor_, &CarrierStartUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CarrierWaitListUserCmd_descriptor_, &CarrierWaitListUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeCarrierUserCmd_descriptor_, &ChangeCarrierUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FerrisWheelInviteCarrierCmd_descriptor_, &FerrisWheelInviteCarrierCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FerrisWheelProcessInviteCarrierCmd_descriptor_, &FerrisWheelProcessInviteCarrierCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartFerrisWheelUserCmd_descriptor_, &StartFerrisWheelUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CatchUserJoinCarrierUserCmd_descriptor_, &CatchUserJoinCarrierUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CarrierCmd_2eproto() {
  delete CarrierMember::default_instance_;
  delete CarrierMember_reflection_;
  delete CarrierInfoUserCmd::default_instance_;
  delete CarrierInfoUserCmd_reflection_;
  delete CreateCarrierUserCmd::default_instance_;
  delete CreateCarrierUserCmd_reflection_;
  delete InviteCarrierUserCmd::default_instance_;
  delete InviteCarrierUserCmd_reflection_;
  delete JoinCarrierUserCmd::default_instance_;
  delete JoinCarrierUserCmd_reflection_;
  delete RetJoinCarrierUserCmd::default_instance_;
  delete RetJoinCarrierUserCmd_reflection_;
  delete LeaveCarrierUserCmd::default_instance_;
  delete LeaveCarrierUserCmd_reflection_;
  delete ReachCarrierUserCmd::default_instance_;
  delete ReachCarrierUserCmd_reflection_;
  delete CarrierMoveUserCmd::default_instance_;
  delete CarrierMoveUserCmd_reflection_;
  delete CarrierStartUserCmd::default_instance_;
  delete CarrierStartUserCmd_reflection_;
  delete CarrierWaitListUserCmd::default_instance_;
  delete CarrierWaitListUserCmd_reflection_;
  delete ChangeCarrierUserCmd::default_instance_;
  delete ChangeCarrierUserCmd_reflection_;
  delete FerrisWheelInviteCarrierCmd::default_instance_;
  delete FerrisWheelInviteCarrierCmd_reflection_;
  delete FerrisWheelProcessInviteCarrierCmd::default_instance_;
  delete FerrisWheelProcessInviteCarrierCmd_reflection_;
  delete StartFerrisWheelUserCmd::default_instance_;
  delete StartFerrisWheelUserCmd_reflection_;
  delete CatchUserJoinCarrierUserCmd::default_instance_;
  delete CatchUserJoinCarrierUserCmd_reflection_;
}

void protobuf_AddDesc_CarrierCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020CarrierCmd.proto\022\003Cmd\032\nxCmd.proto\032\021Pro"
    "toCommon.proto\"8\n\rCarrierMember\022\n\n\002id\030\001 "
    "\001(\004\022\r\n\005index\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\"\351\001\n\022Car"
    "rierInfoUserCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\033SCENE_USER_CARRIER_PROTOCMD\0227\n\005param"
    "\030\002 \001(\0162\021.Cmd.CarrierParam:\025MAPPARAM_CARR"
    "IER_INFO\022\021\n\tcarrierid\030\003 \001(\r\022\020\n\010masterid\030"
    "\004 \001(\004\022#\n\007members\030\005 \003(\0132\022.Cmd.CarrierMemb"
    "er\022\030\n\rneedanimation\030\006 \001(\r:\0011\"\252\001\n\024CreateC"
    "arrierUserCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\033SCENE_USER_CARRIER_PROTOCMD\0229\n\005param\030\002"
    " \001(\0162\021.Cmd.CarrierParam:\027MAPPARAM_CREATE"
    "_CARRIER\022\021\n\tcarrierid\030\003 \001(\r\022\014\n\004line\030\004 \001("
    "\r\"\302\001\n\024InviteCarrierUserCmd\0226\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\033SCENE_USER_CARRIER_PROTOC"
    "MD\0229\n\005param\030\002 \001(\0162\021.Cmd.CarrierParam:\027MA"
    "PPARAM_INVITE_CARRIER\022\020\n\010masterid\030\003 \001(\004\022"
    "\022\n\nmastername\030\004 \001(\t\022\021\n\tcarrierid\030\005 \001(\r\"\315"
    "\001\n\022JoinCarrierUserCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\033SCENE_USER_CARRIER_PROTOCMD\0227\n"
    "\005param\030\002 \001(\0162\021.Cmd.CarrierParam:\025MAPPARA"
    "M_JOIN_CARRIER\022\020\n\010masterid\030\003 \001(\004\022\022\n\nmast"
    "ername\030\004 \001(\t\022\021\n\tcarrierid\030\005 \001(\r\022\r\n\005agree"
    "\030\006 \001(\010\"\323\001\n\025RetJoinCarrierUserCmd\0226\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\033SCENE_USER_CARRIER_"
    "PROTOCMD\022;\n\005param\030\002 \001(\0162\021.Cmd.CarrierPar"
    "am:\031MAPPARAM_RET_JOIN_CARRIER\022\022\n\nmembern"
    "ame\030\003 \001(\t\022\r\n\005agree\030\004 \001(\010\022\020\n\010memberid\030\005 \001"
    "(\004\022\020\n\010masterid\030\006 \001(\004\"\356\001\n\023LeaveCarrierUse"
    "rCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_U"
    "SER_CARRIER_PROTOCMD\0228\n\005param\030\002 \001(\0162\021.Cm"
    "d.CarrierParam:\026MAPPARAM_LEAVE_CARRIER\022\016"
    "\n\006charid\030\003 \001(\004\022\032\n\003pos\030\004 \001(\0132\r.Cmd.SceneP"
    "os\022\020\n\010masterid\030\005 \001(\004\022\023\n\013newmasterid\030\006 \001("
    "\004\022\022\n\003all\030\007 \001(\010:\005false\"\265\001\n\023ReachCarrierUs"
    "erCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_"
    "USER_CARRIER_PROTOCMD\0228\n\005param\030\002 \001(\0162\021.C"
    "md.CarrierParam:\026MAPPARAM_REACH_CARRIER\022"
    "\032\n\003pos\030\003 \001(\0132\r.Cmd.ScenePos\022\020\n\010masterid\030"
    "\004 \001(\004\"\305\001\n\022CarrierMoveUserCmd\0226\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\033SCENE_USER_CARRIER_PROT"
    "OCMD\0227\n\005param\030\002 \001(\0162\021.Cmd.CarrierParam:\025"
    "MAPPARAM_CARRIER_MOVE\022\032\n\003pos\030\003 \001(\0132\r.Cmd"
    ".ScenePos\022\020\n\010progress\030\004 \001(\r\022\020\n\010masterid\030"
    "\005 \001(\004\"\247\001\n\023CarrierStartUserCmd\0226\n\003cmd\030\001 \001"
    "(\0162\014.Cmd.Command:\033SCENE_USER_CARRIER_PRO"
    "TOCMD\0228\n\005param\030\002 \001(\0162\021.Cmd.CarrierParam:"
    "\026MAPPARAM_CARRIER_START\022\014\n\004line\030\003 \001(\r\022\020\n"
    "\010masterid\030\004 \001(\004\"\305\001\n\026CarrierWaitListUserC"
    "md\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_USE"
    "R_CARRIER_PROTOCMD\022<\n\005param\030\002 \001(\0162\021.Cmd."
    "CarrierParam:\032MAPPARAM_CARRIER_WAIT_LIST"
    "\022#\n\007members\030\003 \003(\0132\022.Cmd.CarrierMember\022\020\n"
    "\010masterid\030\004 \001(\004\"\264\001\n\024ChangeCarrierUserCmd"
    "\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_USER_"
    "CARRIER_PROTOCMD\0229\n\005param\030\002 \001(\0162\021.Cmd.Ca"
    "rrierParam:\027MAPPARAM_CHANGE_CARRIER\022\024\n\tc"
    "arrierid\030\003 \001(\r:\0010\022\023\n\010masterid\030\004 \001(\004:\0010\"\314"
    "\001\n\033FerrisWheelInviteCarrierCmd\0226\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\033SCENE_USER_CARRIER_PR"
    "OTOCMD\022=\n\005param\030\002 \001(\0162\021.Cmd.CarrierParam"
    ":\033MAPPARAM_FERRISWHEEL_INVITE\022\023\n\010targeti"
    "d\030\003 \001(\004:\0010\022\022\n\ntargetname\030\004 \001(\t\022\r\n\002id\030\005 \001"
    "(\r:\0011\"\375\001\n\"FerrisWheelProcessInviteCarrie"
    "rCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_U"
    "SER_CARRIER_PROTOCMD\022D\n\005param\030\002 \001(\0162\021.Cm"
    "d.CarrierParam:\"MAPPARAM_FERRISWHEEL_PRO"
    "CESSINVITE\022\023\n\010targetid\030\003 \001(\004:\0010\0225\n\006actio"
    "n\030\004 \001(\0162\022.Cmd.EFerrisAction:\021EFERRISACTI"
    "ON_MIN\022\r\n\002id\030\005 \001(\r:\0011\"\267\001\n\027StartFerrisWhe"
    "elUserCmd\0226\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SC"
    "ENE_USER_CARRIER_PROTOCMD\022<\n\005param\030\002 \001(\016"
    "2\021.Cmd.CarrierParam:\032MAPPARAM_START_FERR"
    "ISWHEEL\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\010masterid\030\004"
    " \001(\004:\0010\"\323\001\n\033CatchUserJoinCarrierUserCmd\022"
    "6\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\033SCENE_USER_C"
    "ARRIER_PROTOCMD\022B\n\005param\030\002 \001(\0162\021.Cmd.Car"
    "rierParam: MAPPARAM_CATCH_USER_JOIN_CARR"
    "IER\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\010masterid\030\004 \001(\004"
    ":\0010\022\020\n\005mapid\030\005 \001(\r:\0010*\330\003\n\014CarrierParam\022\031"
    "\n\025MAPPARAM_CARRIER_INFO\020\001\022\031\n\025MAPPARAM_JO"
    "IN_CARRIER\020\002\022\035\n\031MAPPARAM_RET_JOIN_CARRIE"
    "R\020\003\022\032\n\026MAPPARAM_LEAVE_CARRIER\020\004\022\031\n\025MAPPA"
    "RAM_CARRIER_MOVE\020\005\022\033\n\027MAPPARAM_CREATE_CA"
    "RRIER\020\006\022\032\n\026MAPPARAM_CARRIER_START\020\007\022\036\n\032M"
    "APPARAM_CARRIER_WAIT_LIST\020\010\022\032\n\026MAPPARAM_"
    "REACH_CARRIER\020\t\022\033\n\027MAPPARAM_INVITE_CARRI"
    "ER\020\n\022\033\n\027MAPPARAM_CHANGE_CARRIER\020\013\022\037\n\033MAP"
    "PARAM_FERRISWHEEL_INVITE\020\014\022&\n\"MAPPARAM_F"
    "ERRISWHEEL_PROCESSINVITE\020\r\022\036\n\032MAPPARAM_S"
    "TART_FERRISWHEEL\020\016\022$\n MAPPARAM_CATCH_USE"
    "R_JOIN_CARRIER\020\017*r\n\rEFerrisAction\022\025\n\021EFE"
    "RRISACTION_MIN\020\000\022\027\n\023EFERRISACTION_AGREE\020"
    "\001\022\032\n\026EFERRISACTION_DISAGREE\020\002\022\025\n\021EFERRIS"
    "ACTION_MAX\020\003", 3772);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CarrierCmd.proto", &protobuf_RegisterTypes);
  CarrierMember::default_instance_ = new CarrierMember();
  CarrierInfoUserCmd::default_instance_ = new CarrierInfoUserCmd();
  CreateCarrierUserCmd::default_instance_ = new CreateCarrierUserCmd();
  InviteCarrierUserCmd::default_instance_ = new InviteCarrierUserCmd();
  JoinCarrierUserCmd::default_instance_ = new JoinCarrierUserCmd();
  RetJoinCarrierUserCmd::default_instance_ = new RetJoinCarrierUserCmd();
  LeaveCarrierUserCmd::default_instance_ = new LeaveCarrierUserCmd();
  ReachCarrierUserCmd::default_instance_ = new ReachCarrierUserCmd();
  CarrierMoveUserCmd::default_instance_ = new CarrierMoveUserCmd();
  CarrierStartUserCmd::default_instance_ = new CarrierStartUserCmd();
  CarrierWaitListUserCmd::default_instance_ = new CarrierWaitListUserCmd();
  ChangeCarrierUserCmd::default_instance_ = new ChangeCarrierUserCmd();
  FerrisWheelInviteCarrierCmd::default_instance_ = new FerrisWheelInviteCarrierCmd();
  FerrisWheelProcessInviteCarrierCmd::default_instance_ = new FerrisWheelProcessInviteCarrierCmd();
  StartFerrisWheelUserCmd::default_instance_ = new StartFerrisWheelUserCmd();
  CatchUserJoinCarrierUserCmd::default_instance_ = new CatchUserJoinCarrierUserCmd();
  CarrierMember::default_instance_->InitAsDefaultInstance();
  CarrierInfoUserCmd::default_instance_->InitAsDefaultInstance();
  CreateCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  InviteCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  JoinCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  RetJoinCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  LeaveCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  ReachCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  CarrierMoveUserCmd::default_instance_->InitAsDefaultInstance();
  CarrierStartUserCmd::default_instance_->InitAsDefaultInstance();
  CarrierWaitListUserCmd::default_instance_->InitAsDefaultInstance();
  ChangeCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  FerrisWheelInviteCarrierCmd::default_instance_->InitAsDefaultInstance();
  FerrisWheelProcessInviteCarrierCmd::default_instance_->InitAsDefaultInstance();
  StartFerrisWheelUserCmd::default_instance_->InitAsDefaultInstance();
  CatchUserJoinCarrierUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CarrierCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CarrierCmd_2eproto {
  StaticDescriptorInitializer_CarrierCmd_2eproto() {
    protobuf_AddDesc_CarrierCmd_2eproto();
  }
} static_descriptor_initializer_CarrierCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* CarrierParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierParam_descriptor_;
}
bool CarrierParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFerrisAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFerrisAction_descriptor_;
}
bool EFerrisAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierMember::kIdFieldNumber;
const int CarrierMember::kIndexFieldNumber;
const int CarrierMember::kNameFieldNumber;
#endif  // !_MSC_VER

CarrierMember::CarrierMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierMember)
}

void CarrierMember::InitAsDefaultInstance() {
}

CarrierMember::CarrierMember(const CarrierMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierMember)
}

void CarrierMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  index_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierMember::~CarrierMember() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierMember)
  SharedDtor();
}

void CarrierMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CarrierMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierMember_descriptor_;
}

const CarrierMember& CarrierMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CarrierMember* CarrierMember::default_instance_ = NULL;

CarrierMember* CarrierMember::New() const {
  return new CarrierMember;
}

void CarrierMember::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    id_ = GOOGLE_ULONGLONG(0);
    index_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (tag == 16) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierMember)
  return false;
#undef DO_
}

void CarrierMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierMember)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierMember)
}

::google::protobuf::uint8* CarrierMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierMember)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierMember)
  return target;
}

int CarrierMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierMember::MergeFrom(const CarrierMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierMember::CopyFrom(const CarrierMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierMember::IsInitialized() const {

  return true;
}

void CarrierMember::Swap(CarrierMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(index_, other->index_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierMember_descriptor_;
  metadata.reflection = CarrierMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierInfoUserCmd::kCmdFieldNumber;
const int CarrierInfoUserCmd::kParamFieldNumber;
const int CarrierInfoUserCmd::kCarrieridFieldNumber;
const int CarrierInfoUserCmd::kMasteridFieldNumber;
const int CarrierInfoUserCmd::kMembersFieldNumber;
const int CarrierInfoUserCmd::kNeedanimationFieldNumber;
#endif  // !_MSC_VER

CarrierInfoUserCmd::CarrierInfoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierInfoUserCmd)
}

void CarrierInfoUserCmd::InitAsDefaultInstance() {
}

CarrierInfoUserCmd::CarrierInfoUserCmd(const CarrierInfoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierInfoUserCmd)
}

void CarrierInfoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 1;
  carrierid_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  needanimation_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierInfoUserCmd::~CarrierInfoUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierInfoUserCmd)
  SharedDtor();
}

void CarrierInfoUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarrierInfoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierInfoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierInfoUserCmd_descriptor_;
}

const CarrierInfoUserCmd& CarrierInfoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CarrierInfoUserCmd* CarrierInfoUserCmd::default_instance_ = NULL;

CarrierInfoUserCmd* CarrierInfoUserCmd::New() const {
  return new CarrierInfoUserCmd;
}

void CarrierInfoUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CarrierInfoUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 47) {
    ZR_(masterid_, carrierid_);
    cmd_ = 16;
    param_ = 1;
    needanimation_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierInfoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierInfoUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_carrierid;
        break;
      }

      // optional uint32 carrierid = 3;
      case 3: {
        if (tag == 24) {
         parse_carrierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrierid_)));
          set_has_carrierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4;
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        break;
      }

      // repeated .Cmd.CarrierMember members = 5;
      case 5: {
        if (tag == 42) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_members;
        if (input->ExpectTag(48)) goto parse_needanimation;
        break;
      }

      // optional uint32 needanimation = 6 [default = 1];
      case 6: {
        if (tag == 48) {
         parse_needanimation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &needanimation_)));
          set_has_needanimation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierInfoUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierInfoUserCmd)
  return false;
#undef DO_
}

void CarrierInfoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 carrierid = 3;
  if (has_carrierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->carrierid(), output);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  // repeated .Cmd.CarrierMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->members(i), output);
  }

  // optional uint32 needanimation = 6 [default = 1];
  if (has_needanimation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->needanimation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierInfoUserCmd)
}

::google::protobuf::uint8* CarrierInfoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierInfoUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 carrierid = 3;
  if (has_carrierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->carrierid(), target);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  // repeated .Cmd.CarrierMember members = 5;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->members(i), target);
  }

  // optional uint32 needanimation = 6 [default = 1];
  if (has_needanimation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->needanimation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierInfoUserCmd)
  return target;
}

int CarrierInfoUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 carrierid = 3;
    if (has_carrierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrierid());
    }

    // optional uint64 masterid = 4;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint32 needanimation = 6 [default = 1];
    if (has_needanimation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->needanimation());
    }

  }
  // repeated .Cmd.CarrierMember members = 5;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierInfoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierInfoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierInfoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierInfoUserCmd::MergeFrom(const CarrierInfoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_carrierid()) {
      set_carrierid(from.carrierid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_needanimation()) {
      set_needanimation(from.needanimation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierInfoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierInfoUserCmd::CopyFrom(const CarrierInfoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierInfoUserCmd::IsInitialized() const {

  return true;
}

void CarrierInfoUserCmd::Swap(CarrierInfoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(carrierid_, other->carrierid_);
    std::swap(masterid_, other->masterid_);
    members_.Swap(&other->members_);
    std::swap(needanimation_, other->needanimation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierInfoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierInfoUserCmd_descriptor_;
  metadata.reflection = CarrierInfoUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateCarrierUserCmd::kCmdFieldNumber;
const int CreateCarrierUserCmd::kParamFieldNumber;
const int CreateCarrierUserCmd::kCarrieridFieldNumber;
const int CreateCarrierUserCmd::kLineFieldNumber;
#endif  // !_MSC_VER

CreateCarrierUserCmd::CreateCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateCarrierUserCmd)
}

void CreateCarrierUserCmd::InitAsDefaultInstance() {
}

CreateCarrierUserCmd::CreateCarrierUserCmd(const CreateCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateCarrierUserCmd)
}

void CreateCarrierUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 6;
  carrierid_ = 0u;
  line_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateCarrierUserCmd::~CreateCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateCarrierUserCmd)
  SharedDtor();
}

void CreateCarrierUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateCarrierUserCmd_descriptor_;
}

const CreateCarrierUserCmd& CreateCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CreateCarrierUserCmd* CreateCarrierUserCmd::default_instance_ = NULL;

CreateCarrierUserCmd* CreateCarrierUserCmd::New() const {
  return new CreateCarrierUserCmd;
}

void CreateCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CreateCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(carrierid_, line_);
    cmd_ = 16;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CREATE_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_carrierid;
        break;
      }

      // optional uint32 carrierid = 3;
      case 3: {
        if (tag == 24) {
         parse_carrierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrierid_)));
          set_has_carrierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_line;
        break;
      }

      // optional uint32 line = 4;
      case 4: {
        if (tag == 32) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateCarrierUserCmd)
  return false;
#undef DO_
}

void CreateCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CREATE_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 carrierid = 3;
  if (has_carrierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->carrierid(), output);
  }

  // optional uint32 line = 4;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateCarrierUserCmd)
}

::google::protobuf::uint8* CreateCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CREATE_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 carrierid = 3;
  if (has_carrierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->carrierid(), target);
  }

  // optional uint32 line = 4;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateCarrierUserCmd)
  return target;
}

int CreateCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CREATE_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 carrierid = 3;
    if (has_carrierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrierid());
    }

    // optional uint32 line = 4;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateCarrierUserCmd::MergeFrom(const CreateCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_carrierid()) {
      set_carrierid(from.carrierid());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCarrierUserCmd::CopyFrom(const CreateCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCarrierUserCmd::IsInitialized() const {

  return true;
}

void CreateCarrierUserCmd::Swap(CreateCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(carrierid_, other->carrierid_);
    std::swap(line_, other->line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateCarrierUserCmd_descriptor_;
  metadata.reflection = CreateCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteCarrierUserCmd::kCmdFieldNumber;
const int InviteCarrierUserCmd::kParamFieldNumber;
const int InviteCarrierUserCmd::kMasteridFieldNumber;
const int InviteCarrierUserCmd::kMasternameFieldNumber;
const int InviteCarrierUserCmd::kCarrieridFieldNumber;
#endif  // !_MSC_VER

InviteCarrierUserCmd::InviteCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteCarrierUserCmd)
}

void InviteCarrierUserCmd::InitAsDefaultInstance() {
}

InviteCarrierUserCmd::InviteCarrierUserCmd(const InviteCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteCarrierUserCmd)
}

void InviteCarrierUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 10;
  masterid_ = GOOGLE_ULONGLONG(0);
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrierid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteCarrierUserCmd::~InviteCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InviteCarrierUserCmd)
  SharedDtor();
}

void InviteCarrierUserCmd::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (this != default_instance_) {
  }
}

void InviteCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteCarrierUserCmd_descriptor_;
}

const InviteCarrierUserCmd& InviteCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

InviteCarrierUserCmd* InviteCarrierUserCmd::default_instance_ = NULL;

InviteCarrierUserCmd* InviteCarrierUserCmd::New() const {
  return new InviteCarrierUserCmd;
}

void InviteCarrierUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 16;
    param_ = 10;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
    carrierid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_INVITE_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3;
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mastername;
        break;
      }

      // optional string mastername = 4;
      case 4: {
        if (tag == 34) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_carrierid;
        break;
      }

      // optional uint32 carrierid = 5;
      case 5: {
        if (tag == 40) {
         parse_carrierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrierid_)));
          set_has_carrierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteCarrierUserCmd)
  return false;
#undef DO_
}

void InviteCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_INVITE_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string mastername = 4;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mastername(), output);
  }

  // optional uint32 carrierid = 5;
  if (has_carrierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->carrierid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteCarrierUserCmd)
}

::google::protobuf::uint8* InviteCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_INVITE_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string mastername = 4;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mastername(), target);
  }

  // optional uint32 carrierid = 5;
  if (has_carrierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->carrierid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteCarrierUserCmd)
  return target;
}

int InviteCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_INVITE_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string mastername = 4;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

    // optional uint32 carrierid = 5;
    if (has_carrierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrierid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteCarrierUserCmd::MergeFrom(const InviteCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
    if (from.has_carrierid()) {
      set_carrierid(from.carrierid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteCarrierUserCmd::CopyFrom(const InviteCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteCarrierUserCmd::IsInitialized() const {

  return true;
}

void InviteCarrierUserCmd::Swap(InviteCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(mastername_, other->mastername_);
    std::swap(carrierid_, other->carrierid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteCarrierUserCmd_descriptor_;
  metadata.reflection = InviteCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinCarrierUserCmd::kCmdFieldNumber;
const int JoinCarrierUserCmd::kParamFieldNumber;
const int JoinCarrierUserCmd::kMasteridFieldNumber;
const int JoinCarrierUserCmd::kMasternameFieldNumber;
const int JoinCarrierUserCmd::kCarrieridFieldNumber;
const int JoinCarrierUserCmd::kAgreeFieldNumber;
#endif  // !_MSC_VER

JoinCarrierUserCmd::JoinCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinCarrierUserCmd)
}

void JoinCarrierUserCmd::InitAsDefaultInstance() {
}

JoinCarrierUserCmd::JoinCarrierUserCmd(const JoinCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinCarrierUserCmd)
}

void JoinCarrierUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 2;
  masterid_ = GOOGLE_ULONGLONG(0);
  mastername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  carrierid_ = 0u;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinCarrierUserCmd::~JoinCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.JoinCarrierUserCmd)
  SharedDtor();
}

void JoinCarrierUserCmd::SharedDtor() {
  if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mastername_;
  }
  if (this != default_instance_) {
  }
}

void JoinCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinCarrierUserCmd_descriptor_;
}

const JoinCarrierUserCmd& JoinCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

JoinCarrierUserCmd* JoinCarrierUserCmd::default_instance_ = NULL;

JoinCarrierUserCmd* JoinCarrierUserCmd::New() const {
  return new JoinCarrierUserCmd;
}

void JoinCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<JoinCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(carrierid_, agree_);
    cmd_ = 16;
    param_ = 2;
    masterid_ = GOOGLE_ULONGLONG(0);
    if (has_mastername()) {
      if (mastername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mastername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_JOIN_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 3;
      case 3: {
        if (tag == 24) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_mastername;
        break;
      }

      // optional string mastername = 4;
      case 4: {
        if (tag == 34) {
         parse_mastername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mastername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mastername().data(), this->mastername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "mastername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_carrierid;
        break;
      }

      // optional uint32 carrierid = 5;
      case 5: {
        if (tag == 40) {
         parse_carrierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrierid_)));
          set_has_carrierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_agree;
        break;
      }

      // optional bool agree = 6;
      case 6: {
        if (tag == 48) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinCarrierUserCmd)
  return false;
#undef DO_
}

void JoinCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_JOIN_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 masterid = 3;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->masterid(), output);
  }

  // optional string mastername = 4;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->mastername(), output);
  }

  // optional uint32 carrierid = 5;
  if (has_carrierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->carrierid(), output);
  }

  // optional bool agree = 6;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinCarrierUserCmd)
}

::google::protobuf::uint8* JoinCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_JOIN_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 masterid = 3;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->masterid(), target);
  }

  // optional string mastername = 4;
  if (has_mastername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mastername().data(), this->mastername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "mastername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mastername(), target);
  }

  // optional uint32 carrierid = 5;
  if (has_carrierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->carrierid(), target);
  }

  // optional bool agree = 6;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinCarrierUserCmd)
  return target;
}

int JoinCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_JOIN_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 3;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional string mastername = 4;
    if (has_mastername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mastername());
    }

    // optional uint32 carrierid = 5;
    if (has_carrierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrierid());
    }

    // optional bool agree = 6;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinCarrierUserCmd::MergeFrom(const JoinCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_mastername()) {
      set_mastername(from.mastername());
    }
    if (from.has_carrierid()) {
      set_carrierid(from.carrierid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinCarrierUserCmd::CopyFrom(const JoinCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinCarrierUserCmd::IsInitialized() const {

  return true;
}

void JoinCarrierUserCmd::Swap(JoinCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(masterid_, other->masterid_);
    std::swap(mastername_, other->mastername_);
    std::swap(carrierid_, other->carrierid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinCarrierUserCmd_descriptor_;
  metadata.reflection = JoinCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetJoinCarrierUserCmd::kCmdFieldNumber;
const int RetJoinCarrierUserCmd::kParamFieldNumber;
const int RetJoinCarrierUserCmd::kMembernameFieldNumber;
const int RetJoinCarrierUserCmd::kAgreeFieldNumber;
const int RetJoinCarrierUserCmd::kMemberidFieldNumber;
const int RetJoinCarrierUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

RetJoinCarrierUserCmd::RetJoinCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RetJoinCarrierUserCmd)
}

void RetJoinCarrierUserCmd::InitAsDefaultInstance() {
}

RetJoinCarrierUserCmd::RetJoinCarrierUserCmd(const RetJoinCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RetJoinCarrierUserCmd)
}

void RetJoinCarrierUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 3;
  membername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  agree_ = false;
  memberid_ = GOOGLE_ULONGLONG(0);
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetJoinCarrierUserCmd::~RetJoinCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RetJoinCarrierUserCmd)
  SharedDtor();
}

void RetJoinCarrierUserCmd::SharedDtor() {
  if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete membername_;
  }
  if (this != default_instance_) {
  }
}

void RetJoinCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetJoinCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetJoinCarrierUserCmd_descriptor_;
}

const RetJoinCarrierUserCmd& RetJoinCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

RetJoinCarrierUserCmd* RetJoinCarrierUserCmd::default_instance_ = NULL;

RetJoinCarrierUserCmd* RetJoinCarrierUserCmd::New() const {
  return new RetJoinCarrierUserCmd;
}

void RetJoinCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RetJoinCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(memberid_, agree_);
    cmd_ = 16;
    param_ = 3;
    if (has_membername()) {
      if (membername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        membername_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetJoinCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RetJoinCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_RET_JOIN_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_membername;
        break;
      }

      // optional string membername = 3;
      case 3: {
        if (tag == 26) {
         parse_membername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_membername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->membername().data(), this->membername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "membername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_agree;
        break;
      }

      // optional bool agree = 4;
      case 4: {
        if (tag == 32) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_memberid;
        break;
      }

      // optional uint64 memberid = 5;
      case 5: {
        if (tag == 40) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 6;
      case 6: {
        if (tag == 48) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RetJoinCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RetJoinCarrierUserCmd)
  return false;
#undef DO_
}

void RetJoinCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RetJoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_RET_JOIN_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string membername = 3;
  if (has_membername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->membername().data(), this->membername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "membername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->membername(), output);
  }

  // optional bool agree = 4;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->agree(), output);
  }

  // optional uint64 memberid = 5;
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->memberid(), output);
  }

  // optional uint64 masterid = 6;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RetJoinCarrierUserCmd)
}

::google::protobuf::uint8* RetJoinCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RetJoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_RET_JOIN_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string membername = 3;
  if (has_membername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->membername().data(), this->membername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "membername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->membername(), target);
  }

  // optional bool agree = 4;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->agree(), target);
  }

  // optional uint64 memberid = 5;
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->memberid(), target);
  }

  // optional uint64 masterid = 6;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RetJoinCarrierUserCmd)
  return target;
}

int RetJoinCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_RET_JOIN_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string membername = 3;
    if (has_membername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->membername());
    }

    // optional bool agree = 4;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint64 memberid = 5;
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberid());
    }

    // optional uint64 masterid = 6;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetJoinCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetJoinCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetJoinCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetJoinCarrierUserCmd::MergeFrom(const RetJoinCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_membername()) {
      set_membername(from.membername());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetJoinCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetJoinCarrierUserCmd::CopyFrom(const RetJoinCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetJoinCarrierUserCmd::IsInitialized() const {

  return true;
}

void RetJoinCarrierUserCmd::Swap(RetJoinCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(membername_, other->membername_);
    std::swap(agree_, other->agree_);
    std::swap(memberid_, other->memberid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetJoinCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetJoinCarrierUserCmd_descriptor_;
  metadata.reflection = RetJoinCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveCarrierUserCmd::kCmdFieldNumber;
const int LeaveCarrierUserCmd::kParamFieldNumber;
const int LeaveCarrierUserCmd::kCharidFieldNumber;
const int LeaveCarrierUserCmd::kPosFieldNumber;
const int LeaveCarrierUserCmd::kMasteridFieldNumber;
const int LeaveCarrierUserCmd::kNewmasteridFieldNumber;
const int LeaveCarrierUserCmd::kAllFieldNumber;
#endif  // !_MSC_VER

LeaveCarrierUserCmd::LeaveCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LeaveCarrierUserCmd)
}

void LeaveCarrierUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

LeaveCarrierUserCmd::LeaveCarrierUserCmd(const LeaveCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LeaveCarrierUserCmd)
}

void LeaveCarrierUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  masterid_ = GOOGLE_ULONGLONG(0);
  newmasterid_ = GOOGLE_ULONGLONG(0);
  all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveCarrierUserCmd::~LeaveCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LeaveCarrierUserCmd)
  SharedDtor();
}

void LeaveCarrierUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void LeaveCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveCarrierUserCmd_descriptor_;
}

const LeaveCarrierUserCmd& LeaveCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

LeaveCarrierUserCmd* LeaveCarrierUserCmd::default_instance_ = NULL;

LeaveCarrierUserCmd* LeaveCarrierUserCmd::New() const {
  return new LeaveCarrierUserCmd;
}

void LeaveCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LeaveCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(masterid_, all_);
    cmd_ = 16;
    param_ = 4;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LeaveCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_LEAVE_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 4;
      case 4: {
        if (tag == 34) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 5;
      case 5: {
        if (tag == 40) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_newmasterid;
        break;
      }

      // optional uint64 newmasterid = 6;
      case 6: {
        if (tag == 48) {
         parse_newmasterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &newmasterid_)));
          set_has_newmasterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_all;
        break;
      }

      // optional bool all = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &all_)));
          set_has_all();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LeaveCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LeaveCarrierUserCmd)
  return false;
#undef DO_
}

void LeaveCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LeaveCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_LEAVE_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->masterid(), output);
  }

  // optional uint64 newmasterid = 6;
  if (has_newmasterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->newmasterid(), output);
  }

  // optional bool all = 7 [default = false];
  if (has_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->all(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LeaveCarrierUserCmd)
}

::google::protobuf::uint8* LeaveCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LeaveCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_LEAVE_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ScenePos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->masterid(), target);
  }

  // optional uint64 newmasterid = 6;
  if (has_newmasterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->newmasterid(), target);
  }

  // optional bool all = 7 [default = false];
  if (has_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->all(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LeaveCarrierUserCmd)
  return target;
}

int LeaveCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_LEAVE_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ScenePos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 masterid = 5;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint64 newmasterid = 6;
    if (has_newmasterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->newmasterid());
    }

    // optional bool all = 7 [default = false];
    if (has_all()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveCarrierUserCmd::MergeFrom(const LeaveCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_newmasterid()) {
      set_newmasterid(from.newmasterid());
    }
    if (from.has_all()) {
      set_all(from.all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveCarrierUserCmd::CopyFrom(const LeaveCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveCarrierUserCmd::IsInitialized() const {

  return true;
}

void LeaveCarrierUserCmd::Swap(LeaveCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(pos_, other->pos_);
    std::swap(masterid_, other->masterid_);
    std::swap(newmasterid_, other->newmasterid_);
    std::swap(all_, other->all_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveCarrierUserCmd_descriptor_;
  metadata.reflection = LeaveCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReachCarrierUserCmd::kCmdFieldNumber;
const int ReachCarrierUserCmd::kParamFieldNumber;
const int ReachCarrierUserCmd::kPosFieldNumber;
const int ReachCarrierUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

ReachCarrierUserCmd::ReachCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReachCarrierUserCmd)
}

void ReachCarrierUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

ReachCarrierUserCmd::ReachCarrierUserCmd(const ReachCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReachCarrierUserCmd)
}

void ReachCarrierUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 9;
  pos_ = NULL;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReachCarrierUserCmd::~ReachCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReachCarrierUserCmd)
  SharedDtor();
}

void ReachCarrierUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void ReachCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReachCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReachCarrierUserCmd_descriptor_;
}

const ReachCarrierUserCmd& ReachCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

ReachCarrierUserCmd* ReachCarrierUserCmd::default_instance_ = NULL;

ReachCarrierUserCmd* ReachCarrierUserCmd::New() const {
  return new ReachCarrierUserCmd;
}

void ReachCarrierUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 16;
    param_ = 9;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
    masterid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReachCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReachCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_REACH_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4;
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReachCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReachCarrierUserCmd)
  return false;
#undef DO_
}

void ReachCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReachCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_REACH_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReachCarrierUserCmd)
}

::google::protobuf::uint8* ReachCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReachCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_REACH_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReachCarrierUserCmd)
  return target;
}

int ReachCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_REACH_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 masterid = 4;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReachCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReachCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReachCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReachCarrierUserCmd::MergeFrom(const ReachCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReachCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReachCarrierUserCmd::CopyFrom(const ReachCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReachCarrierUserCmd::IsInitialized() const {

  return true;
}

void ReachCarrierUserCmd::Swap(ReachCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReachCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReachCarrierUserCmd_descriptor_;
  metadata.reflection = ReachCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierMoveUserCmd::kCmdFieldNumber;
const int CarrierMoveUserCmd::kParamFieldNumber;
const int CarrierMoveUserCmd::kPosFieldNumber;
const int CarrierMoveUserCmd::kProgressFieldNumber;
const int CarrierMoveUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

CarrierMoveUserCmd::CarrierMoveUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierMoveUserCmd)
}

void CarrierMoveUserCmd::InitAsDefaultInstance() {
  pos_ = const_cast< ::Cmd::ScenePos*>(&::Cmd::ScenePos::default_instance());
}

CarrierMoveUserCmd::CarrierMoveUserCmd(const CarrierMoveUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierMoveUserCmd)
}

void CarrierMoveUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 5;
  pos_ = NULL;
  progress_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierMoveUserCmd::~CarrierMoveUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierMoveUserCmd)
  SharedDtor();
}

void CarrierMoveUserCmd::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CarrierMoveUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierMoveUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierMoveUserCmd_descriptor_;
}

const CarrierMoveUserCmd& CarrierMoveUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CarrierMoveUserCmd* CarrierMoveUserCmd::default_instance_ = NULL;

CarrierMoveUserCmd* CarrierMoveUserCmd::New() const {
  return new CarrierMoveUserCmd;
}

void CarrierMoveUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CarrierMoveUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(masterid_, progress_);
    cmd_ = 16;
    param_ = 5;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Cmd::ScenePos::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierMoveUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierMoveUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_MOVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pos;
        break;
      }

      // optional .Cmd.ScenePos pos = 3;
      case 3: {
        if (tag == 26) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_progress;
        break;
      }

      // optional uint32 progress = 4;
      case 4: {
        if (tag == 32) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 5;
      case 5: {
        if (tag == 40) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierMoveUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierMoveUserCmd)
  return false;
#undef DO_
}

void CarrierMoveUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_MOVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos(), output);
  }

  // optional uint32 progress = 4;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->progress(), output);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierMoveUserCmd)
}

::google::protobuf::uint8* CarrierMoveUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierMoveUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_MOVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ScenePos pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos(), target);
  }

  // optional uint32 progress = 4;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->progress(), target);
  }

  // optional uint64 masterid = 5;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierMoveUserCmd)
  return target;
}

int CarrierMoveUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_MOVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ScenePos pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint32 progress = 4;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->progress());
    }

    // optional uint64 masterid = 5;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierMoveUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierMoveUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierMoveUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierMoveUserCmd::MergeFrom(const CarrierMoveUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_pos()) {
      mutable_pos()->::Cmd::ScenePos::MergeFrom(from.pos());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierMoveUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierMoveUserCmd::CopyFrom(const CarrierMoveUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierMoveUserCmd::IsInitialized() const {

  return true;
}

void CarrierMoveUserCmd::Swap(CarrierMoveUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(pos_, other->pos_);
    std::swap(progress_, other->progress_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierMoveUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierMoveUserCmd_descriptor_;
  metadata.reflection = CarrierMoveUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierStartUserCmd::kCmdFieldNumber;
const int CarrierStartUserCmd::kParamFieldNumber;
const int CarrierStartUserCmd::kLineFieldNumber;
const int CarrierStartUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

CarrierStartUserCmd::CarrierStartUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierStartUserCmd)
}

void CarrierStartUserCmd::InitAsDefaultInstance() {
}

CarrierStartUserCmd::CarrierStartUserCmd(const CarrierStartUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierStartUserCmd)
}

void CarrierStartUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 7;
  line_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierStartUserCmd::~CarrierStartUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierStartUserCmd)
  SharedDtor();
}

void CarrierStartUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarrierStartUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierStartUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierStartUserCmd_descriptor_;
}

const CarrierStartUserCmd& CarrierStartUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CarrierStartUserCmd* CarrierStartUserCmd::default_instance_ = NULL;

CarrierStartUserCmd* CarrierStartUserCmd::New() const {
  return new CarrierStartUserCmd;
}

void CarrierStartUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CarrierStartUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(masterid_, line_);
    cmd_ = 16;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierStartUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierStartUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_START];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_line;
        break;
      }

      // optional uint32 line = 3;
      case 3: {
        if (tag == 24) {
         parse_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4;
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierStartUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierStartUserCmd)
  return false;
#undef DO_
}

void CarrierStartUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierStartUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_START];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 line = 3;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->line(), output);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierStartUserCmd)
}

::google::protobuf::uint8* CarrierStartUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierStartUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_START];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 line = 3;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->line(), target);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierStartUserCmd)
  return target;
}

int CarrierStartUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_START];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 line = 3;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->line());
    }

    // optional uint64 masterid = 4;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierStartUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierStartUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierStartUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierStartUserCmd::MergeFrom(const CarrierStartUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierStartUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierStartUserCmd::CopyFrom(const CarrierStartUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierStartUserCmd::IsInitialized() const {

  return true;
}

void CarrierStartUserCmd::Swap(CarrierStartUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(line_, other->line_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierStartUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierStartUserCmd_descriptor_;
  metadata.reflection = CarrierStartUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CarrierWaitListUserCmd::kCmdFieldNumber;
const int CarrierWaitListUserCmd::kParamFieldNumber;
const int CarrierWaitListUserCmd::kMembersFieldNumber;
const int CarrierWaitListUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

CarrierWaitListUserCmd::CarrierWaitListUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CarrierWaitListUserCmd)
}

void CarrierWaitListUserCmd::InitAsDefaultInstance() {
}

CarrierWaitListUserCmd::CarrierWaitListUserCmd(const CarrierWaitListUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CarrierWaitListUserCmd)
}

void CarrierWaitListUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 8;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CarrierWaitListUserCmd::~CarrierWaitListUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CarrierWaitListUserCmd)
  SharedDtor();
}

void CarrierWaitListUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CarrierWaitListUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CarrierWaitListUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CarrierWaitListUserCmd_descriptor_;
}

const CarrierWaitListUserCmd& CarrierWaitListUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CarrierWaitListUserCmd* CarrierWaitListUserCmd::default_instance_ = NULL;

CarrierWaitListUserCmd* CarrierWaitListUserCmd::New() const {
  return new CarrierWaitListUserCmd;
}

void CarrierWaitListUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 16;
    param_ = 8;
    masterid_ = GOOGLE_ULONGLONG(0);
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CarrierWaitListUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CarrierWaitListUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_WAIT_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .Cmd.CarrierMember members = 3;
      case 3: {
        if (tag == 26) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4;
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CarrierWaitListUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CarrierWaitListUserCmd)
  return false;
#undef DO_
}

void CarrierWaitListUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CarrierWaitListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_WAIT_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.CarrierMember members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CarrierWaitListUserCmd)
}

::google::protobuf::uint8* CarrierWaitListUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CarrierWaitListUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_WAIT_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.CarrierMember members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // optional uint64 masterid = 4;
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CarrierWaitListUserCmd)
  return target;
}

int CarrierWaitListUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CARRIER_WAIT_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 masterid = 4;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  // repeated .Cmd.CarrierMember members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CarrierWaitListUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CarrierWaitListUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CarrierWaitListUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CarrierWaitListUserCmd::MergeFrom(const CarrierWaitListUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CarrierWaitListUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CarrierWaitListUserCmd::CopyFrom(const CarrierWaitListUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarrierWaitListUserCmd::IsInitialized() const {

  return true;
}

void CarrierWaitListUserCmd::Swap(CarrierWaitListUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    members_.Swap(&other->members_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CarrierWaitListUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CarrierWaitListUserCmd_descriptor_;
  metadata.reflection = CarrierWaitListUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeCarrierUserCmd::kCmdFieldNumber;
const int ChangeCarrierUserCmd::kParamFieldNumber;
const int ChangeCarrierUserCmd::kCarrieridFieldNumber;
const int ChangeCarrierUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

ChangeCarrierUserCmd::ChangeCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeCarrierUserCmd)
}

void ChangeCarrierUserCmd::InitAsDefaultInstance() {
}

ChangeCarrierUserCmd::ChangeCarrierUserCmd(const ChangeCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeCarrierUserCmd)
}

void ChangeCarrierUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 11;
  carrierid_ = 0u;
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeCarrierUserCmd::~ChangeCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeCarrierUserCmd)
  SharedDtor();
}

void ChangeCarrierUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeCarrierUserCmd_descriptor_;
}

const ChangeCarrierUserCmd& ChangeCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

ChangeCarrierUserCmd* ChangeCarrierUserCmd::default_instance_ = NULL;

ChangeCarrierUserCmd* ChangeCarrierUserCmd::New() const {
  return new ChangeCarrierUserCmd;
}

void ChangeCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChangeCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(masterid_, carrierid_);
    cmd_ = 16;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CHANGE_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_carrierid;
        break;
      }

      // optional uint32 carrierid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_carrierid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrierid_)));
          set_has_carrierid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeCarrierUserCmd)
  return false;
#undef DO_
}

void ChangeCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CHANGE_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 carrierid = 3 [default = 0];
  if (has_carrierid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->carrierid(), output);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeCarrierUserCmd)
}

::google::protobuf::uint8* ChangeCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CHANGE_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 carrierid = 3 [default = 0];
  if (has_carrierid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->carrierid(), target);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeCarrierUserCmd)
  return target;
}

int ChangeCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CHANGE_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 carrierid = 3 [default = 0];
    if (has_carrierid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrierid());
    }

    // optional uint64 masterid = 4 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeCarrierUserCmd::MergeFrom(const ChangeCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_carrierid()) {
      set_carrierid(from.carrierid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeCarrierUserCmd::CopyFrom(const ChangeCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeCarrierUserCmd::IsInitialized() const {

  return true;
}

void ChangeCarrierUserCmd::Swap(ChangeCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(carrierid_, other->carrierid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeCarrierUserCmd_descriptor_;
  metadata.reflection = ChangeCarrierUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FerrisWheelInviteCarrierCmd::kCmdFieldNumber;
const int FerrisWheelInviteCarrierCmd::kParamFieldNumber;
const int FerrisWheelInviteCarrierCmd::kTargetidFieldNumber;
const int FerrisWheelInviteCarrierCmd::kTargetnameFieldNumber;
const int FerrisWheelInviteCarrierCmd::kIdFieldNumber;
#endif  // !_MSC_VER

FerrisWheelInviteCarrierCmd::FerrisWheelInviteCarrierCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FerrisWheelInviteCarrierCmd)
}

void FerrisWheelInviteCarrierCmd::InitAsDefaultInstance() {
}

FerrisWheelInviteCarrierCmd::FerrisWheelInviteCarrierCmd(const FerrisWheelInviteCarrierCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FerrisWheelInviteCarrierCmd)
}

void FerrisWheelInviteCarrierCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 12;
  targetid_ = GOOGLE_ULONGLONG(0);
  targetname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FerrisWheelInviteCarrierCmd::~FerrisWheelInviteCarrierCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FerrisWheelInviteCarrierCmd)
  SharedDtor();
}

void FerrisWheelInviteCarrierCmd::SharedDtor() {
  if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete targetname_;
  }
  if (this != default_instance_) {
  }
}

void FerrisWheelInviteCarrierCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FerrisWheelInviteCarrierCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FerrisWheelInviteCarrierCmd_descriptor_;
}

const FerrisWheelInviteCarrierCmd& FerrisWheelInviteCarrierCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

FerrisWheelInviteCarrierCmd* FerrisWheelInviteCarrierCmd::default_instance_ = NULL;

FerrisWheelInviteCarrierCmd* FerrisWheelInviteCarrierCmd::New() const {
  return new FerrisWheelInviteCarrierCmd;
}

void FerrisWheelInviteCarrierCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 16;
    param_ = 12;
    targetid_ = GOOGLE_ULONGLONG(0);
    if (has_targetname()) {
      if (targetname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        targetname_->clear();
      }
    }
    id_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FerrisWheelInviteCarrierCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FerrisWheelInviteCarrierCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targetname;
        break;
      }

      // optional string targetname = 4;
      case 4: {
        if (tag == 34) {
         parse_targetname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->targetname().data(), this->targetname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "targetname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FerrisWheelInviteCarrierCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FerrisWheelInviteCarrierCmd)
  return false;
#undef DO_
}

void FerrisWheelInviteCarrierCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FerrisWheelInviteCarrierCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetid(), output);
  }

  // optional string targetname = 4;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->targetname(), output);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FerrisWheelInviteCarrierCmd)
}

::google::protobuf::uint8* FerrisWheelInviteCarrierCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FerrisWheelInviteCarrierCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetid(), target);
  }

  // optional string targetname = 4;
  if (has_targetname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->targetname().data(), this->targetname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "targetname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->targetname(), target);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FerrisWheelInviteCarrierCmd)
  return target;
}

int FerrisWheelInviteCarrierCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 targetid = 3 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional string targetname = 4;
    if (has_targetname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetname());
    }

    // optional uint32 id = 5 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FerrisWheelInviteCarrierCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FerrisWheelInviteCarrierCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FerrisWheelInviteCarrierCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FerrisWheelInviteCarrierCmd::MergeFrom(const FerrisWheelInviteCarrierCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_targetname()) {
      set_targetname(from.targetname());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FerrisWheelInviteCarrierCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FerrisWheelInviteCarrierCmd::CopyFrom(const FerrisWheelInviteCarrierCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FerrisWheelInviteCarrierCmd::IsInitialized() const {

  return true;
}

void FerrisWheelInviteCarrierCmd::Swap(FerrisWheelInviteCarrierCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetid_, other->targetid_);
    std::swap(targetname_, other->targetname_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FerrisWheelInviteCarrierCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FerrisWheelInviteCarrierCmd_descriptor_;
  metadata.reflection = FerrisWheelInviteCarrierCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FerrisWheelProcessInviteCarrierCmd::kCmdFieldNumber;
const int FerrisWheelProcessInviteCarrierCmd::kParamFieldNumber;
const int FerrisWheelProcessInviteCarrierCmd::kTargetidFieldNumber;
const int FerrisWheelProcessInviteCarrierCmd::kActionFieldNumber;
const int FerrisWheelProcessInviteCarrierCmd::kIdFieldNumber;
#endif  // !_MSC_VER

FerrisWheelProcessInviteCarrierCmd::FerrisWheelProcessInviteCarrierCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FerrisWheelProcessInviteCarrierCmd)
}

void FerrisWheelProcessInviteCarrierCmd::InitAsDefaultInstance() {
}

FerrisWheelProcessInviteCarrierCmd::FerrisWheelProcessInviteCarrierCmd(const FerrisWheelProcessInviteCarrierCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FerrisWheelProcessInviteCarrierCmd)
}

void FerrisWheelProcessInviteCarrierCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 13;
  targetid_ = GOOGLE_ULONGLONG(0);
  action_ = 0;
  id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FerrisWheelProcessInviteCarrierCmd::~FerrisWheelProcessInviteCarrierCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FerrisWheelProcessInviteCarrierCmd)
  SharedDtor();
}

void FerrisWheelProcessInviteCarrierCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FerrisWheelProcessInviteCarrierCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FerrisWheelProcessInviteCarrierCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FerrisWheelProcessInviteCarrierCmd_descriptor_;
}

const FerrisWheelProcessInviteCarrierCmd& FerrisWheelProcessInviteCarrierCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

FerrisWheelProcessInviteCarrierCmd* FerrisWheelProcessInviteCarrierCmd::default_instance_ = NULL;

FerrisWheelProcessInviteCarrierCmd* FerrisWheelProcessInviteCarrierCmd::New() const {
  return new FerrisWheelProcessInviteCarrierCmd;
}

void FerrisWheelProcessInviteCarrierCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FerrisWheelProcessInviteCarrierCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(targetid_, action_);
    cmd_ = 16;
    param_ = 13;
    id_ = 1u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FerrisWheelProcessInviteCarrierCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FerrisWheelProcessInviteCarrierCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_PROCESSINVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .Cmd.EFerrisAction action = 4 [default = EFERRISACTION_MIN];
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EFerrisAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EFerrisAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional uint32 id = 5 [default = 1];
      case 5: {
        if (tag == 40) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FerrisWheelProcessInviteCarrierCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FerrisWheelProcessInviteCarrierCmd)
  return false;
#undef DO_
}

void FerrisWheelProcessInviteCarrierCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FerrisWheelProcessInviteCarrierCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_PROCESSINVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetid(), output);
  }

  // optional .Cmd.EFerrisAction action = 4 [default = EFERRISACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FerrisWheelProcessInviteCarrierCmd)
}

::google::protobuf::uint8* FerrisWheelProcessInviteCarrierCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FerrisWheelProcessInviteCarrierCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_PROCESSINVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 targetid = 3 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetid(), target);
  }

  // optional .Cmd.EFerrisAction action = 4 [default = EFERRISACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional uint32 id = 5 [default = 1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FerrisWheelProcessInviteCarrierCmd)
  return target;
}

int FerrisWheelProcessInviteCarrierCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_FERRISWHEEL_PROCESSINVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 targetid = 3 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional .Cmd.EFerrisAction action = 4 [default = EFERRISACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 id = 5 [default = 1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FerrisWheelProcessInviteCarrierCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FerrisWheelProcessInviteCarrierCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FerrisWheelProcessInviteCarrierCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FerrisWheelProcessInviteCarrierCmd::MergeFrom(const FerrisWheelProcessInviteCarrierCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FerrisWheelProcessInviteCarrierCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FerrisWheelProcessInviteCarrierCmd::CopyFrom(const FerrisWheelProcessInviteCarrierCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FerrisWheelProcessInviteCarrierCmd::IsInitialized() const {

  return true;
}

void FerrisWheelProcessInviteCarrierCmd::Swap(FerrisWheelProcessInviteCarrierCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(targetid_, other->targetid_);
    std::swap(action_, other->action_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FerrisWheelProcessInviteCarrierCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FerrisWheelProcessInviteCarrierCmd_descriptor_;
  metadata.reflection = FerrisWheelProcessInviteCarrierCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartFerrisWheelUserCmd::kCmdFieldNumber;
const int StartFerrisWheelUserCmd::kParamFieldNumber;
const int StartFerrisWheelUserCmd::kCharidFieldNumber;
const int StartFerrisWheelUserCmd::kMasteridFieldNumber;
#endif  // !_MSC_VER

StartFerrisWheelUserCmd::StartFerrisWheelUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartFerrisWheelUserCmd)
}

void StartFerrisWheelUserCmd::InitAsDefaultInstance() {
}

StartFerrisWheelUserCmd::StartFerrisWheelUserCmd(const StartFerrisWheelUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartFerrisWheelUserCmd)
}

void StartFerrisWheelUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  masterid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartFerrisWheelUserCmd::~StartFerrisWheelUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartFerrisWheelUserCmd)
  SharedDtor();
}

void StartFerrisWheelUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartFerrisWheelUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFerrisWheelUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartFerrisWheelUserCmd_descriptor_;
}

const StartFerrisWheelUserCmd& StartFerrisWheelUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

StartFerrisWheelUserCmd* StartFerrisWheelUserCmd::default_instance_ = NULL;

StartFerrisWheelUserCmd* StartFerrisWheelUserCmd::New() const {
  return new StartFerrisWheelUserCmd;
}

void StartFerrisWheelUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StartFerrisWheelUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, masterid_);
    cmd_ = 16;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartFerrisWheelUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartFerrisWheelUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_START_FERRISWHEEL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartFerrisWheelUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartFerrisWheelUserCmd)
  return false;
#undef DO_
}

void StartFerrisWheelUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartFerrisWheelUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_START_FERRISWHEEL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartFerrisWheelUserCmd)
}

::google::protobuf::uint8* StartFerrisWheelUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartFerrisWheelUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_START_FERRISWHEEL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartFerrisWheelUserCmd)
  return target;
}

int StartFerrisWheelUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_START_FERRISWHEEL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 masterid = 4 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFerrisWheelUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartFerrisWheelUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartFerrisWheelUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartFerrisWheelUserCmd::MergeFrom(const StartFerrisWheelUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartFerrisWheelUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFerrisWheelUserCmd::CopyFrom(const StartFerrisWheelUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFerrisWheelUserCmd::IsInitialized() const {

  return true;
}

void StartFerrisWheelUserCmd::Swap(StartFerrisWheelUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(masterid_, other->masterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartFerrisWheelUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartFerrisWheelUserCmd_descriptor_;
  metadata.reflection = StartFerrisWheelUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CatchUserJoinCarrierUserCmd::kCmdFieldNumber;
const int CatchUserJoinCarrierUserCmd::kParamFieldNumber;
const int CatchUserJoinCarrierUserCmd::kCharidFieldNumber;
const int CatchUserJoinCarrierUserCmd::kMasteridFieldNumber;
const int CatchUserJoinCarrierUserCmd::kMapidFieldNumber;
#endif  // !_MSC_VER

CatchUserJoinCarrierUserCmd::CatchUserJoinCarrierUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CatchUserJoinCarrierUserCmd)
}

void CatchUserJoinCarrierUserCmd::InitAsDefaultInstance() {
}

CatchUserJoinCarrierUserCmd::CatchUserJoinCarrierUserCmd(const CatchUserJoinCarrierUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CatchUserJoinCarrierUserCmd)
}

void CatchUserJoinCarrierUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 16;
  param_ = 15;
  charid_ = GOOGLE_ULONGLONG(0);
  masterid_ = GOOGLE_ULONGLONG(0);
  mapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CatchUserJoinCarrierUserCmd::~CatchUserJoinCarrierUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CatchUserJoinCarrierUserCmd)
  SharedDtor();
}

void CatchUserJoinCarrierUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CatchUserJoinCarrierUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CatchUserJoinCarrierUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CatchUserJoinCarrierUserCmd_descriptor_;
}

const CatchUserJoinCarrierUserCmd& CatchUserJoinCarrierUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CarrierCmd_2eproto();
  return *default_instance_;
}

CatchUserJoinCarrierUserCmd* CatchUserJoinCarrierUserCmd::default_instance_ = NULL;

CatchUserJoinCarrierUserCmd* CatchUserJoinCarrierUserCmd::New() const {
  return new CatchUserJoinCarrierUserCmd;
}

void CatchUserJoinCarrierUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CatchUserJoinCarrierUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, mapid_);
    cmd_ = 16;
    param_ = 15;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CatchUserJoinCarrierUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CatchUserJoinCarrierUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CATCH_USER_JOIN_CARRIER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::CarrierParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::CarrierParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_masterid;
        break;
      }

      // optional uint64 masterid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_masterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &masterid_)));
          set_has_masterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CatchUserJoinCarrierUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CatchUserJoinCarrierUserCmd)
  return false;
#undef DO_
}

void CatchUserJoinCarrierUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CatchUserJoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CATCH_USER_JOIN_CARRIER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->masterid(), output);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CatchUserJoinCarrierUserCmd)
}

::google::protobuf::uint8* CatchUserJoinCarrierUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CatchUserJoinCarrierUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CATCH_USER_JOIN_CARRIER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 masterid = 4 [default = 0];
  if (has_masterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->masterid(), target);
  }

  // optional uint32 mapid = 5 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CatchUserJoinCarrierUserCmd)
  return target;
}

int CatchUserJoinCarrierUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CARRIER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.CarrierParam param = 2 [default = MAPPARAM_CATCH_USER_JOIN_CARRIER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 masterid = 4 [default = 0];
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->masterid());
    }

    // optional uint32 mapid = 5 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CatchUserJoinCarrierUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CatchUserJoinCarrierUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CatchUserJoinCarrierUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CatchUserJoinCarrierUserCmd::MergeFrom(const CatchUserJoinCarrierUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CatchUserJoinCarrierUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatchUserJoinCarrierUserCmd::CopyFrom(const CatchUserJoinCarrierUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatchUserJoinCarrierUserCmd::IsInitialized() const {

  return true;
}

void CatchUserJoinCarrierUserCmd::Swap(CatchUserJoinCarrierUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(masterid_, other->masterid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CatchUserJoinCarrierUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CatchUserJoinCarrierUserCmd_descriptor_;
  metadata.reflection = CatchUserJoinCarrierUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
