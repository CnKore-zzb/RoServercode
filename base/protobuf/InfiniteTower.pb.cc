// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: InfiniteTower.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "InfiniteTower.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* UserTowerLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTowerLayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTowerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTowerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTowerSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTowerSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTowerInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTowerInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTowerSummaryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTowerSummaryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTowerInviteCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTowerInviteCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamTowerReplyCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamTowerReplyCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterTower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterTower_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserTowerInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserTowerInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerLayerSyncTowerCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerLayerSyncTowerCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerInfoCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TowerParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETowerReply_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_InfiniteTower_2eproto() {
  protobuf_AddDesc_InfiniteTower_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "InfiniteTower.proto");
  GOOGLE_CHECK(file != NULL);
  UserTowerLayer_descriptor_ = file->message_type(0);
  static const int UserTowerLayer_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerLayer, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerLayer, utime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerLayer, rewarded_),
  };
  UserTowerLayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTowerLayer_descriptor_,
      UserTowerLayer::default_instance_,
      UserTowerLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerLayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerLayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTowerLayer));
  UserTowerInfo_descriptor_ = file->message_type(1);
  static const int UserTowerInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, oldmaxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, curmaxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, layers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, record_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, everpasslayers_),
  };
  UserTowerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTowerInfo_descriptor_,
      UserTowerInfo::default_instance_,
      UserTowerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTowerInfo));
  TeamTowerSummary_descriptor_ = file->message_type(2);
  static const int TeamTowerSummary_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, leadertower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, members_),
  };
  TeamTowerSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTowerSummary_descriptor_,
      TeamTowerSummary::default_instance_,
      TeamTowerSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTowerSummary));
  TeamTowerInfoCmd_descriptor_ = file->message_type(3);
  static const int TeamTowerInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInfoCmd, teamid_),
  };
  TeamTowerInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTowerInfoCmd_descriptor_,
      TeamTowerInfoCmd::default_instance_,
      TeamTowerInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTowerInfoCmd));
  TeamTowerSummaryCmd_descriptor_ = file->message_type(4);
  static const int TeamTowerSummaryCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, teamtower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, refreshtime_),
  };
  TeamTowerSummaryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTowerSummaryCmd_descriptor_,
      TeamTowerSummaryCmd::default_instance_,
      TeamTowerSummaryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerSummaryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTowerSummaryCmd));
  TeamTowerInviteCmd_descriptor_ = file->message_type(5);
  static const int TeamTowerInviteCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInviteCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInviteCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInviteCmd, iscancel_),
  };
  TeamTowerInviteCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTowerInviteCmd_descriptor_,
      TeamTowerInviteCmd::default_instance_,
      TeamTowerInviteCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInviteCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerInviteCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTowerInviteCmd));
  TeamTowerReplyCmd_descriptor_ = file->message_type(6);
  static const int TeamTowerReplyCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, ereply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, userid_),
  };
  TeamTowerReplyCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamTowerReplyCmd_descriptor_,
      TeamTowerReplyCmd::default_instance_,
      TeamTowerReplyCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamTowerReplyCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamTowerReplyCmd));
  EnterTower_descriptor_ = file->message_type(7);
  static const int EnterTower_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, sign_),
  };
  EnterTower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterTower_descriptor_,
      EnterTower::default_instance_,
      EnterTower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterTower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterTower));
  UserTowerInfoCmd_descriptor_ = file->message_type(8);
  static const int UserTowerInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfoCmd, usertower_),
  };
  UserTowerInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserTowerInfoCmd_descriptor_,
      UserTowerInfoCmd::default_instance_,
      UserTowerInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserTowerInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserTowerInfoCmd));
  TowerLayerSyncTowerCmd_descriptor_ = file->message_type(9);
  static const int TowerLayerSyncTowerCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncTowerCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncTowerCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncTowerCmd, layer_),
  };
  TowerLayerSyncTowerCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerLayerSyncTowerCmd_descriptor_,
      TowerLayerSyncTowerCmd::default_instance_,
      TowerLayerSyncTowerCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncTowerCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncTowerCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerLayerSyncTowerCmd));
  TowerInfoCmd_descriptor_ = file->message_type(10);
  static const int TowerInfoCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, refreshtime_),
  };
  TowerInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerInfoCmd_descriptor_,
      TowerInfoCmd::default_instance_,
      TowerInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerInfoCmd));
  TowerParam_descriptor_ = file->enum_type(0);
  ETowerReply_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_InfiniteTower_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTowerLayer_descriptor_, &UserTowerLayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTowerInfo_descriptor_, &UserTowerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTowerSummary_descriptor_, &TeamTowerSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTowerInfoCmd_descriptor_, &TeamTowerInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTowerSummaryCmd_descriptor_, &TeamTowerSummaryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTowerInviteCmd_descriptor_, &TeamTowerInviteCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamTowerReplyCmd_descriptor_, &TeamTowerReplyCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterTower_descriptor_, &EnterTower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserTowerInfoCmd_descriptor_, &UserTowerInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerLayerSyncTowerCmd_descriptor_, &TowerLayerSyncTowerCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerInfoCmd_descriptor_, &TowerInfoCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_InfiniteTower_2eproto() {
  delete UserTowerLayer::default_instance_;
  delete UserTowerLayer_reflection_;
  delete UserTowerInfo::default_instance_;
  delete UserTowerInfo_reflection_;
  delete TeamTowerSummary::default_instance_;
  delete TeamTowerSummary_reflection_;
  delete TeamTowerInfoCmd::default_instance_;
  delete TeamTowerInfoCmd_reflection_;
  delete TeamTowerSummaryCmd::default_instance_;
  delete TeamTowerSummaryCmd_reflection_;
  delete TeamTowerInviteCmd::default_instance_;
  delete TeamTowerInviteCmd_reflection_;
  delete TeamTowerReplyCmd::default_instance_;
  delete TeamTowerReplyCmd_reflection_;
  delete EnterTower::default_instance_;
  delete EnterTower_reflection_;
  delete UserTowerInfoCmd::default_instance_;
  delete UserTowerInfoCmd_reflection_;
  delete TowerLayerSyncTowerCmd::default_instance_;
  delete TowerLayerSyncTowerCmd_reflection_;
  delete TowerInfoCmd::default_instance_;
  delete TowerInfoCmd_reflection_;
}

void protobuf_AddDesc_InfiniteTower_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023InfiniteTower.proto\022\003Cmd\032\nxCmd.proto\"M"
    "\n\016UserTowerLayer\022\020\n\005layer\030\001 \001(\r:\0010\022\020\n\005ut"
    "ime\030\002 \001(\r:\0010\022\027\n\010rewarded\030\003 \001(\010:\005false\"\277\001"
    "\n\rUserTowerInfo\022\026\n\013oldmaxlayer\030\001 \001(\r:\0010\022"
    "\026\n\013curmaxlayer\030\002 \001(\r:\0010\022#\n\006layers\030\003 \003(\0132"
    "\023.Cmd.UserTowerLayer\022\023\n\010maxlayer\030\004 \001(\r:\001"
    "0\022\027\n\014record_layer\030\005 \001(\r:\0010\022+\n\016everpassla"
    "yers\030\006 \003(\0132\023.Cmd.UserTowerLayer\"q\n\020TeamT"
    "owerSummary\022\021\n\006teamid\030\001 \001(\004:\0010\022\020\n\005layer\030"
    "\002 \001(\r:\0010\022\'\n\013leadertower\030\004 \001(\0132\022.Cmd.User"
    "TowerInfo\022\017\n\007members\030\003 \003(\004\"\224\001\n\020TeamTower"
    "InfoCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027INFI"
    "NITE_TOWER_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd"
    ".TowerParam:\031ETOWERPARAM_TEAMTOWERINFO\022\021"
    "\n\006teamid\030\003 \001(\004:\0010\"\336\001\n\023TeamTowerSummaryCm"
    "d\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027INFINITE_T"
    "OWER_PROTOCMD\022<\n\005param\030\002 \001(\0162\017.Cmd.Tower"
    "Param:\034ETOWERPARAM_TEAMTOWERSUMMARY\022(\n\tt"
    "eamtower\030\003 \001(\0132\025.Cmd.TeamTowerSummary\022\023\n"
    "\010maxlayer\030\004 \001(\r:\0010\022\026\n\013refreshtime\030\005 \001(\r:"
    "\0010\"\225\001\n\022TeamTowerInviteCmd\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027INFINITE_TOWER_PROTOCMD\0222\n"
    "\005param\030\002 \001(\0162\017.Cmd.TowerParam:\022ETOWERPAR"
    "AM_INVITE\022\027\n\010iscancel\030\003 \001(\010:\005false\"\305\001\n\021T"
    "eamTowerReplyCmd\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\027INFINITE_TOWER_PROTOCMD\0221\n\005param\030\002 "
    "\001(\0162\017.Cmd.TowerParam:\021ETOWERPARAM_REPLY\022"
    "6\n\006eReply\030\003 \001(\0162\020.Cmd.ETowerReply:\024ETOWE"
    "RREPLY_DISAGREE\022\021\n\006userid\030\004 \001(\004:\0010\"\317\001\n\nE"
    "nterTower\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027IN"
    "FINITE_TOWER_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.C"
    "md.TowerParam:\026ETOWERPARAM_ENTERTOWER\022\020\n"
    "\005layer\030\003 \001(\r:\0010\022\021\n\006userid\030\004 \001(\004:\0010\022\021\n\006zo"
    "neid\030\005 \001(\r:\0010\022\017\n\004time\030\006 \001(\r:\0010\022\014\n\004sign\030\007"
    " \001(\t\"\250\001\n\020UserTowerInfoCmd\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027INFINITE_TOWER_PROTOCMD\0229\n"
    "\005param\030\002 \001(\0162\017.Cmd.TowerParam:\031ETOWERPAR"
    "AM_USERTOWERINFO\022%\n\tusertower\030\003 \001(\0132\022.Cm"
    "d.UserTowerInfo\"\226\001\n\026TowerLayerSyncTowerC"
    "md\0222\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\027INFINITE_"
    "TOWER_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.Towe"
    "rParam:\026ETOWERPARAM_LAYER_SYNC\022\020\n\005layer\030"
    "\003 \001(\r:\0010\"\246\001\n\014TowerInfoCmd\0222\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\027INFINITE_TOWER_PROTOCMD\0225\n"
    "\005param\030\002 \001(\0162\017.Cmd.TowerParam:\025ETOWERPAR"
    "AM_TOWERINFO\022\023\n\010maxlayer\030\003 \001(\r:\0010\022\026\n\013ref"
    "reshtime\030\004 \001(\r:\0010*\356\001\n\nTowerParam\022\035\n\031ETOW"
    "ERPARAM_TEAMTOWERINFO\020\001\022 \n\034ETOWERPARAM_T"
    "EAMTOWERSUMMARY\020\002\022\026\n\022ETOWERPARAM_INVITE\020"
    "\003\022\025\n\021ETOWERPARAM_REPLY\020\004\022\032\n\026ETOWERPARAM_"
    "ENTERTOWER\020\005\022\035\n\031ETOWERPARAM_USERTOWERINF"
    "O\020\007\022\032\n\026ETOWERPARAM_LAYER_SYNC\020\010\022\031\n\025ETOWE"
    "RPARAM_TOWERINFO\020\n*>\n\013ETowerReply\022\025\n\021ETO"
    "WERREPLY_AGREE\020\001\022\030\n\024ETOWERREPLY_DISAGREE"
    "\020\002", 2162);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "InfiniteTower.proto", &protobuf_RegisterTypes);
  UserTowerLayer::default_instance_ = new UserTowerLayer();
  UserTowerInfo::default_instance_ = new UserTowerInfo();
  TeamTowerSummary::default_instance_ = new TeamTowerSummary();
  TeamTowerInfoCmd::default_instance_ = new TeamTowerInfoCmd();
  TeamTowerSummaryCmd::default_instance_ = new TeamTowerSummaryCmd();
  TeamTowerInviteCmd::default_instance_ = new TeamTowerInviteCmd();
  TeamTowerReplyCmd::default_instance_ = new TeamTowerReplyCmd();
  EnterTower::default_instance_ = new EnterTower();
  UserTowerInfoCmd::default_instance_ = new UserTowerInfoCmd();
  TowerLayerSyncTowerCmd::default_instance_ = new TowerLayerSyncTowerCmd();
  TowerInfoCmd::default_instance_ = new TowerInfoCmd();
  UserTowerLayer::default_instance_->InitAsDefaultInstance();
  UserTowerInfo::default_instance_->InitAsDefaultInstance();
  TeamTowerSummary::default_instance_->InitAsDefaultInstance();
  TeamTowerInfoCmd::default_instance_->InitAsDefaultInstance();
  TeamTowerSummaryCmd::default_instance_->InitAsDefaultInstance();
  TeamTowerInviteCmd::default_instance_->InitAsDefaultInstance();
  TeamTowerReplyCmd::default_instance_->InitAsDefaultInstance();
  EnterTower::default_instance_->InitAsDefaultInstance();
  UserTowerInfoCmd::default_instance_->InitAsDefaultInstance();
  TowerLayerSyncTowerCmd::default_instance_->InitAsDefaultInstance();
  TowerInfoCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_InfiniteTower_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_InfiniteTower_2eproto {
  StaticDescriptorInitializer_InfiniteTower_2eproto() {
    protobuf_AddDesc_InfiniteTower_2eproto();
  }
} static_descriptor_initializer_InfiniteTower_2eproto_;
const ::google::protobuf::EnumDescriptor* TowerParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerParam_descriptor_;
}
bool TowerParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETowerReply_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETowerReply_descriptor_;
}
bool ETowerReply_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserTowerLayer::kLayerFieldNumber;
const int UserTowerLayer::kUtimeFieldNumber;
const int UserTowerLayer::kRewardedFieldNumber;
#endif  // !_MSC_VER

UserTowerLayer::UserTowerLayer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserTowerLayer)
}

void UserTowerLayer::InitAsDefaultInstance() {
}

UserTowerLayer::UserTowerLayer(const UserTowerLayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserTowerLayer)
}

void UserTowerLayer::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0u;
  utime_ = 0u;
  rewarded_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTowerLayer::~UserTowerLayer() {
  // @@protoc_insertion_point(destructor:Cmd.UserTowerLayer)
  SharedDtor();
}

void UserTowerLayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTowerLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTowerLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTowerLayer_descriptor_;
}

const UserTowerLayer& UserTowerLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

UserTowerLayer* UserTowerLayer::default_instance_ = NULL;

UserTowerLayer* UserTowerLayer::New() const {
  return new UserTowerLayer;
}

void UserTowerLayer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTowerLayer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(layer_, rewarded_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTowerLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserTowerLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 layer = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_utime;
        break;
      }

      // optional uint32 utime = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_utime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utime_)));
          set_has_utime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_rewarded;
        break;
      }

      // optional bool rewarded = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_rewarded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewarded_)));
          set_has_rewarded();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserTowerLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserTowerLayer)
  return false;
#undef DO_
}

void UserTowerLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserTowerLayer)
  // optional uint32 layer = 1 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->layer(), output);
  }

  // optional uint32 utime = 2 [default = 0];
  if (has_utime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->utime(), output);
  }

  // optional bool rewarded = 3 [default = false];
  if (has_rewarded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->rewarded(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserTowerLayer)
}

::google::protobuf::uint8* UserTowerLayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserTowerLayer)
  // optional uint32 layer = 1 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->layer(), target);
  }

  // optional uint32 utime = 2 [default = 0];
  if (has_utime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->utime(), target);
  }

  // optional bool rewarded = 3 [default = false];
  if (has_rewarded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->rewarded(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserTowerLayer)
  return target;
}

int UserTowerLayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 layer = 1 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint32 utime = 2 [default = 0];
    if (has_utime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utime());
    }

    // optional bool rewarded = 3 [default = false];
    if (has_rewarded()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTowerLayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTowerLayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTowerLayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTowerLayer::MergeFrom(const UserTowerLayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_utime()) {
      set_utime(from.utime());
    }
    if (from.has_rewarded()) {
      set_rewarded(from.rewarded());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTowerLayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTowerLayer::CopyFrom(const UserTowerLayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTowerLayer::IsInitialized() const {

  return true;
}

void UserTowerLayer::Swap(UserTowerLayer* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(utime_, other->utime_);
    std::swap(rewarded_, other->rewarded_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTowerLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTowerLayer_descriptor_;
  metadata.reflection = UserTowerLayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTowerInfo::kOldmaxlayerFieldNumber;
const int UserTowerInfo::kCurmaxlayerFieldNumber;
const int UserTowerInfo::kLayersFieldNumber;
const int UserTowerInfo::kMaxlayerFieldNumber;
const int UserTowerInfo::kRecordLayerFieldNumber;
const int UserTowerInfo::kEverpasslayersFieldNumber;
#endif  // !_MSC_VER

UserTowerInfo::UserTowerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserTowerInfo)
}

void UserTowerInfo::InitAsDefaultInstance() {
}

UserTowerInfo::UserTowerInfo(const UserTowerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserTowerInfo)
}

void UserTowerInfo::SharedCtor() {
  _cached_size_ = 0;
  oldmaxlayer_ = 0u;
  curmaxlayer_ = 0u;
  maxlayer_ = 0u;
  record_layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTowerInfo::~UserTowerInfo() {
  // @@protoc_insertion_point(destructor:Cmd.UserTowerInfo)
  SharedDtor();
}

void UserTowerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserTowerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTowerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTowerInfo_descriptor_;
}

const UserTowerInfo& UserTowerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

UserTowerInfo* UserTowerInfo::default_instance_ = NULL;

UserTowerInfo* UserTowerInfo::New() const {
  return new UserTowerInfo;
}

void UserTowerInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserTowerInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(oldmaxlayer_, curmaxlayer_);
  ZR_(maxlayer_, record_layer_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  layers_.Clear();
  everpasslayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTowerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserTowerInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 oldmaxlayer = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldmaxlayer_)));
          set_has_oldmaxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_curmaxlayer;
        break;
      }

      // optional uint32 curmaxlayer = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_curmaxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curmaxlayer_)));
          set_has_curmaxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layers;
        break;
      }

      // repeated .Cmd.UserTowerLayer layers = 3;
      case 3: {
        if (tag == 26) {
         parse_layers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_layers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_layers;
        if (input->ExpectTag(32)) goto parse_maxlayer;
        break;
      }

      // optional uint32 maxlayer = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_record_layer;
        break;
      }

      // optional uint32 record_layer = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_record_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &record_layer_)));
          set_has_record_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_everpasslayers;
        break;
      }

      // repeated .Cmd.UserTowerLayer everpasslayers = 6;
      case 6: {
        if (tag == 50) {
         parse_everpasslayers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_everpasslayers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_everpasslayers;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserTowerInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserTowerInfo)
  return false;
#undef DO_
}

void UserTowerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserTowerInfo)
  // optional uint32 oldmaxlayer = 1 [default = 0];
  if (has_oldmaxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->oldmaxlayer(), output);
  }

  // optional uint32 curmaxlayer = 2 [default = 0];
  if (has_curmaxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curmaxlayer(), output);
  }

  // repeated .Cmd.UserTowerLayer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->layers(i), output);
  }

  // optional uint32 maxlayer = 4 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxlayer(), output);
  }

  // optional uint32 record_layer = 5 [default = 0];
  if (has_record_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->record_layer(), output);
  }

  // repeated .Cmd.UserTowerLayer everpasslayers = 6;
  for (int i = 0; i < this->everpasslayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->everpasslayers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserTowerInfo)
}

::google::protobuf::uint8* UserTowerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserTowerInfo)
  // optional uint32 oldmaxlayer = 1 [default = 0];
  if (has_oldmaxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->oldmaxlayer(), target);
  }

  // optional uint32 curmaxlayer = 2 [default = 0];
  if (has_curmaxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curmaxlayer(), target);
  }

  // repeated .Cmd.UserTowerLayer layers = 3;
  for (int i = 0; i < this->layers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->layers(i), target);
  }

  // optional uint32 maxlayer = 4 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxlayer(), target);
  }

  // optional uint32 record_layer = 5 [default = 0];
  if (has_record_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->record_layer(), target);
  }

  // repeated .Cmd.UserTowerLayer everpasslayers = 6;
  for (int i = 0; i < this->everpasslayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->everpasslayers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserTowerInfo)
  return target;
}

int UserTowerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 oldmaxlayer = 1 [default = 0];
    if (has_oldmaxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldmaxlayer());
    }

    // optional uint32 curmaxlayer = 2 [default = 0];
    if (has_curmaxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curmaxlayer());
    }

    // optional uint32 maxlayer = 4 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

    // optional uint32 record_layer = 5 [default = 0];
    if (has_record_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->record_layer());
    }

  }
  // repeated .Cmd.UserTowerLayer layers = 3;
  total_size += 1 * this->layers_size();
  for (int i = 0; i < this->layers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->layers(i));
  }

  // repeated .Cmd.UserTowerLayer everpasslayers = 6;
  total_size += 1 * this->everpasslayers_size();
  for (int i = 0; i < this->everpasslayers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->everpasslayers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTowerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTowerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTowerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTowerInfo::MergeFrom(const UserTowerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  layers_.MergeFrom(from.layers_);
  everpasslayers_.MergeFrom(from.everpasslayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_oldmaxlayer()) {
      set_oldmaxlayer(from.oldmaxlayer());
    }
    if (from.has_curmaxlayer()) {
      set_curmaxlayer(from.curmaxlayer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_record_layer()) {
      set_record_layer(from.record_layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTowerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTowerInfo::CopyFrom(const UserTowerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTowerInfo::IsInitialized() const {

  return true;
}

void UserTowerInfo::Swap(UserTowerInfo* other) {
  if (other != this) {
    std::swap(oldmaxlayer_, other->oldmaxlayer_);
    std::swap(curmaxlayer_, other->curmaxlayer_);
    layers_.Swap(&other->layers_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(record_layer_, other->record_layer_);
    everpasslayers_.Swap(&other->everpasslayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTowerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTowerInfo_descriptor_;
  metadata.reflection = UserTowerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTowerSummary::kTeamidFieldNumber;
const int TeamTowerSummary::kLayerFieldNumber;
const int TeamTowerSummary::kLeadertowerFieldNumber;
const int TeamTowerSummary::kMembersFieldNumber;
#endif  // !_MSC_VER

TeamTowerSummary::TeamTowerSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamTowerSummary)
}

void TeamTowerSummary::InitAsDefaultInstance() {
  leadertower_ = const_cast< ::Cmd::UserTowerInfo*>(&::Cmd::UserTowerInfo::default_instance());
}

TeamTowerSummary::TeamTowerSummary(const TeamTowerSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamTowerSummary)
}

void TeamTowerSummary::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_ULONGLONG(0);
  layer_ = 0u;
  leadertower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTowerSummary::~TeamTowerSummary() {
  // @@protoc_insertion_point(destructor:Cmd.TeamTowerSummary)
  SharedDtor();
}

void TeamTowerSummary::SharedDtor() {
  if (this != default_instance_) {
    delete leadertower_;
  }
}

void TeamTowerSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTowerSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTowerSummary_descriptor_;
}

const TeamTowerSummary& TeamTowerSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TeamTowerSummary* TeamTowerSummary::default_instance_ = NULL;

TeamTowerSummary* TeamTowerSummary::New() const {
  return new TeamTowerSummary;
}

void TeamTowerSummary::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    teamid_ = GOOGLE_ULONGLONG(0);
    layer_ = 0u;
    if (has_leadertower()) {
      if (leadertower_ != NULL) leadertower_->::Cmd::UserTowerInfo::Clear();
    }
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTowerSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamTowerSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 teamid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_members;
        break;
      }

      // repeated uint64 members = 3;
      case 3: {
        if (tag == 24) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_members())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_members())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_members;
        if (input->ExpectTag(34)) goto parse_leadertower;
        break;
      }

      // optional .Cmd.UserTowerInfo leadertower = 4;
      case 4: {
        if (tag == 34) {
         parse_leadertower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leadertower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamTowerSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamTowerSummary)
  return false;
#undef DO_
}

void TeamTowerSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamTowerSummary)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->teamid(), output);
  }

  // optional uint32 layer = 2 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->layer(), output);
  }

  // repeated uint64 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->members(i), output);
  }

  // optional .Cmd.UserTowerInfo leadertower = 4;
  if (has_leadertower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->leadertower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamTowerSummary)
}

::google::protobuf::uint8* TeamTowerSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamTowerSummary)
  // optional uint64 teamid = 1 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->teamid(), target);
  }

  // optional uint32 layer = 2 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->layer(), target);
  }

  // repeated uint64 members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->members(i), target);
  }

  // optional .Cmd.UserTowerInfo leadertower = 4;
  if (has_leadertower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->leadertower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamTowerSummary)
  return target;
}

int TeamTowerSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 teamid = 1 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 layer = 2 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional .Cmd.UserTowerInfo leadertower = 4;
    if (has_leadertower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leadertower());
    }

  }
  // repeated uint64 members = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTowerSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTowerSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTowerSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTowerSummary::MergeFrom(const TeamTowerSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_leadertower()) {
      mutable_leadertower()->::Cmd::UserTowerInfo::MergeFrom(from.leadertower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTowerSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTowerSummary::CopyFrom(const TeamTowerSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTowerSummary::IsInitialized() const {

  return true;
}

void TeamTowerSummary::Swap(TeamTowerSummary* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(layer_, other->layer_);
    std::swap(leadertower_, other->leadertower_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTowerSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTowerSummary_descriptor_;
  metadata.reflection = TeamTowerSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTowerInfoCmd::kCmdFieldNumber;
const int TeamTowerInfoCmd::kParamFieldNumber;
const int TeamTowerInfoCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

TeamTowerInfoCmd::TeamTowerInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamTowerInfoCmd)
}

void TeamTowerInfoCmd::InitAsDefaultInstance() {
}

TeamTowerInfoCmd::TeamTowerInfoCmd(const TeamTowerInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamTowerInfoCmd)
}

void TeamTowerInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 1;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTowerInfoCmd::~TeamTowerInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamTowerInfoCmd)
  SharedDtor();
}

void TeamTowerInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamTowerInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTowerInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTowerInfoCmd_descriptor_;
}

const TeamTowerInfoCmd& TeamTowerInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TeamTowerInfoCmd* TeamTowerInfoCmd::default_instance_ = NULL;

TeamTowerInfoCmd* TeamTowerInfoCmd::New() const {
  return new TeamTowerInfoCmd;
}

void TeamTowerInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 20;
    param_ = 1;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTowerInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamTowerInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamTowerInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamTowerInfoCmd)
  return false;
#undef DO_
}

void TeamTowerInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamTowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamTowerInfoCmd)
}

::google::protobuf::uint8* TeamTowerInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamTowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamTowerInfoCmd)
  return target;
}

int TeamTowerInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTowerInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTowerInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTowerInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTowerInfoCmd::MergeFrom(const TeamTowerInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTowerInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTowerInfoCmd::CopyFrom(const TeamTowerInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTowerInfoCmd::IsInitialized() const {

  return true;
}

void TeamTowerInfoCmd::Swap(TeamTowerInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTowerInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTowerInfoCmd_descriptor_;
  metadata.reflection = TeamTowerInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTowerSummaryCmd::kCmdFieldNumber;
const int TeamTowerSummaryCmd::kParamFieldNumber;
const int TeamTowerSummaryCmd::kTeamtowerFieldNumber;
const int TeamTowerSummaryCmd::kMaxlayerFieldNumber;
const int TeamTowerSummaryCmd::kRefreshtimeFieldNumber;
#endif  // !_MSC_VER

TeamTowerSummaryCmd::TeamTowerSummaryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamTowerSummaryCmd)
}

void TeamTowerSummaryCmd::InitAsDefaultInstance() {
  teamtower_ = const_cast< ::Cmd::TeamTowerSummary*>(&::Cmd::TeamTowerSummary::default_instance());
}

TeamTowerSummaryCmd::TeamTowerSummaryCmd(const TeamTowerSummaryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamTowerSummaryCmd)
}

void TeamTowerSummaryCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 2;
  teamtower_ = NULL;
  maxlayer_ = 0u;
  refreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTowerSummaryCmd::~TeamTowerSummaryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamTowerSummaryCmd)
  SharedDtor();
}

void TeamTowerSummaryCmd::SharedDtor() {
  if (this != default_instance_) {
    delete teamtower_;
  }
}

void TeamTowerSummaryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTowerSummaryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTowerSummaryCmd_descriptor_;
}

const TeamTowerSummaryCmd& TeamTowerSummaryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TeamTowerSummaryCmd* TeamTowerSummaryCmd::default_instance_ = NULL;

TeamTowerSummaryCmd* TeamTowerSummaryCmd::New() const {
  return new TeamTowerSummaryCmd;
}

void TeamTowerSummaryCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamTowerSummaryCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(maxlayer_, refreshtime_);
    cmd_ = 20;
    param_ = 2;
    if (has_teamtower()) {
      if (teamtower_ != NULL) teamtower_->::Cmd::TeamTowerSummary::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTowerSummaryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamTowerSummaryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERSUMMARY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_teamtower;
        break;
      }

      // optional .Cmd.TeamTowerSummary teamtower = 3;
      case 3: {
        if (tag == 26) {
         parse_teamtower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamtower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxlayer;
        break;
      }

      // optional uint32 maxlayer = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_refreshtime;
        break;
      }

      // optional uint32 refreshtime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_refreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamTowerSummaryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamTowerSummaryCmd)
  return false;
#undef DO_
}

void TeamTowerSummaryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamTowerSummaryCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERSUMMARY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TeamTowerSummary teamtower = 3;
  if (has_teamtower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->teamtower(), output);
  }

  // optional uint32 maxlayer = 4 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxlayer(), output);
  }

  // optional uint32 refreshtime = 5 [default = 0];
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamTowerSummaryCmd)
}

::google::protobuf::uint8* TeamTowerSummaryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamTowerSummaryCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERSUMMARY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TeamTowerSummary teamtower = 3;
  if (has_teamtower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->teamtower(), target);
  }

  // optional uint32 maxlayer = 4 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxlayer(), target);
  }

  // optional uint32 refreshtime = 5 [default = 0];
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamTowerSummaryCmd)
  return target;
}

int TeamTowerSummaryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TEAMTOWERSUMMARY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TeamTowerSummary teamtower = 3;
    if (has_teamtower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamtower());
    }

    // optional uint32 maxlayer = 4 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

    // optional uint32 refreshtime = 5 [default = 0];
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTowerSummaryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTowerSummaryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTowerSummaryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTowerSummaryCmd::MergeFrom(const TeamTowerSummaryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamtower()) {
      mutable_teamtower()->::Cmd::TeamTowerSummary::MergeFrom(from.teamtower());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTowerSummaryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTowerSummaryCmd::CopyFrom(const TeamTowerSummaryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTowerSummaryCmd::IsInitialized() const {

  return true;
}

void TeamTowerSummaryCmd::Swap(TeamTowerSummaryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamtower_, other->teamtower_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTowerSummaryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTowerSummaryCmd_descriptor_;
  metadata.reflection = TeamTowerSummaryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTowerInviteCmd::kCmdFieldNumber;
const int TeamTowerInviteCmd::kParamFieldNumber;
const int TeamTowerInviteCmd::kIscancelFieldNumber;
#endif  // !_MSC_VER

TeamTowerInviteCmd::TeamTowerInviteCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamTowerInviteCmd)
}

void TeamTowerInviteCmd::InitAsDefaultInstance() {
}

TeamTowerInviteCmd::TeamTowerInviteCmd(const TeamTowerInviteCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamTowerInviteCmd)
}

void TeamTowerInviteCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 3;
  iscancel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTowerInviteCmd::~TeamTowerInviteCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamTowerInviteCmd)
  SharedDtor();
}

void TeamTowerInviteCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamTowerInviteCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTowerInviteCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTowerInviteCmd_descriptor_;
}

const TeamTowerInviteCmd& TeamTowerInviteCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TeamTowerInviteCmd* TeamTowerInviteCmd::default_instance_ = NULL;

TeamTowerInviteCmd* TeamTowerInviteCmd::New() const {
  return new TeamTowerInviteCmd;
}

void TeamTowerInviteCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 20;
    param_ = 3;
    iscancel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTowerInviteCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamTowerInviteCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_iscancel;
        break;
      }

      // optional bool iscancel = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_iscancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscancel_)));
          set_has_iscancel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamTowerInviteCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamTowerInviteCmd)
  return false;
#undef DO_
}

void TeamTowerInviteCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamTowerInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool iscancel = 3 [default = false];
  if (has_iscancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iscancel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamTowerInviteCmd)
}

::google::protobuf::uint8* TeamTowerInviteCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamTowerInviteCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool iscancel = 3 [default = false];
  if (has_iscancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iscancel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamTowerInviteCmd)
  return target;
}

int TeamTowerInviteCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool iscancel = 3 [default = false];
    if (has_iscancel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTowerInviteCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTowerInviteCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTowerInviteCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTowerInviteCmd::MergeFrom(const TeamTowerInviteCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_iscancel()) {
      set_iscancel(from.iscancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTowerInviteCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTowerInviteCmd::CopyFrom(const TeamTowerInviteCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTowerInviteCmd::IsInitialized() const {

  return true;
}

void TeamTowerInviteCmd::Swap(TeamTowerInviteCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(iscancel_, other->iscancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTowerInviteCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTowerInviteCmd_descriptor_;
  metadata.reflection = TeamTowerInviteCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamTowerReplyCmd::kCmdFieldNumber;
const int TeamTowerReplyCmd::kParamFieldNumber;
const int TeamTowerReplyCmd::kEReplyFieldNumber;
const int TeamTowerReplyCmd::kUseridFieldNumber;
#endif  // !_MSC_VER

TeamTowerReplyCmd::TeamTowerReplyCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamTowerReplyCmd)
}

void TeamTowerReplyCmd::InitAsDefaultInstance() {
}

TeamTowerReplyCmd::TeamTowerReplyCmd(const TeamTowerReplyCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamTowerReplyCmd)
}

void TeamTowerReplyCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 4;
  ereply_ = 2;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamTowerReplyCmd::~TeamTowerReplyCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamTowerReplyCmd)
  SharedDtor();
}

void TeamTowerReplyCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamTowerReplyCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamTowerReplyCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamTowerReplyCmd_descriptor_;
}

const TeamTowerReplyCmd& TeamTowerReplyCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TeamTowerReplyCmd* TeamTowerReplyCmd::default_instance_ = NULL;

TeamTowerReplyCmd* TeamTowerReplyCmd::New() const {
  return new TeamTowerReplyCmd;
}

void TeamTowerReplyCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 20;
    param_ = 4;
    ereply_ = 2;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamTowerReplyCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamTowerReplyCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eReply;
        break;
      }

      // optional .Cmd.ETowerReply eReply = 3 [default = ETOWERREPLY_DISAGREE];
      case 3: {
        if (tag == 24) {
         parse_eReply:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETowerReply_IsValid(value)) {
            set_ereply(static_cast< ::Cmd::ETowerReply >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamTowerReplyCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamTowerReplyCmd)
  return false;
#undef DO_
}

void TeamTowerReplyCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamTowerReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETowerReply eReply = 3 [default = ETOWERREPLY_DISAGREE];
  if (has_ereply()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ereply(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamTowerReplyCmd)
}

::google::protobuf::uint8* TeamTowerReplyCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamTowerReplyCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETowerReply eReply = 3 [default = ETOWERREPLY_DISAGREE];
  if (has_ereply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ereply(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamTowerReplyCmd)
  return target;
}

int TeamTowerReplyCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETowerReply eReply = 3 [default = ETOWERREPLY_DISAGREE];
    if (has_ereply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ereply());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamTowerReplyCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamTowerReplyCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamTowerReplyCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamTowerReplyCmd::MergeFrom(const TeamTowerReplyCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ereply()) {
      set_ereply(from.ereply());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamTowerReplyCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamTowerReplyCmd::CopyFrom(const TeamTowerReplyCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamTowerReplyCmd::IsInitialized() const {

  return true;
}

void TeamTowerReplyCmd::Swap(TeamTowerReplyCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ereply_, other->ereply_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamTowerReplyCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamTowerReplyCmd_descriptor_;
  metadata.reflection = TeamTowerReplyCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterTower::kCmdFieldNumber;
const int EnterTower::kParamFieldNumber;
const int EnterTower::kLayerFieldNumber;
const int EnterTower::kUseridFieldNumber;
const int EnterTower::kZoneidFieldNumber;
const int EnterTower::kTimeFieldNumber;
const int EnterTower::kSignFieldNumber;
#endif  // !_MSC_VER

EnterTower::EnterTower()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterTower)
}

void EnterTower::InitAsDefaultInstance() {
}

EnterTower::EnterTower(const EnterTower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterTower)
}

void EnterTower::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 5;
  layer_ = 0u;
  userid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  time_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterTower::~EnterTower() {
  // @@protoc_insertion_point(destructor:Cmd.EnterTower)
  SharedDtor();
}

void EnterTower::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void EnterTower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterTower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterTower_descriptor_;
}

const EnterTower& EnterTower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

EnterTower* EnterTower::default_instance_ = NULL;

EnterTower* EnterTower::New() const {
  return new EnterTower;
}

void EnterTower::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EnterTower*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(userid_, zoneid_);
    cmd_ = 20;
    param_ = 5;
    time_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sign_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterTower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterTower)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_ENTERTOWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint32 time = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (tag == 58) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterTower)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterTower)
  return false;
#undef DO_
}

void EnterTower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterTower)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_ENTERTOWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 layer = 3 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layer(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->time(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterTower)
}

::google::protobuf::uint8* EnterTower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterTower)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_ENTERTOWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 layer = 3 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->layer(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  // optional uint32 zoneid = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 time = 6 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->time(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterTower)
  return target;
}

int EnterTower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_ENTERTOWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 layer = 3 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint32 zoneid = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 time = 6 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterTower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterTower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterTower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterTower::MergeFrom(const EnterTower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterTower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterTower::CopyFrom(const EnterTower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterTower::IsInitialized() const {

  return true;
}

void EnterTower::Swap(EnterTower* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(layer_, other->layer_);
    std::swap(userid_, other->userid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(time_, other->time_);
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterTower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterTower_descriptor_;
  metadata.reflection = EnterTower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserTowerInfoCmd::kCmdFieldNumber;
const int UserTowerInfoCmd::kParamFieldNumber;
const int UserTowerInfoCmd::kUsertowerFieldNumber;
#endif  // !_MSC_VER

UserTowerInfoCmd::UserTowerInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserTowerInfoCmd)
}

void UserTowerInfoCmd::InitAsDefaultInstance() {
  usertower_ = const_cast< ::Cmd::UserTowerInfo*>(&::Cmd::UserTowerInfo::default_instance());
}

UserTowerInfoCmd::UserTowerInfoCmd(const UserTowerInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserTowerInfoCmd)
}

void UserTowerInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 7;
  usertower_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserTowerInfoCmd::~UserTowerInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserTowerInfoCmd)
  SharedDtor();
}

void UserTowerInfoCmd::SharedDtor() {
  if (this != default_instance_) {
    delete usertower_;
  }
}

void UserTowerInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserTowerInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserTowerInfoCmd_descriptor_;
}

const UserTowerInfoCmd& UserTowerInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

UserTowerInfoCmd* UserTowerInfoCmd::default_instance_ = NULL;

UserTowerInfoCmd* UserTowerInfoCmd::New() const {
  return new UserTowerInfoCmd;
}

void UserTowerInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 20;
    param_ = 7;
    if (has_usertower()) {
      if (usertower_ != NULL) usertower_->::Cmd::UserTowerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserTowerInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserTowerInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_USERTOWERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_usertower;
        break;
      }

      // optional .Cmd.UserTowerInfo usertower = 3;
      case 3: {
        if (tag == 26) {
         parse_usertower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usertower()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserTowerInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserTowerInfoCmd)
  return false;
#undef DO_
}

void UserTowerInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserTowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_USERTOWERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserTowerInfo usertower = 3;
  if (has_usertower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->usertower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserTowerInfoCmd)
}

::google::protobuf::uint8* UserTowerInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserTowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_USERTOWERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserTowerInfo usertower = 3;
  if (has_usertower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->usertower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserTowerInfoCmd)
  return target;
}

int UserTowerInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_USERTOWERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserTowerInfo usertower = 3;
    if (has_usertower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usertower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserTowerInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserTowerInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserTowerInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserTowerInfoCmd::MergeFrom(const UserTowerInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_usertower()) {
      mutable_usertower()->::Cmd::UserTowerInfo::MergeFrom(from.usertower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserTowerInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserTowerInfoCmd::CopyFrom(const UserTowerInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserTowerInfoCmd::IsInitialized() const {

  return true;
}

void UserTowerInfoCmd::Swap(UserTowerInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(usertower_, other->usertower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserTowerInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserTowerInfoCmd_descriptor_;
  metadata.reflection = UserTowerInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerLayerSyncTowerCmd::kCmdFieldNumber;
const int TowerLayerSyncTowerCmd::kParamFieldNumber;
const int TowerLayerSyncTowerCmd::kLayerFieldNumber;
#endif  // !_MSC_VER

TowerLayerSyncTowerCmd::TowerLayerSyncTowerCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerLayerSyncTowerCmd)
}

void TowerLayerSyncTowerCmd::InitAsDefaultInstance() {
}

TowerLayerSyncTowerCmd::TowerLayerSyncTowerCmd(const TowerLayerSyncTowerCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerLayerSyncTowerCmd)
}

void TowerLayerSyncTowerCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 8;
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerLayerSyncTowerCmd::~TowerLayerSyncTowerCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerLayerSyncTowerCmd)
  SharedDtor();
}

void TowerLayerSyncTowerCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerLayerSyncTowerCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerLayerSyncTowerCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerLayerSyncTowerCmd_descriptor_;
}

const TowerLayerSyncTowerCmd& TowerLayerSyncTowerCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TowerLayerSyncTowerCmd* TowerLayerSyncTowerCmd::default_instance_ = NULL;

TowerLayerSyncTowerCmd* TowerLayerSyncTowerCmd::New() const {
  return new TowerLayerSyncTowerCmd;
}

void TowerLayerSyncTowerCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 20;
    param_ = 8;
    layer_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerLayerSyncTowerCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerLayerSyncTowerCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_LAYER_SYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerLayerSyncTowerCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerLayerSyncTowerCmd)
  return false;
#undef DO_
}

void TowerLayerSyncTowerCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerLayerSyncTowerCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_LAYER_SYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 layer = 3 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerLayerSyncTowerCmd)
}

::google::protobuf::uint8* TowerLayerSyncTowerCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerLayerSyncTowerCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_LAYER_SYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 layer = 3 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerLayerSyncTowerCmd)
  return target;
}

int TowerLayerSyncTowerCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_LAYER_SYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 layer = 3 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerLayerSyncTowerCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerLayerSyncTowerCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerLayerSyncTowerCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerLayerSyncTowerCmd::MergeFrom(const TowerLayerSyncTowerCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerLayerSyncTowerCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerLayerSyncTowerCmd::CopyFrom(const TowerLayerSyncTowerCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerLayerSyncTowerCmd::IsInitialized() const {

  return true;
}

void TowerLayerSyncTowerCmd::Swap(TowerLayerSyncTowerCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerLayerSyncTowerCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerLayerSyncTowerCmd_descriptor_;
  metadata.reflection = TowerLayerSyncTowerCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerInfoCmd::kCmdFieldNumber;
const int TowerInfoCmd::kParamFieldNumber;
const int TowerInfoCmd::kMaxlayerFieldNumber;
const int TowerInfoCmd::kRefreshtimeFieldNumber;
#endif  // !_MSC_VER

TowerInfoCmd::TowerInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerInfoCmd)
}

void TowerInfoCmd::InitAsDefaultInstance() {
}

TowerInfoCmd::TowerInfoCmd(const TowerInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerInfoCmd)
}

void TowerInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 20;
  param_ = 10;
  maxlayer_ = 0u;
  refreshtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerInfoCmd::~TowerInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerInfoCmd)
  SharedDtor();
}

void TowerInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerInfoCmd_descriptor_;
}

const TowerInfoCmd& TowerInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_InfiniteTower_2eproto();
  return *default_instance_;
}

TowerInfoCmd* TowerInfoCmd::default_instance_ = NULL;

TowerInfoCmd* TowerInfoCmd::New() const {
  return new TowerInfoCmd;
}

void TowerInfoCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerInfoCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(maxlayer_, refreshtime_);
    cmd_ = 20;
    param_ = 10;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TOWERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::TowerParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::TowerParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_maxlayer;
        break;
      }

      // optional uint32 maxlayer = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_refreshtime;
        break;
      }

      // optional uint32 refreshtime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_refreshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshtime_)));
          set_has_refreshtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerInfoCmd)
  return false;
#undef DO_
}

void TowerInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TOWERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 maxlayer = 3 [default = 0];
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxlayer(), output);
  }

  // optional uint32 refreshtime = 4 [default = 0];
  if (has_refreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->refreshtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerInfoCmd)
}

::google::protobuf::uint8* TowerInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TOWERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 maxlayer = 3 [default = 0];
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxlayer(), target);
  }

  // optional uint32 refreshtime = 4 [default = 0];
  if (has_refreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->refreshtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerInfoCmd)
  return target;
}

int TowerInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = INFINITE_TOWER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.TowerParam param = 2 [default = ETOWERPARAM_TOWERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 maxlayer = 3 [default = 0];
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlayer());
    }

    // optional uint32 refreshtime = 4 [default = 0];
    if (has_refreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerInfoCmd::MergeFrom(const TowerInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_refreshtime()) {
      set_refreshtime(from.refreshtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerInfoCmd::CopyFrom(const TowerInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerInfoCmd::IsInitialized() const {

  return true;
}

void TowerInfoCmd::Swap(TowerInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(refreshtime_, other->refreshtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerInfoCmd_descriptor_;
  metadata.reflection = TowerInfoCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
