// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeddingSCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "WeddingSCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ForwardC2WeddingSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardC2WeddingSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardS2WeddingSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardS2WeddingSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardWedding2SSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardWedding2SSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardWedding2CSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardWedding2CSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingManualInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingManualInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeddingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeddingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncWeddingInfoSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncWeddingInfoSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateWeddingManualSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateWeddingManualSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartWeddingSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartWeddingSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopWeddingSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopWeddingSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReserveWeddingResultSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReserveWeddingResultSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuyServiceWeddingSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuyServiceWeddingSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarrySCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarrySCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckWeddingReserverSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckWeddingReserverSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParnterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParnterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MissyouInviteWedSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MissyouInviteWedSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarrySuccessSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarrySuccessSCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserRenameWedSCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserRenameWedSCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WeddingSParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_WeddingSCmd_2eproto() {
  protobuf_AddDesc_WeddingSCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "WeddingSCmd.proto");
  GOOGLE_CHECK(file != NULL);
  ForwardC2WeddingSCmd_descriptor_ = file->message_type(0);
  static const int ForwardC2WeddingSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, len_),
  };
  ForwardC2WeddingSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardC2WeddingSCmd_descriptor_,
      ForwardC2WeddingSCmd::default_instance_,
      ForwardC2WeddingSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardC2WeddingSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardC2WeddingSCmd));
  ForwardS2WeddingSCmd_descriptor_ = file->message_type(1);
  static const int ForwardS2WeddingSCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, len_),
  };
  ForwardS2WeddingSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardS2WeddingSCmd_descriptor_,
      ForwardS2WeddingSCmd::default_instance_,
      ForwardS2WeddingSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardS2WeddingSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardS2WeddingSCmd));
  ForwardWedding2SSCmd_descriptor_ = file->message_type(2);
  static const int ForwardWedding2SSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, len_),
  };
  ForwardWedding2SSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardWedding2SSCmd_descriptor_,
      ForwardWedding2SSCmd::default_instance_,
      ForwardWedding2SSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2SSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardWedding2SSCmd));
  ForwardWedding2CSCmd_descriptor_ = file->message_type(3);
  static const int ForwardWedding2CSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, len_),
  };
  ForwardWedding2CSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardWedding2CSCmd_descriptor_,
      ForwardWedding2CSCmd::default_instance_,
      ForwardWedding2CSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardWedding2CSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardWedding2CSCmd));
  WeddingManualInfo_descriptor_ = file->message_type(4);
  static const int WeddingManualInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, serviceids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, photoindex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, photoindex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, phototime1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, phototime2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, invitees_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, itemrecords_),
  };
  WeddingManualInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingManualInfo_descriptor_,
      WeddingManualInfo::default_instance_,
      WeddingManualInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingManualInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingManualInfo));
  WeddingInfo_descriptor_ = file->message_type(5);
  static const int WeddingInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, manual_),
  };
  WeddingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeddingInfo_descriptor_,
      WeddingInfo::default_instance_,
      WeddingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeddingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeddingInfo));
  SyncWeddingInfoSCmd_descriptor_ = file->message_type(6);
  static const int SyncWeddingInfoSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, weddinginfo_),
  };
  SyncWeddingInfoSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncWeddingInfoSCmd_descriptor_,
      SyncWeddingInfoSCmd::default_instance_,
      SyncWeddingInfoSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncWeddingInfoSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncWeddingInfoSCmd));
  UpdateWeddingManualSCmd_descriptor_ = file->message_type(7);
  static const int UpdateWeddingManualSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, weddingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, manual_),
  };
  UpdateWeddingManualSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateWeddingManualSCmd_descriptor_,
      UpdateWeddingManualSCmd::default_instance_,
      UpdateWeddingManualSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateWeddingManualSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateWeddingManualSCmd));
  StartWeddingSCmd_descriptor_ = file->message_type(8);
  static const int StartWeddingSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWeddingSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWeddingSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWeddingSCmd, weddinginfo_),
  };
  StartWeddingSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartWeddingSCmd_descriptor_,
      StartWeddingSCmd::default_instance_,
      StartWeddingSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWeddingSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartWeddingSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartWeddingSCmd));
  StopWeddingSCmd_descriptor_ = file->message_type(9);
  static const int StopWeddingSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWeddingSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWeddingSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWeddingSCmd, id_),
  };
  StopWeddingSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopWeddingSCmd_descriptor_,
      StopWeddingSCmd::default_instance_,
      StopWeddingSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWeddingSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopWeddingSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopWeddingSCmd));
  ReserveWeddingResultSCmd_descriptor_ = file->message_type(10);
  static const int ReserveWeddingResultSCmd_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, zoneid_),
  };
  ReserveWeddingResultSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReserveWeddingResultSCmd_descriptor_,
      ReserveWeddingResultSCmd::default_instance_,
      ReserveWeddingResultSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReserveWeddingResultSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReserveWeddingResultSCmd));
  BuyServiceWeddingSCmd_descriptor_ = file->message_type(11);
  static const int BuyServiceWeddingSCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, serviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, weddingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, success_),
  };
  BuyServiceWeddingSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuyServiceWeddingSCmd_descriptor_,
      BuyServiceWeddingSCmd::default_instance_,
      BuyServiceWeddingSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuyServiceWeddingSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuyServiceWeddingSCmd));
  MarrySCmd_descriptor_ = file->message_type(12);
  static const int MarrySCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, weddingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, items_),
  };
  MarrySCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarrySCmd_descriptor_,
      MarrySCmd::default_instance_,
      MarrySCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarrySCmd));
  CheckWeddingReserverSCmd_descriptor_ = file->message_type(13);
  static const int CheckWeddingReserverSCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, weddingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, result_),
  };
  CheckWeddingReserverSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CheckWeddingReserverSCmd_descriptor_,
      CheckWeddingReserverSCmd::default_instance_,
      CheckWeddingReserverSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckWeddingReserverSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CheckWeddingReserverSCmd));
  ParnterInfo_descriptor_ = file->message_type(14);
  static const int ParnterInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, z_),
  };
  ParnterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParnterInfo_descriptor_,
      ParnterInfo::default_instance_,
      ParnterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParnterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParnterInfo));
  MissyouInviteWedSCmd_descriptor_ = file->message_type(15);
  static const int MissyouInviteWedSCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, info_),
  };
  MissyouInviteWedSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MissyouInviteWedSCmd_descriptor_,
      MissyouInviteWedSCmd::default_instance_,
      MissyouInviteWedSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MissyouInviteWedSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MissyouInviteWedSCmd));
  MarrySuccessSCmd_descriptor_ = file->message_type(16);
  static const int MarrySuccessSCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySuccessSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySuccessSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySuccessSCmd, weddingid_),
  };
  MarrySuccessSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarrySuccessSCmd_descriptor_,
      MarrySuccessSCmd::default_instance_,
      MarrySuccessSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySuccessSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySuccessSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarrySuccessSCmd));
  UserRenameWedSCmd_descriptor_ = file->message_type(17);
  static const int UserRenameWedSCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, weddingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, charid_),
  };
  UserRenameWedSCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserRenameWedSCmd_descriptor_,
      UserRenameWedSCmd::default_instance_,
      UserRenameWedSCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserRenameWedSCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserRenameWedSCmd));
  WeddingSParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_WeddingSCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardC2WeddingSCmd_descriptor_, &ForwardC2WeddingSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardS2WeddingSCmd_descriptor_, &ForwardS2WeddingSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardWedding2SSCmd_descriptor_, &ForwardWedding2SSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardWedding2CSCmd_descriptor_, &ForwardWedding2CSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingManualInfo_descriptor_, &WeddingManualInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeddingInfo_descriptor_, &WeddingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncWeddingInfoSCmd_descriptor_, &SyncWeddingInfoSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateWeddingManualSCmd_descriptor_, &UpdateWeddingManualSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartWeddingSCmd_descriptor_, &StartWeddingSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopWeddingSCmd_descriptor_, &StopWeddingSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReserveWeddingResultSCmd_descriptor_, &ReserveWeddingResultSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuyServiceWeddingSCmd_descriptor_, &BuyServiceWeddingSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarrySCmd_descriptor_, &MarrySCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CheckWeddingReserverSCmd_descriptor_, &CheckWeddingReserverSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParnterInfo_descriptor_, &ParnterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MissyouInviteWedSCmd_descriptor_, &MissyouInviteWedSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarrySuccessSCmd_descriptor_, &MarrySuccessSCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserRenameWedSCmd_descriptor_, &UserRenameWedSCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_WeddingSCmd_2eproto() {
  delete ForwardC2WeddingSCmd::default_instance_;
  delete ForwardC2WeddingSCmd_reflection_;
  delete ForwardS2WeddingSCmd::default_instance_;
  delete ForwardS2WeddingSCmd_reflection_;
  delete ForwardWedding2SSCmd::default_instance_;
  delete ForwardWedding2SSCmd_reflection_;
  delete ForwardWedding2CSCmd::default_instance_;
  delete ForwardWedding2CSCmd_reflection_;
  delete WeddingManualInfo::default_instance_;
  delete WeddingManualInfo_reflection_;
  delete WeddingInfo::default_instance_;
  delete WeddingInfo_reflection_;
  delete SyncWeddingInfoSCmd::default_instance_;
  delete SyncWeddingInfoSCmd_reflection_;
  delete UpdateWeddingManualSCmd::default_instance_;
  delete UpdateWeddingManualSCmd_reflection_;
  delete StartWeddingSCmd::default_instance_;
  delete StartWeddingSCmd_reflection_;
  delete StopWeddingSCmd::default_instance_;
  delete StopWeddingSCmd_reflection_;
  delete ReserveWeddingResultSCmd::default_instance_;
  delete ReserveWeddingResultSCmd_reflection_;
  delete BuyServiceWeddingSCmd::default_instance_;
  delete BuyServiceWeddingSCmd_reflection_;
  delete MarrySCmd::default_instance_;
  delete MarrySCmd_reflection_;
  delete CheckWeddingReserverSCmd::default_instance_;
  delete CheckWeddingReserverSCmd_reflection_;
  delete ParnterInfo::default_instance_;
  delete ParnterInfo_reflection_;
  delete MissyouInviteWedSCmd::default_instance_;
  delete MissyouInviteWedSCmd_reflection_;
  delete MarrySuccessSCmd::default_instance_;
  delete MarrySuccessSCmd_reflection_;
  delete UserRenameWedSCmd::default_instance_;
  delete UserRenameWedSCmd_reflection_;
}

void protobuf_AddDesc_WeddingSCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_WeddingCCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021WeddingSCmd.proto\022\003Cmd\032\nxCmd.proto\032\021We"
    "ddingCCmd.proto\032\017SceneItem.proto\032\021ProtoC"
    "ommon.proto\"\321\001\n\024ForwardC2WeddingSCmd\022,\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGS_PROTOC"
    "MD\022B\n\005param\030\002 \001(\0162\022.Cmd.WeddingSParam:\037W"
    "EDDINGSPARAM_FORWARD_C2WEDDING\022\016\n\006charid"
    "\030\003 \001(\004\022\016\n\006zoneid\030\004 \001(\r\022\014\n\004name\030\005 \001(\t\022\014\n\004"
    "data\030\006 \001(\014\022\013\n\003len\030\007 \001(\r\"\321\001\n\024ForwardS2Wed"
    "dingSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WED"
    "DINGS_PROTOCMD\022B\n\005param\030\002 \001(\0162\022.Cmd.Wedd"
    "ingSParam:\037WEDDINGSPARAM_FORWARD_S2WEDDI"
    "NG\022\016\n\006charid\030\003 \001(\004\022\016\n\006zoneid\030\004 \001(\r\022\014\n\004na"
    "me\030\005 \001(\t\022\014\n\004data\030\006 \001(\014\022\013\n\003len\030\007 \001(\r\"\263\001\n\024"
    "ForwardWedding2SSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\021WEDDINGS_PROTOCMD\022B\n\005param\030\002 \001("
    "\0162\022.Cmd.WeddingSParam:\037WEDDINGSPARAM_FOR"
    "WARD_WEDDING2S\022\016\n\006charid\030\003 \001(\004\022\014\n\004data\030\004"
    " \001(\014\022\013\n\003len\030\005 \001(\r\"\263\001\n\024ForwardWedding2CSC"
    "md\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WEDDINGS_"
    "PROTOCMD\022B\n\005param\030\002 \001(\0162\022.Cmd.WeddingSPa"
    "ram:\037WEDDINGSPARAM_FORWARD_WEDDING2C\022\016\n\006"
    "charid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\""
    "\201\002\n\021WeddingManualInfo\022\022\n\nserviceids\030\001 \003("
    "\r\022\021\n\006ringid\030\002 \001(\r:\0010\022\026\n\013photoindex1\030\003 \001("
    "\r:\0010\022\026\n\013photoindex2\030\004 \001(\r:\0010\022\025\n\nphototim"
    "e1\030\005 \001(\r:\0010\022\025\n\nphototime2\030\006 \001(\r:\0010\022%\n\010in"
    "vitees\030\007 \003(\0132\023.Cmd.WeddingInvitee\022\r\n\005nam"
    "e1\030\010 \001(\t\022\r\n\005name2\030\t \001(\t\022\"\n\013itemrecords\030\n"
    " \003(\0132\r.Cmd.ItemData\"\334\001\n\013WeddingInfo\022\n\n\002i"
    "d\030\001 \001(\004\022#\n\006status\030\002 \001(\0162\023.Cmd.EWeddingSt"
    "atus\022\017\n\007charid1\030\003 \001(\004\022\017\n\007charid2\030\004 \001(\004\022\016"
    "\n\006zoneid\030\005 \001(\r\022\014\n\004date\030\006 \001(\r\022\020\n\010configid"
    "\030\007 \001(\r\022\021\n\tstarttime\030\010 \001(\r\022\017\n\007endtime\030\t \001"
    "(\r\022&\n\006manual\030\n \001(\0132\026.Cmd.WeddingManualIn"
    "fo\"\300\001\n\023SyncWeddingInfoSCmd\022,\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\021WEDDINGS_PROTOCMD\022A\n\005para"
    "m\030\002 \001(\0162\022.Cmd.WeddingSParam:\036WEDDINGSPAR"
    "AM_SYNC_WEDDINGINFO\022\021\n\006charid\030\003 \001(\004:\0010\022%"
    "\n\013weddinginfo\030\004 \001(\0132\020.Cmd.WeddingInfo\"\302\001"
    "\n\027UpdateWeddingManualSCmd\022,\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\021WEDDINGS_PROTOCMD\022>\n\005param"
    "\030\002 \001(\0162\022.Cmd.WeddingSParam:\033WEDDINGSPARA"
    "M_UPDATE_MANUAL\022\021\n\tweddingid\030\003 \002(\004\022&\n\006ma"
    "nual\030\004 \001(\0132\026.Cmd.WeddingManualInfo\"\247\001\n\020S"
    "tartWeddingSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\021WEDDINGS_PROTOCMD\022>\n\005param\030\002 \001(\0162\022.C"
    "md.WeddingSParam:\033WEDDINGSPARAM_START_WE"
    "DDING\022%\n\013weddinginfo\030\003 \001(\0132\020.Cmd.Wedding"
    "Info\"\212\001\n\017StopWeddingSCmd\022,\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\021WEDDINGS_PROTOCMD\022=\n\005param\030"
    "\002 \001(\0162\022.Cmd.WeddingSParam:\032WEDDINGSPARAM"
    "_STOP_WEDDING\022\n\n\002id\030\003 \001(\004\"\223\002\n\030ReserveWed"
    "dingResultSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\021WEDDINGS_PROTOCMD\022G\n\005param\030\002 \001(\0162\022.Cm"
    "d.WeddingSParam:$WEDDINGSPARAM_RESERVE_W"
    "EDDING_RESULT\022\014\n\004date\030\003 \001(\r\022\020\n\010configid\030"
    "\004 \001(\r\022\017\n\007charid1\030\005 \001(\004\022\017\n\007charid2\030\006 \001(\004\022"
    "\017\n\007success\030\007 \001(\010\022\016\n\006ticket\030\010 \001(\r\022\r\n\005mone"
    "y\030\t \001(\r\022\016\n\006zoneid\030\n \001(\r\"\243\002\n\025BuyServiceWe"
    "ddingSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021WE"
    "DDINGS_PROTOCMD\022<\n\005param\030\002 \001(\0162\022.Cmd.Wed"
    "dingSParam:\031WEDDINGSPARAM_BUY_SERVICE\022\021\n"
    "\006charid\030\003 \001(\004:\0010\022)\n\006source\030\004 \001(\0162\014.Cmd.E"
    "Source:\013ESOURCE_MIN\022\034\n\005items\030\005 \003(\0132\r.Cmd"
    ".ItemInfo\022\024\n\tserviceid\030\006 \001(\r:\0010\022\024\n\tweddi"
    "ngid\030\007 \001(\004:\0010\022\026\n\007success\030\010 \001(\010:\005false\"\304\001"
    "\n\tMarrySCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021"
    "WEDDINGS_PROTOCMD\0226\n\005param\030\002 \001(\0162\022.Cmd.W"
    "eddingSParam:\023WEDDINGSPARAM_MARRY\022\017\n\007cha"
    "rid1\030\003 \001(\004\022\017\n\007charid2\030\004 \001(\004\022\021\n\tweddingid"
    "\030\005 \001(\004\022\034\n\005items\030\006 \003(\0132\r.Cmd.ItemData\"\343\001\n"
    "\030CheckWeddingReserverSCmd\022,\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\021WEDDINGS_PROTOCMD\022F\n\005param"
    "\030\002 \001(\0162\022.Cmd.WeddingSParam:#WEDDINGSPARA"
    "M_CHECK_WEDDING_RESERVE\022\024\n\tweddingid\030\003 \001"
    "(\004:\0010\022\021\n\006mailid\030\004 \001(\004:\0010\022\021\n\006charid\030\005 \001(\004"
    ":\0010\022\025\n\006result\030\006 \001(\010:\005false\"\\\n\013ParnterInf"
    "o\022\020\n\005mapid\030\001 \001(\r:\0010\022\021\n\006zoneid\030\002 \001(\r:\0010\022\014"
    "\n\001x\030\003 \001(\002:\0010\022\014\n\001y\030\004 \001(\002:\0010\022\014\n\001z\030\005 \001(\002:\0010"
    "\"\316\001\n\024MissyouInviteWedSCmd\022,\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\021WEDDINGS_PROTOCMD\022\?\n\005param"
    "\030\002 \001(\0162\022.Cmd.WeddingSParam:\034WEDDINGSPARA"
    "M_MISSYOU_INVITE\022\021\n\006charid\030\003 \001(\004:\0010\022\024\n\005t"
    "rans\030\010 \001(\010:\005false\022\036\n\004info\030\t \001(\0132\020.Cmd.Pa"
    "rnterInfo\"\223\001\n\020MarrySuccessSCmd\022,\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\021WEDDINGS_PROTOCMD\022>\n\005"
    "param\030\002 \001(\0162\022.Cmd.WeddingSParam:\033WEDDING"
    "SPARAM_MARRY_SUCCESS\022\021\n\tweddingid\030\003 \001(\004\""
    "\250\001\n\021UserRenameWedSCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\021WEDDINGS_PROTOCMD\022<\n\005param\030\002 \001"
    "(\0162\022.Cmd.WeddingSParam:\031WEDDINGSPARAM_US"
    "ER_RENAME\022\024\n\tweddingid\030\003 \001(\004:\0010\022\021\n\006chari"
    "d\030\004 \001(\004:\0010*\226\004\n\rWeddingSParam\022#\n\037WEDDINGS"
    "PARAM_FORWARD_C2WEDDING\020\001\022#\n\037WEDDINGSPAR"
    "AM_FORWARD_S2WEDDING\020\002\022#\n\037WEDDINGSPARAM_"
    "FORWARD_WEDDING2S\020\003\022#\n\037WEDDINGSPARAM_FOR"
    "WARD_WEDDING2C\020\010\022\"\n\036WEDDINGSPARAM_SYNC_W"
    "EDDINGINFO\020\004\022\037\n\033WEDDINGSPARAM_START_WEDD"
    "ING\020\005\022\036\n\032WEDDINGSPARAM_STOP_WEDDING\020\006\022(\n"
    "$WEDDINGSPARAM_RESERVE_WEDDING_RESULT\020\007\022"
    "\035\n\031WEDDINGSPARAM_BUY_SERVICE\020\t\022\027\n\023WEDDIN"
    "GSPARAM_MARRY\020\013\022\'\n#WEDDINGSPARAM_CHECK_W"
    "EDDING_RESERVE\020\014\022 \n\034WEDDINGSPARAM_MISSYO"
    "U_INVITE\020\r\022\037\n\033WEDDINGSPARAM_UPDATE_MANUA"
    "L\020\016\022\037\n\033WEDDINGSPARAM_MARRY_SUCCESS\020\017\022\035\n\031"
    "WEDDINGSPARAM_USER_RENAME\020\020", 4227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "WeddingSCmd.proto", &protobuf_RegisterTypes);
  ForwardC2WeddingSCmd::default_instance_ = new ForwardC2WeddingSCmd();
  ForwardS2WeddingSCmd::default_instance_ = new ForwardS2WeddingSCmd();
  ForwardWedding2SSCmd::default_instance_ = new ForwardWedding2SSCmd();
  ForwardWedding2CSCmd::default_instance_ = new ForwardWedding2CSCmd();
  WeddingManualInfo::default_instance_ = new WeddingManualInfo();
  WeddingInfo::default_instance_ = new WeddingInfo();
  SyncWeddingInfoSCmd::default_instance_ = new SyncWeddingInfoSCmd();
  UpdateWeddingManualSCmd::default_instance_ = new UpdateWeddingManualSCmd();
  StartWeddingSCmd::default_instance_ = new StartWeddingSCmd();
  StopWeddingSCmd::default_instance_ = new StopWeddingSCmd();
  ReserveWeddingResultSCmd::default_instance_ = new ReserveWeddingResultSCmd();
  BuyServiceWeddingSCmd::default_instance_ = new BuyServiceWeddingSCmd();
  MarrySCmd::default_instance_ = new MarrySCmd();
  CheckWeddingReserverSCmd::default_instance_ = new CheckWeddingReserverSCmd();
  ParnterInfo::default_instance_ = new ParnterInfo();
  MissyouInviteWedSCmd::default_instance_ = new MissyouInviteWedSCmd();
  MarrySuccessSCmd::default_instance_ = new MarrySuccessSCmd();
  UserRenameWedSCmd::default_instance_ = new UserRenameWedSCmd();
  ForwardC2WeddingSCmd::default_instance_->InitAsDefaultInstance();
  ForwardS2WeddingSCmd::default_instance_->InitAsDefaultInstance();
  ForwardWedding2SSCmd::default_instance_->InitAsDefaultInstance();
  ForwardWedding2CSCmd::default_instance_->InitAsDefaultInstance();
  WeddingManualInfo::default_instance_->InitAsDefaultInstance();
  WeddingInfo::default_instance_->InitAsDefaultInstance();
  SyncWeddingInfoSCmd::default_instance_->InitAsDefaultInstance();
  UpdateWeddingManualSCmd::default_instance_->InitAsDefaultInstance();
  StartWeddingSCmd::default_instance_->InitAsDefaultInstance();
  StopWeddingSCmd::default_instance_->InitAsDefaultInstance();
  ReserveWeddingResultSCmd::default_instance_->InitAsDefaultInstance();
  BuyServiceWeddingSCmd::default_instance_->InitAsDefaultInstance();
  MarrySCmd::default_instance_->InitAsDefaultInstance();
  CheckWeddingReserverSCmd::default_instance_->InitAsDefaultInstance();
  ParnterInfo::default_instance_->InitAsDefaultInstance();
  MissyouInviteWedSCmd::default_instance_->InitAsDefaultInstance();
  MarrySuccessSCmd::default_instance_->InitAsDefaultInstance();
  UserRenameWedSCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_WeddingSCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_WeddingSCmd_2eproto {
  StaticDescriptorInitializer_WeddingSCmd_2eproto() {
    protobuf_AddDesc_WeddingSCmd_2eproto();
  }
} static_descriptor_initializer_WeddingSCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* WeddingSParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingSParam_descriptor_;
}
bool WeddingSParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardC2WeddingSCmd::kCmdFieldNumber;
const int ForwardC2WeddingSCmd::kParamFieldNumber;
const int ForwardC2WeddingSCmd::kCharidFieldNumber;
const int ForwardC2WeddingSCmd::kZoneidFieldNumber;
const int ForwardC2WeddingSCmd::kNameFieldNumber;
const int ForwardC2WeddingSCmd::kDataFieldNumber;
const int ForwardC2WeddingSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardC2WeddingSCmd::ForwardC2WeddingSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardC2WeddingSCmd)
}

void ForwardC2WeddingSCmd::InitAsDefaultInstance() {
}

ForwardC2WeddingSCmd::ForwardC2WeddingSCmd(const ForwardC2WeddingSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardC2WeddingSCmd)
}

void ForwardC2WeddingSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 1;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardC2WeddingSCmd::~ForwardC2WeddingSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardC2WeddingSCmd)
  SharedDtor();
}

void ForwardC2WeddingSCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardC2WeddingSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardC2WeddingSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardC2WeddingSCmd_descriptor_;
}

const ForwardC2WeddingSCmd& ForwardC2WeddingSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ForwardC2WeddingSCmd* ForwardC2WeddingSCmd::default_instance_ = NULL;

ForwardC2WeddingSCmd* ForwardC2WeddingSCmd::New() const {
  return new ForwardC2WeddingSCmd;
}

void ForwardC2WeddingSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardC2WeddingSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 214;
    param_ = 1;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardC2WeddingSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardC2WeddingSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardC2WeddingSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardC2WeddingSCmd)
  return false;
#undef DO_
}

void ForwardC2WeddingSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardC2WeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardC2WeddingSCmd)
}

::google::protobuf::uint8* ForwardC2WeddingSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardC2WeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardC2WeddingSCmd)
  return target;
}

int ForwardC2WeddingSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_C2WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardC2WeddingSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardC2WeddingSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardC2WeddingSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardC2WeddingSCmd::MergeFrom(const ForwardC2WeddingSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardC2WeddingSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardC2WeddingSCmd::CopyFrom(const ForwardC2WeddingSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardC2WeddingSCmd::IsInitialized() const {

  return true;
}

void ForwardC2WeddingSCmd::Swap(ForwardC2WeddingSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardC2WeddingSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardC2WeddingSCmd_descriptor_;
  metadata.reflection = ForwardC2WeddingSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardS2WeddingSCmd::kCmdFieldNumber;
const int ForwardS2WeddingSCmd::kParamFieldNumber;
const int ForwardS2WeddingSCmd::kCharidFieldNumber;
const int ForwardS2WeddingSCmd::kZoneidFieldNumber;
const int ForwardS2WeddingSCmd::kNameFieldNumber;
const int ForwardS2WeddingSCmd::kDataFieldNumber;
const int ForwardS2WeddingSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardS2WeddingSCmd::ForwardS2WeddingSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardS2WeddingSCmd)
}

void ForwardS2WeddingSCmd::InitAsDefaultInstance() {
}

ForwardS2WeddingSCmd::ForwardS2WeddingSCmd(const ForwardS2WeddingSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardS2WeddingSCmd)
}

void ForwardS2WeddingSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardS2WeddingSCmd::~ForwardS2WeddingSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardS2WeddingSCmd)
  SharedDtor();
}

void ForwardS2WeddingSCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardS2WeddingSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardS2WeddingSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardS2WeddingSCmd_descriptor_;
}

const ForwardS2WeddingSCmd& ForwardS2WeddingSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ForwardS2WeddingSCmd* ForwardS2WeddingSCmd::default_instance_ = NULL;

ForwardS2WeddingSCmd* ForwardS2WeddingSCmd::New() const {
  return new ForwardS2WeddingSCmd;
}

void ForwardS2WeddingSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardS2WeddingSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(zoneid_, len_);
    cmd_ = 214;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardS2WeddingSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardS2WeddingSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4;
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (tag == 50) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_len;
        break;
      }

      // optional uint32 len = 7;
      case 7: {
        if (tag == 56) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardS2WeddingSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardS2WeddingSCmd)
  return false;
#undef DO_
}

void ForwardS2WeddingSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardS2WeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardS2WeddingSCmd)
}

::google::protobuf::uint8* ForwardS2WeddingSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardS2WeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 zoneid = 4;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 len = 7;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardS2WeddingSCmd)
  return target;
}

int ForwardS2WeddingSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_S2WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 4;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 7;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardS2WeddingSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardS2WeddingSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardS2WeddingSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardS2WeddingSCmd::MergeFrom(const ForwardS2WeddingSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardS2WeddingSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardS2WeddingSCmd::CopyFrom(const ForwardS2WeddingSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardS2WeddingSCmd::IsInitialized() const {

  return true;
}

void ForwardS2WeddingSCmd::Swap(ForwardS2WeddingSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(name_, other->name_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardS2WeddingSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardS2WeddingSCmd_descriptor_;
  metadata.reflection = ForwardS2WeddingSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardWedding2SSCmd::kCmdFieldNumber;
const int ForwardWedding2SSCmd::kParamFieldNumber;
const int ForwardWedding2SSCmd::kCharidFieldNumber;
const int ForwardWedding2SSCmd::kDataFieldNumber;
const int ForwardWedding2SSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardWedding2SSCmd::ForwardWedding2SSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardWedding2SSCmd)
}

void ForwardWedding2SSCmd::InitAsDefaultInstance() {
}

ForwardWedding2SSCmd::ForwardWedding2SSCmd(const ForwardWedding2SSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardWedding2SSCmd)
}

void ForwardWedding2SSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardWedding2SSCmd::~ForwardWedding2SSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardWedding2SSCmd)
  SharedDtor();
}

void ForwardWedding2SSCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardWedding2SSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardWedding2SSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardWedding2SSCmd_descriptor_;
}

const ForwardWedding2SSCmd& ForwardWedding2SSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ForwardWedding2SSCmd* ForwardWedding2SSCmd::default_instance_ = NULL;

ForwardWedding2SSCmd* ForwardWedding2SSCmd::New() const {
  return new ForwardWedding2SSCmd;
}

void ForwardWedding2SSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 214;
    param_ = 3;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardWedding2SSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardWedding2SSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardWedding2SSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardWedding2SSCmd)
  return false;
#undef DO_
}

void ForwardWedding2SSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardWedding2SSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardWedding2SSCmd)
}

::google::protobuf::uint8* ForwardWedding2SSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardWedding2SSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardWedding2SSCmd)
  return target;
}

int ForwardWedding2SSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2S];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardWedding2SSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardWedding2SSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardWedding2SSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardWedding2SSCmd::MergeFrom(const ForwardWedding2SSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardWedding2SSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardWedding2SSCmd::CopyFrom(const ForwardWedding2SSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardWedding2SSCmd::IsInitialized() const {

  return true;
}

void ForwardWedding2SSCmd::Swap(ForwardWedding2SSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardWedding2SSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardWedding2SSCmd_descriptor_;
  metadata.reflection = ForwardWedding2SSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardWedding2CSCmd::kCmdFieldNumber;
const int ForwardWedding2CSCmd::kParamFieldNumber;
const int ForwardWedding2CSCmd::kCharidFieldNumber;
const int ForwardWedding2CSCmd::kDataFieldNumber;
const int ForwardWedding2CSCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardWedding2CSCmd::ForwardWedding2CSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardWedding2CSCmd)
}

void ForwardWedding2CSCmd::InitAsDefaultInstance() {
}

ForwardWedding2CSCmd::ForwardWedding2CSCmd(const ForwardWedding2CSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardWedding2CSCmd)
}

void ForwardWedding2CSCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 8;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardWedding2CSCmd::~ForwardWedding2CSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardWedding2CSCmd)
  SharedDtor();
}

void ForwardWedding2CSCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardWedding2CSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardWedding2CSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardWedding2CSCmd_descriptor_;
}

const ForwardWedding2CSCmd& ForwardWedding2CSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ForwardWedding2CSCmd* ForwardWedding2CSCmd::default_instance_ = NULL;

ForwardWedding2CSCmd* ForwardWedding2CSCmd::New() const {
  return new ForwardWedding2CSCmd;
}

void ForwardWedding2CSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 214;
    param_ = 8;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardWedding2CSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardWedding2CSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardWedding2CSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardWedding2CSCmd)
  return false;
#undef DO_
}

void ForwardWedding2CSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardWedding2CSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardWedding2CSCmd)
}

::google::protobuf::uint8* ForwardWedding2CSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardWedding2CSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardWedding2CSCmd)
  return target;
}

int ForwardWedding2CSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_FORWARD_WEDDING2C];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardWedding2CSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardWedding2CSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardWedding2CSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardWedding2CSCmd::MergeFrom(const ForwardWedding2CSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardWedding2CSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardWedding2CSCmd::CopyFrom(const ForwardWedding2CSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardWedding2CSCmd::IsInitialized() const {

  return true;
}

void ForwardWedding2CSCmd::Swap(ForwardWedding2CSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardWedding2CSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardWedding2CSCmd_descriptor_;
  metadata.reflection = ForwardWedding2CSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingManualInfo::kServiceidsFieldNumber;
const int WeddingManualInfo::kRingidFieldNumber;
const int WeddingManualInfo::kPhotoindex1FieldNumber;
const int WeddingManualInfo::kPhotoindex2FieldNumber;
const int WeddingManualInfo::kPhototime1FieldNumber;
const int WeddingManualInfo::kPhototime2FieldNumber;
const int WeddingManualInfo::kInviteesFieldNumber;
const int WeddingManualInfo::kName1FieldNumber;
const int WeddingManualInfo::kName2FieldNumber;
const int WeddingManualInfo::kItemrecordsFieldNumber;
#endif  // !_MSC_VER

WeddingManualInfo::WeddingManualInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingManualInfo)
}

void WeddingManualInfo::InitAsDefaultInstance() {
}

WeddingManualInfo::WeddingManualInfo(const WeddingManualInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingManualInfo)
}

void WeddingManualInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ringid_ = 0u;
  photoindex1_ = 0u;
  photoindex2_ = 0u;
  phototime1_ = 0u;
  phototime2_ = 0u;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingManualInfo::~WeddingManualInfo() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingManualInfo)
  SharedDtor();
}

void WeddingManualInfo::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name2_;
  }
  if (this != default_instance_) {
  }
}

void WeddingManualInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingManualInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingManualInfo_descriptor_;
}

const WeddingManualInfo& WeddingManualInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

WeddingManualInfo* WeddingManualInfo::default_instance_ = NULL;

WeddingManualInfo* WeddingManualInfo::New() const {
  return new WeddingManualInfo;
}

void WeddingManualInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingManualInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 190) {
    ZR_(ringid_, phototime1_);
    phototime2_ = 0u;
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name1_->clear();
      }
    }
  }
  if (has_name2()) {
    if (name2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name2_->clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  serviceids_.Clear();
  invitees_.Clear();
  itemrecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingManualInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingManualInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 serviceids = 1;
      case 1: {
        if (tag == 8) {
         parse_serviceids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_serviceids())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_serviceids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_serviceids;
        if (input->ExpectTag(16)) goto parse_ringid;
        break;
      }

      // optional uint32 ringid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_ringid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_photoindex1;
        break;
      }

      // optional uint32 photoindex1 = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_photoindex1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoindex1_)));
          set_has_photoindex1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_photoindex2;
        break;
      }

      // optional uint32 photoindex2 = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_photoindex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoindex2_)));
          set_has_photoindex2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_phototime1;
        break;
      }

      // optional uint32 phototime1 = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_phototime1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phototime1_)));
          set_has_phototime1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_phototime2;
        break;
      }

      // optional uint32 phototime2 = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_phototime2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phototime2_)));
          set_has_phototime2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_invitees;
        break;
      }

      // repeated .Cmd.WeddingInvitee invitees = 7;
      case 7: {
        if (tag == 58) {
         parse_invitees:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invitees()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_invitees;
        if (input->ExpectTag(66)) goto parse_name1;
        break;
      }

      // optional string name1 = 8;
      case 8: {
        if (tag == 66) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_name2;
        break;
      }

      // optional string name2 = 9;
      case 9: {
        if (tag == 74) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_itemrecords;
        break;
      }

      // repeated .Cmd.ItemData itemrecords = 10;
      case 10: {
        if (tag == 82) {
         parse_itemrecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemrecords()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_itemrecords;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingManualInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingManualInfo)
  return false;
#undef DO_
}

void WeddingManualInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingManualInfo)
  // repeated uint32 serviceids = 1;
  for (int i = 0; i < this->serviceids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->serviceids(i), output);
  }

  // optional uint32 ringid = 2 [default = 0];
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ringid(), output);
  }

  // optional uint32 photoindex1 = 3 [default = 0];
  if (has_photoindex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->photoindex1(), output);
  }

  // optional uint32 photoindex2 = 4 [default = 0];
  if (has_photoindex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->photoindex2(), output);
  }

  // optional uint32 phototime1 = 5 [default = 0];
  if (has_phototime1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->phototime1(), output);
  }

  // optional uint32 phototime2 = 6 [default = 0];
  if (has_phototime2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->phototime2(), output);
  }

  // repeated .Cmd.WeddingInvitee invitees = 7;
  for (int i = 0; i < this->invitees_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->invitees(i), output);
  }

  // optional string name1 = 8;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->name1(), output);
  }

  // optional string name2 = 9;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->name2(), output);
  }

  // repeated .Cmd.ItemData itemrecords = 10;
  for (int i = 0; i < this->itemrecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->itemrecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingManualInfo)
}

::google::protobuf::uint8* WeddingManualInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingManualInfo)
  // repeated uint32 serviceids = 1;
  for (int i = 0; i < this->serviceids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->serviceids(i), target);
  }

  // optional uint32 ringid = 2 [default = 0];
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ringid(), target);
  }

  // optional uint32 photoindex1 = 3 [default = 0];
  if (has_photoindex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->photoindex1(), target);
  }

  // optional uint32 photoindex2 = 4 [default = 0];
  if (has_photoindex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->photoindex2(), target);
  }

  // optional uint32 phototime1 = 5 [default = 0];
  if (has_phototime1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->phototime1(), target);
  }

  // optional uint32 phototime2 = 6 [default = 0];
  if (has_phototime2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->phototime2(), target);
  }

  // repeated .Cmd.WeddingInvitee invitees = 7;
  for (int i = 0; i < this->invitees_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->invitees(i), target);
  }

  // optional string name1 = 8;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name1(), target);
  }

  // optional string name2 = 9;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name2(), target);
  }

  // repeated .Cmd.ItemData itemrecords = 10;
  for (int i = 0; i < this->itemrecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->itemrecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingManualInfo)
  return target;
}

int WeddingManualInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 ringid = 2 [default = 0];
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ringid());
    }

    // optional uint32 photoindex1 = 3 [default = 0];
    if (has_photoindex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoindex1());
    }

    // optional uint32 photoindex2 = 4 [default = 0];
    if (has_photoindex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoindex2());
    }

    // optional uint32 phototime1 = 5 [default = 0];
    if (has_phototime1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phototime1());
    }

    // optional uint32 phototime2 = 6 [default = 0];
    if (has_phototime2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phototime2());
    }

    // optional string name1 = 8;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name2 = 9;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

  }
  // repeated uint32 serviceids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->serviceids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->serviceids(i));
    }
    total_size += 1 * this->serviceids_size() + data_size;
  }

  // repeated .Cmd.WeddingInvitee invitees = 7;
  total_size += 1 * this->invitees_size();
  for (int i = 0; i < this->invitees_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invitees(i));
  }

  // repeated .Cmd.ItemData itemrecords = 10;
  total_size += 1 * this->itemrecords_size();
  for (int i = 0; i < this->itemrecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemrecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingManualInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingManualInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingManualInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingManualInfo::MergeFrom(const WeddingManualInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  serviceids_.MergeFrom(from.serviceids_);
  invitees_.MergeFrom(from.invitees_);
  itemrecords_.MergeFrom(from.itemrecords_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_photoindex1()) {
      set_photoindex1(from.photoindex1());
    }
    if (from.has_photoindex2()) {
      set_photoindex2(from.photoindex2());
    }
    if (from.has_phototime1()) {
      set_phototime1(from.phototime1());
    }
    if (from.has_phototime2()) {
      set_phototime2(from.phototime2());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name2()) {
      set_name2(from.name2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingManualInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingManualInfo::CopyFrom(const WeddingManualInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingManualInfo::IsInitialized() const {

  return true;
}

void WeddingManualInfo::Swap(WeddingManualInfo* other) {
  if (other != this) {
    serviceids_.Swap(&other->serviceids_);
    std::swap(ringid_, other->ringid_);
    std::swap(photoindex1_, other->photoindex1_);
    std::swap(photoindex2_, other->photoindex2_);
    std::swap(phototime1_, other->phototime1_);
    std::swap(phototime2_, other->phototime2_);
    invitees_.Swap(&other->invitees_);
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    itemrecords_.Swap(&other->itemrecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingManualInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingManualInfo_descriptor_;
  metadata.reflection = WeddingManualInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeddingInfo::kIdFieldNumber;
const int WeddingInfo::kStatusFieldNumber;
const int WeddingInfo::kCharid1FieldNumber;
const int WeddingInfo::kCharid2FieldNumber;
const int WeddingInfo::kZoneidFieldNumber;
const int WeddingInfo::kDateFieldNumber;
const int WeddingInfo::kConfigidFieldNumber;
const int WeddingInfo::kStarttimeFieldNumber;
const int WeddingInfo::kEndtimeFieldNumber;
const int WeddingInfo::kManualFieldNumber;
#endif  // !_MSC_VER

WeddingInfo::WeddingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.WeddingInfo)
}

void WeddingInfo::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::WeddingManualInfo*>(&::Cmd::WeddingManualInfo::default_instance());
}

WeddingInfo::WeddingInfo(const WeddingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.WeddingInfo)
}

void WeddingInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  charid1_ = GOOGLE_ULONGLONG(0);
  charid2_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  date_ = 0u;
  configid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  manual_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeddingInfo::~WeddingInfo() {
  // @@protoc_insertion_point(destructor:Cmd.WeddingInfo)
  SharedDtor();
}

void WeddingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete manual_;
  }
}

void WeddingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeddingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeddingInfo_descriptor_;
}

const WeddingInfo& WeddingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

WeddingInfo* WeddingInfo::default_instance_ = NULL;

WeddingInfo* WeddingInfo::New() const {
  return new WeddingInfo;
}

void WeddingInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WeddingInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, starttime_);
  }
  if (_has_bits_[8 / 32] & 768) {
    endtime_ = 0u;
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::WeddingManualInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeddingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.WeddingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .Cmd.EWeddingStatus status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EWeddingStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EWeddingStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 3;
      case 3: {
        if (tag == 24) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 4;
      case 4: {
        if (tag == 32) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 5;
      case 5: {
        if (tag == 40) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_date;
        break;
      }

      // optional uint32 date = 6;
      case 6: {
        if (tag == 48) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 7;
      case 7: {
        if (tag == 56) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 8;
      case 8: {
        if (tag == 64) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_endtime;
        break;
      }

      // optional uint32 endtime = 9;
      case 9: {
        if (tag == 72) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_manual;
        break;
      }

      // optional .Cmd.WeddingManualInfo manual = 10;
      case 10: {
        if (tag == 82) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.WeddingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.WeddingInfo)
  return false;
#undef DO_
}

void WeddingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.WeddingInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional .Cmd.EWeddingStatus status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional uint64 charid1 = 3;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid1(), output);
  }

  // optional uint64 charid2 = 4;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid2(), output);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint32 date = 6;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->date(), output);
  }

  // optional uint32 configid = 7;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->configid(), output);
  }

  // optional uint32 starttime = 8;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->starttime(), output);
  }

  // optional uint32 endtime = 9;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->endtime(), output);
  }

  // optional .Cmd.WeddingManualInfo manual = 10;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->manual(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.WeddingInfo)
}

::google::protobuf::uint8* WeddingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.WeddingInfo)
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional .Cmd.EWeddingStatus status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional uint64 charid1 = 3;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid1(), target);
  }

  // optional uint64 charid2 = 4;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid2(), target);
  }

  // optional uint32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint32 date = 6;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->date(), target);
  }

  // optional uint32 configid = 7;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->configid(), target);
  }

  // optional uint32 starttime = 8;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->starttime(), target);
  }

  // optional uint32 endtime = 9;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->endtime(), target);
  }

  // optional .Cmd.WeddingManualInfo manual = 10;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->manual(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.WeddingInfo)
  return target;
}

int WeddingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional .Cmd.EWeddingStatus status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 charid1 = 3;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional uint64 charid2 = 4;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional uint32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 date = 6;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 configid = 7;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint32 starttime = 8;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 endtime = 9;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional .Cmd.WeddingManualInfo manual = 10;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeddingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeddingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeddingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeddingInfo::MergeFrom(const WeddingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::WeddingManualInfo::MergeFrom(from.manual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeddingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeddingInfo::CopyFrom(const WeddingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeddingInfo::IsInitialized() const {

  return true;
}

void WeddingInfo::Swap(WeddingInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(date_, other->date_);
    std::swap(configid_, other->configid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(manual_, other->manual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeddingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeddingInfo_descriptor_;
  metadata.reflection = WeddingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncWeddingInfoSCmd::kCmdFieldNumber;
const int SyncWeddingInfoSCmd::kParamFieldNumber;
const int SyncWeddingInfoSCmd::kCharidFieldNumber;
const int SyncWeddingInfoSCmd::kWeddinginfoFieldNumber;
#endif  // !_MSC_VER

SyncWeddingInfoSCmd::SyncWeddingInfoSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncWeddingInfoSCmd)
}

void SyncWeddingInfoSCmd::InitAsDefaultInstance() {
  weddinginfo_ = const_cast< ::Cmd::WeddingInfo*>(&::Cmd::WeddingInfo::default_instance());
}

SyncWeddingInfoSCmd::SyncWeddingInfoSCmd(const SyncWeddingInfoSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncWeddingInfoSCmd)
}

void SyncWeddingInfoSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  weddinginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncWeddingInfoSCmd::~SyncWeddingInfoSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncWeddingInfoSCmd)
  SharedDtor();
}

void SyncWeddingInfoSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete weddinginfo_;
  }
}

void SyncWeddingInfoSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncWeddingInfoSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncWeddingInfoSCmd_descriptor_;
}

const SyncWeddingInfoSCmd& SyncWeddingInfoSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

SyncWeddingInfoSCmd* SyncWeddingInfoSCmd::default_instance_ = NULL;

SyncWeddingInfoSCmd* SyncWeddingInfoSCmd::New() const {
  return new SyncWeddingInfoSCmd;
}

void SyncWeddingInfoSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 214;
    param_ = 4;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_weddinginfo()) {
      if (weddinginfo_ != NULL) weddinginfo_->::Cmd::WeddingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncWeddingInfoSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncWeddingInfoSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_weddinginfo;
        break;
      }

      // optional .Cmd.WeddingInfo weddinginfo = 4;
      case 4: {
        if (tag == 34) {
         parse_weddinginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weddinginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncWeddingInfoSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncWeddingInfoSCmd)
  return false;
#undef DO_
}

void SyncWeddingInfoSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncWeddingInfoSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.WeddingInfo weddinginfo = 4;
  if (has_weddinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->weddinginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncWeddingInfoSCmd)
}

::google::protobuf::uint8* SyncWeddingInfoSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncWeddingInfoSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.WeddingInfo weddinginfo = 4;
  if (has_weddinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->weddinginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncWeddingInfoSCmd)
  return target;
}

int SyncWeddingInfoSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_SYNC_WEDDINGINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.WeddingInfo weddinginfo = 4;
    if (has_weddinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weddinginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncWeddingInfoSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncWeddingInfoSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncWeddingInfoSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncWeddingInfoSCmd::MergeFrom(const SyncWeddingInfoSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_weddinginfo()) {
      mutable_weddinginfo()->::Cmd::WeddingInfo::MergeFrom(from.weddinginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncWeddingInfoSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncWeddingInfoSCmd::CopyFrom(const SyncWeddingInfoSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncWeddingInfoSCmd::IsInitialized() const {

  return true;
}

void SyncWeddingInfoSCmd::Swap(SyncWeddingInfoSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(weddinginfo_, other->weddinginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncWeddingInfoSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncWeddingInfoSCmd_descriptor_;
  metadata.reflection = SyncWeddingInfoSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateWeddingManualSCmd::kCmdFieldNumber;
const int UpdateWeddingManualSCmd::kParamFieldNumber;
const int UpdateWeddingManualSCmd::kWeddingidFieldNumber;
const int UpdateWeddingManualSCmd::kManualFieldNumber;
#endif  // !_MSC_VER

UpdateWeddingManualSCmd::UpdateWeddingManualSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateWeddingManualSCmd)
}

void UpdateWeddingManualSCmd::InitAsDefaultInstance() {
  manual_ = const_cast< ::Cmd::WeddingManualInfo*>(&::Cmd::WeddingManualInfo::default_instance());
}

UpdateWeddingManualSCmd::UpdateWeddingManualSCmd(const UpdateWeddingManualSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateWeddingManualSCmd)
}

void UpdateWeddingManualSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 14;
  weddingid_ = GOOGLE_ULONGLONG(0);
  manual_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateWeddingManualSCmd::~UpdateWeddingManualSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateWeddingManualSCmd)
  SharedDtor();
}

void UpdateWeddingManualSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete manual_;
  }
}

void UpdateWeddingManualSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateWeddingManualSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateWeddingManualSCmd_descriptor_;
}

const UpdateWeddingManualSCmd& UpdateWeddingManualSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

UpdateWeddingManualSCmd* UpdateWeddingManualSCmd::default_instance_ = NULL;

UpdateWeddingManualSCmd* UpdateWeddingManualSCmd::New() const {
  return new UpdateWeddingManualSCmd;
}

void UpdateWeddingManualSCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 214;
    param_ = 14;
    weddingid_ = GOOGLE_ULONGLONG(0);
    if (has_manual()) {
      if (manual_ != NULL) manual_->::Cmd::WeddingManualInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateWeddingManualSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateWeddingManualSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weddingid;
        break;
      }

      // required uint64 weddingid = 3;
      case 3: {
        if (tag == 24) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_manual;
        break;
      }

      // optional .Cmd.WeddingManualInfo manual = 4;
      case 4: {
        if (tag == 34) {
         parse_manual:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_manual()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateWeddingManualSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateWeddingManualSCmd)
  return false;
#undef DO_
}

void UpdateWeddingManualSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateWeddingManualSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 weddingid = 3;
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weddingid(), output);
  }

  // optional .Cmd.WeddingManualInfo manual = 4;
  if (has_manual()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->manual(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateWeddingManualSCmd)
}

::google::protobuf::uint8* UpdateWeddingManualSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateWeddingManualSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 weddingid = 3;
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weddingid(), target);
  }

  // optional .Cmd.WeddingManualInfo manual = 4;
  if (has_manual()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->manual(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateWeddingManualSCmd)
  return target;
}

int UpdateWeddingManualSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_UPDATE_MANUAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 weddingid = 3;
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

    // optional .Cmd.WeddingManualInfo manual = 4;
    if (has_manual()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->manual());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateWeddingManualSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateWeddingManualSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateWeddingManualSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateWeddingManualSCmd::MergeFrom(const UpdateWeddingManualSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
    if (from.has_manual()) {
      mutable_manual()->::Cmd::WeddingManualInfo::MergeFrom(from.manual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateWeddingManualSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateWeddingManualSCmd::CopyFrom(const UpdateWeddingManualSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateWeddingManualSCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void UpdateWeddingManualSCmd::Swap(UpdateWeddingManualSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(weddingid_, other->weddingid_);
    std::swap(manual_, other->manual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateWeddingManualSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateWeddingManualSCmd_descriptor_;
  metadata.reflection = UpdateWeddingManualSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartWeddingSCmd::kCmdFieldNumber;
const int StartWeddingSCmd::kParamFieldNumber;
const int StartWeddingSCmd::kWeddinginfoFieldNumber;
#endif  // !_MSC_VER

StartWeddingSCmd::StartWeddingSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StartWeddingSCmd)
}

void StartWeddingSCmd::InitAsDefaultInstance() {
  weddinginfo_ = const_cast< ::Cmd::WeddingInfo*>(&::Cmd::WeddingInfo::default_instance());
}

StartWeddingSCmd::StartWeddingSCmd(const StartWeddingSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StartWeddingSCmd)
}

void StartWeddingSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 5;
  weddinginfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartWeddingSCmd::~StartWeddingSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StartWeddingSCmd)
  SharedDtor();
}

void StartWeddingSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete weddinginfo_;
  }
}

void StartWeddingSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartWeddingSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartWeddingSCmd_descriptor_;
}

const StartWeddingSCmd& StartWeddingSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

StartWeddingSCmd* StartWeddingSCmd::default_instance_ = NULL;

StartWeddingSCmd* StartWeddingSCmd::New() const {
  return new StartWeddingSCmd;
}

void StartWeddingSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 214;
    param_ = 5;
    if (has_weddinginfo()) {
      if (weddinginfo_ != NULL) weddinginfo_->::Cmd::WeddingInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartWeddingSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StartWeddingSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_weddinginfo;
        break;
      }

      // optional .Cmd.WeddingInfo weddinginfo = 3;
      case 3: {
        if (tag == 26) {
         parse_weddinginfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weddinginfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StartWeddingSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StartWeddingSCmd)
  return false;
#undef DO_
}

void StartWeddingSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StartWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.WeddingInfo weddinginfo = 3;
  if (has_weddinginfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->weddinginfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StartWeddingSCmd)
}

::google::protobuf::uint8* StartWeddingSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StartWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.WeddingInfo weddinginfo = 3;
  if (has_weddinginfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->weddinginfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StartWeddingSCmd)
  return target;
}

int StartWeddingSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_START_WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.WeddingInfo weddinginfo = 3;
    if (has_weddinginfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weddinginfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartWeddingSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartWeddingSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartWeddingSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartWeddingSCmd::MergeFrom(const StartWeddingSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_weddinginfo()) {
      mutable_weddinginfo()->::Cmd::WeddingInfo::MergeFrom(from.weddinginfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartWeddingSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartWeddingSCmd::CopyFrom(const StartWeddingSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartWeddingSCmd::IsInitialized() const {

  return true;
}

void StartWeddingSCmd::Swap(StartWeddingSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(weddinginfo_, other->weddinginfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartWeddingSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartWeddingSCmd_descriptor_;
  metadata.reflection = StartWeddingSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopWeddingSCmd::kCmdFieldNumber;
const int StopWeddingSCmd::kParamFieldNumber;
const int StopWeddingSCmd::kIdFieldNumber;
#endif  // !_MSC_VER

StopWeddingSCmd::StopWeddingSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StopWeddingSCmd)
}

void StopWeddingSCmd::InitAsDefaultInstance() {
}

StopWeddingSCmd::StopWeddingSCmd(const StopWeddingSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StopWeddingSCmd)
}

void StopWeddingSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 6;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopWeddingSCmd::~StopWeddingSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StopWeddingSCmd)
  SharedDtor();
}

void StopWeddingSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopWeddingSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopWeddingSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopWeddingSCmd_descriptor_;
}

const StopWeddingSCmd& StopWeddingSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

StopWeddingSCmd* StopWeddingSCmd::default_instance_ = NULL;

StopWeddingSCmd* StopWeddingSCmd::New() const {
  return new StopWeddingSCmd;
}

void StopWeddingSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 214;
    param_ = 6;
    id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopWeddingSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StopWeddingSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StopWeddingSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StopWeddingSCmd)
  return false;
#undef DO_
}

void StopWeddingSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StopWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StopWeddingSCmd)
}

::google::protobuf::uint8* StopWeddingSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StopWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StopWeddingSCmd)
  return target;
}

int StopWeddingSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_STOP_WEDDING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopWeddingSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopWeddingSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopWeddingSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopWeddingSCmd::MergeFrom(const StopWeddingSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopWeddingSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopWeddingSCmd::CopyFrom(const StopWeddingSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopWeddingSCmd::IsInitialized() const {

  return true;
}

void StopWeddingSCmd::Swap(StopWeddingSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopWeddingSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopWeddingSCmd_descriptor_;
  metadata.reflection = StopWeddingSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReserveWeddingResultSCmd::kCmdFieldNumber;
const int ReserveWeddingResultSCmd::kParamFieldNumber;
const int ReserveWeddingResultSCmd::kDateFieldNumber;
const int ReserveWeddingResultSCmd::kConfigidFieldNumber;
const int ReserveWeddingResultSCmd::kCharid1FieldNumber;
const int ReserveWeddingResultSCmd::kCharid2FieldNumber;
const int ReserveWeddingResultSCmd::kSuccessFieldNumber;
const int ReserveWeddingResultSCmd::kTicketFieldNumber;
const int ReserveWeddingResultSCmd::kMoneyFieldNumber;
const int ReserveWeddingResultSCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

ReserveWeddingResultSCmd::ReserveWeddingResultSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReserveWeddingResultSCmd)
}

void ReserveWeddingResultSCmd::InitAsDefaultInstance() {
}

ReserveWeddingResultSCmd::ReserveWeddingResultSCmd(const ReserveWeddingResultSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReserveWeddingResultSCmd)
}

void ReserveWeddingResultSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 7;
  date_ = 0u;
  configid_ = 0u;
  charid1_ = GOOGLE_ULONGLONG(0);
  charid2_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ticket_ = 0u;
  money_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReserveWeddingResultSCmd::~ReserveWeddingResultSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReserveWeddingResultSCmd)
  SharedDtor();
}

void ReserveWeddingResultSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReserveWeddingResultSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReserveWeddingResultSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReserveWeddingResultSCmd_descriptor_;
}

const ReserveWeddingResultSCmd& ReserveWeddingResultSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ReserveWeddingResultSCmd* ReserveWeddingResultSCmd::default_instance_ = NULL;

ReserveWeddingResultSCmd* ReserveWeddingResultSCmd::New() const {
  return new ReserveWeddingResultSCmd;
}

void ReserveWeddingResultSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReserveWeddingResultSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(date_, ticket_);
    cmd_ = 214;
    param_ = 7;
  }
  ZR_(money_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReserveWeddingResultSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReserveWeddingResultSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_date;
        break;
      }

      // optional uint32 date = 3;
      case 3: {
        if (tag == 24) {
         parse_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &date_)));
          set_has_date();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 4;
      case 4: {
        if (tag == 32) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 5;
      case 5: {
        if (tag == 40) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 6;
      case 6: {
        if (tag == 48) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_success;
        break;
      }

      // optional bool success = 7;
      case 7: {
        if (tag == 56) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_ticket;
        break;
      }

      // optional uint32 ticket = 8;
      case 8: {
        if (tag == 64) {
         parse_ticket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ticket_)));
          set_has_ticket();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_money;
        break;
      }

      // optional uint32 money = 9;
      case 9: {
        if (tag == 72) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 10;
      case 10: {
        if (tag == 80) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReserveWeddingResultSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReserveWeddingResultSCmd)
  return false;
#undef DO_
}

void ReserveWeddingResultSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReserveWeddingResultSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->date(), output);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->configid(), output);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid1(), output);
  }

  // optional uint64 charid2 = 6;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid2(), output);
  }

  // optional bool success = 7;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->success(), output);
  }

  // optional uint32 ticket = 8;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->ticket(), output);
  }

  // optional uint32 money = 9;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->money(), output);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReserveWeddingResultSCmd)
}

::google::protobuf::uint8* ReserveWeddingResultSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReserveWeddingResultSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 date = 3;
  if (has_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->date(), target);
  }

  // optional uint32 configid = 4;
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->configid(), target);
  }

  // optional uint64 charid1 = 5;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid1(), target);
  }

  // optional uint64 charid2 = 6;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid2(), target);
  }

  // optional bool success = 7;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->success(), target);
  }

  // optional uint32 ticket = 8;
  if (has_ticket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->ticket(), target);
  }

  // optional uint32 money = 9;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->money(), target);
  }

  // optional uint32 zoneid = 10;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReserveWeddingResultSCmd)
  return target;
}

int ReserveWeddingResultSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_RESERVE_WEDDING_RESULT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 date = 3;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->date());
    }

    // optional uint32 configid = 4;
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional uint64 charid1 = 5;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional uint64 charid2 = 6;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional bool success = 7;
    if (has_success()) {
      total_size += 1 + 1;
    }

    // optional uint32 ticket = 8;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ticket());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 money = 9;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 zoneid = 10;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReserveWeddingResultSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReserveWeddingResultSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReserveWeddingResultSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReserveWeddingResultSCmd::MergeFrom(const ReserveWeddingResultSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReserveWeddingResultSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReserveWeddingResultSCmd::CopyFrom(const ReserveWeddingResultSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReserveWeddingResultSCmd::IsInitialized() const {

  return true;
}

void ReserveWeddingResultSCmd::Swap(ReserveWeddingResultSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(date_, other->date_);
    std::swap(configid_, other->configid_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(success_, other->success_);
    std::swap(ticket_, other->ticket_);
    std::swap(money_, other->money_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReserveWeddingResultSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReserveWeddingResultSCmd_descriptor_;
  metadata.reflection = ReserveWeddingResultSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuyServiceWeddingSCmd::kCmdFieldNumber;
const int BuyServiceWeddingSCmd::kParamFieldNumber;
const int BuyServiceWeddingSCmd::kCharidFieldNumber;
const int BuyServiceWeddingSCmd::kSourceFieldNumber;
const int BuyServiceWeddingSCmd::kItemsFieldNumber;
const int BuyServiceWeddingSCmd::kServiceidFieldNumber;
const int BuyServiceWeddingSCmd::kWeddingidFieldNumber;
const int BuyServiceWeddingSCmd::kSuccessFieldNumber;
#endif  // !_MSC_VER

BuyServiceWeddingSCmd::BuyServiceWeddingSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuyServiceWeddingSCmd)
}

void BuyServiceWeddingSCmd::InitAsDefaultInstance() {
}

BuyServiceWeddingSCmd::BuyServiceWeddingSCmd(const BuyServiceWeddingSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuyServiceWeddingSCmd)
}

void BuyServiceWeddingSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 9;
  charid_ = GOOGLE_ULONGLONG(0);
  source_ = 0;
  serviceid_ = 0u;
  weddingid_ = GOOGLE_ULONGLONG(0);
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuyServiceWeddingSCmd::~BuyServiceWeddingSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BuyServiceWeddingSCmd)
  SharedDtor();
}

void BuyServiceWeddingSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuyServiceWeddingSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuyServiceWeddingSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuyServiceWeddingSCmd_descriptor_;
}

const BuyServiceWeddingSCmd& BuyServiceWeddingSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

BuyServiceWeddingSCmd* BuyServiceWeddingSCmd::default_instance_ = NULL;

BuyServiceWeddingSCmd* BuyServiceWeddingSCmd::New() const {
  return new BuyServiceWeddingSCmd;
}

void BuyServiceWeddingSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuyServiceWeddingSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 239) {
    ZR_(source_, success_);
    cmd_ = 214;
    param_ = 9;
    charid_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuyServiceWeddingSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuyServiceWeddingSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_source;
        break;
      }

      // optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
      case 4: {
        if (tag == 32) {
         parse_source:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESource_IsValid(value)) {
            set_source(static_cast< ::Cmd::ESource >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 5;
      case 5: {
        if (tag == 42) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectTag(48)) goto parse_serviceid;
        break;
      }

      // optional uint32 serviceid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_serviceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serviceid_)));
          set_has_serviceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_weddingid;
        break;
      }

      // optional uint64 weddingid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_success;
        break;
      }

      // optional bool success = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuyServiceWeddingSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuyServiceWeddingSCmd)
  return false;
#undef DO_
}

void BuyServiceWeddingSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuyServiceWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->source(), output);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  // optional uint32 serviceid = 6 [default = 0];
  if (has_serviceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serviceid(), output);
  }

  // optional uint64 weddingid = 7 [default = 0];
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->weddingid(), output);
  }

  // optional bool success = 8 [default = false];
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuyServiceWeddingSCmd)
}

::google::protobuf::uint8* BuyServiceWeddingSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuyServiceWeddingSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->source(), target);
  }

  // repeated .Cmd.ItemInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  // optional uint32 serviceid = 6 [default = 0];
  if (has_serviceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serviceid(), target);
  }

  // optional uint64 weddingid = 7 [default = 0];
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->weddingid(), target);
  }

  // optional bool success = 8 [default = false];
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuyServiceWeddingSCmd)
  return target;
}

int BuyServiceWeddingSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_BUY_SERVICE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ESource source = 4 [default = ESOURCE_MIN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

    // optional uint32 serviceid = 6 [default = 0];
    if (has_serviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serviceid());
    }

    // optional uint64 weddingid = 7 [default = 0];
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

    // optional bool success = 8 [default = false];
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.ItemInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuyServiceWeddingSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuyServiceWeddingSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuyServiceWeddingSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuyServiceWeddingSCmd::MergeFrom(const BuyServiceWeddingSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_serviceid()) {
      set_serviceid(from.serviceid());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuyServiceWeddingSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuyServiceWeddingSCmd::CopyFrom(const BuyServiceWeddingSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuyServiceWeddingSCmd::IsInitialized() const {

  return true;
}

void BuyServiceWeddingSCmd::Swap(BuyServiceWeddingSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(source_, other->source_);
    items_.Swap(&other->items_);
    std::swap(serviceid_, other->serviceid_);
    std::swap(weddingid_, other->weddingid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuyServiceWeddingSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuyServiceWeddingSCmd_descriptor_;
  metadata.reflection = BuyServiceWeddingSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarrySCmd::kCmdFieldNumber;
const int MarrySCmd::kParamFieldNumber;
const int MarrySCmd::kCharid1FieldNumber;
const int MarrySCmd::kCharid2FieldNumber;
const int MarrySCmd::kWeddingidFieldNumber;
const int MarrySCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

MarrySCmd::MarrySCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarrySCmd)
}

void MarrySCmd::InitAsDefaultInstance() {
}

MarrySCmd::MarrySCmd(const MarrySCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarrySCmd)
}

void MarrySCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 11;
  charid1_ = GOOGLE_ULONGLONG(0);
  charid2_ = GOOGLE_ULONGLONG(0);
  weddingid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarrySCmd::~MarrySCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarrySCmd)
  SharedDtor();
}

void MarrySCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarrySCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarrySCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarrySCmd_descriptor_;
}

const MarrySCmd& MarrySCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

MarrySCmd* MarrySCmd::default_instance_ = NULL;

MarrySCmd* MarrySCmd::New() const {
  return new MarrySCmd;
}

void MarrySCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MarrySCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid1_, weddingid_);
    cmd_ = 214;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarrySCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarrySCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid1;
        break;
      }

      // optional uint64 charid1 = 3;
      case 3: {
        if (tag == 24) {
         parse_charid1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid2;
        break;
      }

      // optional uint64 charid2 = 4;
      case 4: {
        if (tag == 32) {
         parse_charid2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_weddingid;
        break;
      }

      // optional uint64 weddingid = 5;
      case 5: {
        if (tag == 40) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemData items = 6;
      case 6: {
        if (tag == 50) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarrySCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarrySCmd)
  return false;
#undef DO_
}

void MarrySCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarrySCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid1 = 3;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid1(), output);
  }

  // optional uint64 charid2 = 4;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid2(), output);
  }

  // optional uint64 weddingid = 5;
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->weddingid(), output);
  }

  // repeated .Cmd.ItemData items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarrySCmd)
}

::google::protobuf::uint8* MarrySCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarrySCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid1 = 3;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid1(), target);
  }

  // optional uint64 charid2 = 4;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid2(), target);
  }

  // optional uint64 weddingid = 5;
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->weddingid(), target);
  }

  // repeated .Cmd.ItemData items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarrySCmd)
  return target;
}

int MarrySCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid1 = 3;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid1());
    }

    // optional uint64 charid2 = 4;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid2());
    }

    // optional uint64 weddingid = 5;
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

  }
  // repeated .Cmd.ItemData items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarrySCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarrySCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarrySCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarrySCmd::MergeFrom(const MarrySCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarrySCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarrySCmd::CopyFrom(const MarrySCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarrySCmd::IsInitialized() const {

  return true;
}

void MarrySCmd::Swap(MarrySCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(weddingid_, other->weddingid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarrySCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarrySCmd_descriptor_;
  metadata.reflection = MarrySCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CheckWeddingReserverSCmd::kCmdFieldNumber;
const int CheckWeddingReserverSCmd::kParamFieldNumber;
const int CheckWeddingReserverSCmd::kWeddingidFieldNumber;
const int CheckWeddingReserverSCmd::kMailidFieldNumber;
const int CheckWeddingReserverSCmd::kCharidFieldNumber;
const int CheckWeddingReserverSCmd::kResultFieldNumber;
#endif  // !_MSC_VER

CheckWeddingReserverSCmd::CheckWeddingReserverSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CheckWeddingReserverSCmd)
}

void CheckWeddingReserverSCmd::InitAsDefaultInstance() {
}

CheckWeddingReserverSCmd::CheckWeddingReserverSCmd(const CheckWeddingReserverSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CheckWeddingReserverSCmd)
}

void CheckWeddingReserverSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 12;
  weddingid_ = GOOGLE_ULONGLONG(0);
  mailid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckWeddingReserverSCmd::~CheckWeddingReserverSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CheckWeddingReserverSCmd)
  SharedDtor();
}

void CheckWeddingReserverSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckWeddingReserverSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckWeddingReserverSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckWeddingReserverSCmd_descriptor_;
}

const CheckWeddingReserverSCmd& CheckWeddingReserverSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

CheckWeddingReserverSCmd* CheckWeddingReserverSCmd::default_instance_ = NULL;

CheckWeddingReserverSCmd* CheckWeddingReserverSCmd::New() const {
  return new CheckWeddingReserverSCmd;
}

void CheckWeddingReserverSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CheckWeddingReserverSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(weddingid_, result_);
    cmd_ = 214;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CheckWeddingReserverSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CheckWeddingReserverSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weddingid;
        break;
      }

      // optional uint64 weddingid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mailid;
        break;
      }

      // optional uint64 mailid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_result;
        break;
      }

      // optional bool result = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CheckWeddingReserverSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CheckWeddingReserverSCmd)
  return false;
#undef DO_
}

void CheckWeddingReserverSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CheckWeddingReserverSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 weddingid = 3 [default = 0];
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weddingid(), output);
  }

  // optional uint64 mailid = 4 [default = 0];
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mailid(), output);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->charid(), output);
  }

  // optional bool result = 6 [default = false];
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CheckWeddingReserverSCmd)
}

::google::protobuf::uint8* CheckWeddingReserverSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CheckWeddingReserverSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 weddingid = 3 [default = 0];
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weddingid(), target);
  }

  // optional uint64 mailid = 4 [default = 0];
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mailid(), target);
  }

  // optional uint64 charid = 5 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->charid(), target);
  }

  // optional bool result = 6 [default = false];
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CheckWeddingReserverSCmd)
  return target;
}

int CheckWeddingReserverSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_CHECK_WEDDING_RESERVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 weddingid = 3 [default = 0];
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

    // optional uint64 mailid = 4 [default = 0];
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint64 charid = 5 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool result = 6 [default = false];
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckWeddingReserverSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CheckWeddingReserverSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CheckWeddingReserverSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CheckWeddingReserverSCmd::MergeFrom(const CheckWeddingReserverSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CheckWeddingReserverSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckWeddingReserverSCmd::CopyFrom(const CheckWeddingReserverSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckWeddingReserverSCmd::IsInitialized() const {

  return true;
}

void CheckWeddingReserverSCmd::Swap(CheckWeddingReserverSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(weddingid_, other->weddingid_);
    std::swap(mailid_, other->mailid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CheckWeddingReserverSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckWeddingReserverSCmd_descriptor_;
  metadata.reflection = CheckWeddingReserverSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParnterInfo::kMapidFieldNumber;
const int ParnterInfo::kZoneidFieldNumber;
const int ParnterInfo::kXFieldNumber;
const int ParnterInfo::kYFieldNumber;
const int ParnterInfo::kZFieldNumber;
#endif  // !_MSC_VER

ParnterInfo::ParnterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ParnterInfo)
}

void ParnterInfo::InitAsDefaultInstance() {
}

ParnterInfo::ParnterInfo(const ParnterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ParnterInfo)
}

void ParnterInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  zoneid_ = 0u;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParnterInfo::~ParnterInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ParnterInfo)
  SharedDtor();
}

void ParnterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ParnterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParnterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParnterInfo_descriptor_;
}

const ParnterInfo& ParnterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

ParnterInfo* ParnterInfo::default_instance_ = NULL;

ParnterInfo* ParnterInfo::New() const {
  return new ParnterInfo;
}

void ParnterInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ParnterInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(mapid_, z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParnterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ParnterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_x;
        break;
      }

      // optional float x = 3 [default = 0];
      case 3: {
        if (tag == 29) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_y;
        break;
      }

      // optional float y = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_z;
        break;
      }

      // optional float z = 5 [default = 0];
      case 5: {
        if (tag == 45) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ParnterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ParnterInfo)
  return false;
#undef DO_
}

void ParnterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ParnterInfo)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  // optional float x = 3 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x(), output);
  }

  // optional float y = 4 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y(), output);
  }

  // optional float z = 5 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ParnterInfo)
}

::google::protobuf::uint8* ParnterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ParnterInfo)
  // optional uint32 mapid = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  // optional float x = 3 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x(), target);
  }

  // optional float y = 4 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y(), target);
  }

  // optional float z = 5 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ParnterInfo)
  return target;
}

int ParnterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapid = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional float x = 3 [default = 0];
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 4 [default = 0];
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 5 [default = 0];
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParnterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParnterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParnterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParnterInfo::MergeFrom(const ParnterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParnterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParnterInfo::CopyFrom(const ParnterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParnterInfo::IsInitialized() const {

  return true;
}

void ParnterInfo::Swap(ParnterInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParnterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParnterInfo_descriptor_;
  metadata.reflection = ParnterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MissyouInviteWedSCmd::kCmdFieldNumber;
const int MissyouInviteWedSCmd::kParamFieldNumber;
const int MissyouInviteWedSCmd::kCharidFieldNumber;
const int MissyouInviteWedSCmd::kTransFieldNumber;
const int MissyouInviteWedSCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

MissyouInviteWedSCmd::MissyouInviteWedSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MissyouInviteWedSCmd)
}

void MissyouInviteWedSCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::ParnterInfo*>(&::Cmd::ParnterInfo::default_instance());
}

MissyouInviteWedSCmd::MissyouInviteWedSCmd(const MissyouInviteWedSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MissyouInviteWedSCmd)
}

void MissyouInviteWedSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 13;
  charid_ = GOOGLE_ULONGLONG(0);
  trans_ = false;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MissyouInviteWedSCmd::~MissyouInviteWedSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MissyouInviteWedSCmd)
  SharedDtor();
}

void MissyouInviteWedSCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MissyouInviteWedSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MissyouInviteWedSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MissyouInviteWedSCmd_descriptor_;
}

const MissyouInviteWedSCmd& MissyouInviteWedSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

MissyouInviteWedSCmd* MissyouInviteWedSCmd::default_instance_ = NULL;

MissyouInviteWedSCmd* MissyouInviteWedSCmd::New() const {
  return new MissyouInviteWedSCmd;
}

void MissyouInviteWedSCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 214;
    param_ = 13;
    charid_ = GOOGLE_ULONGLONG(0);
    trans_ = false;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::ParnterInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MissyouInviteWedSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MissyouInviteWedSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_trans;
        break;
      }

      // optional bool trans = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_trans:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trans_)));
          set_has_trans();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_info;
        break;
      }

      // optional .Cmd.ParnterInfo info = 9;
      case 9: {
        if (tag == 74) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MissyouInviteWedSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MissyouInviteWedSCmd)
  return false;
#undef DO_
}

void MissyouInviteWedSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MissyouInviteWedSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool trans = 8 [default = false];
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->trans(), output);
  }

  // optional .Cmd.ParnterInfo info = 9;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MissyouInviteWedSCmd)
}

::google::protobuf::uint8* MissyouInviteWedSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MissyouInviteWedSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool trans = 8 [default = false];
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->trans(), target);
  }

  // optional .Cmd.ParnterInfo info = 9;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MissyouInviteWedSCmd)
  return target;
}

int MissyouInviteWedSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MISSYOU_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool trans = 8 [default = false];
    if (has_trans()) {
      total_size += 1 + 1;
    }

    // optional .Cmd.ParnterInfo info = 9;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MissyouInviteWedSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MissyouInviteWedSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MissyouInviteWedSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MissyouInviteWedSCmd::MergeFrom(const MissyouInviteWedSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_trans()) {
      set_trans(from.trans());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::ParnterInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MissyouInviteWedSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MissyouInviteWedSCmd::CopyFrom(const MissyouInviteWedSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MissyouInviteWedSCmd::IsInitialized() const {

  return true;
}

void MissyouInviteWedSCmd::Swap(MissyouInviteWedSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(trans_, other->trans_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MissyouInviteWedSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MissyouInviteWedSCmd_descriptor_;
  metadata.reflection = MissyouInviteWedSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarrySuccessSCmd::kCmdFieldNumber;
const int MarrySuccessSCmd::kParamFieldNumber;
const int MarrySuccessSCmd::kWeddingidFieldNumber;
#endif  // !_MSC_VER

MarrySuccessSCmd::MarrySuccessSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MarrySuccessSCmd)
}

void MarrySuccessSCmd::InitAsDefaultInstance() {
}

MarrySuccessSCmd::MarrySuccessSCmd(const MarrySuccessSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MarrySuccessSCmd)
}

void MarrySuccessSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 15;
  weddingid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarrySuccessSCmd::~MarrySuccessSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MarrySuccessSCmd)
  SharedDtor();
}

void MarrySuccessSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarrySuccessSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarrySuccessSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarrySuccessSCmd_descriptor_;
}

const MarrySuccessSCmd& MarrySuccessSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

MarrySuccessSCmd* MarrySuccessSCmd::default_instance_ = NULL;

MarrySuccessSCmd* MarrySuccessSCmd::New() const {
  return new MarrySuccessSCmd;
}

void MarrySuccessSCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 214;
    param_ = 15;
    weddingid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarrySuccessSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MarrySuccessSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weddingid;
        break;
      }

      // optional uint64 weddingid = 3;
      case 3: {
        if (tag == 24) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MarrySuccessSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MarrySuccessSCmd)
  return false;
#undef DO_
}

void MarrySuccessSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MarrySuccessSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 weddingid = 3;
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weddingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MarrySuccessSCmd)
}

::google::protobuf::uint8* MarrySuccessSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MarrySuccessSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 weddingid = 3;
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weddingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MarrySuccessSCmd)
  return target;
}

int MarrySuccessSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_MARRY_SUCCESS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 weddingid = 3;
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarrySuccessSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarrySuccessSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarrySuccessSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarrySuccessSCmd::MergeFrom(const MarrySuccessSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarrySuccessSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarrySuccessSCmd::CopyFrom(const MarrySuccessSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarrySuccessSCmd::IsInitialized() const {

  return true;
}

void MarrySuccessSCmd::Swap(MarrySuccessSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(weddingid_, other->weddingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarrySuccessSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarrySuccessSCmd_descriptor_;
  metadata.reflection = MarrySuccessSCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserRenameWedSCmd::kCmdFieldNumber;
const int UserRenameWedSCmd::kParamFieldNumber;
const int UserRenameWedSCmd::kWeddingidFieldNumber;
const int UserRenameWedSCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

UserRenameWedSCmd::UserRenameWedSCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserRenameWedSCmd)
}

void UserRenameWedSCmd::InitAsDefaultInstance() {
}

UserRenameWedSCmd::UserRenameWedSCmd(const UserRenameWedSCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserRenameWedSCmd)
}

void UserRenameWedSCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 214;
  param_ = 16;
  weddingid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserRenameWedSCmd::~UserRenameWedSCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserRenameWedSCmd)
  SharedDtor();
}

void UserRenameWedSCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserRenameWedSCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserRenameWedSCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserRenameWedSCmd_descriptor_;
}

const UserRenameWedSCmd& UserRenameWedSCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_WeddingSCmd_2eproto();
  return *default_instance_;
}

UserRenameWedSCmd* UserRenameWedSCmd::default_instance_ = NULL;

UserRenameWedSCmd* UserRenameWedSCmd::New() const {
  return new UserRenameWedSCmd;
}

void UserRenameWedSCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserRenameWedSCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(weddingid_, charid_);
    cmd_ = 214;
    param_ = 16;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserRenameWedSCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserRenameWedSCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::WeddingSParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::WeddingSParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_weddingid;
        break;
      }

      // optional uint64 weddingid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_weddingid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weddingid_)));
          set_has_weddingid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserRenameWedSCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserRenameWedSCmd)
  return false;
#undef DO_
}

void UserRenameWedSCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserRenameWedSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 weddingid = 3 [default = 0];
  if (has_weddingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->weddingid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserRenameWedSCmd)
}

::google::protobuf::uint8* UserRenameWedSCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserRenameWedSCmd)
  // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 weddingid = 3 [default = 0];
  if (has_weddingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->weddingid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserRenameWedSCmd)
  return target;
}

int UserRenameWedSCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = WEDDINGS_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.WeddingSParam param = 2 [default = WEDDINGSPARAM_USER_RENAME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 weddingid = 3 [default = 0];
    if (has_weddingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weddingid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRenameWedSCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserRenameWedSCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserRenameWedSCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserRenameWedSCmd::MergeFrom(const UserRenameWedSCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_weddingid()) {
      set_weddingid(from.weddingid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserRenameWedSCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserRenameWedSCmd::CopyFrom(const UserRenameWedSCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRenameWedSCmd::IsInitialized() const {

  return true;
}

void UserRenameWedSCmd::Swap(UserRenameWedSCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(weddingid_, other->weddingid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserRenameWedSCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserRenameWedSCmd_descriptor_;
  metadata.reflection = UserRenameWedSCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
