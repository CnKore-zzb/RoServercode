// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AuctionSCmd.proto

#ifndef PROTOBUF_AuctionSCmd_2eproto__INCLUDED
#define PROTOBUF_AuctionSCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "AuctionCCmd.pb.h"
#include "SceneItem.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_AuctionSCmd_2eproto();
void protobuf_AssignDesc_AuctionSCmd_2eproto();
void protobuf_ShutdownFile_AuctionSCmd_2eproto();

class ForwardCCmd2Auction;
class ForwardSCmd2Auction;
class ForwardAuction2SCmd;
class SignUpItemSCmd;
class OfferPriceSCmd;
class OfferPriceDelOrderSCmd;
class TakeRecordSCmd;
class WorldCmdSCmd;
class GmModifyAuctionTimeSCmd;
class GmStopAuctionSCmd;
class BroadcastMsgBySessionAuctionSCmd;

enum AuctionSParam {
  AUCTIONSPARAM_FORWARD_CCMD2AUCTION = 1,
  AUCTIONSPARAM_FORWARD_SCMD2AUCTION = 2,
  AUCTIONSPARAM_FORWARD_AUCTION2SCMD = 3,
  AUCTIONSPARAM_SIGNUP_ITEM = 4,
  AUCTIONSPARAM_OFFER_PRICE = 5,
  AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER = 6,
  AUCTIONSPARAM_TAKE_RECORD = 7,
  AUCTIONSPARAM_WORLD_CMD = 8,
  AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME = 9,
  AUCTIONSPARAM_GM_STOP_AUCTION = 10,
  AUCTIONSPARAM_BROADCASE_MSG_BYSESSION = 11
};
bool AuctionSParam_IsValid(int value);
const AuctionSParam AuctionSParam_MIN = AUCTIONSPARAM_FORWARD_CCMD2AUCTION;
const AuctionSParam AuctionSParam_MAX = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION;
const int AuctionSParam_ARRAYSIZE = AuctionSParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* AuctionSParam_descriptor();
inline const ::std::string& AuctionSParam_Name(AuctionSParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    AuctionSParam_descriptor(), value);
}
inline bool AuctionSParam_Parse(
    const ::std::string& name, AuctionSParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AuctionSParam>(
    AuctionSParam_descriptor(), name, value);
}
// ===================================================================

class ForwardCCmd2Auction : public ::google::protobuf::Message {
 public:
  ForwardCCmd2Auction();
  virtual ~ForwardCCmd2Auction();

  ForwardCCmd2Auction(const ForwardCCmd2Auction& from);

  inline ForwardCCmd2Auction& operator=(const ForwardCCmd2Auction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardCCmd2Auction& default_instance();

  void Swap(ForwardCCmd2Auction* other);

  // implements Message ----------------------------------------------

  ForwardCCmd2Auction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardCCmd2Auction& from);
  void MergeFrom(const ForwardCCmd2Auction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardCCmd2Auction)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardCCmd2Auction* default_instance_;
};
// -------------------------------------------------------------------

class ForwardSCmd2Auction : public ::google::protobuf::Message {
 public:
  ForwardSCmd2Auction();
  virtual ~ForwardSCmd2Auction();

  ForwardSCmd2Auction(const ForwardSCmd2Auction& from);

  inline ForwardSCmd2Auction& operator=(const ForwardSCmd2Auction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardSCmd2Auction& default_instance();

  void Swap(ForwardSCmd2Auction* other);

  // implements Message ----------------------------------------------

  ForwardSCmd2Auction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardSCmd2Auction& from);
  void MergeFrom(const ForwardSCmd2Auction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 4;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 4;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes data = 6;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 7;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 7;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardSCmd2Auction)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 len_;
  ::std::string* data_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardSCmd2Auction* default_instance_;
};
// -------------------------------------------------------------------

class ForwardAuction2SCmd : public ::google::protobuf::Message {
 public:
  ForwardAuction2SCmd();
  virtual ~ForwardAuction2SCmd();

  ForwardAuction2SCmd(const ForwardAuction2SCmd& from);

  inline ForwardAuction2SCmd& operator=(const ForwardAuction2SCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardAuction2SCmd& default_instance();

  void Swap(ForwardAuction2SCmd* other);

  // implements Message ----------------------------------------------

  ForwardAuction2SCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardAuction2SCmd& from);
  void MergeFrom(const ForwardAuction2SCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 5;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 5;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ForwardAuction2SCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static ForwardAuction2SCmd* default_instance_;
};
// -------------------------------------------------------------------

class SignUpItemSCmd : public ::google::protobuf::Message {
 public:
  SignUpItemSCmd();
  virtual ~SignUpItemSCmd();

  SignUpItemSCmd(const SignUpItemSCmd& from);

  inline SignUpItemSCmd& operator=(const SignUpItemSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SignUpItemSCmd& default_instance();

  void Swap(SignUpItemSCmd* other);

  // implements Message ----------------------------------------------

  SignUpItemSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SignUpItemSCmd& from);
  void MergeFrom(const SignUpItemSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional .Cmd.SignUpItemInfo iteminfo = 3;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 3;
  inline const ::Cmd::SignUpItemInfo& iteminfo() const;
  inline ::Cmd::SignUpItemInfo* mutable_iteminfo();
  inline ::Cmd::SignUpItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::SignUpItemInfo* iteminfo);

  // optional bool ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 batchid = 6;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 6;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint64 orderid = 7;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 7;
  inline ::google::protobuf::uint64 orderid() const;
  inline void set_orderid(::google::protobuf::uint64 value);

  // optional string guid = 8;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 8;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional uint32 fm_point = 9;
  inline bool has_fm_point() const;
  inline void clear_fm_point();
  static const int kFmPointFieldNumber = 9;
  inline ::google::protobuf::uint32 fm_point() const;
  inline void set_fm_point(::google::protobuf::uint32 value);

  // optional uint32 fm_buff = 10;
  inline bool has_fm_buff() const;
  inline void clear_fm_buff();
  static const int kFmBuffFieldNumber = 10;
  inline ::google::protobuf::uint32 fm_buff() const;
  inline void set_fm_buff(::google::protobuf::uint32 value);

  // optional .Cmd.ItemData itemdata = 11;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 11;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:Cmd.SignUpItemSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_fm_point();
  inline void clear_has_fm_point();
  inline void set_has_fm_buff();
  inline void clear_has_fm_buff();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::SignUpItemInfo* iteminfo_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 batchid_;
  bool ret_;
  ::google::protobuf::uint32 fm_point_;
  ::google::protobuf::uint64 orderid_;
  ::std::string* guid_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint32 fm_buff_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static SignUpItemSCmd* default_instance_;
};
// -------------------------------------------------------------------

class OfferPriceSCmd : public ::google::protobuf::Message {
 public:
  OfferPriceSCmd();
  virtual ~OfferPriceSCmd();

  OfferPriceSCmd(const OfferPriceSCmd& from);

  inline OfferPriceSCmd& operator=(const OfferPriceSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferPriceSCmd& default_instance();

  void Swap(OfferPriceSCmd* other);

  // implements Message ----------------------------------------------

  OfferPriceSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferPriceSCmd& from);
  void MergeFrom(const OfferPriceSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline ::google::protobuf::uint64 orderid() const;
  inline void set_orderid(::google::protobuf::uint64 value);

  // optional uint64 batchid = 4;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 4;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 reduce_money = 6;
  inline bool has_reduce_money() const;
  inline void clear_reduce_money();
  static const int kReduceMoneyFieldNumber = 6;
  inline ::google::protobuf::uint64 reduce_money() const;
  inline void set_reduce_money(::google::protobuf::uint64 value);

  // optional uint64 total_price = 7;
  inline bool has_total_price() const;
  inline void clear_total_price();
  static const int kTotalPriceFieldNumber = 7;
  inline ::google::protobuf::uint64 total_price() const;
  inline void set_total_price(::google::protobuf::uint64 value);

  // optional bool ret = 8;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 8;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint64 charid = 9;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 9;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 signupid = 10;
  inline bool has_signupid() const;
  inline void clear_signupid();
  static const int kSignupidFieldNumber = 10;
  inline ::google::protobuf::uint64 signupid() const;
  inline void set_signupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.OfferPriceSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_reduce_money();
  inline void clear_has_reduce_money();
  inline void set_has_total_price();
  inline void clear_has_total_price();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_signupid();
  inline void clear_has_signupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::uint64 batchid_;
  ::google::protobuf::uint64 reduce_money_;
  ::google::protobuf::uint32 itemid_;
  bool ret_;
  ::google::protobuf::uint64 total_price_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 signupid_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static OfferPriceSCmd* default_instance_;
};
// -------------------------------------------------------------------

class OfferPriceDelOrderSCmd : public ::google::protobuf::Message {
 public:
  OfferPriceDelOrderSCmd();
  virtual ~OfferPriceDelOrderSCmd();

  OfferPriceDelOrderSCmd(const OfferPriceDelOrderSCmd& from);

  inline OfferPriceDelOrderSCmd& operator=(const OfferPriceDelOrderSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfferPriceDelOrderSCmd& default_instance();

  void Swap(OfferPriceDelOrderSCmd* other);

  // implements Message ----------------------------------------------

  OfferPriceDelOrderSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfferPriceDelOrderSCmd& from);
  void MergeFrom(const OfferPriceDelOrderSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline ::google::protobuf::uint64 orderid() const;
  inline void set_orderid(::google::protobuf::uint64 value);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.OfferPriceDelOrderSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 orderid_;
  ::google::protobuf::uint64 charid_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static OfferPriceDelOrderSCmd* default_instance_;
};
// -------------------------------------------------------------------

class TakeRecordSCmd : public ::google::protobuf::Message {
 public:
  TakeRecordSCmd();
  virtual ~TakeRecordSCmd();

  TakeRecordSCmd(const TakeRecordSCmd& from);

  inline TakeRecordSCmd& operator=(const TakeRecordSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeRecordSCmd& default_instance();

  void Swap(TakeRecordSCmd* other);

  // implements Message ----------------------------------------------

  TakeRecordSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeRecordSCmd& from);
  void MergeFrom(const TakeRecordSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ERecordType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::ERecordType type() const;
  inline void set_type(::Cmd::ERecordType value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 batchid = 6;
  inline bool has_batchid() const;
  inline void clear_batchid();
  static const int kBatchidFieldNumber = 6;
  inline ::google::protobuf::uint64 batchid() const;
  inline void set_batchid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 7;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 7;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional .Cmd.ItemInfo item = 8;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 8;
  inline const ::Cmd::ItemInfo& item() const;
  inline ::Cmd::ItemInfo* mutable_item();
  inline ::Cmd::ItemInfo* release_item();
  inline void set_allocated_item(::Cmd::ItemInfo* item);

  // optional uint64 zeny = 9;
  inline bool has_zeny() const;
  inline void clear_zeny();
  static const int kZenyFieldNumber = 9;
  inline ::google::protobuf::uint64 zeny() const;
  inline void set_zeny(::google::protobuf::uint64 value);

  // optional bool ret = 10;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 10;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint64 bcat = 11;
  inline bool has_bcat() const;
  inline void clear_bcat();
  static const int kBcatFieldNumber = 11;
  inline ::google::protobuf::uint64 bcat() const;
  inline void set_bcat(::google::protobuf::uint64 value);

  // optional uint64 signup_id = 12;
  inline bool has_signup_id() const;
  inline void clear_signup_id();
  static const int kSignupIdFieldNumber = 12;
  inline ::google::protobuf::uint64 signup_id() const;
  inline void set_signup_id(::google::protobuf::uint64 value);

  // optional .Cmd.ItemData itemdata = 13;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 13;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // @@protoc_insertion_point(class_scope:Cmd.TakeRecordSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_batchid();
  inline void clear_has_batchid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_zeny();
  inline void clear_has_zeny();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_bcat();
  inline void clear_has_bcat();
  inline void set_has_signup_id();
  inline void clear_has_signup_id();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 charid_;
  int type_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint64 batchid_;
  ::Cmd::ItemInfo* item_;
  ::google::protobuf::uint64 zeny_;
  ::google::protobuf::uint64 bcat_;
  ::google::protobuf::uint64 signup_id_;
  ::Cmd::ItemData* itemdata_;
  bool ret_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static TakeRecordSCmd* default_instance_;
};
// -------------------------------------------------------------------

class WorldCmdSCmd : public ::google::protobuf::Message {
 public:
  WorldCmdSCmd();
  virtual ~WorldCmdSCmd();

  WorldCmdSCmd(const WorldCmdSCmd& from);

  inline WorldCmdSCmd& operator=(const WorldCmdSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldCmdSCmd& default_instance();

  void Swap(WorldCmdSCmd* other);

  // implements Message ----------------------------------------------

  WorldCmdSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WorldCmdSCmd& from);
  void MergeFrom(const WorldCmdSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.WorldCmdSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static WorldCmdSCmd* default_instance_;
};
// -------------------------------------------------------------------

class GmModifyAuctionTimeSCmd : public ::google::protobuf::Message {
 public:
  GmModifyAuctionTimeSCmd();
  virtual ~GmModifyAuctionTimeSCmd();

  GmModifyAuctionTimeSCmd(const GmModifyAuctionTimeSCmd& from);

  inline GmModifyAuctionTimeSCmd& operator=(const GmModifyAuctionTimeSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GmModifyAuctionTimeSCmd& default_instance();

  void Swap(GmModifyAuctionTimeSCmd* other);

  // implements Message ----------------------------------------------

  GmModifyAuctionTimeSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GmModifyAuctionTimeSCmd& from);
  void MergeFrom(const GmModifyAuctionTimeSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional uint32 auction_time = 3;
  inline bool has_auction_time() const;
  inline void clear_auction_time();
  static const int kAuctionTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 auction_time() const;
  inline void set_auction_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GmModifyAuctionTimeSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_auction_time();
  inline void clear_has_auction_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 auction_time_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static GmModifyAuctionTimeSCmd* default_instance_;
};
// -------------------------------------------------------------------

class GmStopAuctionSCmd : public ::google::protobuf::Message {
 public:
  GmStopAuctionSCmd();
  virtual ~GmStopAuctionSCmd();

  GmStopAuctionSCmd(const GmStopAuctionSCmd& from);

  inline GmStopAuctionSCmd& operator=(const GmStopAuctionSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GmStopAuctionSCmd& default_instance();

  void Swap(GmStopAuctionSCmd* other);

  // implements Message ----------------------------------------------

  GmStopAuctionSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GmStopAuctionSCmd& from);
  void MergeFrom(const GmStopAuctionSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // @@protoc_insertion_point(class_scope:Cmd.GmStopAuctionSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static GmStopAuctionSCmd* default_instance_;
};
// -------------------------------------------------------------------

class BroadcastMsgBySessionAuctionSCmd : public ::google::protobuf::Message {
 public:
  BroadcastMsgBySessionAuctionSCmd();
  virtual ~BroadcastMsgBySessionAuctionSCmd();

  BroadcastMsgBySessionAuctionSCmd(const BroadcastMsgBySessionAuctionSCmd& from);

  inline BroadcastMsgBySessionAuctionSCmd& operator=(const BroadcastMsgBySessionAuctionSCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastMsgBySessionAuctionSCmd& default_instance();

  void Swap(BroadcastMsgBySessionAuctionSCmd* other);

  // implements Message ----------------------------------------------

  BroadcastMsgBySessionAuctionSCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastMsgBySessionAuctionSCmd& from);
  void MergeFrom(const BroadcastMsgBySessionAuctionSCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::AuctionSParam param() const;
  inline void set_param(::Cmd::AuctionSParam value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 len = 4;
  inline bool has_len() const;
  inline void clear_len();
  static const int kLenFieldNumber = 4;
  inline ::google::protobuf::uint32 len() const;
  inline void set_len(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BroadcastMsgBySessionAuctionSCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_len();
  inline void clear_has_len();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* data_;
  ::google::protobuf::uint32 len_;
  friend void  protobuf_AddDesc_AuctionSCmd_2eproto();
  friend void protobuf_AssignDesc_AuctionSCmd_2eproto();
  friend void protobuf_ShutdownFile_AuctionSCmd_2eproto();

  void InitAsDefaultInstance();
  static BroadcastMsgBySessionAuctionSCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// ForwardCCmd2Auction

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool ForwardCCmd2Auction::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardCCmd2Auction::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardCCmd2Auction::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardCCmd2Auction::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardCCmd2Auction::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardCCmd2Auction::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_CCMD2AUCTION];
inline bool ForwardCCmd2Auction::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardCCmd2Auction::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardCCmd2Auction::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardCCmd2Auction::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::AuctionSParam ForwardCCmd2Auction::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void ForwardCCmd2Auction::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.param)
}

// optional uint64 charid = 3;
inline bool ForwardCCmd2Auction::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardCCmd2Auction::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardCCmd2Auction::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardCCmd2Auction::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardCCmd2Auction::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.charid)
  return charid_;
}
inline void ForwardCCmd2Auction::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.charid)
}

// optional uint32 zoneid = 4;
inline bool ForwardCCmd2Auction::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardCCmd2Auction::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardCCmd2Auction::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardCCmd2Auction::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ForwardCCmd2Auction::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.zoneid)
  return zoneid_;
}
inline void ForwardCCmd2Auction::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.zoneid)
}

// optional string name = 5;
inline bool ForwardCCmd2Auction::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardCCmd2Auction::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardCCmd2Auction::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardCCmd2Auction::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ForwardCCmd2Auction::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.name)
  return *name_;
}
inline void ForwardCCmd2Auction::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.name)
}
inline void ForwardCCmd2Auction::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardCCmd2Auction.name)
}
inline void ForwardCCmd2Auction::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardCCmd2Auction.name)
}
inline ::std::string* ForwardCCmd2Auction::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardCCmd2Auction.name)
  return name_;
}
inline ::std::string* ForwardCCmd2Auction::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardCCmd2Auction::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardCCmd2Auction.name)
}

// optional bytes data = 6;
inline bool ForwardCCmd2Auction::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ForwardCCmd2Auction::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ForwardCCmd2Auction::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ForwardCCmd2Auction::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardCCmd2Auction::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.data)
  return *data_;
}
inline void ForwardCCmd2Auction::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.data)
}
inline void ForwardCCmd2Auction::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardCCmd2Auction.data)
}
inline void ForwardCCmd2Auction::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardCCmd2Auction.data)
}
inline ::std::string* ForwardCCmd2Auction::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardCCmd2Auction.data)
  return data_;
}
inline ::std::string* ForwardCCmd2Auction::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardCCmd2Auction::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardCCmd2Auction.data)
}

// optional uint32 len = 7;
inline bool ForwardCCmd2Auction::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ForwardCCmd2Auction::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ForwardCCmd2Auction::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ForwardCCmd2Auction::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardCCmd2Auction::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardCCmd2Auction.len)
  return len_;
}
inline void ForwardCCmd2Auction::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardCCmd2Auction.len)
}

// -------------------------------------------------------------------

// ForwardSCmd2Auction

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool ForwardSCmd2Auction::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardSCmd2Auction::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardSCmd2Auction::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardSCmd2Auction::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardSCmd2Auction::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardSCmd2Auction::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_SCMD2AUCTION];
inline bool ForwardSCmd2Auction::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardSCmd2Auction::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardSCmd2Auction::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardSCmd2Auction::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::AuctionSParam ForwardSCmd2Auction::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void ForwardSCmd2Auction::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.param)
}

// optional uint64 charid = 3;
inline bool ForwardSCmd2Auction::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardSCmd2Auction::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardSCmd2Auction::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardSCmd2Auction::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardSCmd2Auction::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.charid)
  return charid_;
}
inline void ForwardSCmd2Auction::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.charid)
}

// optional uint32 zoneid = 4;
inline bool ForwardSCmd2Auction::has_zoneid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardSCmd2Auction::set_has_zoneid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardSCmd2Auction::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardSCmd2Auction::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ForwardSCmd2Auction::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.zoneid)
  return zoneid_;
}
inline void ForwardSCmd2Auction::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.zoneid)
}

// optional string name = 5;
inline bool ForwardSCmd2Auction::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardSCmd2Auction::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardSCmd2Auction::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardSCmd2Auction::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ForwardSCmd2Auction::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.name)
  return *name_;
}
inline void ForwardSCmd2Auction::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.name)
}
inline void ForwardSCmd2Auction::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardSCmd2Auction.name)
}
inline void ForwardSCmd2Auction::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardSCmd2Auction.name)
}
inline ::std::string* ForwardSCmd2Auction::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardSCmd2Auction.name)
  return name_;
}
inline ::std::string* ForwardSCmd2Auction::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardSCmd2Auction::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardSCmd2Auction.name)
}

// optional bytes data = 6;
inline bool ForwardSCmd2Auction::has_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ForwardSCmd2Auction::set_has_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ForwardSCmd2Auction::clear_has_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ForwardSCmd2Auction::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardSCmd2Auction::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.data)
  return *data_;
}
inline void ForwardSCmd2Auction::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.data)
}
inline void ForwardSCmd2Auction::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardSCmd2Auction.data)
}
inline void ForwardSCmd2Auction::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardSCmd2Auction.data)
}
inline ::std::string* ForwardSCmd2Auction::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardSCmd2Auction.data)
  return data_;
}
inline ::std::string* ForwardSCmd2Auction::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardSCmd2Auction::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardSCmd2Auction.data)
}

// optional uint32 len = 7;
inline bool ForwardSCmd2Auction::has_len() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ForwardSCmd2Auction::set_has_len() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ForwardSCmd2Auction::clear_has_len() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ForwardSCmd2Auction::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardSCmd2Auction::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardSCmd2Auction.len)
  return len_;
}
inline void ForwardSCmd2Auction::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardSCmd2Auction.len)
}

// -------------------------------------------------------------------

// ForwardAuction2SCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool ForwardAuction2SCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardAuction2SCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardAuction2SCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardAuction2SCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command ForwardAuction2SCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardAuction2SCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ForwardAuction2SCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardAuction2SCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_FORWARD_AUCTION2SCMD];
inline bool ForwardAuction2SCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardAuction2SCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardAuction2SCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardAuction2SCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::AuctionSParam ForwardAuction2SCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardAuction2SCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void ForwardAuction2SCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardAuction2SCmd.param)
}

// optional uint64 charid = 3;
inline bool ForwardAuction2SCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ForwardAuction2SCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ForwardAuction2SCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ForwardAuction2SCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ForwardAuction2SCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardAuction2SCmd.charid)
  return charid_;
}
inline void ForwardAuction2SCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardAuction2SCmd.charid)
}

// optional bytes data = 4;
inline bool ForwardAuction2SCmd::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ForwardAuction2SCmd::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ForwardAuction2SCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ForwardAuction2SCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& ForwardAuction2SCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardAuction2SCmd.data)
  return *data_;
}
inline void ForwardAuction2SCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ForwardAuction2SCmd.data)
}
inline void ForwardAuction2SCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ForwardAuction2SCmd.data)
}
inline void ForwardAuction2SCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ForwardAuction2SCmd.data)
}
inline ::std::string* ForwardAuction2SCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ForwardAuction2SCmd.data)
  return data_;
}
inline ::std::string* ForwardAuction2SCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardAuction2SCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ForwardAuction2SCmd.data)
}

// optional uint32 len = 5;
inline bool ForwardAuction2SCmd::has_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ForwardAuction2SCmd::set_has_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ForwardAuction2SCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ForwardAuction2SCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 ForwardAuction2SCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.ForwardAuction2SCmd.len)
  return len_;
}
inline void ForwardAuction2SCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ForwardAuction2SCmd.len)
}

// -------------------------------------------------------------------

// SignUpItemSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool SignUpItemSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SignUpItemSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SignUpItemSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SignUpItemSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command SignUpItemSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SignUpItemSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_SIGNUP_ITEM];
inline bool SignUpItemSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SignUpItemSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SignUpItemSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SignUpItemSCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::AuctionSParam SignUpItemSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void SignUpItemSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.param)
}

// optional .Cmd.SignUpItemInfo iteminfo = 3;
inline bool SignUpItemSCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SignUpItemSCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SignUpItemSCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SignUpItemSCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::SignUpItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::SignUpItemInfo& SignUpItemSCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::SignUpItemInfo* SignUpItemSCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::SignUpItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.SignUpItemSCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::SignUpItemInfo* SignUpItemSCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::SignUpItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void SignUpItemSCmd::set_allocated_iteminfo(::Cmd::SignUpItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SignUpItemSCmd.iteminfo)
}

// optional bool ret = 4;
inline bool SignUpItemSCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SignUpItemSCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SignUpItemSCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SignUpItemSCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool SignUpItemSCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.ret)
  return ret_;
}
inline void SignUpItemSCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.ret)
}

// optional uint64 charid = 5;
inline bool SignUpItemSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SignUpItemSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SignUpItemSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SignUpItemSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SignUpItemSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.charid)
  return charid_;
}
inline void SignUpItemSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.charid)
}

// optional uint64 batchid = 6;
inline bool SignUpItemSCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SignUpItemSCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SignUpItemSCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SignUpItemSCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 SignUpItemSCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.batchid)
  return batchid_;
}
inline void SignUpItemSCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.batchid)
}

// optional uint64 orderid = 7;
inline bool SignUpItemSCmd::has_orderid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SignUpItemSCmd::set_has_orderid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SignUpItemSCmd::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SignUpItemSCmd::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 SignUpItemSCmd::orderid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.orderid)
  return orderid_;
}
inline void SignUpItemSCmd::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.orderid)
}

// optional string guid = 8;
inline bool SignUpItemSCmd::has_guid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SignUpItemSCmd::set_has_guid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SignUpItemSCmd::clear_has_guid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SignUpItemSCmd::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& SignUpItemSCmd::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.guid)
  return *guid_;
}
inline void SignUpItemSCmd::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.guid)
}
inline void SignUpItemSCmd::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.SignUpItemSCmd.guid)
}
inline void SignUpItemSCmd::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.SignUpItemSCmd.guid)
}
inline ::std::string* SignUpItemSCmd::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.SignUpItemSCmd.guid)
  return guid_;
}
inline ::std::string* SignUpItemSCmd::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SignUpItemSCmd::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SignUpItemSCmd.guid)
}

// optional uint32 fm_point = 9;
inline bool SignUpItemSCmd::has_fm_point() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SignUpItemSCmd::set_has_fm_point() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SignUpItemSCmd::clear_has_fm_point() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SignUpItemSCmd::clear_fm_point() {
  fm_point_ = 0u;
  clear_has_fm_point();
}
inline ::google::protobuf::uint32 SignUpItemSCmd::fm_point() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.fm_point)
  return fm_point_;
}
inline void SignUpItemSCmd::set_fm_point(::google::protobuf::uint32 value) {
  set_has_fm_point();
  fm_point_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.fm_point)
}

// optional uint32 fm_buff = 10;
inline bool SignUpItemSCmd::has_fm_buff() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SignUpItemSCmd::set_has_fm_buff() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SignUpItemSCmd::clear_has_fm_buff() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SignUpItemSCmd::clear_fm_buff() {
  fm_buff_ = 0u;
  clear_has_fm_buff();
}
inline ::google::protobuf::uint32 SignUpItemSCmd::fm_buff() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.fm_buff)
  return fm_buff_;
}
inline void SignUpItemSCmd::set_fm_buff(::google::protobuf::uint32 value) {
  set_has_fm_buff();
  fm_buff_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SignUpItemSCmd.fm_buff)
}

// optional .Cmd.ItemData itemdata = 11;
inline bool SignUpItemSCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SignUpItemSCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SignUpItemSCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SignUpItemSCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& SignUpItemSCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.SignUpItemSCmd.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* SignUpItemSCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.SignUpItemSCmd.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* SignUpItemSCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void SignUpItemSCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SignUpItemSCmd.itemdata)
}

// -------------------------------------------------------------------

// OfferPriceSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool OfferPriceSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferPriceSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferPriceSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferPriceSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command OfferPriceSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OfferPriceSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE];
inline bool OfferPriceSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferPriceSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferPriceSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferPriceSCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::AuctionSParam OfferPriceSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void OfferPriceSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.param)
}

// optional uint64 orderid = 3;
inline bool OfferPriceSCmd::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferPriceSCmd::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferPriceSCmd::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferPriceSCmd::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::orderid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.orderid)
  return orderid_;
}
inline void OfferPriceSCmd::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.orderid)
}

// optional uint64 batchid = 4;
inline bool OfferPriceSCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferPriceSCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfferPriceSCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfferPriceSCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.batchid)
  return batchid_;
}
inline void OfferPriceSCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.batchid)
}

// optional uint32 itemid = 5;
inline bool OfferPriceSCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfferPriceSCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfferPriceSCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfferPriceSCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 OfferPriceSCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.itemid)
  return itemid_;
}
inline void OfferPriceSCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.itemid)
}

// optional uint64 reduce_money = 6;
inline bool OfferPriceSCmd::has_reduce_money() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfferPriceSCmd::set_has_reduce_money() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OfferPriceSCmd::clear_has_reduce_money() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OfferPriceSCmd::clear_reduce_money() {
  reduce_money_ = GOOGLE_ULONGLONG(0);
  clear_has_reduce_money();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::reduce_money() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.reduce_money)
  return reduce_money_;
}
inline void OfferPriceSCmd::set_reduce_money(::google::protobuf::uint64 value) {
  set_has_reduce_money();
  reduce_money_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.reduce_money)
}

// optional uint64 total_price = 7;
inline bool OfferPriceSCmd::has_total_price() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OfferPriceSCmd::set_has_total_price() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OfferPriceSCmd::clear_has_total_price() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OfferPriceSCmd::clear_total_price() {
  total_price_ = GOOGLE_ULONGLONG(0);
  clear_has_total_price();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::total_price() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.total_price)
  return total_price_;
}
inline void OfferPriceSCmd::set_total_price(::google::protobuf::uint64 value) {
  set_has_total_price();
  total_price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.total_price)
}

// optional bool ret = 8;
inline bool OfferPriceSCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OfferPriceSCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OfferPriceSCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OfferPriceSCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool OfferPriceSCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.ret)
  return ret_;
}
inline void OfferPriceSCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.ret)
}

// optional uint64 charid = 9;
inline bool OfferPriceSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OfferPriceSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OfferPriceSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OfferPriceSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.charid)
  return charid_;
}
inline void OfferPriceSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.charid)
}

// optional uint64 signupid = 10;
inline bool OfferPriceSCmd::has_signupid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OfferPriceSCmd::set_has_signupid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OfferPriceSCmd::clear_has_signupid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OfferPriceSCmd::clear_signupid() {
  signupid_ = GOOGLE_ULONGLONG(0);
  clear_has_signupid();
}
inline ::google::protobuf::uint64 OfferPriceSCmd::signupid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceSCmd.signupid)
  return signupid_;
}
inline void OfferPriceSCmd::set_signupid(::google::protobuf::uint64 value) {
  set_has_signupid();
  signupid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceSCmd.signupid)
}

// -------------------------------------------------------------------

// OfferPriceDelOrderSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool OfferPriceDelOrderSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfferPriceDelOrderSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfferPriceDelOrderSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfferPriceDelOrderSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command OfferPriceDelOrderSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceDelOrderSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OfferPriceDelOrderSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceDelOrderSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_OFFER_PRICE_DEL_ORDER];
inline bool OfferPriceDelOrderSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfferPriceDelOrderSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfferPriceDelOrderSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfferPriceDelOrderSCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::AuctionSParam OfferPriceDelOrderSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceDelOrderSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void OfferPriceDelOrderSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceDelOrderSCmd.param)
}

// optional uint64 orderid = 3;
inline bool OfferPriceDelOrderSCmd::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfferPriceDelOrderSCmd::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfferPriceDelOrderSCmd::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfferPriceDelOrderSCmd::clear_orderid() {
  orderid_ = GOOGLE_ULONGLONG(0);
  clear_has_orderid();
}
inline ::google::protobuf::uint64 OfferPriceDelOrderSCmd::orderid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceDelOrderSCmd.orderid)
  return orderid_;
}
inline void OfferPriceDelOrderSCmd::set_orderid(::google::protobuf::uint64 value) {
  set_has_orderid();
  orderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceDelOrderSCmd.orderid)
}

// optional uint64 charid = 4;
inline bool OfferPriceDelOrderSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfferPriceDelOrderSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfferPriceDelOrderSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfferPriceDelOrderSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 OfferPriceDelOrderSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfferPriceDelOrderSCmd.charid)
  return charid_;
}
inline void OfferPriceDelOrderSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfferPriceDelOrderSCmd.charid)
}

// -------------------------------------------------------------------

// TakeRecordSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool TakeRecordSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeRecordSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeRecordSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeRecordSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command TakeRecordSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TakeRecordSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_TAKE_RECORD];
inline bool TakeRecordSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeRecordSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeRecordSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeRecordSCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::AuctionSParam TakeRecordSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void TakeRecordSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.param)
}

// optional uint64 id = 3;
inline bool TakeRecordSCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TakeRecordSCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TakeRecordSCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TakeRecordSCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.id)
  return id_;
}
inline void TakeRecordSCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.id)
}

// optional .Cmd.ERecordType type = 4;
inline bool TakeRecordSCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TakeRecordSCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TakeRecordSCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TakeRecordSCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ERecordType TakeRecordSCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.type)
  return static_cast< ::Cmd::ERecordType >(type_);
}
inline void TakeRecordSCmd::set_type(::Cmd::ERecordType value) {
  assert(::Cmd::ERecordType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.type)
}

// optional uint64 charid = 5;
inline bool TakeRecordSCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TakeRecordSCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TakeRecordSCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TakeRecordSCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.charid)
  return charid_;
}
inline void TakeRecordSCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.charid)
}

// optional uint64 batchid = 6;
inline bool TakeRecordSCmd::has_batchid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TakeRecordSCmd::set_has_batchid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TakeRecordSCmd::clear_has_batchid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TakeRecordSCmd::clear_batchid() {
  batchid_ = GOOGLE_ULONGLONG(0);
  clear_has_batchid();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::batchid() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.batchid)
  return batchid_;
}
inline void TakeRecordSCmd::set_batchid(::google::protobuf::uint64 value) {
  set_has_batchid();
  batchid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.batchid)
}

// optional uint32 itemid = 7;
inline bool TakeRecordSCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TakeRecordSCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TakeRecordSCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TakeRecordSCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TakeRecordSCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.itemid)
  return itemid_;
}
inline void TakeRecordSCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.itemid)
}

// optional .Cmd.ItemInfo item = 8;
inline bool TakeRecordSCmd::has_item() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TakeRecordSCmd::set_has_item() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TakeRecordSCmd::clear_has_item() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TakeRecordSCmd::clear_item() {
  if (item_ != NULL) item_->::Cmd::ItemInfo::Clear();
  clear_has_item();
}
inline const ::Cmd::ItemInfo& TakeRecordSCmd::item() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.item)
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::Cmd::ItemInfo* TakeRecordSCmd::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::Cmd::ItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.TakeRecordSCmd.item)
  return item_;
}
inline ::Cmd::ItemInfo* TakeRecordSCmd::release_item() {
  clear_has_item();
  ::Cmd::ItemInfo* temp = item_;
  item_ = NULL;
  return temp;
}
inline void TakeRecordSCmd::set_allocated_item(::Cmd::ItemInfo* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TakeRecordSCmd.item)
}

// optional uint64 zeny = 9;
inline bool TakeRecordSCmd::has_zeny() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TakeRecordSCmd::set_has_zeny() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TakeRecordSCmd::clear_has_zeny() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TakeRecordSCmd::clear_zeny() {
  zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_zeny();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.zeny)
  return zeny_;
}
inline void TakeRecordSCmd::set_zeny(::google::protobuf::uint64 value) {
  set_has_zeny();
  zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.zeny)
}

// optional bool ret = 10;
inline bool TakeRecordSCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TakeRecordSCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TakeRecordSCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TakeRecordSCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool TakeRecordSCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.ret)
  return ret_;
}
inline void TakeRecordSCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.ret)
}

// optional uint64 bcat = 11;
inline bool TakeRecordSCmd::has_bcat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TakeRecordSCmd::set_has_bcat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TakeRecordSCmd::clear_has_bcat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TakeRecordSCmd::clear_bcat() {
  bcat_ = GOOGLE_ULONGLONG(0);
  clear_has_bcat();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::bcat() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.bcat)
  return bcat_;
}
inline void TakeRecordSCmd::set_bcat(::google::protobuf::uint64 value) {
  set_has_bcat();
  bcat_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.bcat)
}

// optional uint64 signup_id = 12;
inline bool TakeRecordSCmd::has_signup_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TakeRecordSCmd::set_has_signup_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TakeRecordSCmd::clear_has_signup_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TakeRecordSCmd::clear_signup_id() {
  signup_id_ = GOOGLE_ULONGLONG(0);
  clear_has_signup_id();
}
inline ::google::protobuf::uint64 TakeRecordSCmd::signup_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.signup_id)
  return signup_id_;
}
inline void TakeRecordSCmd::set_signup_id(::google::protobuf::uint64 value) {
  set_has_signup_id();
  signup_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeRecordSCmd.signup_id)
}

// optional .Cmd.ItemData itemdata = 13;
inline bool TakeRecordSCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TakeRecordSCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TakeRecordSCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TakeRecordSCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& TakeRecordSCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeRecordSCmd.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* TakeRecordSCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.TakeRecordSCmd.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* TakeRecordSCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void TakeRecordSCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TakeRecordSCmd.itemdata)
}

// -------------------------------------------------------------------

// WorldCmdSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool WorldCmdSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WorldCmdSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WorldCmdSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WorldCmdSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command WorldCmdSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldCmdSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WorldCmdSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldCmdSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_WORLD_CMD];
inline bool WorldCmdSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WorldCmdSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WorldCmdSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WorldCmdSCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::AuctionSParam WorldCmdSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldCmdSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void WorldCmdSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldCmdSCmd.param)
}

// optional bytes data = 3;
inline bool WorldCmdSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WorldCmdSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WorldCmdSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WorldCmdSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& WorldCmdSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldCmdSCmd.data)
  return *data_;
}
inline void WorldCmdSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WorldCmdSCmd.data)
}
inline void WorldCmdSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WorldCmdSCmd.data)
}
inline void WorldCmdSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WorldCmdSCmd.data)
}
inline ::std::string* WorldCmdSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WorldCmdSCmd.data)
  return data_;
}
inline ::std::string* WorldCmdSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WorldCmdSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WorldCmdSCmd.data)
}

// optional uint32 len = 4;
inline bool WorldCmdSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WorldCmdSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WorldCmdSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WorldCmdSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 WorldCmdSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.WorldCmdSCmd.len)
  return len_;
}
inline void WorldCmdSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WorldCmdSCmd.len)
}

// -------------------------------------------------------------------

// GmModifyAuctionTimeSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool GmModifyAuctionTimeSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GmModifyAuctionTimeSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GmModifyAuctionTimeSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GmModifyAuctionTimeSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command GmModifyAuctionTimeSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GmModifyAuctionTimeSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GmModifyAuctionTimeSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GmModifyAuctionTimeSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_MODIFY_AUCTION_TIME];
inline bool GmModifyAuctionTimeSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GmModifyAuctionTimeSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GmModifyAuctionTimeSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GmModifyAuctionTimeSCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::AuctionSParam GmModifyAuctionTimeSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GmModifyAuctionTimeSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void GmModifyAuctionTimeSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GmModifyAuctionTimeSCmd.param)
}

// optional uint32 auction_time = 3;
inline bool GmModifyAuctionTimeSCmd::has_auction_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GmModifyAuctionTimeSCmd::set_has_auction_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GmModifyAuctionTimeSCmd::clear_has_auction_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GmModifyAuctionTimeSCmd::clear_auction_time() {
  auction_time_ = 0u;
  clear_has_auction_time();
}
inline ::google::protobuf::uint32 GmModifyAuctionTimeSCmd::auction_time() const {
  // @@protoc_insertion_point(field_get:Cmd.GmModifyAuctionTimeSCmd.auction_time)
  return auction_time_;
}
inline void GmModifyAuctionTimeSCmd::set_auction_time(::google::protobuf::uint32 value) {
  set_has_auction_time();
  auction_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GmModifyAuctionTimeSCmd.auction_time)
}

// -------------------------------------------------------------------

// GmStopAuctionSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool GmStopAuctionSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GmStopAuctionSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GmStopAuctionSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GmStopAuctionSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command GmStopAuctionSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GmStopAuctionSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GmStopAuctionSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GmStopAuctionSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_GM_STOP_AUCTION];
inline bool GmStopAuctionSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GmStopAuctionSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GmStopAuctionSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GmStopAuctionSCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::AuctionSParam GmStopAuctionSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GmStopAuctionSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void GmStopAuctionSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GmStopAuctionSCmd.param)
}

// -------------------------------------------------------------------

// BroadcastMsgBySessionAuctionSCmd

// optional .Cmd.Command cmd = 1 [default = AUCTIONS_PROTOCMD];
inline bool BroadcastMsgBySessionAuctionSCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_cmd() {
  cmd_ = 213;
  clear_has_cmd();
}
inline ::Cmd::Command BroadcastMsgBySessionAuctionSCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BroadcastMsgBySessionAuctionSCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BroadcastMsgBySessionAuctionSCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BroadcastMsgBySessionAuctionSCmd.cmd)
}

// optional .Cmd.AuctionSParam param = 2 [default = AUCTIONSPARAM_BROADCASE_MSG_BYSESSION];
inline bool BroadcastMsgBySessionAuctionSCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::AuctionSParam BroadcastMsgBySessionAuctionSCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BroadcastMsgBySessionAuctionSCmd.param)
  return static_cast< ::Cmd::AuctionSParam >(param_);
}
inline void BroadcastMsgBySessionAuctionSCmd::set_param(::Cmd::AuctionSParam value) {
  assert(::Cmd::AuctionSParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BroadcastMsgBySessionAuctionSCmd.param)
}

// optional bytes data = 3;
inline bool BroadcastMsgBySessionAuctionSCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& BroadcastMsgBySessionAuctionSCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
  return *data_;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
}
inline void BroadcastMsgBySessionAuctionSCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
}
inline void BroadcastMsgBySessionAuctionSCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
}
inline ::std::string* BroadcastMsgBySessionAuctionSCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
  return data_;
}
inline ::std::string* BroadcastMsgBySessionAuctionSCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BroadcastMsgBySessionAuctionSCmd::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BroadcastMsgBySessionAuctionSCmd.data)
}

// optional uint32 len = 4;
inline bool BroadcastMsgBySessionAuctionSCmd::has_len() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_has_len() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_has_len() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BroadcastMsgBySessionAuctionSCmd::clear_len() {
  len_ = 0u;
  clear_has_len();
}
inline ::google::protobuf::uint32 BroadcastMsgBySessionAuctionSCmd::len() const {
  // @@protoc_insertion_point(field_get:Cmd.BroadcastMsgBySessionAuctionSCmd.len)
  return len_;
}
inline void BroadcastMsgBySessionAuctionSCmd::set_len(::google::protobuf::uint32 value) {
  set_has_len();
  len_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BroadcastMsgBySessionAuctionSCmd.len)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::AuctionSParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::AuctionSParam>() {
  return ::Cmd::AuctionSParam_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_AuctionSCmd_2eproto__INCLUDED
