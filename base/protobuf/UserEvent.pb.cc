// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: UserEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "UserEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* FirstActionUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstActionUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DamageNpcUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DamageNpcUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRandomUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRandomUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDamageUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDamageUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeNtfUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeNtfUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepositTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositTypeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepositCardData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositCardData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeQueryCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeQueryCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DepositCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DepositCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelTransformUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelTransformUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteCatFailUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteCatFailUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrigNpcFuncUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrigNpcFuncUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemStringUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemStringUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* HandCatUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HandCatUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeCntInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeCntInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryChargeCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryChargeCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFMonthCardEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFMonthCardEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoveLetterUse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoveLetterUse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityCntItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityCntItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryActivityCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryActivityCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateActivityCnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateActivityCnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* VersionCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VersionCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NtfVersionCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NtfVersionCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DieTimeCountEventCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DieTimeCountEventCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetFirstShareRewardUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetFirstShareRewardUserEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryResetTimeEventCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryResetTimeEventCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* InOutActEventCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InOutActEventCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserEventMailCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserEventMailCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelupDeadUserEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelupDeadUserEvent_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EventParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EFirstActionType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ETitleType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDepositState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ESystemStringType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EEventMailType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_UserEvent_2eproto() {
  protobuf_AddDesc_UserEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "UserEvent.proto");
  GOOGLE_CHECK(file != NULL);
  FirstActionUserEvent_descriptor_ = file->message_type(0);
  static const int FirstActionUserEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstActionUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstActionUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstActionUserEvent, firstaction_),
  };
  FirstActionUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstActionUserEvent_descriptor_,
      FirstActionUserEvent::default_instance_,
      FirstActionUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstActionUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstActionUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstActionUserEvent));
  DamageNpcUserEvent_descriptor_ = file->message_type(1);
  static const int DamageNpcUserEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, userid_),
  };
  DamageNpcUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DamageNpcUserEvent_descriptor_,
      DamageNpcUserEvent::default_instance_,
      DamageNpcUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DamageNpcUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DamageNpcUserEvent));
  TitleData_descriptor_ = file->message_type(2);
  static const int TitleData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, title_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, createtime_),
  };
  TitleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleData_descriptor_,
      TitleData::default_instance_,
      TitleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleData));
  NewTitle_descriptor_ = file->message_type(3);
  static const int NewTitle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, title_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, charid_),
  };
  NewTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewTitle_descriptor_,
      NewTitle::default_instance_,
      NewTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewTitle));
  AllTitle_descriptor_ = file->message_type(4);
  static const int AllTitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTitle, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTitle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTitle, title_datas_),
  };
  AllTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllTitle_descriptor_,
      AllTitle::default_instance_,
      AllTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllTitle));
  UpdateRandomUserEvent_descriptor_ = file->message_type(5);
  static const int UpdateRandomUserEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, beginindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, endindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, randoms_),
  };
  UpdateRandomUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRandomUserEvent_descriptor_,
      UpdateRandomUserEvent::default_instance_,
      UpdateRandomUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRandomUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRandomUserEvent));
  BuffDamageUserEvent_descriptor_ = file->message_type(6);
  static const int BuffDamageUserEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, etype_),
  };
  BuffDamageUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDamageUserEvent_descriptor_,
      BuffDamageUserEvent::default_instance_,
      BuffDamageUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDamageUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDamageUserEvent));
  ChargeNtfUserEvent_descriptor_ = file->message_type(7);
  static const int ChargeNtfUserEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, dataid_),
  };
  ChargeNtfUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeNtfUserEvent_descriptor_,
      ChargeNtfUserEvent::default_instance_,
      ChargeNtfUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeNtfUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeNtfUserEvent));
  DepositTypeData_descriptor_ = file->message_type(8);
  static const int DepositTypeData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, invalid_),
  };
  DepositTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositTypeData_descriptor_,
      DepositTypeData::default_instance_,
      DepositTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositTypeData));
  DepositCardData_descriptor_ = file->message_type(9);
  static const int DepositCardData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardData, isused_),
  };
  DepositCardData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositCardData_descriptor_,
      DepositCardData::default_instance_,
      DepositCardData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositCardData));
  ChargeQueryCmd_descriptor_ = file->message_type(10);
  static const int ChargeQueryCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, data_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, charged_count_),
  };
  ChargeQueryCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeQueryCmd_descriptor_,
      ChargeQueryCmd::default_instance_,
      ChargeQueryCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeQueryCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeQueryCmd));
  DepositCardInfo_descriptor_ = file->message_type(11);
  static const int DepositCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardInfo, card_datas_),
  };
  DepositCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DepositCardInfo_descriptor_,
      DepositCardInfo::default_instance_,
      DepositCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DepositCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DepositCardInfo));
  DelTransformUserEvent_descriptor_ = file->message_type(12);
  static const int DelTransformUserEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTransformUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTransformUserEvent, param_),
  };
  DelTransformUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelTransformUserEvent_descriptor_,
      DelTransformUserEvent::default_instance_,
      DelTransformUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTransformUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTransformUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelTransformUserEvent));
  InviteCatFailUserEvent_descriptor_ = file->message_type(13);
  static const int InviteCatFailUserEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCatFailUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCatFailUserEvent, param_),
  };
  InviteCatFailUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteCatFailUserEvent_descriptor_,
      InviteCatFailUserEvent::default_instance_,
      InviteCatFailUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCatFailUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteCatFailUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteCatFailUserEvent));
  TrigNpcFuncUserEvent_descriptor_ = file->message_type(14);
  static const int TrigNpcFuncUserEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, funcid_),
  };
  TrigNpcFuncUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrigNpcFuncUserEvent_descriptor_,
      TrigNpcFuncUserEvent::default_instance_,
      TrigNpcFuncUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrigNpcFuncUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrigNpcFuncUserEvent));
  SystemStringUserEvent_descriptor_ = file->message_type(15);
  static const int SystemStringUserEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStringUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStringUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStringUserEvent, etype_),
  };
  SystemStringUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemStringUserEvent_descriptor_,
      SystemStringUserEvent::default_instance_,
      SystemStringUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStringUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemStringUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemStringUserEvent));
  HandCatUserEvent_descriptor_ = file->message_type(16);
  static const int HandCatUserEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, catguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, breakup_),
  };
  HandCatUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HandCatUserEvent_descriptor_,
      HandCatUserEvent::default_instance_,
      HandCatUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HandCatUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HandCatUserEvent));
  ChangeTitle_descriptor_ = file->message_type(17);
  static const int ChangeTitle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, title_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, charid_),
  };
  ChangeTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeTitle_descriptor_,
      ChangeTitle::default_instance_,
      ChangeTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeTitle));
  ChargeCntInfo_descriptor_ = file->message_type(18);
  static const int ChargeCntInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeCntInfo, dataid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeCntInfo, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeCntInfo, limit_),
  };
  ChargeCntInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeCntInfo_descriptor_,
      ChargeCntInfo::default_instance_,
      ChargeCntInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeCntInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeCntInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeCntInfo));
  QueryChargeCnt_descriptor_ = file->message_type(19);
  static const int QueryChargeCnt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeCnt, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeCnt, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeCnt, info_),
  };
  QueryChargeCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryChargeCnt_descriptor_,
      QueryChargeCnt::default_instance_,
      QueryChargeCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryChargeCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryChargeCnt));
  NTFMonthCardEnd_descriptor_ = file->message_type(20);
  static const int NTFMonthCardEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFMonthCardEnd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFMonthCardEnd, param_),
  };
  NTFMonthCardEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFMonthCardEnd_descriptor_,
      NTFMonthCardEnd::default_instance_,
      NTFMonthCardEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFMonthCardEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFMonthCardEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFMonthCardEnd));
  LoveLetterUse_descriptor_ = file->message_type(21);
  static const int LoveLetterUse_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, itemguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, type_),
  };
  LoveLetterUse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoveLetterUse_descriptor_,
      LoveLetterUse::default_instance_,
      LoveLetterUse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoveLetterUse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoveLetterUse));
  ActivityCntItem_descriptor_ = file->message_type(22);
  static const int ActivityCntItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCntItem, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCntItem, count_),
  };
  ActivityCntItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityCntItem_descriptor_,
      ActivityCntItem::default_instance_,
      ActivityCntItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCntItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityCntItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityCntItem));
  QueryActivityCnt_descriptor_ = file->message_type(23);
  static const int QueryActivityCnt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryActivityCnt, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryActivityCnt, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryActivityCnt, info_),
  };
  QueryActivityCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryActivityCnt_descriptor_,
      QueryActivityCnt::default_instance_,
      QueryActivityCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryActivityCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryActivityCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryActivityCnt));
  UpdateActivityCnt_descriptor_ = file->message_type(24);
  static const int UpdateActivityCnt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityCnt, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityCnt, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityCnt, info_),
  };
  UpdateActivityCnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateActivityCnt_descriptor_,
      UpdateActivityCnt::default_instance_,
      UpdateActivityCnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityCnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateActivityCnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateActivityCnt));
  VersionCardInfo_descriptor_ = file->message_type(25);
  static const int VersionCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCardInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCardInfo, id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCardInfo, id2_),
  };
  VersionCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VersionCardInfo_descriptor_,
      VersionCardInfo::default_instance_,
      VersionCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VersionCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VersionCardInfo));
  NtfVersionCardInfo_descriptor_ = file->message_type(26);
  static const int NtfVersionCardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVersionCardInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVersionCardInfo, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVersionCardInfo, info_),
  };
  NtfVersionCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NtfVersionCardInfo_descriptor_,
      NtfVersionCardInfo::default_instance_,
      NtfVersionCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVersionCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NtfVersionCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NtfVersionCardInfo));
  DieTimeCountEventCmd_descriptor_ = file->message_type(27);
  static const int DieTimeCountEventCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, name_),
  };
  DieTimeCountEventCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DieTimeCountEventCmd_descriptor_,
      DieTimeCountEventCmd::default_instance_,
      DieTimeCountEventCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DieTimeCountEventCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DieTimeCountEventCmd));
  GetFirstShareRewardUserEvent_descriptor_ = file->message_type(28);
  static const int GetFirstShareRewardUserEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstShareRewardUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstShareRewardUserEvent, param_),
  };
  GetFirstShareRewardUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetFirstShareRewardUserEvent_descriptor_,
      GetFirstShareRewardUserEvent::default_instance_,
      GetFirstShareRewardUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstShareRewardUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetFirstShareRewardUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetFirstShareRewardUserEvent));
  QueryResetTimeEventCmd_descriptor_ = file->message_type(29);
  static const int QueryResetTimeEventCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, resettime_),
  };
  QueryResetTimeEventCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryResetTimeEventCmd_descriptor_,
      QueryResetTimeEventCmd::default_instance_,
      QueryResetTimeEventCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryResetTimeEventCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryResetTimeEventCmd));
  InOutActEventCmd_descriptor_ = file->message_type(30);
  static const int InOutActEventCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, inout_),
  };
  InOutActEventCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InOutActEventCmd_descriptor_,
      InOutActEventCmd::default_instance_,
      InOutActEventCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InOutActEventCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InOutActEventCmd));
  UserEventMailCmd_descriptor_ = file->message_type(31);
  static const int UserEventMailCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, param32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, param64_),
  };
  UserEventMailCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserEventMailCmd_descriptor_,
      UserEventMailCmd::default_instance_,
      UserEventMailCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserEventMailCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserEventMailCmd));
  LevelupDeadUserEvent_descriptor_ = file->message_type(32);
  static const int LevelupDeadUserEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupDeadUserEvent, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupDeadUserEvent, param_),
  };
  LevelupDeadUserEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelupDeadUserEvent_descriptor_,
      LevelupDeadUserEvent::default_instance_,
      LevelupDeadUserEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupDeadUserEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelupDeadUserEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelupDeadUserEvent));
  EventParam_descriptor_ = file->enum_type(0);
  EFirstActionType_descriptor_ = file->enum_type(1);
  ETitleType_descriptor_ = file->enum_type(2);
  EDepositState_descriptor_ = file->enum_type(3);
  ESystemStringType_descriptor_ = file->enum_type(4);
  EEventMailType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_UserEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstActionUserEvent_descriptor_, &FirstActionUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DamageNpcUserEvent_descriptor_, &DamageNpcUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleData_descriptor_, &TitleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewTitle_descriptor_, &NewTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllTitle_descriptor_, &AllTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRandomUserEvent_descriptor_, &UpdateRandomUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDamageUserEvent_descriptor_, &BuffDamageUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeNtfUserEvent_descriptor_, &ChargeNtfUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositTypeData_descriptor_, &DepositTypeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositCardData_descriptor_, &DepositCardData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeQueryCmd_descriptor_, &ChargeQueryCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DepositCardInfo_descriptor_, &DepositCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelTransformUserEvent_descriptor_, &DelTransformUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteCatFailUserEvent_descriptor_, &InviteCatFailUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrigNpcFuncUserEvent_descriptor_, &TrigNpcFuncUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemStringUserEvent_descriptor_, &SystemStringUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HandCatUserEvent_descriptor_, &HandCatUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeTitle_descriptor_, &ChangeTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeCntInfo_descriptor_, &ChargeCntInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryChargeCnt_descriptor_, &QueryChargeCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFMonthCardEnd_descriptor_, &NTFMonthCardEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoveLetterUse_descriptor_, &LoveLetterUse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityCntItem_descriptor_, &ActivityCntItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryActivityCnt_descriptor_, &QueryActivityCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateActivityCnt_descriptor_, &UpdateActivityCnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VersionCardInfo_descriptor_, &VersionCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NtfVersionCardInfo_descriptor_, &NtfVersionCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DieTimeCountEventCmd_descriptor_, &DieTimeCountEventCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetFirstShareRewardUserEvent_descriptor_, &GetFirstShareRewardUserEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryResetTimeEventCmd_descriptor_, &QueryResetTimeEventCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InOutActEventCmd_descriptor_, &InOutActEventCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserEventMailCmd_descriptor_, &UserEventMailCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelupDeadUserEvent_descriptor_, &LevelupDeadUserEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_UserEvent_2eproto() {
  delete FirstActionUserEvent::default_instance_;
  delete FirstActionUserEvent_reflection_;
  delete DamageNpcUserEvent::default_instance_;
  delete DamageNpcUserEvent_reflection_;
  delete TitleData::default_instance_;
  delete TitleData_reflection_;
  delete NewTitle::default_instance_;
  delete NewTitle_reflection_;
  delete AllTitle::default_instance_;
  delete AllTitle_reflection_;
  delete UpdateRandomUserEvent::default_instance_;
  delete UpdateRandomUserEvent_reflection_;
  delete BuffDamageUserEvent::default_instance_;
  delete BuffDamageUserEvent_reflection_;
  delete ChargeNtfUserEvent::default_instance_;
  delete ChargeNtfUserEvent_reflection_;
  delete DepositTypeData::default_instance_;
  delete DepositTypeData_reflection_;
  delete DepositCardData::default_instance_;
  delete DepositCardData_reflection_;
  delete ChargeQueryCmd::default_instance_;
  delete ChargeQueryCmd_reflection_;
  delete DepositCardInfo::default_instance_;
  delete DepositCardInfo_reflection_;
  delete DelTransformUserEvent::default_instance_;
  delete DelTransformUserEvent_reflection_;
  delete InviteCatFailUserEvent::default_instance_;
  delete InviteCatFailUserEvent_reflection_;
  delete TrigNpcFuncUserEvent::default_instance_;
  delete TrigNpcFuncUserEvent_reflection_;
  delete SystemStringUserEvent::default_instance_;
  delete SystemStringUserEvent_reflection_;
  delete HandCatUserEvent::default_instance_;
  delete HandCatUserEvent_reflection_;
  delete ChangeTitle::default_instance_;
  delete ChangeTitle_reflection_;
  delete ChargeCntInfo::default_instance_;
  delete ChargeCntInfo_reflection_;
  delete QueryChargeCnt::default_instance_;
  delete QueryChargeCnt_reflection_;
  delete NTFMonthCardEnd::default_instance_;
  delete NTFMonthCardEnd_reflection_;
  delete LoveLetterUse::default_instance_;
  delete LoveLetterUse_reflection_;
  delete ActivityCntItem::default_instance_;
  delete ActivityCntItem_reflection_;
  delete QueryActivityCnt::default_instance_;
  delete QueryActivityCnt_reflection_;
  delete UpdateActivityCnt::default_instance_;
  delete UpdateActivityCnt_reflection_;
  delete VersionCardInfo::default_instance_;
  delete VersionCardInfo_reflection_;
  delete NtfVersionCardInfo::default_instance_;
  delete NtfVersionCardInfo_reflection_;
  delete DieTimeCountEventCmd::default_instance_;
  delete DieTimeCountEventCmd_reflection_;
  delete GetFirstShareRewardUserEvent::default_instance_;
  delete GetFirstShareRewardUserEvent_reflection_;
  delete QueryResetTimeEventCmd::default_instance_;
  delete QueryResetTimeEventCmd_reflection_;
  delete InOutActEventCmd::default_instance_;
  delete InOutActEventCmd_reflection_;
  delete UserEventMailCmd::default_instance_;
  delete UserEventMailCmd_reflection_;
  delete LevelupDeadUserEvent::default_instance_;
  delete LevelupDeadUserEvent_reflection_;
}

void protobuf_AddDesc_UserEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_ActivityEvent_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017UserEvent.proto\022\003Cmd\032\nxCmd.proto\032\021Prot"
    "oCommon.proto\032\017SceneUser.proto\032\023Activity"
    "Event.proto\032\017SceneItem.proto\"\227\001\n\024FirstAc"
    "tionUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\023USER_EVENT_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.C"
    "md.EventParam:\027USER_EVENT_FIRST_ACTION\022\026"
    "\n\013firstaction\030\003 \001(\r:\0010\"\242\001\n\022DamageNpcUser"
    "Event\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USER_E"
    "VENT_PROTOCMD\0225\n\005param\030\002 \001(\0162\017.Cmd.Event"
    "Param:\025USER_EVENT_ATTACK_NPC\022\022\n\007npcguid\030"
    "\003 \001(\004:\0010\022\021\n\006userid\030\004 \001(\004:\0010\"V\n\tTitleData"
    "\022#\n\ntitle_type\030\001 \001(\0162\017.Cmd.ETitleType\022\r\n"
    "\002id\030\002 \001(\r:\0010\022\025\n\ncreatetime\030\003 \001(\r:\0010\"\244\001\n\010"
    "NewTitle\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USE"
    "R_EVENT_PROTOCMD\0224\n\005param\030\002 \001(\0162\017.Cmd.Ev"
    "entParam:\024USER_EVENT_NEW_TITLE\022\"\n\ntitle_"
    "data\030\003 \001(\0132\016.Cmd.TitleData\022\016\n\006charid\030\004 \001"
    "(\004\"\225\001\n\010AllTitle\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\023USER_EVENT_PROTOCMD\0224\n\005param\030\002 \001(\0162\017"
    ".Cmd.EventParam:\024USER_EVENT_ALL_TITLE\022#\n"
    "\013title_datas\030\003 \003(\0132\016.Cmd.TitleData\"\276\001\n\025U"
    "pdateRandomUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\023USER_EVENT_PROTOCMD\0228\n\005param\030\002 "
    "\001(\0162\017.Cmd.EventParam:\030USER_EVENT_UPDATE_"
    "RANDOM\022\025\n\nbeginindex\030\003 \001(\r:\0010\022\023\n\010endinde"
    "x\030\004 \001(\r:\0010\022\017\n\007randoms\030\005 \003(\r\"\327\001\n\023BuffDama"
    "geUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023"
    "USER_EVENT_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd"
    ".EventParam:\026USER_EVENT_BUFF_DAMAGE\022\021\n\006c"
    "harid\030\003 \001(\004:\0010\022\021\n\006damage\030\004 \001(\005:\0010\0222\n\005ety"
    "pe\030\005 \001(\0162\017.Cmd.DamageType:\022DAMAGE_TYPE_N"
    "ORMAL\"\241\001\n\022ChargeNtfUserEvent\022.\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\023USER_EVENT_PROTOCMD\0225\n\005"
    "param\030\002 \001(\0162\017.Cmd.EventParam:\025USER_EVENT"
    "_CHARGE_NTF\022\021\n\006charid\030\003 \001(\004:\0010\022\021\n\006dataid"
    "\030\004 \001(\r:\0010\"\230\001\n\017DepositTypeData\022#\n\004type\030\001 "
    "\001(\0162\025.Cmd.EDepositCardType\022\022\n\nexpiretime"
    "\030\002 \001(\r\022\021\n\tstarttime\030\003 \001(\r\022!\n\005state\030\004 \001(\016"
    "2\022.Cmd.EDepositState\022\026\n\007invalid\030\005 \001(\010:\005f"
    "alse\"8\n\017DepositCardData\022\016\n\006itemid\030\001 \001(\r\022"
    "\025\n\006isused\030\002 \001(\010:\005false\"\256\001\n\016ChargeQueryCm"
    "d\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USER_EVENT"
    "_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.EventPara"
    "m:\027USER_EVENT_CHARGE_QUERY\022\017\n\007data_id\030\003 "
    "\001(\r\022\013\n\003ret\030\004 \001(\010\022\025\n\rcharged_count\030\005 \001(\r\""
    "\251\001\n\017DepositCardInfo\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023USER_EVENT_PROTOCMD\022<\n\005param\030\002 \001"
    "(\0162\017.Cmd.EventParam:\034USER_EVENT_DEPOSIT_"
    "CARD_INFO\022(\n\ncard_datas\030\003 \003(\0132\024.Cmd.Depo"
    "sitTypeData\"\201\001\n\025DelTransformUserEvent\022.\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USER_EVENT_PRO"
    "TOCMD\0228\n\005param\030\002 \001(\0162\017.Cmd.EventParam:\030U"
    "SER_EVENT_DEL_TRANSFORM\"\203\001\n\026InviteCatFai"
    "lUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023U"
    "SER_EVENT_PROTOCMD\0229\n\005param\030\002 \001(\0162\017.Cmd."
    "EventParam:\031USER_EVENT_INVITECAT_FAIL\"\240\001"
    "\n\024TrigNpcFuncUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\023USER_EVENT_PROTOCMD\0227\n\005param\030"
    "\002 \001(\0162\017.Cmd.EventParam:\027USER_EVENT_NPC_F"
    "UNCTION\022\017\n\007npcguid\030\003 \002(\004\022\016\n\006funcid\030\004 \002(\r"
    "\"\273\001\n\025SystemStringUserEvent\022.\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\023USER_EVENT_PROTOCMD\0228\n\005pa"
    "ram\030\002 \001(\0162\017.Cmd.EventParam:\030USER_EVENT_S"
    "YSTEM_STRING\0228\n\005etype\030\003 \001(\0162\026.Cmd.ESyste"
    "mStringType:\021ESYSTEMSTRING_MIN\"\240\001\n\020HandC"
    "atUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023"
    "USER_EVENT_PROTOCMD\0223\n\005param\030\002 \001(\0162\017.Cmd"
    ".EventParam:\023USER_EVENT_HAND_CAT\022\017\n\007catg"
    "uid\030\003 \002(\004\022\026\n\007breakup\030\004 \001(\010:\005false\"\252\001\n\013Ch"
    "angeTitle\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023US"
    "ER_EVENT_PROTOCMD\0227\n\005param\030\002 \001(\0162\017.Cmd.E"
    "ventParam:\027USER_EVENT_CHANGE_TITLE\022\"\n\nti"
    "tle_data\030\003 \001(\0132\016.Cmd.TitleData\022\016\n\006charid"
    "\030\004 \001(\004\"@\n\rChargeCntInfo\022\016\n\006dataid\030\001 \001(\r\022"
    "\r\n\005count\030\002 \001(\r\022\020\n\005limit\030\003 \001(\r:\0010\"\237\001\n\016Que"
    "ryChargeCnt\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023"
    "USER_EVENT_PROTOCMD\022;\n\005param\030\002 \001(\0162\017.Cmd"
    ".EventParam:\033USER_EVENT_QUERY_CHARGE_CNT"
    "\022 \n\004info\030\003 \003(\0132\022.Cmd.ChargeCntInfo\"\177\n\017NT"
    "FMonthCardEnd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\023USER_EVENT_PROTOCMD\022<\n\005param\030\002 \001(\0162\017.C"
    "md.EventParam:\034USER_EVENT_NTF_MONTHCARD_"
    "END\"\345\001\n\rLoveLetterUse\022.\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\023USER_EVENT_PROTOCMD\0229\n\005param\030\002"
    " \001(\0162\017.Cmd.EventParam:\031USER_EVENT_LOVELE"
    "TTER_USE\022\020\n\010itemguid\030\003 \001(\t\022\017\n\007targets\030\004 "
    "\001(\004\022\017\n\007content\030\005 \001(\t\0225\n\004type\030\006 \001(\0162\020.Cmd"
    ".ELetterType:\025ELETTERTYPE_CHRISTMAS\"4\n\017A"
    "ctivityCntItem\022\022\n\nactivityid\030\001 \001(\r\022\r\n\005co"
    "unt\030\002 \001(\r\"\245\001\n\020QueryActivityCnt\022.\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\023USER_EVENT_PROTOCMD\022="
    "\n\005param\030\002 \001(\0162\017.Cmd.EventParam:\035USER_EVE"
    "NT_QUERY_ACTIVITY_CNT\022\"\n\004info\030\003 \003(\0132\024.Cm"
    "d.ActivityCntItem\"\247\001\n\021UpdateActivityCnt\022"
    ".\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USER_EVENT_P"
    "ROTOCMD\022>\n\005param\030\002 \001(\0162\017.Cmd.EventParam:"
    "\036USER_EVENT_UPDATE_ACTIVITY_CNT\022\"\n\004info\030"
    "\003 \001(\0132\024.Cmd.ActivityCntItem\"<\n\017VersionCa"
    "rdInfo\022\017\n\007version\030\001 \001(\r\022\013\n\003id1\030\002 \001(\r\022\013\n\003"
    "id2\030\003 \001(\r\"\245\001\n\022NtfVersionCardInfo\022.\n\003cmd\030"
    "\001 \001(\0162\014.Cmd.Command:\023USER_EVENT_PROTOCMD"
    "\022;\n\005param\030\002 \001(\0162\017.Cmd.EventParam:\033USER_E"
    "VENT_NTF_VERSION_CARD\022\"\n\004info\030\003 \003(\0132\024.Cm"
    "d.VersionCardInfo\"\235\001\n\024DieTimeCountEventC"
    "md\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023USER_EVEN"
    "T_PROTOCMD\0226\n\005param\030\002 \001(\0162\017.Cmd.EventPar"
    "am:\026USER_EVENT_WAIT_RELIVE\022\017\n\004time\030\003 \001(\r"
    ":\0010\022\014\n\004name\030\004 \001(\t\"\222\001\n\034GetFirstShareRewar"
    "dUserEvent\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023U"
    "SER_EVENT_PROTOCMD\022B\n\005param\030\002 \001(\0162\017.Cmd."
    "EventParam:\"USER_EVENT_GET_RECALL_SHARE_"
    "REWARD\"\275\001\n\026QueryResetTimeEventCmd\022.\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\023USER_EVENT_PROTOCM"
    "D\022:\n\005param\030\002 \001(\0162\017.Cmd.EventParam:\032USER_"
    "EVENT_QUERY_RESETTIME\022!\n\005etype\030\003 \002(\0162\022.C"
    "md.EAERewardMode\022\024\n\tresettime\030\004 \001(\r:\0010\"\235"
    "\001\n\020InOutActEventCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023USER_EVENT_PROTOCMD\0224\n\005param\030\002 \001"
    "(\0162\017.Cmd.EventParam:\024USER_EVENT_INOUT_AC"
    "T\022\r\n\005actid\030\003 \002(\004\022\024\n\005inout\030\004 \001(\010:\005false\"\315"
    "\001\n\020UserEventMailCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\023USER_EVENT_PROTOCMD\022/\n\005param\030\002 \001"
    "(\0162\017.Cmd.EventParam:\017USER_EVENT_MAIL\0226\n\005"
    "eType\030\003 \001(\0162\023.Cmd.EEventMailType:\022EEVENT"
    "MAILTYPE_MIN\022\017\n\007param32\030\004 \003(\r\022\017\n\007param64"
    "\030\005 \003(\004\"\177\n\024LevelupDeadUserEvent\022.\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\023USER_EVENT_PROTOCMD\0227"
    "\n\005param\030\002 \001(\0162\017.Cmd.EventParam:\027USER_EVE"
    "NT_LEVELUP_DEAD*\264\006\n\nEventParam\022\033\n\027USER_E"
    "VENT_FIRST_ACTION\020\001\022\031\n\025USER_EVENT_ATTACK"
    "_NPC\020\002\022\030\n\024USER_EVENT_NEW_TITLE\020\003\022\030\n\024USER"
    "_EVENT_ALL_TITLE\020\004\022\034\n\030USER_EVENT_UPDATE_"
    "RANDOM\020\005\022\032\n\026USER_EVENT_BUFF_DAMAGE\020\006\022\031\n\025"
    "USER_EVENT_CHARGE_NTF\020\007\022\033\n\027USER_EVENT_CH"
    "ARGE_QUERY\020\010\022 \n\034USER_EVENT_DEPOSIT_CARD_"
    "INFO\020\t\022\034\n\030USER_EVENT_DEL_TRANSFORM\020\n\022\035\n\031"
    "USER_EVENT_INVITECAT_FAIL\020\013\022\033\n\027USER_EVEN"
    "T_NPC_FUNCTION\020\014\022\034\n\030USER_EVENT_SYSTEM_ST"
    "RING\020\r\022\027\n\023USER_EVENT_HAND_CAT\020\016\022\033\n\027USER_"
    "EVENT_CHANGE_TITLE\020\017\022\037\n\033USER_EVENT_QUERY"
    "_CHARGE_CNT\020\020\022 \n\034USER_EVENT_NTF_MONTHCAR"
    "D_END\020\021\022\035\n\031USER_EVENT_LOVELETTER_USE\020\022\022!"
    "\n\035USER_EVENT_QUERY_ACTIVITY_CNT\020\023\022\"\n\036USE"
    "R_EVENT_UPDATE_ACTIVITY_CNT\020\024\022&\n\"USER_EV"
    "ENT_GET_RECALL_SHARE_REWARD\020\026\022\037\n\033USER_EV"
    "ENT_NTF_VERSION_CARD\020\027\022\032\n\026USER_EVENT_WAI"
    "T_RELIVE\020\030\022\036\n\032USER_EVENT_QUERY_RESETTIME"
    "\020\031\022\030\n\024USER_EVENT_INOUT_ACT\020\032\022\023\n\017USER_EVE"
    "NT_MAIL\020\033\022\033\n\027USER_EVENT_LEVELUP_DEAD\020\034*\221"
    "\003\n\020EFirstActionType\022\024\n\020EFIRSTACTION_MIN\020"
    "\000\022\037\n\033EFIRSTACTION_SKILL_OVERFLOW\020\001\022\035\n\031EF"
    "IRSTACTION_EXCHANGECARD\020\002\022\034\n\030EFIRSTACTIO"
    "N_COMPOSECARD\020\003\022\031\n\025EFIRSTACTION_COOKFOOD"
    "\020\004\022\030\n\024EFIRSTACTION_LOTTERY\020\005\022\032\n\026EFIRSTAC"
    "TION_FOOD_MAIL\020\006\022\036\n\032EFIRSTACTION_LOTTERY"
    "_EQUIP\020\007\022\035\n\031EFIRSTACTION_LOTTERY_CARD\020\010\022"
    "\036\n\032EFIRSTACTION_LOTTERY_MAGIC\020\t\022\035\n\031EFIRS"
    "TACTION_RECALL_SHARE\020\n\022\036\n\032EFIRSTACTION_D"
    "ECOMPOSECARD\020\013\022\032\n\026EFIRSTACTION_KFC_SHARE"
    "\020\014*\307\001\n\nETitleType\022\023\n\017ETITLE_TYPE_MIN\020\000\022\027"
    "\n\023ETITLE_TYPE_MANNUAL\020\001\022\033\n\027ETITLE_TYPE_A"
    "CHIEVEMENT\020\002\022!\n\035ETITLE_TYPE_ACHIEVEMENT_"
    "ORDER\020\003\022\032\n\026ETITLE_TYPE_FOODCOOKER\020\007\022\032\n\026E"
    "TITLE_TYPE_FOODTASTER\020\010\022\023\n\017ETITLE_TYPE_M"
    "AX\020\t*X\n\rEDepositState\022\025\n\021EDEPOSITSTAT_NO"
    "NE\020\000\022\026\n\022EDEPOSITSTAT_VALID\020\001\022\030\n\024EDEPOSIT"
    "STAT_INVALID\020\002*B\n\021ESystemStringType\022\025\n\021E"
    "SYSTEMSTRING_MIN\020\000\022\026\n\022ESYSTEMSTRING_MEMO"
    "\020\001*D\n\016EEventMailType\022\026\n\022EEVENTMAILTYPE_M"
    "IN\020\000\022\032\n\026EEVENTMAILTYPE_DELCAHR\020\001", 6792);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "UserEvent.proto", &protobuf_RegisterTypes);
  FirstActionUserEvent::default_instance_ = new FirstActionUserEvent();
  DamageNpcUserEvent::default_instance_ = new DamageNpcUserEvent();
  TitleData::default_instance_ = new TitleData();
  NewTitle::default_instance_ = new NewTitle();
  AllTitle::default_instance_ = new AllTitle();
  UpdateRandomUserEvent::default_instance_ = new UpdateRandomUserEvent();
  BuffDamageUserEvent::default_instance_ = new BuffDamageUserEvent();
  ChargeNtfUserEvent::default_instance_ = new ChargeNtfUserEvent();
  DepositTypeData::default_instance_ = new DepositTypeData();
  DepositCardData::default_instance_ = new DepositCardData();
  ChargeQueryCmd::default_instance_ = new ChargeQueryCmd();
  DepositCardInfo::default_instance_ = new DepositCardInfo();
  DelTransformUserEvent::default_instance_ = new DelTransformUserEvent();
  InviteCatFailUserEvent::default_instance_ = new InviteCatFailUserEvent();
  TrigNpcFuncUserEvent::default_instance_ = new TrigNpcFuncUserEvent();
  SystemStringUserEvent::default_instance_ = new SystemStringUserEvent();
  HandCatUserEvent::default_instance_ = new HandCatUserEvent();
  ChangeTitle::default_instance_ = new ChangeTitle();
  ChargeCntInfo::default_instance_ = new ChargeCntInfo();
  QueryChargeCnt::default_instance_ = new QueryChargeCnt();
  NTFMonthCardEnd::default_instance_ = new NTFMonthCardEnd();
  LoveLetterUse::default_instance_ = new LoveLetterUse();
  ActivityCntItem::default_instance_ = new ActivityCntItem();
  QueryActivityCnt::default_instance_ = new QueryActivityCnt();
  UpdateActivityCnt::default_instance_ = new UpdateActivityCnt();
  VersionCardInfo::default_instance_ = new VersionCardInfo();
  NtfVersionCardInfo::default_instance_ = new NtfVersionCardInfo();
  DieTimeCountEventCmd::default_instance_ = new DieTimeCountEventCmd();
  GetFirstShareRewardUserEvent::default_instance_ = new GetFirstShareRewardUserEvent();
  QueryResetTimeEventCmd::default_instance_ = new QueryResetTimeEventCmd();
  InOutActEventCmd::default_instance_ = new InOutActEventCmd();
  UserEventMailCmd::default_instance_ = new UserEventMailCmd();
  LevelupDeadUserEvent::default_instance_ = new LevelupDeadUserEvent();
  FirstActionUserEvent::default_instance_->InitAsDefaultInstance();
  DamageNpcUserEvent::default_instance_->InitAsDefaultInstance();
  TitleData::default_instance_->InitAsDefaultInstance();
  NewTitle::default_instance_->InitAsDefaultInstance();
  AllTitle::default_instance_->InitAsDefaultInstance();
  UpdateRandomUserEvent::default_instance_->InitAsDefaultInstance();
  BuffDamageUserEvent::default_instance_->InitAsDefaultInstance();
  ChargeNtfUserEvent::default_instance_->InitAsDefaultInstance();
  DepositTypeData::default_instance_->InitAsDefaultInstance();
  DepositCardData::default_instance_->InitAsDefaultInstance();
  ChargeQueryCmd::default_instance_->InitAsDefaultInstance();
  DepositCardInfo::default_instance_->InitAsDefaultInstance();
  DelTransformUserEvent::default_instance_->InitAsDefaultInstance();
  InviteCatFailUserEvent::default_instance_->InitAsDefaultInstance();
  TrigNpcFuncUserEvent::default_instance_->InitAsDefaultInstance();
  SystemStringUserEvent::default_instance_->InitAsDefaultInstance();
  HandCatUserEvent::default_instance_->InitAsDefaultInstance();
  ChangeTitle::default_instance_->InitAsDefaultInstance();
  ChargeCntInfo::default_instance_->InitAsDefaultInstance();
  QueryChargeCnt::default_instance_->InitAsDefaultInstance();
  NTFMonthCardEnd::default_instance_->InitAsDefaultInstance();
  LoveLetterUse::default_instance_->InitAsDefaultInstance();
  ActivityCntItem::default_instance_->InitAsDefaultInstance();
  QueryActivityCnt::default_instance_->InitAsDefaultInstance();
  UpdateActivityCnt::default_instance_->InitAsDefaultInstance();
  VersionCardInfo::default_instance_->InitAsDefaultInstance();
  NtfVersionCardInfo::default_instance_->InitAsDefaultInstance();
  DieTimeCountEventCmd::default_instance_->InitAsDefaultInstance();
  GetFirstShareRewardUserEvent::default_instance_->InitAsDefaultInstance();
  QueryResetTimeEventCmd::default_instance_->InitAsDefaultInstance();
  InOutActEventCmd::default_instance_->InitAsDefaultInstance();
  UserEventMailCmd::default_instance_->InitAsDefaultInstance();
  LevelupDeadUserEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_UserEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_UserEvent_2eproto {
  StaticDescriptorInitializer_UserEvent_2eproto() {
    protobuf_AddDesc_UserEvent_2eproto();
  }
} static_descriptor_initializer_UserEvent_2eproto_;
const ::google::protobuf::EnumDescriptor* EventParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventParam_descriptor_;
}
bool EventParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EFirstActionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EFirstActionType_descriptor_;
}
bool EFirstActionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETitleType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ETitleType_descriptor_;
}
bool ETitleType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDepositState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDepositState_descriptor_;
}
bool EDepositState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESystemStringType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ESystemStringType_descriptor_;
}
bool ESystemStringType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EEventMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EEventMailType_descriptor_;
}
bool EEventMailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int FirstActionUserEvent::kCmdFieldNumber;
const int FirstActionUserEvent::kParamFieldNumber;
const int FirstActionUserEvent::kFirstactionFieldNumber;
#endif  // !_MSC_VER

FirstActionUserEvent::FirstActionUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FirstActionUserEvent)
}

void FirstActionUserEvent::InitAsDefaultInstance() {
}

FirstActionUserEvent::FirstActionUserEvent(const FirstActionUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FirstActionUserEvent)
}

void FirstActionUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 1;
  firstaction_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstActionUserEvent::~FirstActionUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.FirstActionUserEvent)
  SharedDtor();
}

void FirstActionUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FirstActionUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstActionUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstActionUserEvent_descriptor_;
}

const FirstActionUserEvent& FirstActionUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

FirstActionUserEvent* FirstActionUserEvent::default_instance_ = NULL;

FirstActionUserEvent* FirstActionUserEvent::New() const {
  return new FirstActionUserEvent;
}

void FirstActionUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 25;
    param_ = 1;
    firstaction_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstActionUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FirstActionUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_FIRST_ACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_firstaction;
        break;
      }

      // optional uint32 firstaction = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_firstaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &firstaction_)));
          set_has_firstaction();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FirstActionUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FirstActionUserEvent)
  return false;
#undef DO_
}

void FirstActionUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FirstActionUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_FIRST_ACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 firstaction = 3 [default = 0];
  if (has_firstaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->firstaction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FirstActionUserEvent)
}

::google::protobuf::uint8* FirstActionUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FirstActionUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_FIRST_ACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 firstaction = 3 [default = 0];
  if (has_firstaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->firstaction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FirstActionUserEvent)
  return target;
}

int FirstActionUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_FIRST_ACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 firstaction = 3 [default = 0];
    if (has_firstaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->firstaction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstActionUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstActionUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstActionUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstActionUserEvent::MergeFrom(const FirstActionUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_firstaction()) {
      set_firstaction(from.firstaction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstActionUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstActionUserEvent::CopyFrom(const FirstActionUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstActionUserEvent::IsInitialized() const {

  return true;
}

void FirstActionUserEvent::Swap(FirstActionUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(firstaction_, other->firstaction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstActionUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstActionUserEvent_descriptor_;
  metadata.reflection = FirstActionUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DamageNpcUserEvent::kCmdFieldNumber;
const int DamageNpcUserEvent::kParamFieldNumber;
const int DamageNpcUserEvent::kNpcguidFieldNumber;
const int DamageNpcUserEvent::kUseridFieldNumber;
#endif  // !_MSC_VER

DamageNpcUserEvent::DamageNpcUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DamageNpcUserEvent)
}

void DamageNpcUserEvent::InitAsDefaultInstance() {
}

DamageNpcUserEvent::DamageNpcUserEvent(const DamageNpcUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DamageNpcUserEvent)
}

void DamageNpcUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 2;
  npcguid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DamageNpcUserEvent::~DamageNpcUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.DamageNpcUserEvent)
  SharedDtor();
}

void DamageNpcUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DamageNpcUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DamageNpcUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DamageNpcUserEvent_descriptor_;
}

const DamageNpcUserEvent& DamageNpcUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DamageNpcUserEvent* DamageNpcUserEvent::default_instance_ = NULL;

DamageNpcUserEvent* DamageNpcUserEvent::New() const {
  return new DamageNpcUserEvent;
}

void DamageNpcUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DamageNpcUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, userid_);
    cmd_ = 25;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DamageNpcUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DamageNpcUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ATTACK_NPC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DamageNpcUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DamageNpcUserEvent)
  return false;
#undef DO_
}

void DamageNpcUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DamageNpcUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ATTACK_NPC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DamageNpcUserEvent)
}

::google::protobuf::uint8* DamageNpcUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DamageNpcUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ATTACK_NPC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 npcguid = 3 [default = 0];
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DamageNpcUserEvent)
  return target;
}

int DamageNpcUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ATTACK_NPC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 npcguid = 3 [default = 0];
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DamageNpcUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DamageNpcUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DamageNpcUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DamageNpcUserEvent::MergeFrom(const DamageNpcUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DamageNpcUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DamageNpcUserEvent::CopyFrom(const DamageNpcUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DamageNpcUserEvent::IsInitialized() const {

  return true;
}

void DamageNpcUserEvent::Swap(DamageNpcUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DamageNpcUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DamageNpcUserEvent_descriptor_;
  metadata.reflection = DamageNpcUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleData::kTitleTypeFieldNumber;
const int TitleData::kIdFieldNumber;
const int TitleData::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

TitleData::TitleData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TitleData)
}

void TitleData::InitAsDefaultInstance() {
}

TitleData::TitleData(const TitleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TitleData)
}

void TitleData::SharedCtor() {
  _cached_size_ = 0;
  title_type_ = 0;
  id_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleData::~TitleData() {
  // @@protoc_insertion_point(destructor:Cmd.TitleData)
  SharedDtor();
}

void TitleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleData_descriptor_;
}

const TitleData& TitleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

TitleData* TitleData::default_instance_ = NULL;

TitleData* TitleData::New() const {
  return new TitleData;
}

void TitleData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TitleData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(title_type_, createtime_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TitleData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.ETitleType title_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETitleType_IsValid(value)) {
            set_title_type(static_cast< ::Cmd::ETitleType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }

      // optional uint32 createtime = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TitleData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TitleData)
  return false;
#undef DO_
}

void TitleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TitleData)
  // optional .Cmd.ETitleType title_type = 1;
  if (has_title_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->title_type(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 createtime = 3 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TitleData)
}

::google::protobuf::uint8* TitleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TitleData)
  // optional .Cmd.ETitleType title_type = 1;
  if (has_title_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->title_type(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 createtime = 3 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TitleData)
  return target;
}

int TitleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.ETitleType title_type = 1;
    if (has_title_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->title_type());
    }

    // optional uint32 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 createtime = 3 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleData::MergeFrom(const TitleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title_type()) {
      set_title_type(from.title_type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleData::CopyFrom(const TitleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleData::IsInitialized() const {

  return true;
}

void TitleData::Swap(TitleData* other) {
  if (other != this) {
    std::swap(title_type_, other->title_type_);
    std::swap(id_, other->id_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleData_descriptor_;
  metadata.reflection = TitleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewTitle::kCmdFieldNumber;
const int NewTitle::kParamFieldNumber;
const int NewTitle::kTitleDataFieldNumber;
const int NewTitle::kCharidFieldNumber;
#endif  // !_MSC_VER

NewTitle::NewTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NewTitle)
}

void NewTitle::InitAsDefaultInstance() {
  title_data_ = const_cast< ::Cmd::TitleData*>(&::Cmd::TitleData::default_instance());
}

NewTitle::NewTitle(const NewTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NewTitle)
}

void NewTitle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 3;
  title_data_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewTitle::~NewTitle() {
  // @@protoc_insertion_point(destructor:Cmd.NewTitle)
  SharedDtor();
}

void NewTitle::SharedDtor() {
  if (this != default_instance_) {
    delete title_data_;
  }
}

void NewTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewTitle_descriptor_;
}

const NewTitle& NewTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

NewTitle* NewTitle::default_instance_ = NULL;

NewTitle* NewTitle::New() const {
  return new NewTitle;
}

void NewTitle::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 25;
    param_ = 3;
    if (has_title_data()) {
      if (title_data_ != NULL) title_data_->::Cmd::TitleData::Clear();
    }
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NewTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NEW_TITLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title_data;
        break;
      }

      // optional .Cmd.TitleData title_data = 3;
      case 3: {
        if (tag == 26) {
         parse_title_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NewTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NewTitle)
  return false;
#undef DO_
}

void NewTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NewTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NEW_TITLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TitleData title_data = 3;
  if (has_title_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title_data(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NewTitle)
}

::google::protobuf::uint8* NewTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NewTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NEW_TITLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TitleData title_data = 3;
  if (has_title_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title_data(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NewTitle)
  return target;
}

int NewTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NEW_TITLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TitleData title_data = 3;
    if (has_title_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_data());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewTitle::MergeFrom(const NewTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_title_data()) {
      mutable_title_data()->::Cmd::TitleData::MergeFrom(from.title_data());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTitle::CopyFrom(const NewTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTitle::IsInitialized() const {

  return true;
}

void NewTitle::Swap(NewTitle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(title_data_, other->title_data_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewTitle_descriptor_;
  metadata.reflection = NewTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllTitle::kCmdFieldNumber;
const int AllTitle::kParamFieldNumber;
const int AllTitle::kTitleDatasFieldNumber;
#endif  // !_MSC_VER

AllTitle::AllTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AllTitle)
}

void AllTitle::InitAsDefaultInstance() {
}

AllTitle::AllTitle(const AllTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AllTitle)
}

void AllTitle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllTitle::~AllTitle() {
  // @@protoc_insertion_point(destructor:Cmd.AllTitle)
  SharedDtor();
}

void AllTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTitle_descriptor_;
}

const AllTitle& AllTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

AllTitle* AllTitle::default_instance_ = NULL;

AllTitle* AllTitle::New() const {
  return new AllTitle;
}

void AllTitle::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 4;
  }
  title_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AllTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ALL_TITLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title_datas;
        break;
      }

      // repeated .Cmd.TitleData title_datas = 3;
      case 3: {
        if (tag == 26) {
         parse_title_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AllTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AllTitle)
  return false;
#undef DO_
}

void AllTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AllTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ALL_TITLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.TitleData title_datas = 3;
  for (int i = 0; i < this->title_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AllTitle)
}

::google::protobuf::uint8* AllTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AllTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ALL_TITLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.TitleData title_datas = 3;
  for (int i = 0; i < this->title_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AllTitle)
  return target;
}

int AllTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_ALL_TITLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.TitleData title_datas = 3;
  total_size += 1 * this->title_datas_size();
  for (int i = 0; i < this->title_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllTitle::MergeFrom(const AllTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_datas_.MergeFrom(from.title_datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTitle::CopyFrom(const AllTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTitle::IsInitialized() const {

  return true;
}

void AllTitle::Swap(AllTitle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    title_datas_.Swap(&other->title_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTitle_descriptor_;
  metadata.reflection = AllTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRandomUserEvent::kCmdFieldNumber;
const int UpdateRandomUserEvent::kParamFieldNumber;
const int UpdateRandomUserEvent::kBeginindexFieldNumber;
const int UpdateRandomUserEvent::kEndindexFieldNumber;
const int UpdateRandomUserEvent::kRandomsFieldNumber;
#endif  // !_MSC_VER

UpdateRandomUserEvent::UpdateRandomUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateRandomUserEvent)
}

void UpdateRandomUserEvent::InitAsDefaultInstance() {
}

UpdateRandomUserEvent::UpdateRandomUserEvent(const UpdateRandomUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateRandomUserEvent)
}

void UpdateRandomUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 5;
  beginindex_ = 0u;
  endindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRandomUserEvent::~UpdateRandomUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateRandomUserEvent)
  SharedDtor();
}

void UpdateRandomUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRandomUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRandomUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRandomUserEvent_descriptor_;
}

const UpdateRandomUserEvent& UpdateRandomUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

UpdateRandomUserEvent* UpdateRandomUserEvent::default_instance_ = NULL;

UpdateRandomUserEvent* UpdateRandomUserEvent::New() const {
  return new UpdateRandomUserEvent;
}

void UpdateRandomUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateRandomUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(beginindex_, endindex_);
    cmd_ = 25;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  randoms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRandomUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateRandomUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_RANDOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_beginindex;
        break;
      }

      // optional uint32 beginindex = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_beginindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginindex_)));
          set_has_beginindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endindex;
        break;
      }

      // optional uint32 endindex = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_endindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endindex_)));
          set_has_endindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_randoms;
        break;
      }

      // repeated uint32 randoms = 5;
      case 5: {
        if (tag == 40) {
         parse_randoms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_randoms())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_randoms())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_randoms;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateRandomUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateRandomUserEvent)
  return false;
#undef DO_
}

void UpdateRandomUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateRandomUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_RANDOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 beginindex = 3 [default = 0];
  if (has_beginindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->beginindex(), output);
  }

  // optional uint32 endindex = 4 [default = 0];
  if (has_endindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endindex(), output);
  }

  // repeated uint32 randoms = 5;
  for (int i = 0; i < this->randoms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->randoms(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateRandomUserEvent)
}

::google::protobuf::uint8* UpdateRandomUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateRandomUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_RANDOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 beginindex = 3 [default = 0];
  if (has_beginindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->beginindex(), target);
  }

  // optional uint32 endindex = 4 [default = 0];
  if (has_endindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endindex(), target);
  }

  // repeated uint32 randoms = 5;
  for (int i = 0; i < this->randoms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->randoms(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateRandomUserEvent)
  return target;
}

int UpdateRandomUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_RANDOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 beginindex = 3 [default = 0];
    if (has_beginindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginindex());
    }

    // optional uint32 endindex = 4 [default = 0];
    if (has_endindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endindex());
    }

  }
  // repeated uint32 randoms = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->randoms_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->randoms(i));
    }
    total_size += 1 * this->randoms_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRandomUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRandomUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRandomUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRandomUserEvent::MergeFrom(const UpdateRandomUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  randoms_.MergeFrom(from.randoms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_beginindex()) {
      set_beginindex(from.beginindex());
    }
    if (from.has_endindex()) {
      set_endindex(from.endindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRandomUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRandomUserEvent::CopyFrom(const UpdateRandomUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRandomUserEvent::IsInitialized() const {

  return true;
}

void UpdateRandomUserEvent::Swap(UpdateRandomUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(beginindex_, other->beginindex_);
    std::swap(endindex_, other->endindex_);
    randoms_.Swap(&other->randoms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRandomUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRandomUserEvent_descriptor_;
  metadata.reflection = UpdateRandomUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDamageUserEvent::kCmdFieldNumber;
const int BuffDamageUserEvent::kParamFieldNumber;
const int BuffDamageUserEvent::kCharidFieldNumber;
const int BuffDamageUserEvent::kDamageFieldNumber;
const int BuffDamageUserEvent::kEtypeFieldNumber;
#endif  // !_MSC_VER

BuffDamageUserEvent::BuffDamageUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BuffDamageUserEvent)
}

void BuffDamageUserEvent::InitAsDefaultInstance() {
}

BuffDamageUserEvent::BuffDamageUserEvent(const BuffDamageUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BuffDamageUserEvent)
}

void BuffDamageUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 6;
  charid_ = GOOGLE_ULONGLONG(0);
  damage_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDamageUserEvent::~BuffDamageUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.BuffDamageUserEvent)
  SharedDtor();
}

void BuffDamageUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDamageUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDamageUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDamageUserEvent_descriptor_;
}

const BuffDamageUserEvent& BuffDamageUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

BuffDamageUserEvent* BuffDamageUserEvent::default_instance_ = NULL;

BuffDamageUserEvent* BuffDamageUserEvent::New() const {
  return new BuffDamageUserEvent;
}

void BuffDamageUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BuffDamageUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(charid_, damage_);
    cmd_ = 25;
    param_ = 6;
    etype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDamageUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BuffDamageUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_BUFF_DAMAGE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional int32 damage = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_etype;
        break;
      }

      // optional .Cmd.DamageType etype = 5 [default = DAMAGE_TYPE_NORMAL];
      case 5: {
        if (tag == 40) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::DamageType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::DamageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BuffDamageUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BuffDamageUserEvent)
  return false;
#undef DO_
}

void BuffDamageUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BuffDamageUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_BUFF_DAMAGE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional int32 damage = 4 [default = 0];
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  // optional .Cmd.DamageType etype = 5 [default = DAMAGE_TYPE_NORMAL];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BuffDamageUserEvent)
}

::google::protobuf::uint8* BuffDamageUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BuffDamageUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_BUFF_DAMAGE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional int32 damage = 4 [default = 0];
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  // optional .Cmd.DamageType etype = 5 [default = DAMAGE_TYPE_NORMAL];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BuffDamageUserEvent)
  return target;
}

int BuffDamageUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_BUFF_DAMAGE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional int32 damage = 4 [default = 0];
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional .Cmd.DamageType etype = 5 [default = DAMAGE_TYPE_NORMAL];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDamageUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDamageUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDamageUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDamageUserEvent::MergeFrom(const BuffDamageUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDamageUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDamageUserEvent::CopyFrom(const BuffDamageUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDamageUserEvent::IsInitialized() const {

  return true;
}

void BuffDamageUserEvent::Swap(BuffDamageUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDamageUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDamageUserEvent_descriptor_;
  metadata.reflection = BuffDamageUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeNtfUserEvent::kCmdFieldNumber;
const int ChargeNtfUserEvent::kParamFieldNumber;
const int ChargeNtfUserEvent::kCharidFieldNumber;
const int ChargeNtfUserEvent::kDataidFieldNumber;
#endif  // !_MSC_VER

ChargeNtfUserEvent::ChargeNtfUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeNtfUserEvent)
}

void ChargeNtfUserEvent::InitAsDefaultInstance() {
}

ChargeNtfUserEvent::ChargeNtfUserEvent(const ChargeNtfUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeNtfUserEvent)
}

void ChargeNtfUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 7;
  charid_ = GOOGLE_ULONGLONG(0);
  dataid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeNtfUserEvent::~ChargeNtfUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeNtfUserEvent)
  SharedDtor();
}

void ChargeNtfUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeNtfUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeNtfUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeNtfUserEvent_descriptor_;
}

const ChargeNtfUserEvent& ChargeNtfUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

ChargeNtfUserEvent* ChargeNtfUserEvent::default_instance_ = NULL;

ChargeNtfUserEvent* ChargeNtfUserEvent::New() const {
  return new ChargeNtfUserEvent;
}

void ChargeNtfUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeNtfUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, dataid_);
    cmd_ = 25;
    param_ = 7;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeNtfUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeNtfUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dataid;
        break;
      }

      // optional uint32 dataid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_dataid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeNtfUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeNtfUserEvent)
  return false;
#undef DO_
}

void ChargeNtfUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeNtfUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 dataid = 4 [default = 0];
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dataid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeNtfUserEvent)
}

::google::protobuf::uint8* ChargeNtfUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeNtfUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 dataid = 4 [default = 0];
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dataid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeNtfUserEvent)
  return target;
}

int ChargeNtfUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 dataid = 4 [default = 0];
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeNtfUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeNtfUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeNtfUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeNtfUserEvent::MergeFrom(const ChargeNtfUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeNtfUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeNtfUserEvent::CopyFrom(const ChargeNtfUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeNtfUserEvent::IsInitialized() const {

  return true;
}

void ChargeNtfUserEvent::Swap(ChargeNtfUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(dataid_, other->dataid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeNtfUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeNtfUserEvent_descriptor_;
  metadata.reflection = ChargeNtfUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepositTypeData::kTypeFieldNumber;
const int DepositTypeData::kExpiretimeFieldNumber;
const int DepositTypeData::kStarttimeFieldNumber;
const int DepositTypeData::kStateFieldNumber;
const int DepositTypeData::kInvalidFieldNumber;
#endif  // !_MSC_VER

DepositTypeData::DepositTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DepositTypeData)
}

void DepositTypeData::InitAsDefaultInstance() {
}

DepositTypeData::DepositTypeData(const DepositTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DepositTypeData)
}

void DepositTypeData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  expiretime_ = 0u;
  starttime_ = 0u;
  state_ = 0;
  invalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositTypeData::~DepositTypeData() {
  // @@protoc_insertion_point(destructor:Cmd.DepositTypeData)
  SharedDtor();
}

void DepositTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepositTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositTypeData_descriptor_;
}

const DepositTypeData& DepositTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DepositTypeData* DepositTypeData::default_instance_ = NULL;

DepositTypeData* DepositTypeData::New() const {
  return new DepositTypeData;
}

void DepositTypeData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepositTypeData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(expiretime_, invalid_);
    type_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DepositTypeData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EDepositCardType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDepositCardType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EDepositCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_expiretime;
        break;
      }

      // optional uint32 expiretime = 2;
      case 2: {
        if (tag == 16) {
         parse_expiretime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional uint32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EDepositState state = 4;
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDepositState_IsValid(value)) {
            set_state(static_cast< ::Cmd::EDepositState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_invalid;
        break;
      }

      // optional bool invalid = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_invalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &invalid_)));
          set_has_invalid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DepositTypeData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DepositTypeData)
  return false;
#undef DO_
}

void DepositTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DepositTypeData)
  // optional .Cmd.EDepositCardType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 expiretime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional .Cmd.EDepositState state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional bool invalid = 5 [default = false];
  if (has_invalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->invalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DepositTypeData)
}

::google::protobuf::uint8* DepositTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DepositTypeData)
  // optional .Cmd.EDepositCardType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 expiretime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  // optional uint32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional .Cmd.EDepositState state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional bool invalid = 5 [default = false];
  if (has_invalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->invalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DepositTypeData)
  return target;
}

int DepositTypeData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EDepositCardType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 expiretime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

    // optional uint32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional .Cmd.EDepositState state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional bool invalid = 5 [default = false];
    if (has_invalid()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositTypeData::MergeFrom(const DepositTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_invalid()) {
      set_invalid(from.invalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositTypeData::CopyFrom(const DepositTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositTypeData::IsInitialized() const {

  return true;
}

void DepositTypeData::Swap(DepositTypeData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(starttime_, other->starttime_);
    std::swap(state_, other->state_);
    std::swap(invalid_, other->invalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositTypeData_descriptor_;
  metadata.reflection = DepositTypeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepositCardData::kItemidFieldNumber;
const int DepositCardData::kIsusedFieldNumber;
#endif  // !_MSC_VER

DepositCardData::DepositCardData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DepositCardData)
}

void DepositCardData::InitAsDefaultInstance() {
}

DepositCardData::DepositCardData(const DepositCardData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DepositCardData)
}

void DepositCardData::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  isused_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositCardData::~DepositCardData() {
  // @@protoc_insertion_point(destructor:Cmd.DepositCardData)
  SharedDtor();
}

void DepositCardData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepositCardData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositCardData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositCardData_descriptor_;
}

const DepositCardData& DepositCardData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DepositCardData* DepositCardData::default_instance_ = NULL;

DepositCardData* DepositCardData::New() const {
  return new DepositCardData;
}

void DepositCardData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DepositCardData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(itemid_, isused_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositCardData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DepositCardData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isused;
        break;
      }

      // optional bool isused = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_isused:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isused_)));
          set_has_isused();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DepositCardData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DepositCardData)
  return false;
#undef DO_
}

void DepositCardData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DepositCardData)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional bool isused = 2 [default = false];
  if (has_isused()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isused(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DepositCardData)
}

::google::protobuf::uint8* DepositCardData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DepositCardData)
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional bool isused = 2 [default = false];
  if (has_isused()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isused(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DepositCardData)
  return target;
}

int DepositCardData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional bool isused = 2 [default = false];
    if (has_isused()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositCardData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositCardData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositCardData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositCardData::MergeFrom(const DepositCardData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_isused()) {
      set_isused(from.isused());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositCardData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositCardData::CopyFrom(const DepositCardData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositCardData::IsInitialized() const {

  return true;
}

void DepositCardData::Swap(DepositCardData* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(isused_, other->isused_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositCardData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositCardData_descriptor_;
  metadata.reflection = DepositCardData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeQueryCmd::kCmdFieldNumber;
const int ChargeQueryCmd::kParamFieldNumber;
const int ChargeQueryCmd::kDataIdFieldNumber;
const int ChargeQueryCmd::kRetFieldNumber;
const int ChargeQueryCmd::kChargedCountFieldNumber;
#endif  // !_MSC_VER

ChargeQueryCmd::ChargeQueryCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeQueryCmd)
}

void ChargeQueryCmd::InitAsDefaultInstance() {
}

ChargeQueryCmd::ChargeQueryCmd(const ChargeQueryCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeQueryCmd)
}

void ChargeQueryCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 8;
  data_id_ = 0u;
  ret_ = false;
  charged_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeQueryCmd::~ChargeQueryCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeQueryCmd)
  SharedDtor();
}

void ChargeQueryCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeQueryCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeQueryCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeQueryCmd_descriptor_;
}

const ChargeQueryCmd& ChargeQueryCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

ChargeQueryCmd* ChargeQueryCmd::default_instance_ = NULL;

ChargeQueryCmd* ChargeQueryCmd::New() const {
  return new ChargeQueryCmd;
}

void ChargeQueryCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeQueryCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(data_id_, charged_count_);
    cmd_ = 25;
    param_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeQueryCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeQueryCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_QUERY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_data_id;
        break;
      }

      // optional uint32 data_id = 3;
      case 3: {
        if (tag == 24) {
         parse_data_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_id_)));
          set_has_data_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ret;
        break;
      }

      // optional bool ret = 4;
      case 4: {
        if (tag == 32) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_charged_count;
        break;
      }

      // optional uint32 charged_count = 5;
      case 5: {
        if (tag == 40) {
         parse_charged_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charged_count_)));
          set_has_charged_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeQueryCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeQueryCmd)
  return false;
#undef DO_
}

void ChargeQueryCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_QUERY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 data_id = 3;
  if (has_data_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->data_id(), output);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ret(), output);
  }

  // optional uint32 charged_count = 5;
  if (has_charged_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charged_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeQueryCmd)
}

::google::protobuf::uint8* ChargeQueryCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeQueryCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_QUERY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 data_id = 3;
  if (has_data_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->data_id(), target);
  }

  // optional bool ret = 4;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ret(), target);
  }

  // optional uint32 charged_count = 5;
  if (has_charged_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charged_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeQueryCmd)
  return target;
}

int ChargeQueryCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHARGE_QUERY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 data_id = 3;
    if (has_data_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_id());
    }

    // optional bool ret = 4;
    if (has_ret()) {
      total_size += 1 + 1;
    }

    // optional uint32 charged_count = 5;
    if (has_charged_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charged_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeQueryCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeQueryCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeQueryCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeQueryCmd::MergeFrom(const ChargeQueryCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data_id()) {
      set_data_id(from.data_id());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charged_count()) {
      set_charged_count(from.charged_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeQueryCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeQueryCmd::CopyFrom(const ChargeQueryCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeQueryCmd::IsInitialized() const {

  return true;
}

void ChargeQueryCmd::Swap(ChargeQueryCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_id_, other->data_id_);
    std::swap(ret_, other->ret_);
    std::swap(charged_count_, other->charged_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeQueryCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeQueryCmd_descriptor_;
  metadata.reflection = ChargeQueryCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DepositCardInfo::kCmdFieldNumber;
const int DepositCardInfo::kParamFieldNumber;
const int DepositCardInfo::kCardDatasFieldNumber;
#endif  // !_MSC_VER

DepositCardInfo::DepositCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DepositCardInfo)
}

void DepositCardInfo::InitAsDefaultInstance() {
}

DepositCardInfo::DepositCardInfo(const DepositCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DepositCardInfo)
}

void DepositCardInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DepositCardInfo::~DepositCardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.DepositCardInfo)
  SharedDtor();
}

void DepositCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DepositCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DepositCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DepositCardInfo_descriptor_;
}

const DepositCardInfo& DepositCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DepositCardInfo* DepositCardInfo::default_instance_ = NULL;

DepositCardInfo* DepositCardInfo::New() const {
  return new DepositCardInfo;
}

void DepositCardInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 9;
  }
  card_datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DepositCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DepositCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEPOSIT_CARD_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_datas;
        break;
      }

      // repeated .Cmd.DepositTypeData card_datas = 3;
      case 3: {
        if (tag == 26) {
         parse_card_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_card_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card_datas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DepositCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DepositCardInfo)
  return false;
#undef DO_
}

void DepositCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DepositCardInfo)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEPOSIT_CARD_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.DepositTypeData card_datas = 3;
  for (int i = 0; i < this->card_datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card_datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DepositCardInfo)
}

::google::protobuf::uint8* DepositCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DepositCardInfo)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEPOSIT_CARD_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.DepositTypeData card_datas = 3;
  for (int i = 0; i < this->card_datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card_datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DepositCardInfo)
  return target;
}

int DepositCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEPOSIT_CARD_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.DepositTypeData card_datas = 3;
  total_size += 1 * this->card_datas_size();
  for (int i = 0; i < this->card_datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->card_datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DepositCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DepositCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DepositCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DepositCardInfo::MergeFrom(const DepositCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_datas_.MergeFrom(from.card_datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DepositCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DepositCardInfo::CopyFrom(const DepositCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DepositCardInfo::IsInitialized() const {

  return true;
}

void DepositCardInfo::Swap(DepositCardInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    card_datas_.Swap(&other->card_datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DepositCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DepositCardInfo_descriptor_;
  metadata.reflection = DepositCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelTransformUserEvent::kCmdFieldNumber;
const int DelTransformUserEvent::kParamFieldNumber;
#endif  // !_MSC_VER

DelTransformUserEvent::DelTransformUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DelTransformUserEvent)
}

void DelTransformUserEvent::InitAsDefaultInstance() {
}

DelTransformUserEvent::DelTransformUserEvent(const DelTransformUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DelTransformUserEvent)
}

void DelTransformUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 10;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelTransformUserEvent::~DelTransformUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.DelTransformUserEvent)
  SharedDtor();
}

void DelTransformUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelTransformUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTransformUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelTransformUserEvent_descriptor_;
}

const DelTransformUserEvent& DelTransformUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DelTransformUserEvent* DelTransformUserEvent::default_instance_ = NULL;

DelTransformUserEvent* DelTransformUserEvent::New() const {
  return new DelTransformUserEvent;
}

void DelTransformUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 10;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelTransformUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DelTransformUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEL_TRANSFORM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DelTransformUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DelTransformUserEvent)
  return false;
#undef DO_
}

void DelTransformUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DelTransformUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEL_TRANSFORM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DelTransformUserEvent)
}

::google::protobuf::uint8* DelTransformUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DelTransformUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEL_TRANSFORM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DelTransformUserEvent)
  return target;
}

int DelTransformUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_DEL_TRANSFORM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTransformUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelTransformUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelTransformUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelTransformUserEvent::MergeFrom(const DelTransformUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelTransformUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTransformUserEvent::CopyFrom(const DelTransformUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTransformUserEvent::IsInitialized() const {

  return true;
}

void DelTransformUserEvent::Swap(DelTransformUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelTransformUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelTransformUserEvent_descriptor_;
  metadata.reflection = DelTransformUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteCatFailUserEvent::kCmdFieldNumber;
const int InviteCatFailUserEvent::kParamFieldNumber;
#endif  // !_MSC_VER

InviteCatFailUserEvent::InviteCatFailUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InviteCatFailUserEvent)
}

void InviteCatFailUserEvent::InitAsDefaultInstance() {
}

InviteCatFailUserEvent::InviteCatFailUserEvent(const InviteCatFailUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InviteCatFailUserEvent)
}

void InviteCatFailUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 11;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteCatFailUserEvent::~InviteCatFailUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.InviteCatFailUserEvent)
  SharedDtor();
}

void InviteCatFailUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteCatFailUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteCatFailUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteCatFailUserEvent_descriptor_;
}

const InviteCatFailUserEvent& InviteCatFailUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

InviteCatFailUserEvent* InviteCatFailUserEvent::default_instance_ = NULL;

InviteCatFailUserEvent* InviteCatFailUserEvent::New() const {
  return new InviteCatFailUserEvent;
}

void InviteCatFailUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 11;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteCatFailUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InviteCatFailUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INVITECAT_FAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InviteCatFailUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InviteCatFailUserEvent)
  return false;
#undef DO_
}

void InviteCatFailUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InviteCatFailUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INVITECAT_FAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InviteCatFailUserEvent)
}

::google::protobuf::uint8* InviteCatFailUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InviteCatFailUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INVITECAT_FAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InviteCatFailUserEvent)
  return target;
}

int InviteCatFailUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INVITECAT_FAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteCatFailUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteCatFailUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteCatFailUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteCatFailUserEvent::MergeFrom(const InviteCatFailUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteCatFailUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteCatFailUserEvent::CopyFrom(const InviteCatFailUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteCatFailUserEvent::IsInitialized() const {

  return true;
}

void InviteCatFailUserEvent::Swap(InviteCatFailUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteCatFailUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteCatFailUserEvent_descriptor_;
  metadata.reflection = InviteCatFailUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrigNpcFuncUserEvent::kCmdFieldNumber;
const int TrigNpcFuncUserEvent::kParamFieldNumber;
const int TrigNpcFuncUserEvent::kNpcguidFieldNumber;
const int TrigNpcFuncUserEvent::kFuncidFieldNumber;
#endif  // !_MSC_VER

TrigNpcFuncUserEvent::TrigNpcFuncUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TrigNpcFuncUserEvent)
}

void TrigNpcFuncUserEvent::InitAsDefaultInstance() {
}

TrigNpcFuncUserEvent::TrigNpcFuncUserEvent(const TrigNpcFuncUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TrigNpcFuncUserEvent)
}

void TrigNpcFuncUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 12;
  npcguid_ = GOOGLE_ULONGLONG(0);
  funcid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrigNpcFuncUserEvent::~TrigNpcFuncUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.TrigNpcFuncUserEvent)
  SharedDtor();
}

void TrigNpcFuncUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrigNpcFuncUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrigNpcFuncUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrigNpcFuncUserEvent_descriptor_;
}

const TrigNpcFuncUserEvent& TrigNpcFuncUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

TrigNpcFuncUserEvent* TrigNpcFuncUserEvent::default_instance_ = NULL;

TrigNpcFuncUserEvent* TrigNpcFuncUserEvent::New() const {
  return new TrigNpcFuncUserEvent;
}

void TrigNpcFuncUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrigNpcFuncUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(npcguid_, funcid_);
    cmd_ = 25;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrigNpcFuncUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TrigNpcFuncUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NPC_FUNCTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // required uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_funcid;
        break;
      }

      // required uint32 funcid = 4;
      case 4: {
        if (tag == 32) {
         parse_funcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funcid_)));
          set_has_funcid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TrigNpcFuncUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TrigNpcFuncUserEvent)
  return false;
#undef DO_
}

void TrigNpcFuncUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TrigNpcFuncUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NPC_FUNCTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // required uint32 funcid = 4;
  if (has_funcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->funcid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TrigNpcFuncUserEvent)
}

::google::protobuf::uint8* TrigNpcFuncUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TrigNpcFuncUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NPC_FUNCTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // required uint32 funcid = 4;
  if (has_funcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->funcid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TrigNpcFuncUserEvent)
  return target;
}

int TrigNpcFuncUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NPC_FUNCTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // required uint32 funcid = 4;
    if (has_funcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funcid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrigNpcFuncUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrigNpcFuncUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrigNpcFuncUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrigNpcFuncUserEvent::MergeFrom(const TrigNpcFuncUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_funcid()) {
      set_funcid(from.funcid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrigNpcFuncUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrigNpcFuncUserEvent::CopyFrom(const TrigNpcFuncUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigNpcFuncUserEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;

  return true;
}

void TrigNpcFuncUserEvent::Swap(TrigNpcFuncUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(funcid_, other->funcid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrigNpcFuncUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrigNpcFuncUserEvent_descriptor_;
  metadata.reflection = TrigNpcFuncUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemStringUserEvent::kCmdFieldNumber;
const int SystemStringUserEvent::kParamFieldNumber;
const int SystemStringUserEvent::kEtypeFieldNumber;
#endif  // !_MSC_VER

SystemStringUserEvent::SystemStringUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SystemStringUserEvent)
}

void SystemStringUserEvent::InitAsDefaultInstance() {
}

SystemStringUserEvent::SystemStringUserEvent(const SystemStringUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SystemStringUserEvent)
}

void SystemStringUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 13;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemStringUserEvent::~SystemStringUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.SystemStringUserEvent)
  SharedDtor();
}

void SystemStringUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SystemStringUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemStringUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemStringUserEvent_descriptor_;
}

const SystemStringUserEvent& SystemStringUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

SystemStringUserEvent* SystemStringUserEvent::default_instance_ = NULL;

SystemStringUserEvent* SystemStringUserEvent::New() const {
  return new SystemStringUserEvent;
}

void SystemStringUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 25;
    param_ = 13;
    etype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemStringUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SystemStringUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_SYSTEM_STRING];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // optional .Cmd.ESystemStringType etype = 3 [default = ESYSTEMSTRING_MIN];
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESystemStringType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::ESystemStringType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SystemStringUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SystemStringUserEvent)
  return false;
#undef DO_
}

void SystemStringUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SystemStringUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_SYSTEM_STRING];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ESystemStringType etype = 3 [default = ESYSTEMSTRING_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SystemStringUserEvent)
}

::google::protobuf::uint8* SystemStringUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SystemStringUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_SYSTEM_STRING];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ESystemStringType etype = 3 [default = ESYSTEMSTRING_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SystemStringUserEvent)
  return target;
}

int SystemStringUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_SYSTEM_STRING];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ESystemStringType etype = 3 [default = ESYSTEMSTRING_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStringUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemStringUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemStringUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemStringUserEvent::MergeFrom(const SystemStringUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemStringUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStringUserEvent::CopyFrom(const SystemStringUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStringUserEvent::IsInitialized() const {

  return true;
}

void SystemStringUserEvent::Swap(SystemStringUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemStringUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemStringUserEvent_descriptor_;
  metadata.reflection = SystemStringUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HandCatUserEvent::kCmdFieldNumber;
const int HandCatUserEvent::kParamFieldNumber;
const int HandCatUserEvent::kCatguidFieldNumber;
const int HandCatUserEvent::kBreakupFieldNumber;
#endif  // !_MSC_VER

HandCatUserEvent::HandCatUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.HandCatUserEvent)
}

void HandCatUserEvent::InitAsDefaultInstance() {
}

HandCatUserEvent::HandCatUserEvent(const HandCatUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.HandCatUserEvent)
}

void HandCatUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 14;
  catguid_ = GOOGLE_ULONGLONG(0);
  breakup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HandCatUserEvent::~HandCatUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.HandCatUserEvent)
  SharedDtor();
}

void HandCatUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HandCatUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HandCatUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HandCatUserEvent_descriptor_;
}

const HandCatUserEvent& HandCatUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

HandCatUserEvent* HandCatUserEvent::default_instance_ = NULL;

HandCatUserEvent* HandCatUserEvent::New() const {
  return new HandCatUserEvent;
}

void HandCatUserEvent::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<HandCatUserEvent*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(catguid_, breakup_);
    cmd_ = 25;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HandCatUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.HandCatUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_HAND_CAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_catguid;
        break;
      }

      // required uint64 catguid = 3;
      case 3: {
        if (tag == 24) {
         parse_catguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &catguid_)));
          set_has_catguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_breakup;
        break;
      }

      // optional bool breakup = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_breakup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &breakup_)));
          set_has_breakup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.HandCatUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.HandCatUserEvent)
  return false;
#undef DO_
}

void HandCatUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.HandCatUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_HAND_CAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 catguid = 3;
  if (has_catguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->catguid(), output);
  }

  // optional bool breakup = 4 [default = false];
  if (has_breakup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->breakup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.HandCatUserEvent)
}

::google::protobuf::uint8* HandCatUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.HandCatUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_HAND_CAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 catguid = 3;
  if (has_catguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->catguid(), target);
  }

  // optional bool breakup = 4 [default = false];
  if (has_breakup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->breakup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.HandCatUserEvent)
  return target;
}

int HandCatUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_HAND_CAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 catguid = 3;
    if (has_catguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->catguid());
    }

    // optional bool breakup = 4 [default = false];
    if (has_breakup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HandCatUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HandCatUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HandCatUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HandCatUserEvent::MergeFrom(const HandCatUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_catguid()) {
      set_catguid(from.catguid());
    }
    if (from.has_breakup()) {
      set_breakup(from.breakup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HandCatUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HandCatUserEvent::CopyFrom(const HandCatUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HandCatUserEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void HandCatUserEvent::Swap(HandCatUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(catguid_, other->catguid_);
    std::swap(breakup_, other->breakup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HandCatUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HandCatUserEvent_descriptor_;
  metadata.reflection = HandCatUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeTitle::kCmdFieldNumber;
const int ChangeTitle::kParamFieldNumber;
const int ChangeTitle::kTitleDataFieldNumber;
const int ChangeTitle::kCharidFieldNumber;
#endif  // !_MSC_VER

ChangeTitle::ChangeTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChangeTitle)
}

void ChangeTitle::InitAsDefaultInstance() {
  title_data_ = const_cast< ::Cmd::TitleData*>(&::Cmd::TitleData::default_instance());
}

ChangeTitle::ChangeTitle(const ChangeTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChangeTitle)
}

void ChangeTitle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 15;
  title_data_ = NULL;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeTitle::~ChangeTitle() {
  // @@protoc_insertion_point(destructor:Cmd.ChangeTitle)
  SharedDtor();
}

void ChangeTitle::SharedDtor() {
  if (this != default_instance_) {
    delete title_data_;
  }
}

void ChangeTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeTitle_descriptor_;
}

const ChangeTitle& ChangeTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

ChangeTitle* ChangeTitle::default_instance_ = NULL;

ChangeTitle* ChangeTitle::New() const {
  return new ChangeTitle;
}

void ChangeTitle::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 25;
    param_ = 15;
    if (has_title_data()) {
      if (title_data_ != NULL) title_data_->::Cmd::TitleData::Clear();
    }
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChangeTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHANGE_TITLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_title_data;
        break;
      }

      // optional .Cmd.TitleData title_data = 3;
      case 3: {
        if (tag == 26) {
         parse_title_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4;
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChangeTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChangeTitle)
  return false;
#undef DO_
}

void ChangeTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChangeTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHANGE_TITLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.TitleData title_data = 3;
  if (has_title_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->title_data(), output);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChangeTitle)
}

::google::protobuf::uint8* ChangeTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChangeTitle)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHANGE_TITLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.TitleData title_data = 3;
  if (has_title_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->title_data(), target);
  }

  // optional uint64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChangeTitle)
  return target;
}

int ChangeTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_CHANGE_TITLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.TitleData title_data = 3;
    if (has_title_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title_data());
    }

    // optional uint64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeTitle::MergeFrom(const ChangeTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_title_data()) {
      mutable_title_data()->::Cmd::TitleData::MergeFrom(from.title_data());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeTitle::CopyFrom(const ChangeTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTitle::IsInitialized() const {

  return true;
}

void ChangeTitle::Swap(ChangeTitle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(title_data_, other->title_data_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeTitle_descriptor_;
  metadata.reflection = ChangeTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeCntInfo::kDataidFieldNumber;
const int ChargeCntInfo::kCountFieldNumber;
const int ChargeCntInfo::kLimitFieldNumber;
#endif  // !_MSC_VER

ChargeCntInfo::ChargeCntInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChargeCntInfo)
}

void ChargeCntInfo::InitAsDefaultInstance() {
}

ChargeCntInfo::ChargeCntInfo(const ChargeCntInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChargeCntInfo)
}

void ChargeCntInfo::SharedCtor() {
  _cached_size_ = 0;
  dataid_ = 0u;
  count_ = 0u;
  limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeCntInfo::~ChargeCntInfo() {
  // @@protoc_insertion_point(destructor:Cmd.ChargeCntInfo)
  SharedDtor();
}

void ChargeCntInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeCntInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeCntInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeCntInfo_descriptor_;
}

const ChargeCntInfo& ChargeCntInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

ChargeCntInfo* ChargeCntInfo::default_instance_ = NULL;

ChargeCntInfo* ChargeCntInfo::New() const {
  return new ChargeCntInfo;
}

void ChargeCntInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChargeCntInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(dataid_, limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeCntInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChargeCntInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dataid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dataid_)));
          set_has_dataid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_limit;
        break;
      }

      // optional uint32 limit = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChargeCntInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChargeCntInfo)
  return false;
#undef DO_
}

void ChargeCntInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChargeCntInfo)
  // optional uint32 dataid = 1;
  if (has_dataid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dataid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  // optional uint32 limit = 3 [default = 0];
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChargeCntInfo)
}

::google::protobuf::uint8* ChargeCntInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChargeCntInfo)
  // optional uint32 dataid = 1;
  if (has_dataid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dataid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  // optional uint32 limit = 3 [default = 0];
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChargeCntInfo)
  return target;
}

int ChargeCntInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dataid = 1;
    if (has_dataid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dataid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 limit = 3 [default = 0];
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeCntInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeCntInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeCntInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeCntInfo::MergeFrom(const ChargeCntInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dataid()) {
      set_dataid(from.dataid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeCntInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeCntInfo::CopyFrom(const ChargeCntInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeCntInfo::IsInitialized() const {

  return true;
}

void ChargeCntInfo::Swap(ChargeCntInfo* other) {
  if (other != this) {
    std::swap(dataid_, other->dataid_);
    std::swap(count_, other->count_);
    std::swap(limit_, other->limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeCntInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeCntInfo_descriptor_;
  metadata.reflection = ChargeCntInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryChargeCnt::kCmdFieldNumber;
const int QueryChargeCnt::kParamFieldNumber;
const int QueryChargeCnt::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryChargeCnt::QueryChargeCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryChargeCnt)
}

void QueryChargeCnt::InitAsDefaultInstance() {
}

QueryChargeCnt::QueryChargeCnt(const QueryChargeCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryChargeCnt)
}

void QueryChargeCnt::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 16;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryChargeCnt::~QueryChargeCnt() {
  // @@protoc_insertion_point(destructor:Cmd.QueryChargeCnt)
  SharedDtor();
}

void QueryChargeCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryChargeCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryChargeCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryChargeCnt_descriptor_;
}

const QueryChargeCnt& QueryChargeCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

QueryChargeCnt* QueryChargeCnt::default_instance_ = NULL;

QueryChargeCnt* QueryChargeCnt::New() const {
  return new QueryChargeCnt;
}

void QueryChargeCnt::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 16;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryChargeCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryChargeCnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_CHARGE_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .Cmd.ChargeCntInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryChargeCnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryChargeCnt)
  return false;
#undef DO_
}

void QueryChargeCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryChargeCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_CHARGE_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ChargeCntInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryChargeCnt)
}

::google::protobuf::uint8* QueryChargeCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryChargeCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_CHARGE_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ChargeCntInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryChargeCnt)
  return target;
}

int QueryChargeCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_CHARGE_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ChargeCntInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryChargeCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryChargeCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryChargeCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryChargeCnt::MergeFrom(const QueryChargeCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryChargeCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryChargeCnt::CopyFrom(const QueryChargeCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryChargeCnt::IsInitialized() const {

  return true;
}

void QueryChargeCnt::Swap(QueryChargeCnt* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryChargeCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryChargeCnt_descriptor_;
  metadata.reflection = QueryChargeCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFMonthCardEnd::kCmdFieldNumber;
const int NTFMonthCardEnd::kParamFieldNumber;
#endif  // !_MSC_VER

NTFMonthCardEnd::NTFMonthCardEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NTFMonthCardEnd)
}

void NTFMonthCardEnd::InitAsDefaultInstance() {
}

NTFMonthCardEnd::NTFMonthCardEnd(const NTFMonthCardEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NTFMonthCardEnd)
}

void NTFMonthCardEnd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 17;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFMonthCardEnd::~NTFMonthCardEnd() {
  // @@protoc_insertion_point(destructor:Cmd.NTFMonthCardEnd)
  SharedDtor();
}

void NTFMonthCardEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFMonthCardEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFMonthCardEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFMonthCardEnd_descriptor_;
}

const NTFMonthCardEnd& NTFMonthCardEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

NTFMonthCardEnd* NTFMonthCardEnd::default_instance_ = NULL;

NTFMonthCardEnd* NTFMonthCardEnd::New() const {
  return new NTFMonthCardEnd;
}

void NTFMonthCardEnd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 17;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFMonthCardEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NTFMonthCardEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_MONTHCARD_END];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NTFMonthCardEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NTFMonthCardEnd)
  return false;
#undef DO_
}

void NTFMonthCardEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NTFMonthCardEnd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_MONTHCARD_END];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NTFMonthCardEnd)
}

::google::protobuf::uint8* NTFMonthCardEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NTFMonthCardEnd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_MONTHCARD_END];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NTFMonthCardEnd)
  return target;
}

int NTFMonthCardEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_MONTHCARD_END];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFMonthCardEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFMonthCardEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFMonthCardEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFMonthCardEnd::MergeFrom(const NTFMonthCardEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFMonthCardEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFMonthCardEnd::CopyFrom(const NTFMonthCardEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFMonthCardEnd::IsInitialized() const {

  return true;
}

void NTFMonthCardEnd::Swap(NTFMonthCardEnd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFMonthCardEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFMonthCardEnd_descriptor_;
  metadata.reflection = NTFMonthCardEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoveLetterUse::kCmdFieldNumber;
const int LoveLetterUse::kParamFieldNumber;
const int LoveLetterUse::kItemguidFieldNumber;
const int LoveLetterUse::kTargetsFieldNumber;
const int LoveLetterUse::kContentFieldNumber;
const int LoveLetterUse::kTypeFieldNumber;
#endif  // !_MSC_VER

LoveLetterUse::LoveLetterUse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LoveLetterUse)
}

void LoveLetterUse::InitAsDefaultInstance() {
}

LoveLetterUse::LoveLetterUse(const LoveLetterUse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LoveLetterUse)
}

void LoveLetterUse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 18;
  itemguid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  targets_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 3;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoveLetterUse::~LoveLetterUse() {
  // @@protoc_insertion_point(destructor:Cmd.LoveLetterUse)
  SharedDtor();
}

void LoveLetterUse::SharedDtor() {
  if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete itemguid_;
  }
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void LoveLetterUse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoveLetterUse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoveLetterUse_descriptor_;
}

const LoveLetterUse& LoveLetterUse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

LoveLetterUse* LoveLetterUse::default_instance_ = NULL;

LoveLetterUse* LoveLetterUse::New() const {
  return new LoveLetterUse;
}

void LoveLetterUse::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 25;
    param_ = 18;
    if (has_itemguid()) {
      if (itemguid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        itemguid_->clear();
      }
    }
    targets_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    type_ = 3;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoveLetterUse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LoveLetterUse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LOVELETTER_USE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_itemguid;
        break;
      }

      // optional string itemguid = 3;
      case 3: {
        if (tag == 26) {
         parse_itemguid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemguid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemguid().data(), this->itemguid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "itemguid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targets;
        break;
      }

      // optional uint64 targets = 4;
      case 4: {
        if (tag == 32) {
         parse_targets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targets_)));
          set_has_targets();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional string content = 5;
      case 5: {
        if (tag == 42) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ELetterType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ELetterType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LoveLetterUse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LoveLetterUse)
  return false;
#undef DO_
}

void LoveLetterUse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LoveLetterUse)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LOVELETTER_USE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->itemguid(), output);
  }

  // optional uint64 targets = 4;
  if (has_targets()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targets(), output);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->content(), output);
  }

  // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LoveLetterUse)
}

::google::protobuf::uint8* LoveLetterUse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LoveLetterUse)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LOVELETTER_USE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string itemguid = 3;
  if (has_itemguid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemguid().data(), this->itemguid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "itemguid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemguid(), target);
  }

  // optional uint64 targets = 4;
  if (has_targets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targets(), target);
  }

  // optional string content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->content(), target);
  }

  // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LoveLetterUse)
  return target;
}

int LoveLetterUse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LOVELETTER_USE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string itemguid = 3;
    if (has_itemguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemguid());
    }

    // optional uint64 targets = 4;
    if (has_targets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targets());
    }

    // optional string content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .Cmd.ELetterType type = 6 [default = ELETTERTYPE_CHRISTMAS];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoveLetterUse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoveLetterUse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoveLetterUse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoveLetterUse::MergeFrom(const LoveLetterUse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_itemguid()) {
      set_itemguid(from.itemguid());
    }
    if (from.has_targets()) {
      set_targets(from.targets());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoveLetterUse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoveLetterUse::CopyFrom(const LoveLetterUse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoveLetterUse::IsInitialized() const {

  return true;
}

void LoveLetterUse::Swap(LoveLetterUse* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(itemguid_, other->itemguid_);
    std::swap(targets_, other->targets_);
    std::swap(content_, other->content_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoveLetterUse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoveLetterUse_descriptor_;
  metadata.reflection = LoveLetterUse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityCntItem::kActivityidFieldNumber;
const int ActivityCntItem::kCountFieldNumber;
#endif  // !_MSC_VER

ActivityCntItem::ActivityCntItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ActivityCntItem)
}

void ActivityCntItem::InitAsDefaultInstance() {
}

ActivityCntItem::ActivityCntItem(const ActivityCntItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ActivityCntItem)
}

void ActivityCntItem::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityCntItem::~ActivityCntItem() {
  // @@protoc_insertion_point(destructor:Cmd.ActivityCntItem)
  SharedDtor();
}

void ActivityCntItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityCntItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityCntItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityCntItem_descriptor_;
}

const ActivityCntItem& ActivityCntItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

ActivityCntItem* ActivityCntItem::default_instance_ = NULL;

ActivityCntItem* ActivityCntItem::New() const {
  return new ActivityCntItem;
}

void ActivityCntItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ActivityCntItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(activityid_, count_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityCntItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ActivityCntItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (tag == 16) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ActivityCntItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ActivityCntItem)
  return false;
#undef DO_
}

void ActivityCntItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ActivityCntItem)
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ActivityCntItem)
}

::google::protobuf::uint8* ActivityCntItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ActivityCntItem)
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ActivityCntItem)
  return target;
}

int ActivityCntItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityCntItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityCntItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityCntItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityCntItem::MergeFrom(const ActivityCntItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityCntItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityCntItem::CopyFrom(const ActivityCntItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityCntItem::IsInitialized() const {

  return true;
}

void ActivityCntItem::Swap(ActivityCntItem* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityCntItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityCntItem_descriptor_;
  metadata.reflection = ActivityCntItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryActivityCnt::kCmdFieldNumber;
const int QueryActivityCnt::kParamFieldNumber;
const int QueryActivityCnt::kInfoFieldNumber;
#endif  // !_MSC_VER

QueryActivityCnt::QueryActivityCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryActivityCnt)
}

void QueryActivityCnt::InitAsDefaultInstance() {
}

QueryActivityCnt::QueryActivityCnt(const QueryActivityCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryActivityCnt)
}

void QueryActivityCnt::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 19;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryActivityCnt::~QueryActivityCnt() {
  // @@protoc_insertion_point(destructor:Cmd.QueryActivityCnt)
  SharedDtor();
}

void QueryActivityCnt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryActivityCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryActivityCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryActivityCnt_descriptor_;
}

const QueryActivityCnt& QueryActivityCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

QueryActivityCnt* QueryActivityCnt::default_instance_ = NULL;

QueryActivityCnt* QueryActivityCnt::New() const {
  return new QueryActivityCnt;
}

void QueryActivityCnt::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 19;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryActivityCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryActivityCnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_ACTIVITY_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .Cmd.ActivityCntItem info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryActivityCnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryActivityCnt)
  return false;
#undef DO_
}

void QueryActivityCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryActivityCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_ACTIVITY_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ActivityCntItem info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryActivityCnt)
}

::google::protobuf::uint8* QueryActivityCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryActivityCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_ACTIVITY_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ActivityCntItem info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryActivityCnt)
  return target;
}

int QueryActivityCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_ACTIVITY_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ActivityCntItem info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryActivityCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryActivityCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryActivityCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryActivityCnt::MergeFrom(const QueryActivityCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryActivityCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryActivityCnt::CopyFrom(const QueryActivityCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryActivityCnt::IsInitialized() const {

  return true;
}

void QueryActivityCnt::Swap(QueryActivityCnt* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryActivityCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryActivityCnt_descriptor_;
  metadata.reflection = QueryActivityCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateActivityCnt::kCmdFieldNumber;
const int UpdateActivityCnt::kParamFieldNumber;
const int UpdateActivityCnt::kInfoFieldNumber;
#endif  // !_MSC_VER

UpdateActivityCnt::UpdateActivityCnt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateActivityCnt)
}

void UpdateActivityCnt::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::ActivityCntItem*>(&::Cmd::ActivityCntItem::default_instance());
}

UpdateActivityCnt::UpdateActivityCnt(const UpdateActivityCnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateActivityCnt)
}

void UpdateActivityCnt::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 20;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateActivityCnt::~UpdateActivityCnt() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateActivityCnt)
  SharedDtor();
}

void UpdateActivityCnt::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UpdateActivityCnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateActivityCnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateActivityCnt_descriptor_;
}

const UpdateActivityCnt& UpdateActivityCnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

UpdateActivityCnt* UpdateActivityCnt::default_instance_ = NULL;

UpdateActivityCnt* UpdateActivityCnt::New() const {
  return new UpdateActivityCnt;
}

void UpdateActivityCnt::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 25;
    param_ = 20;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::ActivityCntItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateActivityCnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateActivityCnt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_ACTIVITY_CNT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Cmd.ActivityCntItem info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateActivityCnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateActivityCnt)
  return false;
#undef DO_
}

void UpdateActivityCnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateActivityCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_ACTIVITY_CNT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ActivityCntItem info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateActivityCnt)
}

::google::protobuf::uint8* UpdateActivityCnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateActivityCnt)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_ACTIVITY_CNT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ActivityCntItem info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateActivityCnt)
  return target;
}

int UpdateActivityCnt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_UPDATE_ACTIVITY_CNT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ActivityCntItem info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateActivityCnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateActivityCnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateActivityCnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateActivityCnt::MergeFrom(const UpdateActivityCnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::ActivityCntItem::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateActivityCnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateActivityCnt::CopyFrom(const UpdateActivityCnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateActivityCnt::IsInitialized() const {

  return true;
}

void UpdateActivityCnt::Swap(UpdateActivityCnt* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateActivityCnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateActivityCnt_descriptor_;
  metadata.reflection = UpdateActivityCnt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VersionCardInfo::kVersionFieldNumber;
const int VersionCardInfo::kId1FieldNumber;
const int VersionCardInfo::kId2FieldNumber;
#endif  // !_MSC_VER

VersionCardInfo::VersionCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.VersionCardInfo)
}

void VersionCardInfo::InitAsDefaultInstance() {
}

VersionCardInfo::VersionCardInfo(const VersionCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.VersionCardInfo)
}

void VersionCardInfo::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  id1_ = 0u;
  id2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VersionCardInfo::~VersionCardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.VersionCardInfo)
  SharedDtor();
}

void VersionCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VersionCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VersionCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VersionCardInfo_descriptor_;
}

const VersionCardInfo& VersionCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

VersionCardInfo* VersionCardInfo::default_instance_ = NULL;

VersionCardInfo* VersionCardInfo::New() const {
  return new VersionCardInfo;
}

void VersionCardInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VersionCardInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, id2_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VersionCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.VersionCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id1;
        break;
      }

      // optional uint32 id1 = 2;
      case 2: {
        if (tag == 16) {
         parse_id1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id2;
        break;
      }

      // optional uint32 id2 = 3;
      case 3: {
        if (tag == 24) {
         parse_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.VersionCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.VersionCardInfo)
  return false;
#undef DO_
}

void VersionCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.VersionCardInfo)
  // optional uint32 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // optional uint32 id1 = 2;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id1(), output);
  }

  // optional uint32 id2 = 3;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.VersionCardInfo)
}

::google::protobuf::uint8* VersionCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.VersionCardInfo)
  // optional uint32 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // optional uint32 id1 = 2;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id1(), target);
  }

  // optional uint32 id2 = 3;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.VersionCardInfo)
  return target;
}

int VersionCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 id1 = 2;
    if (has_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id1());
    }

    // optional uint32 id2 = 3;
    if (has_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VersionCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VersionCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VersionCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VersionCardInfo::MergeFrom(const VersionCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_id1()) {
      set_id1(from.id1());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VersionCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionCardInfo::CopyFrom(const VersionCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionCardInfo::IsInitialized() const {

  return true;
}

void VersionCardInfo::Swap(VersionCardInfo* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(id1_, other->id1_);
    std::swap(id2_, other->id2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VersionCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VersionCardInfo_descriptor_;
  metadata.reflection = VersionCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NtfVersionCardInfo::kCmdFieldNumber;
const int NtfVersionCardInfo::kParamFieldNumber;
const int NtfVersionCardInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

NtfVersionCardInfo::NtfVersionCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NtfVersionCardInfo)
}

void NtfVersionCardInfo::InitAsDefaultInstance() {
}

NtfVersionCardInfo::NtfVersionCardInfo(const NtfVersionCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NtfVersionCardInfo)
}

void NtfVersionCardInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 23;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NtfVersionCardInfo::~NtfVersionCardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.NtfVersionCardInfo)
  SharedDtor();
}

void NtfVersionCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NtfVersionCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NtfVersionCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NtfVersionCardInfo_descriptor_;
}

const NtfVersionCardInfo& NtfVersionCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

NtfVersionCardInfo* NtfVersionCardInfo::default_instance_ = NULL;

NtfVersionCardInfo* NtfVersionCardInfo::New() const {
  return new NtfVersionCardInfo;
}

void NtfVersionCardInfo::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 23;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NtfVersionCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NtfVersionCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_VERSION_CARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .Cmd.VersionCardInfo info = 3;
      case 3: {
        if (tag == 26) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NtfVersionCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NtfVersionCardInfo)
  return false;
#undef DO_
}

void NtfVersionCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NtfVersionCardInfo)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_VERSION_CARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.VersionCardInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NtfVersionCardInfo)
}

::google::protobuf::uint8* NtfVersionCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NtfVersionCardInfo)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_VERSION_CARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.VersionCardInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NtfVersionCardInfo)
  return target;
}

int NtfVersionCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_NTF_VERSION_CARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.VersionCardInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NtfVersionCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NtfVersionCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NtfVersionCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NtfVersionCardInfo::MergeFrom(const NtfVersionCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NtfVersionCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NtfVersionCardInfo::CopyFrom(const NtfVersionCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NtfVersionCardInfo::IsInitialized() const {

  return true;
}

void NtfVersionCardInfo::Swap(NtfVersionCardInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NtfVersionCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NtfVersionCardInfo_descriptor_;
  metadata.reflection = NtfVersionCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DieTimeCountEventCmd::kCmdFieldNumber;
const int DieTimeCountEventCmd::kParamFieldNumber;
const int DieTimeCountEventCmd::kTimeFieldNumber;
const int DieTimeCountEventCmd::kNameFieldNumber;
#endif  // !_MSC_VER

DieTimeCountEventCmd::DieTimeCountEventCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DieTimeCountEventCmd)
}

void DieTimeCountEventCmd::InitAsDefaultInstance() {
}

DieTimeCountEventCmd::DieTimeCountEventCmd(const DieTimeCountEventCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DieTimeCountEventCmd)
}

void DieTimeCountEventCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 24;
  time_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DieTimeCountEventCmd::~DieTimeCountEventCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DieTimeCountEventCmd)
  SharedDtor();
}

void DieTimeCountEventCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DieTimeCountEventCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DieTimeCountEventCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DieTimeCountEventCmd_descriptor_;
}

const DieTimeCountEventCmd& DieTimeCountEventCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

DieTimeCountEventCmd* DieTimeCountEventCmd::default_instance_ = NULL;

DieTimeCountEventCmd* DieTimeCountEventCmd::New() const {
  return new DieTimeCountEventCmd;
}

void DieTimeCountEventCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 25;
    param_ = 24;
    time_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DieTimeCountEventCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DieTimeCountEventCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_WAIT_RELIVE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DieTimeCountEventCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DieTimeCountEventCmd)
  return false;
#undef DO_
}

void DieTimeCountEventCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DieTimeCountEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_WAIT_RELIVE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DieTimeCountEventCmd)
}

::google::protobuf::uint8* DieTimeCountEventCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DieTimeCountEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_WAIT_RELIVE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 time = 3 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DieTimeCountEventCmd)
  return target;
}

int DieTimeCountEventCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_WAIT_RELIVE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 time = 3 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DieTimeCountEventCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DieTimeCountEventCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DieTimeCountEventCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DieTimeCountEventCmd::MergeFrom(const DieTimeCountEventCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DieTimeCountEventCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DieTimeCountEventCmd::CopyFrom(const DieTimeCountEventCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DieTimeCountEventCmd::IsInitialized() const {

  return true;
}

void DieTimeCountEventCmd::Swap(DieTimeCountEventCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DieTimeCountEventCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DieTimeCountEventCmd_descriptor_;
  metadata.reflection = DieTimeCountEventCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetFirstShareRewardUserEvent::kCmdFieldNumber;
const int GetFirstShareRewardUserEvent::kParamFieldNumber;
#endif  // !_MSC_VER

GetFirstShareRewardUserEvent::GetFirstShareRewardUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetFirstShareRewardUserEvent)
}

void GetFirstShareRewardUserEvent::InitAsDefaultInstance() {
}

GetFirstShareRewardUserEvent::GetFirstShareRewardUserEvent(const GetFirstShareRewardUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetFirstShareRewardUserEvent)
}

void GetFirstShareRewardUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 22;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetFirstShareRewardUserEvent::~GetFirstShareRewardUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.GetFirstShareRewardUserEvent)
  SharedDtor();
}

void GetFirstShareRewardUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetFirstShareRewardUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetFirstShareRewardUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetFirstShareRewardUserEvent_descriptor_;
}

const GetFirstShareRewardUserEvent& GetFirstShareRewardUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

GetFirstShareRewardUserEvent* GetFirstShareRewardUserEvent::default_instance_ = NULL;

GetFirstShareRewardUserEvent* GetFirstShareRewardUserEvent::New() const {
  return new GetFirstShareRewardUserEvent;
}

void GetFirstShareRewardUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 22;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetFirstShareRewardUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetFirstShareRewardUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_GET_RECALL_SHARE_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetFirstShareRewardUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetFirstShareRewardUserEvent)
  return false;
#undef DO_
}

void GetFirstShareRewardUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetFirstShareRewardUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_GET_RECALL_SHARE_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetFirstShareRewardUserEvent)
}

::google::protobuf::uint8* GetFirstShareRewardUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetFirstShareRewardUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_GET_RECALL_SHARE_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetFirstShareRewardUserEvent)
  return target;
}

int GetFirstShareRewardUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_GET_RECALL_SHARE_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetFirstShareRewardUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetFirstShareRewardUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetFirstShareRewardUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetFirstShareRewardUserEvent::MergeFrom(const GetFirstShareRewardUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetFirstShareRewardUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetFirstShareRewardUserEvent::CopyFrom(const GetFirstShareRewardUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetFirstShareRewardUserEvent::IsInitialized() const {

  return true;
}

void GetFirstShareRewardUserEvent::Swap(GetFirstShareRewardUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetFirstShareRewardUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetFirstShareRewardUserEvent_descriptor_;
  metadata.reflection = GetFirstShareRewardUserEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryResetTimeEventCmd::kCmdFieldNumber;
const int QueryResetTimeEventCmd::kParamFieldNumber;
const int QueryResetTimeEventCmd::kEtypeFieldNumber;
const int QueryResetTimeEventCmd::kResettimeFieldNumber;
#endif  // !_MSC_VER

QueryResetTimeEventCmd::QueryResetTimeEventCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryResetTimeEventCmd)
}

void QueryResetTimeEventCmd::InitAsDefaultInstance() {
}

QueryResetTimeEventCmd::QueryResetTimeEventCmd(const QueryResetTimeEventCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryResetTimeEventCmd)
}

void QueryResetTimeEventCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 25;
  etype_ = 0;
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryResetTimeEventCmd::~QueryResetTimeEventCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryResetTimeEventCmd)
  SharedDtor();
}

void QueryResetTimeEventCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryResetTimeEventCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryResetTimeEventCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryResetTimeEventCmd_descriptor_;
}

const QueryResetTimeEventCmd& QueryResetTimeEventCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

QueryResetTimeEventCmd* QueryResetTimeEventCmd::default_instance_ = NULL;

QueryResetTimeEventCmd* QueryResetTimeEventCmd::New() const {
  return new QueryResetTimeEventCmd;
}

void QueryResetTimeEventCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<QueryResetTimeEventCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(etype_, resettime_);
    cmd_ = 25;
    param_ = 25;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryResetTimeEventCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryResetTimeEventCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_RESETTIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_etype;
        break;
      }

      // required .Cmd.EAERewardMode etype = 3;
      case 3: {
        if (tag == 24) {
         parse_etype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAERewardMode_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EAERewardMode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryResetTimeEventCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryResetTimeEventCmd)
  return false;
#undef DO_
}

void QueryResetTimeEventCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryResetTimeEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_RESETTIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.EAERewardMode etype = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // optional uint32 resettime = 4 [default = 0];
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryResetTimeEventCmd)
}

::google::protobuf::uint8* QueryResetTimeEventCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryResetTimeEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_RESETTIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.EAERewardMode etype = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // optional uint32 resettime = 4 [default = 0];
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryResetTimeEventCmd)
  return target;
}

int QueryResetTimeEventCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_QUERY_RESETTIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.EAERewardMode etype = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 resettime = 4 [default = 0];
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryResetTimeEventCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryResetTimeEventCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryResetTimeEventCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryResetTimeEventCmd::MergeFrom(const QueryResetTimeEventCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryResetTimeEventCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryResetTimeEventCmd::CopyFrom(const QueryResetTimeEventCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryResetTimeEventCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void QueryResetTimeEventCmd::Swap(QueryResetTimeEventCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryResetTimeEventCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryResetTimeEventCmd_descriptor_;
  metadata.reflection = QueryResetTimeEventCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InOutActEventCmd::kCmdFieldNumber;
const int InOutActEventCmd::kParamFieldNumber;
const int InOutActEventCmd::kActidFieldNumber;
const int InOutActEventCmd::kInoutFieldNumber;
#endif  // !_MSC_VER

InOutActEventCmd::InOutActEventCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InOutActEventCmd)
}

void InOutActEventCmd::InitAsDefaultInstance() {
}

InOutActEventCmd::InOutActEventCmd(const InOutActEventCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InOutActEventCmd)
}

void InOutActEventCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 26;
  actid_ = GOOGLE_ULONGLONG(0);
  inout_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InOutActEventCmd::~InOutActEventCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InOutActEventCmd)
  SharedDtor();
}

void InOutActEventCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InOutActEventCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InOutActEventCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InOutActEventCmd_descriptor_;
}

const InOutActEventCmd& InOutActEventCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

InOutActEventCmd* InOutActEventCmd::default_instance_ = NULL;

InOutActEventCmd* InOutActEventCmd::New() const {
  return new InOutActEventCmd;
}

void InOutActEventCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InOutActEventCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(actid_, inout_);
    cmd_ = 25;
    param_ = 26;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InOutActEventCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InOutActEventCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INOUT_ACT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actid;
        break;
      }

      // required uint64 actid = 3;
      case 3: {
        if (tag == 24) {
         parse_actid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inout;
        break;
      }

      // optional bool inout = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_inout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &inout_)));
          set_has_inout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InOutActEventCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InOutActEventCmd)
  return false;
#undef DO_
}

void InOutActEventCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InOutActEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INOUT_ACT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 actid = 3;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->actid(), output);
  }

  // optional bool inout = 4 [default = false];
  if (has_inout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->inout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InOutActEventCmd)
}

::google::protobuf::uint8* InOutActEventCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InOutActEventCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INOUT_ACT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 actid = 3;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->actid(), target);
  }

  // optional bool inout = 4 [default = false];
  if (has_inout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->inout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InOutActEventCmd)
  return target;
}

int InOutActEventCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_INOUT_ACT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 actid = 3;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->actid());
    }

    // optional bool inout = 4 [default = false];
    if (has_inout()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InOutActEventCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InOutActEventCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InOutActEventCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InOutActEventCmd::MergeFrom(const InOutActEventCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_inout()) {
      set_inout(from.inout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InOutActEventCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InOutActEventCmd::CopyFrom(const InOutActEventCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InOutActEventCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void InOutActEventCmd::Swap(InOutActEventCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(actid_, other->actid_);
    std::swap(inout_, other->inout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InOutActEventCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InOutActEventCmd_descriptor_;
  metadata.reflection = InOutActEventCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserEventMailCmd::kCmdFieldNumber;
const int UserEventMailCmd::kParamFieldNumber;
const int UserEventMailCmd::kETypeFieldNumber;
const int UserEventMailCmd::kParam32FieldNumber;
const int UserEventMailCmd::kParam64FieldNumber;
#endif  // !_MSC_VER

UserEventMailCmd::UserEventMailCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserEventMailCmd)
}

void UserEventMailCmd::InitAsDefaultInstance() {
}

UserEventMailCmd::UserEventMailCmd(const UserEventMailCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserEventMailCmd)
}

void UserEventMailCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 27;
  etype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserEventMailCmd::~UserEventMailCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserEventMailCmd)
  SharedDtor();
}

void UserEventMailCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserEventMailCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserEventMailCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserEventMailCmd_descriptor_;
}

const UserEventMailCmd& UserEventMailCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

UserEventMailCmd* UserEventMailCmd::default_instance_ = NULL;

UserEventMailCmd* UserEventMailCmd::New() const {
  return new UserEventMailCmd;
}

void UserEventMailCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 25;
    param_ = 27;
    etype_ = 0;
  }
  param32_.Clear();
  param64_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserEventMailCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserEventMailCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_MAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_eType;
        break;
      }

      // optional .Cmd.EEventMailType eType = 3 [default = EEVENTMAILTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EEventMailType_IsValid(value)) {
            set_etype(static_cast< ::Cmd::EEventMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param32;
        break;
      }

      // repeated uint32 param32 = 4;
      case 4: {
        if (tag == 32) {
         parse_param32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_param32())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_param32())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_param32;
        if (input->ExpectTag(40)) goto parse_param64;
        break;
      }

      // repeated uint64 param64 = 5;
      case 5: {
        if (tag == 40) {
         parse_param64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_param64())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_param64())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_param64;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserEventMailCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserEventMailCmd)
  return false;
#undef DO_
}

void UserEventMailCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserEventMailCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_MAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EEventMailType eType = 3 [default = EEVENTMAILTYPE_MIN];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  // repeated uint32 param32 = 4;
  for (int i = 0; i < this->param32_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->param32(i), output);
  }

  // repeated uint64 param64 = 5;
  for (int i = 0; i < this->param64_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->param64(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserEventMailCmd)
}

::google::protobuf::uint8* UserEventMailCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserEventMailCmd)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_MAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EEventMailType eType = 3 [default = EEVENTMAILTYPE_MIN];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  // repeated uint32 param32 = 4;
  for (int i = 0; i < this->param32_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->param32(i), target);
  }

  // repeated uint64 param64 = 5;
  for (int i = 0; i < this->param64_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->param64(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserEventMailCmd)
  return target;
}

int UserEventMailCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_MAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EEventMailType eType = 3 [default = EEVENTMAILTYPE_MIN];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  // repeated uint32 param32 = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->param32_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->param32(i));
    }
    total_size += 1 * this->param32_size() + data_size;
  }

  // repeated uint64 param64 = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->param64_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->param64(i));
    }
    total_size += 1 * this->param64_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserEventMailCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserEventMailCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserEventMailCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserEventMailCmd::MergeFrom(const UserEventMailCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  param32_.MergeFrom(from.param32_);
  param64_.MergeFrom(from.param64_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserEventMailCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserEventMailCmd::CopyFrom(const UserEventMailCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserEventMailCmd::IsInitialized() const {

  return true;
}

void UserEventMailCmd::Swap(UserEventMailCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(etype_, other->etype_);
    param32_.Swap(&other->param32_);
    param64_.Swap(&other->param64_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserEventMailCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserEventMailCmd_descriptor_;
  metadata.reflection = UserEventMailCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelupDeadUserEvent::kCmdFieldNumber;
const int LevelupDeadUserEvent::kParamFieldNumber;
#endif  // !_MSC_VER

LevelupDeadUserEvent::LevelupDeadUserEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelupDeadUserEvent)
}

void LevelupDeadUserEvent::InitAsDefaultInstance() {
}

LevelupDeadUserEvent::LevelupDeadUserEvent(const LevelupDeadUserEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelupDeadUserEvent)
}

void LevelupDeadUserEvent::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 25;
  param_ = 28;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelupDeadUserEvent::~LevelupDeadUserEvent() {
  // @@protoc_insertion_point(destructor:Cmd.LevelupDeadUserEvent)
  SharedDtor();
}

void LevelupDeadUserEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelupDeadUserEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelupDeadUserEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelupDeadUserEvent_descriptor_;
}

const LevelupDeadUserEvent& LevelupDeadUserEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_UserEvent_2eproto();
  return *default_instance_;
}

LevelupDeadUserEvent* LevelupDeadUserEvent::default_instance_ = NULL;

LevelupDeadUserEvent* LevelupDeadUserEvent::New() const {
  return new LevelupDeadUserEvent;
}

void LevelupDeadUserEvent::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 25;
    param_ = 28;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelupDeadUserEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelupDeadUserEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LEVELUP_DEAD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EventParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EventParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelupDeadUserEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelupDeadUserEvent)
  return false;
#undef DO_
}

void LevelupDeadUserEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelupDeadUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LEVELUP_DEAD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelupDeadUserEvent)
}

::google::protobuf::uint8* LevelupDeadUserEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelupDeadUserEvent)
  // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LEVELUP_DEAD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelupDeadUserEvent)
  return target;
}

int LevelupDeadUserEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = USER_EVENT_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EventParam param = 2 [default = USER_EVENT_LEVELUP_DEAD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelupDeadUserEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelupDeadUserEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelupDeadUserEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelupDeadUserEvent::MergeFrom(const LevelupDeadUserEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelupDeadUserEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelupDeadUserEvent::CopyFrom(const LevelupDeadUserEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelupDeadUserEvent::IsInitialized() const {

  return true;
}

void LevelupDeadUserEvent::Swap(LevelupDeadUserEvent* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelupDeadUserEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelupDeadUserEvent_descriptor_;
  metadata.reflection = LevelupDeadUserEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
