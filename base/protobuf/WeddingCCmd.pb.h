// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: WeddingCCmd.proto

#ifndef PROTOBUF_WeddingCCmd_2eproto__INCLUDED
#define PROTOBUF_WeddingCCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_WeddingCCmd_2eproto();
void protobuf_AssignDesc_WeddingCCmd_2eproto();
void protobuf_ShutdownFile_WeddingCCmd_2eproto();

class WeddingDateStatus;
class ReqWeddingDateListCCmd;
class WeddingOneDayInfo;
class ReqWeddingOneDayListCCmd;
class CharData;
class BirefWeddingInfo;
class ReqWeddingInfoCCmd;
class ReserveWeddingDateCCmd;
class NtfReserveWeddingDateCCmd;
class ReplyReserveWeddingDateCCmd;
class GiveUpReserveCCmd;
class ReqDivorceCCmd;
class ClientWeddingManual;
class WeddingInvitee;
class UpdateWeddingManualCCmd;
class BuyWeddingPackageCCmd;
class BuyWeddingRingCCmd;
class WeddingInviteCCmd;
class UploadWeddingPhotoCCmd;
class CheckCanReserveCCmd;
class ReqPartnerInfoCCmd;
class NtfWeddingInfoCCmd;
class InviteBeginWeddingCCmd;
class ReplyBeginWeddingCCmd;
class GoToWeddingPosCCmd;
class QuestionWeddingCCmd;
class AnswerWeddingCCmd;
class WeddingEventMsgCCmd;
class WeddingOverCCmd;
class WeddingSwitchQuestionCCmd;
class EnterRollerCoasterCCmd;
class DivorceRollerCoasterInviteCCmd;
class DivorceRollerCoasterReplyCCmd;
class EnterWeddingMapCCmd;
class MissyouInviteWedCCmd;
class MisccyouReplyWedCCmd;
class WeddingCarrierCCmd;

enum WeddingCParam {
  WEDDINGCPARAM_REQ_WEDDINGDATE_LIST = 1,
  WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST = 3,
  WEDDINGCPARAM_REQ_WEDDING_INFO = 4,
  WEDDINGCPARAM_RESERVE_WEDDINGDATE = 5,
  WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE = 6,
  WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE = 7,
  WEDDINGCPARAM_GIVEUP_RESERVE = 8,
  WEDDINGCPARAM_REQ_DIVORCE = 9,
  WEDDINGCPARAM_UPDATE_MANUAL = 10,
  WEDDINGCPARAM_BUY_PACKAGE = 11,
  WEDDINGCPARAM_BUY_RING = 12,
  WEDDINGCPARAM_INVITE = 13,
  WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO = 14,
  WEDDINGCPARAM_CHECK_CAN_RESERVE = 15,
  WEDDINGCPARAM_REQ_PARTNER_INFO = 16,
  WEDDINGCPARAM_NTF_WEDDING_INFO = 17,
  WEDDINGCPARAM_INVITE_WEDDING = 18,
  WEDDINGCPARAM_REPLY_WEDDING = 19,
  WEDDINGCPARAM_GOTO_WEDDINGPOS = 20,
  WEDDINGCPARAM_QUESTION = 21,
  WEDDINGCPARAM_ANSWER = 22,
  WEDDINGCPARAM_WEDDING_EVENT_MSG = 23,
  WEDDINGCPARAM_WEDDING_STOP = 24,
  WEDDINGCPARAM_QUESTION_SWITCH = 25,
  WEDDINGCPARAM_ENTER_ROLLER_COASTER = 26,
  WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE = 27,
  WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY = 28,
  WEDDINGCPARAM_ENTER_WEDDINGMAP = 29,
  WEDDINGCPARAM_MISSYOU_INVITE = 30,
  WEDDINGCPARAM_MISSYOU_REPLY = 31,
  WEDDINGCPARAM_CARRIER = 32
};
bool WeddingCParam_IsValid(int value);
const WeddingCParam WeddingCParam_MIN = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST;
const WeddingCParam WeddingCParam_MAX = WEDDINGCPARAM_CARRIER;
const int WeddingCParam_ARRAYSIZE = WeddingCParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* WeddingCParam_descriptor();
inline const ::std::string& WeddingCParam_Name(WeddingCParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    WeddingCParam_descriptor(), value);
}
inline bool WeddingCParam_Parse(
    const ::std::string& name, WeddingCParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WeddingCParam>(
    WeddingCParam_descriptor(), name, value);
}
enum EDateStatus {
  EDateStatus_None = 0,
  EDateStatus_Full = 1,
  EdateStatus_Hot = 2
};
bool EDateStatus_IsValid(int value);
const EDateStatus EDateStatus_MIN = EDateStatus_None;
const EDateStatus EDateStatus_MAX = EdateStatus_Hot;
const int EDateStatus_ARRAYSIZE = EDateStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDateStatus_descriptor();
inline const ::std::string& EDateStatus_Name(EDateStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDateStatus_descriptor(), value);
}
inline bool EDateStatus_Parse(
    const ::std::string& name, EDateStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDateStatus>(
    EDateStatus_descriptor(), name, value);
}
enum EWeddingStatus {
  EWeddingStatus_Reserve = 0,
  EWeddingStatus_Married = 1,
  EWeddingStatus_None = 2
};
bool EWeddingStatus_IsValid(int value);
const EWeddingStatus EWeddingStatus_MIN = EWeddingStatus_Reserve;
const EWeddingStatus EWeddingStatus_MAX = EWeddingStatus_None;
const int EWeddingStatus_ARRAYSIZE = EWeddingStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EWeddingStatus_descriptor();
inline const ::std::string& EWeddingStatus_Name(EWeddingStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EWeddingStatus_descriptor(), value);
}
inline bool EWeddingStatus_Parse(
    const ::std::string& name, EWeddingStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EWeddingStatus>(
    EWeddingStatus_descriptor(), name, value);
}
enum EReply {
  EReply_Agree = 1,
  EReply_Refuse = 2
};
bool EReply_IsValid(int value);
const EReply EReply_MIN = EReply_Agree;
const EReply EReply_MAX = EReply_Refuse;
const int EReply_ARRAYSIZE = EReply_MAX + 1;

const ::google::protobuf::EnumDescriptor* EReply_descriptor();
inline const ::std::string& EReply_Name(EReply value) {
  return ::google::protobuf::internal::NameOfEnum(
    EReply_descriptor(), value);
}
inline bool EReply_Parse(
    const ::std::string& name, EReply* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EReply>(
    EReply_descriptor(), name, value);
}
enum EGiveUpType {
  EGiveUpType_Together = 1,
  EGiveUpType_Single = 2,
  EGiveUpType_Force = 3,
  EGiveUpType_DelChar = 4
};
bool EGiveUpType_IsValid(int value);
const EGiveUpType EGiveUpType_MIN = EGiveUpType_Together;
const EGiveUpType EGiveUpType_MAX = EGiveUpType_DelChar;
const int EGiveUpType_ARRAYSIZE = EGiveUpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGiveUpType_descriptor();
inline const ::std::string& EGiveUpType_Name(EGiveUpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGiveUpType_descriptor(), value);
}
inline bool EGiveUpType_Parse(
    const ::std::string& name, EGiveUpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGiveUpType>(
    EGiveUpType_descriptor(), name, value);
}
enum EWeddingEvent {
  EWeddingEvent_Reserve = 1,
  EWeddingEvent_GiveupReserve = 2,
  EWeddingEvent_Marry = 3,
  EWeddingEvent_CancelReserveTimeOut = 5,
  EWeddingEvent_CancelReserveSys = 6,
  EWeddingEvent_DivorceTogether = 7,
  EWeddingEvent_DivorceSingle = 8,
  EWeddingEvent_DivorceForce = 9,
  EWeddingEvent_DivorceDelChar = 10,
  EWeddingEvent_DelInvitation = 11
};
bool EWeddingEvent_IsValid(int value);
const EWeddingEvent EWeddingEvent_MIN = EWeddingEvent_Reserve;
const EWeddingEvent EWeddingEvent_MAX = EWeddingEvent_DelInvitation;
const int EWeddingEvent_ARRAYSIZE = EWeddingEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EWeddingEvent_descriptor();
inline const ::std::string& EWeddingEvent_Name(EWeddingEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EWeddingEvent_descriptor(), value);
}
inline bool EWeddingEvent_Parse(
    const ::std::string& name, EWeddingEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EWeddingEvent>(
    EWeddingEvent_descriptor(), name, value);
}
// ===================================================================

class WeddingDateStatus : public ::google::protobuf::Message {
 public:
  WeddingDateStatus();
  virtual ~WeddingDateStatus();

  WeddingDateStatus(const WeddingDateStatus& from);

  inline WeddingDateStatus& operator=(const WeddingDateStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingDateStatus& default_instance();

  void Swap(WeddingDateStatus* other);

  // implements Message ----------------------------------------------

  WeddingDateStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingDateStatus& from);
  void MergeFrom(const WeddingDateStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 date = 1 [default = 0];
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 count = 3 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .Cmd.EDateStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Cmd::EDateStatus status() const;
  inline void set_status(::Cmd::EDateStatus value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingDateStatus)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 count_;
  int status_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingDateStatus* default_instance_;
};
// -------------------------------------------------------------------

class ReqWeddingDateListCCmd : public ::google::protobuf::Message {
 public:
  ReqWeddingDateListCCmd();
  virtual ~ReqWeddingDateListCCmd();

  ReqWeddingDateListCCmd(const ReqWeddingDateListCCmd& from);

  inline ReqWeddingDateListCCmd& operator=(const ReqWeddingDateListCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWeddingDateListCCmd& default_instance();

  void Swap(ReqWeddingDateListCCmd* other);

  // implements Message ----------------------------------------------

  ReqWeddingDateListCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWeddingDateListCCmd& from);
  void MergeFrom(const ReqWeddingDateListCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // repeated .Cmd.WeddingDateStatus date_list = 3;
  inline int date_list_size() const;
  inline void clear_date_list();
  static const int kDateListFieldNumber = 3;
  inline const ::Cmd::WeddingDateStatus& date_list(int index) const;
  inline ::Cmd::WeddingDateStatus* mutable_date_list(int index);
  inline ::Cmd::WeddingDateStatus* add_date_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingDateStatus >&
      date_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingDateStatus >*
      mutable_date_list();

  // optional bool use_ticket = 4;
  inline bool has_use_ticket() const;
  inline void clear_use_ticket();
  static const int kUseTicketFieldNumber = 4;
  inline bool use_ticket() const;
  inline void set_use_ticket(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqWeddingDateListCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_use_ticket();
  inline void clear_has_use_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingDateStatus > date_list_;
  bool use_ticket_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqWeddingDateListCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingOneDayInfo : public ::google::protobuf::Message {
 public:
  WeddingOneDayInfo();
  virtual ~WeddingOneDayInfo();

  WeddingOneDayInfo(const WeddingOneDayInfo& from);

  inline WeddingOneDayInfo& operator=(const WeddingOneDayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingOneDayInfo& default_instance();

  void Swap(WeddingOneDayInfo* other);

  // implements Message ----------------------------------------------

  WeddingOneDayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingOneDayInfo& from);
  void MergeFrom(const WeddingOneDayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 configid = 1;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 1;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional bool ban = 2 [default = false];
  inline bool has_ban() const;
  inline void clear_ban();
  static const int kBanFieldNumber = 2;
  inline bool ban() const;
  inline void set_ban(bool value);

  // optional uint32 starttime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 3;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 4;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint64 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingOneDayInfo)
 private:
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_ban();
  inline void clear_has_ban();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 configid_;
  bool ban_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 price_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingOneDayInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqWeddingOneDayListCCmd : public ::google::protobuf::Message {
 public:
  ReqWeddingOneDayListCCmd();
  virtual ~ReqWeddingOneDayListCCmd();

  ReqWeddingOneDayListCCmd(const ReqWeddingOneDayListCCmd& from);

  inline ReqWeddingOneDayListCCmd& operator=(const ReqWeddingOneDayListCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWeddingOneDayListCCmd& default_instance();

  void Swap(ReqWeddingOneDayListCCmd* other);

  // implements Message ----------------------------------------------

  ReqWeddingOneDayListCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWeddingOneDayListCCmd& from);
  void MergeFrom(const ReqWeddingOneDayListCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // repeated .Cmd.WeddingOneDayInfo info = 4;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Cmd::WeddingOneDayInfo& info(int index) const;
  inline ::Cmd::WeddingOneDayInfo* mutable_info(int index);
  inline ::Cmd::WeddingOneDayInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingOneDayInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingOneDayInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:Cmd.ReqWeddingOneDayListCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_date();
  inline void clear_has_date();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingOneDayInfo > info_;
  ::google::protobuf::uint32 date_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqWeddingOneDayListCCmd* default_instance_;
};
// -------------------------------------------------------------------

class CharData : public ::google::protobuf::Message {
 public:
  CharData();
  virtual ~CharData();

  CharData(const CharData& from);

  inline CharData& operator=(const CharData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharData& default_instance();

  void Swap(CharData* other);

  // implements Message ----------------------------------------------

  CharData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharData& from);
  void MergeFrom(const CharData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 profession = 3;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional .Cmd.EGender gender = 4;
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional uint32 portrait = 5 [default = 0];
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 5;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // optional uint32 hair = 7 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 7;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 8 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 8;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 body = 9 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 9;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 head = 10 [default = 0];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 10;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 face = 11 [default = 0];
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 11;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 mouth = 12 [default = 0];
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 12;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 eye = 13 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 13;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional uint32 level = 14;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 14;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional string guildname = 15;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 15;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // @@protoc_insertion_point(class_scope:Cmd.CharData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_guildname();
  inline void clear_has_guildname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 profession_;
  int gender_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 eye_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 level_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static CharData* default_instance_;
};
// -------------------------------------------------------------------

class BirefWeddingInfo : public ::google::protobuf::Message {
 public:
  BirefWeddingInfo();
  virtual ~BirefWeddingInfo();

  BirefWeddingInfo(const BirefWeddingInfo& from);

  inline BirefWeddingInfo& operator=(const BirefWeddingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BirefWeddingInfo& default_instance();

  void Swap(BirefWeddingInfo* other);

  // implements Message ----------------------------------------------

  BirefWeddingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BirefWeddingInfo& from);
  void MergeFrom(const BirefWeddingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EWeddingStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Cmd::EWeddingStatus status() const;
  inline void set_status(::Cmd::EWeddingStatus value);

  // optional .Cmd.CharData char1 = 3;
  inline bool has_char1() const;
  inline void clear_char1();
  static const int kChar1FieldNumber = 3;
  inline const ::Cmd::CharData& char1() const;
  inline ::Cmd::CharData* mutable_char1();
  inline ::Cmd::CharData* release_char1();
  inline void set_allocated_char1(::Cmd::CharData* char1);

  // optional .Cmd.CharData char2 = 4;
  inline bool has_char2() const;
  inline void clear_char2();
  static const int kChar2FieldNumber = 4;
  inline const ::Cmd::CharData& char2() const;
  inline ::Cmd::CharData* mutable_char2();
  inline ::Cmd::CharData* release_char2();
  inline void set_allocated_char2(::Cmd::CharData* char2);

  // optional uint32 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 starttime = 6;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 6;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 7;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 7;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional bool can_single_divorce = 8;
  inline bool has_can_single_divorce() const;
  inline void clear_can_single_divorce();
  static const int kCanSingleDivorceFieldNumber = 8;
  inline bool can_single_divorce() const;
  inline void set_can_single_divorce(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.BirefWeddingInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_char1();
  inline void clear_has_char1();
  inline void set_has_char2();
  inline void clear_has_char2();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_can_single_divorce();
  inline void clear_has_can_single_divorce();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  ::Cmd::CharData* char1_;
  int status_;
  ::google::protobuf::uint32 zoneid_;
  ::Cmd::CharData* char2_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  bool can_single_divorce_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static BirefWeddingInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqWeddingInfoCCmd : public ::google::protobuf::Message {
 public:
  ReqWeddingInfoCCmd();
  virtual ~ReqWeddingInfoCCmd();

  ReqWeddingInfoCCmd(const ReqWeddingInfoCCmd& from);

  inline ReqWeddingInfoCCmd& operator=(const ReqWeddingInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWeddingInfoCCmd& default_instance();

  void Swap(ReqWeddingInfoCCmd* other);

  // implements Message ----------------------------------------------

  ReqWeddingInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWeddingInfoCCmd& from);
  void MergeFrom(const ReqWeddingInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.BirefWeddingInfo info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Cmd::BirefWeddingInfo& info() const;
  inline ::Cmd::BirefWeddingInfo* mutable_info();
  inline ::Cmd::BirefWeddingInfo* release_info();
  inline void set_allocated_info(::Cmd::BirefWeddingInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.ReqWeddingInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::Cmd::BirefWeddingInfo* info_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqWeddingInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReserveWeddingDateCCmd : public ::google::protobuf::Message {
 public:
  ReserveWeddingDateCCmd();
  virtual ~ReserveWeddingDateCCmd();

  ReserveWeddingDateCCmd(const ReserveWeddingDateCCmd& from);

  inline ReserveWeddingDateCCmd& operator=(const ReserveWeddingDateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReserveWeddingDateCCmd& default_instance();

  void Swap(ReserveWeddingDateCCmd* other);

  // implements Message ----------------------------------------------

  ReserveWeddingDateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReserveWeddingDateCCmd& from);
  void MergeFrom(const ReserveWeddingDateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 configid = 4;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 4;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint64 charid2 = 5;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 5;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional bool use_ticket = 6;
  inline bool has_use_ticket() const;
  inline void clear_use_ticket();
  static const int kUseTicketFieldNumber = 6;
  inline bool use_ticket() const;
  inline void set_use_ticket(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ReserveWeddingDateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_use_ticket();
  inline void clear_has_use_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint64 charid2_;
  bool use_ticket_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReserveWeddingDateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfReserveWeddingDateCCmd : public ::google::protobuf::Message {
 public:
  NtfReserveWeddingDateCCmd();
  virtual ~NtfReserveWeddingDateCCmd();

  NtfReserveWeddingDateCCmd(const NtfReserveWeddingDateCCmd& from);

  inline NtfReserveWeddingDateCCmd& operator=(const NtfReserveWeddingDateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfReserveWeddingDateCCmd& default_instance();

  void Swap(NtfReserveWeddingDateCCmd* other);

  // implements Message ----------------------------------------------

  NtfReserveWeddingDateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfReserveWeddingDateCCmd& from);
  void MergeFrom(const NtfReserveWeddingDateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 configid = 4;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 4;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint64 charid1 = 5;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 5;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 starttime = 7;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 7;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 endtime = 8;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 8;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 time = 9;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool use_ticket = 10;
  inline bool has_use_ticket() const;
  inline void clear_use_ticket();
  static const int kUseTicketFieldNumber = 10;
  inline bool use_ticket() const;
  inline void set_use_ticket(bool value);

  // optional uint32 zoneid = 11;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 11;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string sign = 12;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 12;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.NtfReserveWeddingDateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_use_ticket();
  inline void clear_has_use_ticket();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint64 charid1_;
  ::std::string* name_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 time_;
  bool use_ticket_;
  ::std::string* sign_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfReserveWeddingDateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReplyReserveWeddingDateCCmd : public ::google::protobuf::Message {
 public:
  ReplyReserveWeddingDateCCmd();
  virtual ~ReplyReserveWeddingDateCCmd();

  ReplyReserveWeddingDateCCmd(const ReplyReserveWeddingDateCCmd& from);

  inline ReplyReserveWeddingDateCCmd& operator=(const ReplyReserveWeddingDateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyReserveWeddingDateCCmd& default_instance();

  void Swap(ReplyReserveWeddingDateCCmd* other);

  // implements Message ----------------------------------------------

  ReplyReserveWeddingDateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyReserveWeddingDateCCmd& from);
  void MergeFrom(const ReplyReserveWeddingDateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 date = 3;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 3;
  inline ::google::protobuf::uint32 date() const;
  inline void set_date(::google::protobuf::uint32 value);

  // optional uint32 configid = 4;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 4;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint64 charid1 = 5;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 5;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional .Cmd.EReply reply = 6;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 6;
  inline ::Cmd::EReply reply() const;
  inline void set_reply(::Cmd::EReply value);

  // optional uint32 time = 7;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional bool use_ticket = 8;
  inline bool has_use_ticket() const;
  inline void clear_use_ticket();
  static const int kUseTicketFieldNumber = 8;
  inline bool use_ticket() const;
  inline void set_use_ticket(bool value);

  // optional uint32 zoneid = 9;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 9;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string sign = 10;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 10;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Cmd.ReplyReserveWeddingDateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_use_ticket();
  inline void clear_has_use_ticket();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 date_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint64 charid1_;
  int reply_;
  ::google::protobuf::uint32 time_;
  bool use_ticket_;
  ::google::protobuf::uint32 zoneid_;
  ::std::string* sign_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReplyReserveWeddingDateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class GiveUpReserveCCmd : public ::google::protobuf::Message {
 public:
  GiveUpReserveCCmd();
  virtual ~GiveUpReserveCCmd();

  GiveUpReserveCCmd(const GiveUpReserveCCmd& from);

  inline GiveUpReserveCCmd& operator=(const GiveUpReserveCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveUpReserveCCmd& default_instance();

  void Swap(GiveUpReserveCCmd* other);

  // implements Message ----------------------------------------------

  GiveUpReserveCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveUpReserveCCmd& from);
  void MergeFrom(const GiveUpReserveCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.GiveUpReserveCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static GiveUpReserveCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqDivorceCCmd : public ::google::protobuf::Message {
 public:
  ReqDivorceCCmd();
  virtual ~ReqDivorceCCmd();

  ReqDivorceCCmd(const ReqDivorceCCmd& from);

  inline ReqDivorceCCmd& operator=(const ReqDivorceCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDivorceCCmd& default_instance();

  void Swap(ReqDivorceCCmd* other);

  // implements Message ----------------------------------------------

  ReqDivorceCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDivorceCCmd& from);
  void MergeFrom(const ReqDivorceCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EGiveUpType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EGiveUpType type() const;
  inline void set_type(::Cmd::EGiveUpType value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqDivorceCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  int type_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqDivorceCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ClientWeddingManual : public ::google::protobuf::Message {
 public:
  ClientWeddingManual();
  virtual ~ClientWeddingManual();

  ClientWeddingManual(const ClientWeddingManual& from);

  inline ClientWeddingManual& operator=(const ClientWeddingManual& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientWeddingManual& default_instance();

  void Swap(ClientWeddingManual* other);

  // implements Message ----------------------------------------------

  ClientWeddingManual* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientWeddingManual& from);
  void MergeFrom(const ClientWeddingManual& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 packageids = 1;
  inline int packageids_size() const;
  inline void clear_packageids();
  static const int kPackageidsFieldNumber = 1;
  inline ::google::protobuf::uint32 packageids(int index) const;
  inline void set_packageids(int index, ::google::protobuf::uint32 value);
  inline void add_packageids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      packageids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_packageids();

  // optional uint32 ringid = 2 [default = 0];
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingidFieldNumber = 2;
  inline ::google::protobuf::uint32 ringid() const;
  inline void set_ringid(::google::protobuf::uint32 value);

  // optional uint32 photoindex = 3 [default = 0];
  inline bool has_photoindex() const;
  inline void clear_photoindex();
  static const int kPhotoindexFieldNumber = 3;
  inline ::google::protobuf::uint32 photoindex() const;
  inline void set_photoindex(::google::protobuf::uint32 value);

  // optional uint32 phototime = 4 [default = 0];
  inline bool has_phototime() const;
  inline void clear_phototime();
  static const int kPhototimeFieldNumber = 4;
  inline ::google::protobuf::uint32 phototime() const;
  inline void set_phototime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ClientWeddingManual)
 private:
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_photoindex();
  inline void clear_has_photoindex();
  inline void set_has_phototime();
  inline void clear_has_phototime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > packageids_;
  ::google::protobuf::uint32 ringid_;
  ::google::protobuf::uint32 photoindex_;
  ::google::protobuf::uint32 phototime_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ClientWeddingManual* default_instance_;
};
// -------------------------------------------------------------------

class WeddingInvitee : public ::google::protobuf::Message {
 public:
  WeddingInvitee();
  virtual ~WeddingInvitee();

  WeddingInvitee(const WeddingInvitee& from);

  inline WeddingInvitee& operator=(const WeddingInvitee& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingInvitee& default_instance();

  void Swap(WeddingInvitee* other);

  // implements Message ----------------------------------------------

  WeddingInvitee* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingInvitee& from);
  void MergeFrom(const WeddingInvitee& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 invitetime = 3 [default = 0];
  inline bool has_invitetime() const;
  inline void clear_invitetime();
  static const int kInvitetimeFieldNumber = 3;
  inline ::google::protobuf::uint32 invitetime() const;
  inline void set_invitetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingInvitee)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_invitetime();
  inline void clear_has_invitetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 invitetime_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingInvitee* default_instance_;
};
// -------------------------------------------------------------------

class UpdateWeddingManualCCmd : public ::google::protobuf::Message {
 public:
  UpdateWeddingManualCCmd();
  virtual ~UpdateWeddingManualCCmd();

  UpdateWeddingManualCCmd(const UpdateWeddingManualCCmd& from);

  inline UpdateWeddingManualCCmd& operator=(const UpdateWeddingManualCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateWeddingManualCCmd& default_instance();

  void Swap(UpdateWeddingManualCCmd* other);

  // implements Message ----------------------------------------------

  UpdateWeddingManualCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateWeddingManualCCmd& from);
  void MergeFrom(const UpdateWeddingManualCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional .Cmd.ClientWeddingManual manual = 3;
  inline bool has_manual() const;
  inline void clear_manual();
  static const int kManualFieldNumber = 3;
  inline const ::Cmd::ClientWeddingManual& manual() const;
  inline ::Cmd::ClientWeddingManual* mutable_manual();
  inline ::Cmd::ClientWeddingManual* release_manual();
  inline void set_allocated_manual(::Cmd::ClientWeddingManual* manual);

  // repeated .Cmd.WeddingInvitee invitees = 4;
  inline int invitees_size() const;
  inline void clear_invitees();
  static const int kInviteesFieldNumber = 4;
  inline const ::Cmd::WeddingInvitee& invitees(int index) const;
  inline ::Cmd::WeddingInvitee* mutable_invitees(int index);
  inline ::Cmd::WeddingInvitee* add_invitees();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >&
      invitees() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >*
      mutable_invitees();

  // @@protoc_insertion_point(class_scope:Cmd.UpdateWeddingManualCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_manual();
  inline void clear_has_manual();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ClientWeddingManual* manual_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee > invitees_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdateWeddingManualCCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyWeddingPackageCCmd : public ::google::protobuf::Message {
 public:
  BuyWeddingPackageCCmd();
  virtual ~BuyWeddingPackageCCmd();

  BuyWeddingPackageCCmd(const BuyWeddingPackageCCmd& from);

  inline BuyWeddingPackageCCmd& operator=(const BuyWeddingPackageCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyWeddingPackageCCmd& default_instance();

  void Swap(BuyWeddingPackageCCmd* other);

  // implements Message ----------------------------------------------

  BuyWeddingPackageCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyWeddingPackageCCmd& from);
  void MergeFrom(const BuyWeddingPackageCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 priceitem = 4 [default = 0];
  inline bool has_priceitem() const;
  inline void clear_priceitem();
  static const int kPriceitemFieldNumber = 4;
  inline ::google::protobuf::uint32 priceitem() const;
  inline void set_priceitem(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyWeddingPackageCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_priceitem();
  inline void clear_has_priceitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 priceitem_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static BuyWeddingPackageCCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyWeddingRingCCmd : public ::google::protobuf::Message {
 public:
  BuyWeddingRingCCmd();
  virtual ~BuyWeddingRingCCmd();

  BuyWeddingRingCCmd(const BuyWeddingRingCCmd& from);

  inline BuyWeddingRingCCmd& operator=(const BuyWeddingRingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyWeddingRingCCmd& default_instance();

  void Swap(BuyWeddingRingCCmd* other);

  // implements Message ----------------------------------------------

  BuyWeddingRingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyWeddingRingCCmd& from);
  void MergeFrom(const BuyWeddingRingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 priceitem = 4 [default = 0];
  inline bool has_priceitem() const;
  inline void clear_priceitem();
  static const int kPriceitemFieldNumber = 4;
  inline ::google::protobuf::uint32 priceitem() const;
  inline void set_priceitem(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyWeddingRingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_priceitem();
  inline void clear_has_priceitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 priceitem_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static BuyWeddingRingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingInviteCCmd : public ::google::protobuf::Message {
 public:
  WeddingInviteCCmd();
  virtual ~WeddingInviteCCmd();

  WeddingInviteCCmd(const WeddingInviteCCmd& from);

  inline WeddingInviteCCmd& operator=(const WeddingInviteCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingInviteCCmd& default_instance();

  void Swap(WeddingInviteCCmd* other);

  // implements Message ----------------------------------------------

  WeddingInviteCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingInviteCCmd& from);
  void MergeFrom(const WeddingInviteCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // repeated uint64 charids = 3;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharidsFieldNumber = 3;
  inline ::google::protobuf::uint64 charids(int index) const;
  inline void set_charids(int index, ::google::protobuf::uint64 value);
  inline void add_charids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      charids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_charids();

  // @@protoc_insertion_point(class_scope:Cmd.WeddingInviteCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > charids_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingInviteCCmd* default_instance_;
};
// -------------------------------------------------------------------

class UploadWeddingPhotoCCmd : public ::google::protobuf::Message {
 public:
  UploadWeddingPhotoCCmd();
  virtual ~UploadWeddingPhotoCCmd();

  UploadWeddingPhotoCCmd(const UploadWeddingPhotoCCmd& from);

  inline UploadWeddingPhotoCCmd& operator=(const UploadWeddingPhotoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadWeddingPhotoCCmd& default_instance();

  void Swap(UploadWeddingPhotoCCmd* other);

  // implements Message ----------------------------------------------

  UploadWeddingPhotoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UploadWeddingPhotoCCmd& from);
  void MergeFrom(const UploadWeddingPhotoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 index = 3 [default = 0];
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 time = 4 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.UploadWeddingPhotoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static UploadWeddingPhotoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckCanReserveCCmd : public ::google::protobuf::Message {
 public:
  CheckCanReserveCCmd();
  virtual ~CheckCanReserveCCmd();

  CheckCanReserveCCmd(const CheckCanReserveCCmd& from);

  inline CheckCanReserveCCmd& operator=(const CheckCanReserveCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckCanReserveCCmd& default_instance();

  void Swap(CheckCanReserveCCmd* other);

  // implements Message ----------------------------------------------

  CheckCanReserveCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckCanReserveCCmd& from);
  void MergeFrom(const CheckCanReserveCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 charid2 = 3;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 3;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckCanReserveCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid2_;
  bool success_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static CheckCanReserveCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqPartnerInfoCCmd : public ::google::protobuf::Message {
 public:
  ReqPartnerInfoCCmd();
  virtual ~ReqPartnerInfoCCmd();

  ReqPartnerInfoCCmd(const ReqPartnerInfoCCmd& from);

  inline ReqPartnerInfoCCmd& operator=(const ReqPartnerInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPartnerInfoCCmd& default_instance();

  void Swap(ReqPartnerInfoCCmd* other);

  // implements Message ----------------------------------------------

  ReqPartnerInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPartnerInfoCCmd& from);
  void MergeFrom(const ReqPartnerInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional .Cmd.CharData chardata = 3;
  inline bool has_chardata() const;
  inline void clear_chardata();
  static const int kChardataFieldNumber = 3;
  inline const ::Cmd::CharData& chardata() const;
  inline ::Cmd::CharData* mutable_chardata();
  inline ::Cmd::CharData* release_chardata();
  inline void set_allocated_chardata(::Cmd::CharData* chardata);

  // @@protoc_insertion_point(class_scope:Cmd.ReqPartnerInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_chardata();
  inline void clear_has_chardata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::CharData* chardata_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqPartnerInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfWeddingInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfWeddingInfoCCmd();
  virtual ~NtfWeddingInfoCCmd();

  NtfWeddingInfoCCmd(const NtfWeddingInfoCCmd& from);

  inline NtfWeddingInfoCCmd& operator=(const NtfWeddingInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfWeddingInfoCCmd& default_instance();

  void Swap(NtfWeddingInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfWeddingInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfWeddingInfoCCmd& from);
  void MergeFrom(const NtfWeddingInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional .Cmd.BirefWeddingInfo info = 3;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::Cmd::BirefWeddingInfo& info() const;
  inline ::Cmd::BirefWeddingInfo* mutable_info();
  inline ::Cmd::BirefWeddingInfo* release_info();
  inline void set_allocated_info(::Cmd::BirefWeddingInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.NtfWeddingInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::BirefWeddingInfo* info_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfWeddingInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class InviteBeginWeddingCCmd : public ::google::protobuf::Message {
 public:
  InviteBeginWeddingCCmd();
  virtual ~InviteBeginWeddingCCmd();

  InviteBeginWeddingCCmd(const InviteBeginWeddingCCmd& from);

  inline InviteBeginWeddingCCmd& operator=(const InviteBeginWeddingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteBeginWeddingCCmd& default_instance();

  void Swap(InviteBeginWeddingCCmd* other);

  // implements Message ----------------------------------------------

  InviteBeginWeddingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteBeginWeddingCCmd& from);
  void MergeFrom(const InviteBeginWeddingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 tocharid = 6 [default = 0];
  inline bool has_tocharid() const;
  inline void clear_tocharid();
  static const int kTocharidFieldNumber = 6;
  inline ::google::protobuf::uint64 tocharid() const;
  inline void set_tocharid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.InviteBeginWeddingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_tocharid();
  inline void clear_has_tocharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  ::std::string* name_;
  ::google::protobuf::uint64 tocharid_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static InviteBeginWeddingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReplyBeginWeddingCCmd : public ::google::protobuf::Message {
 public:
  ReplyBeginWeddingCCmd();
  virtual ~ReplyBeginWeddingCCmd();

  ReplyBeginWeddingCCmd(const ReplyBeginWeddingCCmd& from);

  inline ReplyBeginWeddingCCmd& operator=(const ReplyBeginWeddingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplyBeginWeddingCCmd& default_instance();

  void Swap(ReplyBeginWeddingCCmd* other);

  // implements Message ----------------------------------------------

  ReplyBeginWeddingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReplyBeginWeddingCCmd& from);
  void MergeFrom(const ReplyBeginWeddingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 masterid = 3 [default = 0];
  inline bool has_masterid() const;
  inline void clear_masterid();
  static const int kMasteridFieldNumber = 3;
  inline ::google::protobuf::uint64 masterid() const;
  inline void set_masterid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReplyBeginWeddingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_masterid();
  inline void clear_has_masterid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 masterid_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReplyBeginWeddingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class GoToWeddingPosCCmd : public ::google::protobuf::Message {
 public:
  GoToWeddingPosCCmd();
  virtual ~GoToWeddingPosCCmd();

  GoToWeddingPosCCmd(const GoToWeddingPosCCmd& from);

  inline GoToWeddingPosCCmd& operator=(const GoToWeddingPosCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GoToWeddingPosCCmd& default_instance();

  void Swap(GoToWeddingPosCCmd* other);

  // implements Message ----------------------------------------------

  GoToWeddingPosCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GoToWeddingPosCCmd& from);
  void MergeFrom(const GoToWeddingPosCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.GoToWeddingPosCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static GoToWeddingPosCCmd* default_instance_;
};
// -------------------------------------------------------------------

class QuestionWeddingCCmd : public ::google::protobuf::Message {
 public:
  QuestionWeddingCCmd();
  virtual ~QuestionWeddingCCmd();

  QuestionWeddingCCmd(const QuestionWeddingCCmd& from);

  inline QuestionWeddingCCmd& operator=(const QuestionWeddingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuestionWeddingCCmd& default_instance();

  void Swap(QuestionWeddingCCmd* other);

  // implements Message ----------------------------------------------

  QuestionWeddingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QuestionWeddingCCmd& from);
  void MergeFrom(const QuestionWeddingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 questionid = 3 [default = 0];
  inline bool has_questionid() const;
  inline void clear_questionid();
  static const int kQuestionidFieldNumber = 3;
  inline ::google::protobuf::uint32 questionid() const;
  inline void set_questionid(::google::protobuf::uint32 value);

  // repeated uint64 charids = 4;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharidsFieldNumber = 4;
  inline ::google::protobuf::uint64 charids(int index) const;
  inline void set_charids(int index, ::google::protobuf::uint64 value);
  inline void add_charids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      charids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_charids();

  // optional uint64 npcguid = 5 [default = 0];
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 5;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.QuestionWeddingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questionid();
  inline void clear_has_questionid();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > charids_;
  ::google::protobuf::uint64 npcguid_;
  ::google::protobuf::uint32 questionid_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static QuestionWeddingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class AnswerWeddingCCmd : public ::google::protobuf::Message {
 public:
  AnswerWeddingCCmd();
  virtual ~AnswerWeddingCCmd();

  AnswerWeddingCCmd(const AnswerWeddingCCmd& from);

  inline AnswerWeddingCCmd& operator=(const AnswerWeddingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnswerWeddingCCmd& default_instance();

  void Swap(AnswerWeddingCCmd* other);

  // implements Message ----------------------------------------------

  AnswerWeddingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnswerWeddingCCmd& from);
  void MergeFrom(const AnswerWeddingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint32 questionid = 3 [default = 0];
  inline bool has_questionid() const;
  inline void clear_questionid();
  static const int kQuestionidFieldNumber = 3;
  inline ::google::protobuf::uint32 questionid() const;
  inline void set_questionid(::google::protobuf::uint32 value);

  // optional uint32 answer = 4 [default = 0];
  inline bool has_answer() const;
  inline void clear_answer();
  static const int kAnswerFieldNumber = 4;
  inline ::google::protobuf::uint32 answer() const;
  inline void set_answer(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AnswerWeddingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_questionid();
  inline void clear_has_questionid();
  inline void set_has_answer();
  inline void clear_has_answer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 questionid_;
  ::google::protobuf::uint32 answer_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static AnswerWeddingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingEventMsgCCmd : public ::google::protobuf::Message {
 public:
  WeddingEventMsgCCmd();
  virtual ~WeddingEventMsgCCmd();

  WeddingEventMsgCCmd(const WeddingEventMsgCCmd& from);

  inline WeddingEventMsgCCmd& operator=(const WeddingEventMsgCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingEventMsgCCmd& default_instance();

  void Swap(WeddingEventMsgCCmd* other);

  // implements Message ----------------------------------------------

  WeddingEventMsgCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingEventMsgCCmd& from);
  void MergeFrom(const WeddingEventMsgCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EWeddingEvent event = 4;
  inline bool has_event() const;
  inline void clear_event();
  static const int kEventFieldNumber = 4;
  inline ::Cmd::EWeddingEvent event() const;
  inline void set_event(::Cmd::EWeddingEvent value);

  // optional uint64 id = 5;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 5;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 charid1 = 6;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharid1FieldNumber = 6;
  inline ::google::protobuf::uint64 charid1() const;
  inline void set_charid1(::google::protobuf::uint64 value);

  // optional uint64 charid2 = 7;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharid2FieldNumber = 7;
  inline ::google::protobuf::uint64 charid2() const;
  inline void set_charid2(::google::protobuf::uint64 value);

  // optional string msg = 8;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 8;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional uint64 opt_charid = 9;
  inline bool has_opt_charid() const;
  inline void clear_opt_charid();
  static const int kOptCharidFieldNumber = 9;
  inline ::google::protobuf::uint64 opt_charid() const;
  inline void set_opt_charid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingEventMsgCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_event();
  inline void clear_has_event();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_opt_charid();
  inline void clear_has_opt_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 charid1_;
  ::google::protobuf::uint64 charid2_;
  ::std::string* msg_;
  ::google::protobuf::uint64 opt_charid_;
  int event_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingEventMsgCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingOverCCmd : public ::google::protobuf::Message {
 public:
  WeddingOverCCmd();
  virtual ~WeddingOverCCmd();

  WeddingOverCCmd(const WeddingOverCCmd& from);

  inline WeddingOverCCmd& operator=(const WeddingOverCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingOverCCmd& default_instance();

  void Swap(WeddingOverCCmd* other);

  // implements Message ----------------------------------------------

  WeddingOverCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingOverCCmd& from);
  void MergeFrom(const WeddingOverCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional bool success = 3 [default = false];
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 3;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingOverCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool success_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingOverCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingSwitchQuestionCCmd : public ::google::protobuf::Message {
 public:
  WeddingSwitchQuestionCCmd();
  virtual ~WeddingSwitchQuestionCCmd();

  WeddingSwitchQuestionCCmd(const WeddingSwitchQuestionCCmd& from);

  inline WeddingSwitchQuestionCCmd& operator=(const WeddingSwitchQuestionCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingSwitchQuestionCCmd& default_instance();

  void Swap(WeddingSwitchQuestionCCmd* other);

  // implements Message ----------------------------------------------

  WeddingSwitchQuestionCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingSwitchQuestionCCmd& from);
  void MergeFrom(const WeddingSwitchQuestionCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional bool onoff = 3 [default = false];
  inline bool has_onoff() const;
  inline void clear_onoff();
  static const int kOnoffFieldNumber = 3;
  inline bool onoff() const;
  inline void set_onoff(bool value);

  // optional uint64 npcguid = 4 [default = 0];
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 4;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingSwitchQuestionCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_onoff();
  inline void clear_has_onoff();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 npcguid_;
  bool onoff_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingSwitchQuestionCCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnterRollerCoasterCCmd : public ::google::protobuf::Message {
 public:
  EnterRollerCoasterCCmd();
  virtual ~EnterRollerCoasterCCmd();

  EnterRollerCoasterCCmd(const EnterRollerCoasterCCmd& from);

  inline EnterRollerCoasterCCmd& operator=(const EnterRollerCoasterCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterRollerCoasterCCmd& default_instance();

  void Swap(EnterRollerCoasterCCmd* other);

  // implements Message ----------------------------------------------

  EnterRollerCoasterCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterRollerCoasterCCmd& from);
  void MergeFrom(const EnterRollerCoasterCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.EnterRollerCoasterCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static EnterRollerCoasterCCmd* default_instance_;
};
// -------------------------------------------------------------------

class DivorceRollerCoasterInviteCCmd : public ::google::protobuf::Message {
 public:
  DivorceRollerCoasterInviteCCmd();
  virtual ~DivorceRollerCoasterInviteCCmd();

  DivorceRollerCoasterInviteCCmd(const DivorceRollerCoasterInviteCCmd& from);

  inline DivorceRollerCoasterInviteCCmd& operator=(const DivorceRollerCoasterInviteCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DivorceRollerCoasterInviteCCmd& default_instance();

  void Swap(DivorceRollerCoasterInviteCCmd* other);

  // implements Message ----------------------------------------------

  DivorceRollerCoasterInviteCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DivorceRollerCoasterInviteCCmd& from);
  void MergeFrom(const DivorceRollerCoasterInviteCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 inviter = 3;
  inline bool has_inviter() const;
  inline void clear_inviter();
  static const int kInviterFieldNumber = 3;
  inline ::google::protobuf::uint64 inviter() const;
  inline void set_inviter(::google::protobuf::uint64 value);

  // optional uint64 invitee = 4;
  inline bool has_invitee() const;
  inline void clear_invitee();
  static const int kInviteeFieldNumber = 4;
  inline ::google::protobuf::uint64 invitee() const;
  inline void set_invitee(::google::protobuf::uint64 value);

  // optional string inviter_name = 5;
  inline bool has_inviter_name() const;
  inline void clear_inviter_name();
  static const int kInviterNameFieldNumber = 5;
  inline const ::std::string& inviter_name() const;
  inline void set_inviter_name(const ::std::string& value);
  inline void set_inviter_name(const char* value);
  inline void set_inviter_name(const char* value, size_t size);
  inline ::std::string* mutable_inviter_name();
  inline ::std::string* release_inviter_name();
  inline void set_allocated_inviter_name(::std::string* inviter_name);

  // @@protoc_insertion_point(class_scope:Cmd.DivorceRollerCoasterInviteCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_inviter();
  inline void clear_has_inviter();
  inline void set_has_invitee();
  inline void clear_has_invitee();
  inline void set_has_inviter_name();
  inline void clear_has_inviter_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 inviter_;
  ::google::protobuf::uint64 invitee_;
  ::std::string* inviter_name_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static DivorceRollerCoasterInviteCCmd* default_instance_;
};
// -------------------------------------------------------------------

class DivorceRollerCoasterReplyCCmd : public ::google::protobuf::Message {
 public:
  DivorceRollerCoasterReplyCCmd();
  virtual ~DivorceRollerCoasterReplyCCmd();

  DivorceRollerCoasterReplyCCmd(const DivorceRollerCoasterReplyCCmd& from);

  inline DivorceRollerCoasterReplyCCmd& operator=(const DivorceRollerCoasterReplyCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DivorceRollerCoasterReplyCCmd& default_instance();

  void Swap(DivorceRollerCoasterReplyCCmd* other);

  // implements Message ----------------------------------------------

  DivorceRollerCoasterReplyCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DivorceRollerCoasterReplyCCmd& from);
  void MergeFrom(const DivorceRollerCoasterReplyCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional uint64 inviter = 3;
  inline bool has_inviter() const;
  inline void clear_inviter();
  static const int kInviterFieldNumber = 3;
  inline ::google::protobuf::uint64 inviter() const;
  inline void set_inviter(::google::protobuf::uint64 value);

  // optional .Cmd.EReply reply = 5;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 5;
  inline ::Cmd::EReply reply() const;
  inline void set_reply(::Cmd::EReply value);

  // @@protoc_insertion_point(class_scope:Cmd.DivorceRollerCoasterReplyCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_inviter();
  inline void clear_has_inviter();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 inviter_;
  int reply_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static DivorceRollerCoasterReplyCCmd* default_instance_;
};
// -------------------------------------------------------------------

class EnterWeddingMapCCmd : public ::google::protobuf::Message {
 public:
  EnterWeddingMapCCmd();
  virtual ~EnterWeddingMapCCmd();

  EnterWeddingMapCCmd(const EnterWeddingMapCCmd& from);

  inline EnterWeddingMapCCmd& operator=(const EnterWeddingMapCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterWeddingMapCCmd& default_instance();

  void Swap(EnterWeddingMapCCmd* other);

  // implements Message ----------------------------------------------

  EnterWeddingMapCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnterWeddingMapCCmd& from);
  void MergeFrom(const EnterWeddingMapCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.EnterWeddingMapCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static EnterWeddingMapCCmd* default_instance_;
};
// -------------------------------------------------------------------

class MissyouInviteWedCCmd : public ::google::protobuf::Message {
 public:
  MissyouInviteWedCCmd();
  virtual ~MissyouInviteWedCCmd();

  MissyouInviteWedCCmd(const MissyouInviteWedCCmd& from);

  inline MissyouInviteWedCCmd& operator=(const MissyouInviteWedCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MissyouInviteWedCCmd& default_instance();

  void Swap(MissyouInviteWedCCmd* other);

  // implements Message ----------------------------------------------

  MissyouInviteWedCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MissyouInviteWedCCmd& from);
  void MergeFrom(const MissyouInviteWedCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.MissyouInviteWedCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static MissyouInviteWedCCmd* default_instance_;
};
// -------------------------------------------------------------------

class MisccyouReplyWedCCmd : public ::google::protobuf::Message {
 public:
  MisccyouReplyWedCCmd();
  virtual ~MisccyouReplyWedCCmd();

  MisccyouReplyWedCCmd(const MisccyouReplyWedCCmd& from);

  inline MisccyouReplyWedCCmd& operator=(const MisccyouReplyWedCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MisccyouReplyWedCCmd& default_instance();

  void Swap(MisccyouReplyWedCCmd* other);

  // implements Message ----------------------------------------------

  MisccyouReplyWedCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MisccyouReplyWedCCmd& from);
  void MergeFrom(const MisccyouReplyWedCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // optional bool agree = 3 [default = false];
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 3;
  inline bool agree() const;
  inline void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.MisccyouReplyWedCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_agree();
  inline void clear_has_agree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool agree_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static MisccyouReplyWedCCmd* default_instance_;
};
// -------------------------------------------------------------------

class WeddingCarrierCCmd : public ::google::protobuf::Message {
 public:
  WeddingCarrierCCmd();
  virtual ~WeddingCarrierCCmd();

  WeddingCarrierCCmd(const WeddingCarrierCCmd& from);

  inline WeddingCarrierCCmd& operator=(const WeddingCarrierCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeddingCarrierCCmd& default_instance();

  void Swap(WeddingCarrierCCmd* other);

  // implements Message ----------------------------------------------

  WeddingCarrierCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeddingCarrierCCmd& from);
  void MergeFrom(const WeddingCarrierCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::WeddingCParam param() const;
  inline void set_param(::Cmd::WeddingCParam value);

  // @@protoc_insertion_point(class_scope:Cmd.WeddingCarrierCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_WeddingCCmd_2eproto();
  friend void protobuf_AssignDesc_WeddingCCmd_2eproto();
  friend void protobuf_ShutdownFile_WeddingCCmd_2eproto();

  void InitAsDefaultInstance();
  static WeddingCarrierCCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// WeddingDateStatus

// optional uint32 date = 1 [default = 0];
inline bool WeddingDateStatus::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingDateStatus::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingDateStatus::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingDateStatus::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 WeddingDateStatus::date() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingDateStatus.date)
  return date_;
}
inline void WeddingDateStatus::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingDateStatus.date)
}

// optional uint32 count = 3 [default = 0];
inline bool WeddingDateStatus::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingDateStatus::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingDateStatus::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingDateStatus::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 WeddingDateStatus::count() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingDateStatus.count)
  return count_;
}
inline void WeddingDateStatus::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingDateStatus.count)
}

// optional .Cmd.EDateStatus status = 2;
inline bool WeddingDateStatus::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingDateStatus::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingDateStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingDateStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EDateStatus WeddingDateStatus::status() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingDateStatus.status)
  return static_cast< ::Cmd::EDateStatus >(status_);
}
inline void WeddingDateStatus::set_status(::Cmd::EDateStatus value) {
  assert(::Cmd::EDateStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingDateStatus.status)
}

// -------------------------------------------------------------------

// ReqWeddingDateListCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReqWeddingDateListCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWeddingDateListCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWeddingDateListCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWeddingDateListCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReqWeddingDateListCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingDateListCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqWeddingDateListCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingDateListCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDINGDATE_LIST];
inline bool ReqWeddingDateListCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqWeddingDateListCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqWeddingDateListCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqWeddingDateListCCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReqWeddingDateListCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingDateListCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReqWeddingDateListCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingDateListCCmd.param)
}

// repeated .Cmd.WeddingDateStatus date_list = 3;
inline int ReqWeddingDateListCCmd::date_list_size() const {
  return date_list_.size();
}
inline void ReqWeddingDateListCCmd::clear_date_list() {
  date_list_.Clear();
}
inline const ::Cmd::WeddingDateStatus& ReqWeddingDateListCCmd::date_list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingDateListCCmd.date_list)
  return date_list_.Get(index);
}
inline ::Cmd::WeddingDateStatus* ReqWeddingDateListCCmd::mutable_date_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqWeddingDateListCCmd.date_list)
  return date_list_.Mutable(index);
}
inline ::Cmd::WeddingDateStatus* ReqWeddingDateListCCmd::add_date_list() {
  // @@protoc_insertion_point(field_add:Cmd.ReqWeddingDateListCCmd.date_list)
  return date_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingDateStatus >&
ReqWeddingDateListCCmd::date_list() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqWeddingDateListCCmd.date_list)
  return date_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingDateStatus >*
ReqWeddingDateListCCmd::mutable_date_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqWeddingDateListCCmd.date_list)
  return &date_list_;
}

// optional bool use_ticket = 4;
inline bool ReqWeddingDateListCCmd::has_use_ticket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqWeddingDateListCCmd::set_has_use_ticket() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqWeddingDateListCCmd::clear_has_use_ticket() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqWeddingDateListCCmd::clear_use_ticket() {
  use_ticket_ = false;
  clear_has_use_ticket();
}
inline bool ReqWeddingDateListCCmd::use_ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingDateListCCmd.use_ticket)
  return use_ticket_;
}
inline void ReqWeddingDateListCCmd::set_use_ticket(bool value) {
  set_has_use_ticket();
  use_ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingDateListCCmd.use_ticket)
}

// -------------------------------------------------------------------

// WeddingOneDayInfo

// optional uint32 configid = 1;
inline bool WeddingOneDayInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingOneDayInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingOneDayInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingOneDayInfo::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 WeddingOneDayInfo::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.configid)
  return configid_;
}
inline void WeddingOneDayInfo::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.configid)
}

// optional bool ban = 2 [default = false];
inline bool WeddingOneDayInfo::has_ban() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingOneDayInfo::set_has_ban() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingOneDayInfo::clear_has_ban() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingOneDayInfo::clear_ban() {
  ban_ = false;
  clear_has_ban();
}
inline bool WeddingOneDayInfo::ban() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.ban)
  return ban_;
}
inline void WeddingOneDayInfo::set_ban(bool value) {
  set_has_ban();
  ban_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.ban)
}

// optional uint32 starttime = 3;
inline bool WeddingOneDayInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingOneDayInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingOneDayInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingOneDayInfo::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 WeddingOneDayInfo::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.starttime)
  return starttime_;
}
inline void WeddingOneDayInfo::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.starttime)
}

// optional uint32 endtime = 4;
inline bool WeddingOneDayInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingOneDayInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingOneDayInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingOneDayInfo::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 WeddingOneDayInfo::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.endtime)
  return endtime_;
}
inline void WeddingOneDayInfo::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.endtime)
}

// optional uint32 price = 5;
inline bool WeddingOneDayInfo::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeddingOneDayInfo::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeddingOneDayInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeddingOneDayInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 WeddingOneDayInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.price)
  return price_;
}
inline void WeddingOneDayInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.price)
}

// optional uint64 id = 6;
inline bool WeddingOneDayInfo::has_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeddingOneDayInfo::set_has_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeddingOneDayInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeddingOneDayInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WeddingOneDayInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOneDayInfo.id)
  return id_;
}
inline void WeddingOneDayInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOneDayInfo.id)
}

// -------------------------------------------------------------------

// ReqWeddingOneDayListCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReqWeddingOneDayListCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWeddingOneDayListCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWeddingOneDayListCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWeddingOneDayListCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReqWeddingOneDayListCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingOneDayListCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqWeddingOneDayListCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingOneDayListCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_ONEDAY_LIST];
inline bool ReqWeddingOneDayListCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqWeddingOneDayListCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqWeddingOneDayListCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqWeddingOneDayListCCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReqWeddingOneDayListCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingOneDayListCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReqWeddingOneDayListCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingOneDayListCCmd.param)
}

// optional uint32 date = 3;
inline bool ReqWeddingOneDayListCCmd::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqWeddingOneDayListCCmd::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqWeddingOneDayListCCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqWeddingOneDayListCCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 ReqWeddingOneDayListCCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingOneDayListCCmd.date)
  return date_;
}
inline void ReqWeddingOneDayListCCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingOneDayListCCmd.date)
}

// repeated .Cmd.WeddingOneDayInfo info = 4;
inline int ReqWeddingOneDayListCCmd::info_size() const {
  return info_.size();
}
inline void ReqWeddingOneDayListCCmd::clear_info() {
  info_.Clear();
}
inline const ::Cmd::WeddingOneDayInfo& ReqWeddingOneDayListCCmd::info(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingOneDayListCCmd.info)
  return info_.Get(index);
}
inline ::Cmd::WeddingOneDayInfo* ReqWeddingOneDayListCCmd::mutable_info(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqWeddingOneDayListCCmd.info)
  return info_.Mutable(index);
}
inline ::Cmd::WeddingOneDayInfo* ReqWeddingOneDayListCCmd::add_info() {
  // @@protoc_insertion_point(field_add:Cmd.ReqWeddingOneDayListCCmd.info)
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingOneDayInfo >&
ReqWeddingOneDayListCCmd::info() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqWeddingOneDayListCCmd.info)
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingOneDayInfo >*
ReqWeddingOneDayListCCmd::mutable_info() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqWeddingOneDayListCCmd.info)
  return &info_;
}

// -------------------------------------------------------------------

// CharData

// optional uint64 charid = 1;
inline bool CharData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharData::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CharData::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.charid)
  return charid_;
}
inline void CharData::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.charid)
}

// optional string name = 2;
inline bool CharData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CharData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.name)
  return *name_;
}
inline void CharData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CharData.name)
}
inline void CharData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CharData.name)
}
inline void CharData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CharData.name)
}
inline ::std::string* CharData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CharData.name)
  return name_;
}
inline ::std::string* CharData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CharData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CharData.name)
}

// optional uint32 profession = 3;
inline bool CharData::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharData::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharData::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharData::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 CharData::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.profession)
  return profession_;
}
inline void CharData::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.profession)
}

// optional .Cmd.EGender gender = 4;
inline bool CharData::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharData::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharData::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharData::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender CharData::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void CharData::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.gender)
}

// optional uint32 portrait = 5 [default = 0];
inline bool CharData::has_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharData::set_has_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharData::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharData::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 CharData::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.portrait)
  return portrait_;
}
inline void CharData::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.portrait)
}

// optional uint32 hair = 7 [default = 0];
inline bool CharData::has_hair() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharData::set_has_hair() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharData::clear_has_hair() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharData::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 CharData::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.hair)
  return hair_;
}
inline void CharData::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.hair)
}

// optional uint32 haircolor = 8 [default = 0];
inline bool CharData::has_haircolor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharData::set_has_haircolor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharData::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharData::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 CharData::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.haircolor)
  return haircolor_;
}
inline void CharData::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.haircolor)
}

// optional uint32 body = 9 [default = 0];
inline bool CharData::has_body() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharData::set_has_body() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharData::clear_has_body() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharData::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 CharData::body() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.body)
  return body_;
}
inline void CharData::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.body)
}

// optional uint32 head = 10 [default = 0];
inline bool CharData::has_head() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharData::set_has_head() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharData::clear_has_head() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharData::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 CharData::head() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.head)
  return head_;
}
inline void CharData::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.head)
}

// optional uint32 face = 11 [default = 0];
inline bool CharData::has_face() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharData::set_has_face() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharData::clear_has_face() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharData::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 CharData::face() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.face)
  return face_;
}
inline void CharData::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.face)
}

// optional uint32 mouth = 12 [default = 0];
inline bool CharData::has_mouth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharData::set_has_mouth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharData::clear_has_mouth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharData::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 CharData::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.mouth)
  return mouth_;
}
inline void CharData::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.mouth)
}

// optional uint32 eye = 13 [default = 0];
inline bool CharData::has_eye() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CharData::set_has_eye() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CharData::clear_has_eye() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CharData::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 CharData::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.eye)
  return eye_;
}
inline void CharData::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.eye)
}

// optional uint32 level = 14;
inline bool CharData::has_level() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CharData::set_has_level() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CharData::clear_has_level() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CharData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CharData::level() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.level)
  return level_;
}
inline void CharData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CharData.level)
}

// optional string guildname = 15;
inline bool CharData::has_guildname() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CharData::set_has_guildname() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CharData::clear_has_guildname() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CharData::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& CharData::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.CharData.guildname)
  return *guildname_;
}
inline void CharData::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.CharData.guildname)
}
inline void CharData::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.CharData.guildname)
}
inline void CharData::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.CharData.guildname)
}
inline ::std::string* CharData::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.CharData.guildname)
  return guildname_;
}
inline ::std::string* CharData::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void CharData::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CharData.guildname)
}

// -------------------------------------------------------------------

// BirefWeddingInfo

// optional uint64 id = 1;
inline bool BirefWeddingInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BirefWeddingInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BirefWeddingInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BirefWeddingInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 BirefWeddingInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.id)
  return id_;
}
inline void BirefWeddingInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.id)
}

// optional .Cmd.EWeddingStatus status = 2;
inline bool BirefWeddingInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BirefWeddingInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BirefWeddingInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BirefWeddingInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::EWeddingStatus BirefWeddingInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.status)
  return static_cast< ::Cmd::EWeddingStatus >(status_);
}
inline void BirefWeddingInfo::set_status(::Cmd::EWeddingStatus value) {
  assert(::Cmd::EWeddingStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.status)
}

// optional .Cmd.CharData char1 = 3;
inline bool BirefWeddingInfo::has_char1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BirefWeddingInfo::set_has_char1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BirefWeddingInfo::clear_has_char1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BirefWeddingInfo::clear_char1() {
  if (char1_ != NULL) char1_->::Cmd::CharData::Clear();
  clear_has_char1();
}
inline const ::Cmd::CharData& BirefWeddingInfo::char1() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.char1)
  return char1_ != NULL ? *char1_ : *default_instance_->char1_;
}
inline ::Cmd::CharData* BirefWeddingInfo::mutable_char1() {
  set_has_char1();
  if (char1_ == NULL) char1_ = new ::Cmd::CharData;
  // @@protoc_insertion_point(field_mutable:Cmd.BirefWeddingInfo.char1)
  return char1_;
}
inline ::Cmd::CharData* BirefWeddingInfo::release_char1() {
  clear_has_char1();
  ::Cmd::CharData* temp = char1_;
  char1_ = NULL;
  return temp;
}
inline void BirefWeddingInfo::set_allocated_char1(::Cmd::CharData* char1) {
  delete char1_;
  char1_ = char1;
  if (char1) {
    set_has_char1();
  } else {
    clear_has_char1();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BirefWeddingInfo.char1)
}

// optional .Cmd.CharData char2 = 4;
inline bool BirefWeddingInfo::has_char2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BirefWeddingInfo::set_has_char2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BirefWeddingInfo::clear_has_char2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BirefWeddingInfo::clear_char2() {
  if (char2_ != NULL) char2_->::Cmd::CharData::Clear();
  clear_has_char2();
}
inline const ::Cmd::CharData& BirefWeddingInfo::char2() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.char2)
  return char2_ != NULL ? *char2_ : *default_instance_->char2_;
}
inline ::Cmd::CharData* BirefWeddingInfo::mutable_char2() {
  set_has_char2();
  if (char2_ == NULL) char2_ = new ::Cmd::CharData;
  // @@protoc_insertion_point(field_mutable:Cmd.BirefWeddingInfo.char2)
  return char2_;
}
inline ::Cmd::CharData* BirefWeddingInfo::release_char2() {
  clear_has_char2();
  ::Cmd::CharData* temp = char2_;
  char2_ = NULL;
  return temp;
}
inline void BirefWeddingInfo::set_allocated_char2(::Cmd::CharData* char2) {
  delete char2_;
  char2_ = char2;
  if (char2) {
    set_has_char2();
  } else {
    clear_has_char2();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BirefWeddingInfo.char2)
}

// optional uint32 zoneid = 5;
inline bool BirefWeddingInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BirefWeddingInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BirefWeddingInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BirefWeddingInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 BirefWeddingInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.zoneid)
  return zoneid_;
}
inline void BirefWeddingInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.zoneid)
}

// optional uint32 starttime = 6;
inline bool BirefWeddingInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BirefWeddingInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BirefWeddingInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BirefWeddingInfo::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 BirefWeddingInfo::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.starttime)
  return starttime_;
}
inline void BirefWeddingInfo::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.starttime)
}

// optional uint32 endtime = 7;
inline bool BirefWeddingInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BirefWeddingInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BirefWeddingInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BirefWeddingInfo::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 BirefWeddingInfo::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.endtime)
  return endtime_;
}
inline void BirefWeddingInfo::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.endtime)
}

// optional bool can_single_divorce = 8;
inline bool BirefWeddingInfo::has_can_single_divorce() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BirefWeddingInfo::set_has_can_single_divorce() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BirefWeddingInfo::clear_has_can_single_divorce() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BirefWeddingInfo::clear_can_single_divorce() {
  can_single_divorce_ = false;
  clear_has_can_single_divorce();
}
inline bool BirefWeddingInfo::can_single_divorce() const {
  // @@protoc_insertion_point(field_get:Cmd.BirefWeddingInfo.can_single_divorce)
  return can_single_divorce_;
}
inline void BirefWeddingInfo::set_can_single_divorce(bool value) {
  set_has_can_single_divorce();
  can_single_divorce_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BirefWeddingInfo.can_single_divorce)
}

// -------------------------------------------------------------------

// ReqWeddingInfoCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReqWeddingInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWeddingInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWeddingInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWeddingInfoCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReqWeddingInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqWeddingInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingInfoCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_WEDDING_INFO];
inline bool ReqWeddingInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqWeddingInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqWeddingInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqWeddingInfoCCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReqWeddingInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingInfoCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReqWeddingInfoCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingInfoCCmd.param)
}

// optional uint64 id = 3;
inline bool ReqWeddingInfoCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqWeddingInfoCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqWeddingInfoCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqWeddingInfoCCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReqWeddingInfoCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingInfoCCmd.id)
  return id_;
}
inline void ReqWeddingInfoCCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWeddingInfoCCmd.id)
}

// optional .Cmd.BirefWeddingInfo info = 4;
inline bool ReqWeddingInfoCCmd::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqWeddingInfoCCmd::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqWeddingInfoCCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqWeddingInfoCCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::BirefWeddingInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::BirefWeddingInfo& ReqWeddingInfoCCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWeddingInfoCCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::BirefWeddingInfo* ReqWeddingInfoCCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::BirefWeddingInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqWeddingInfoCCmd.info)
  return info_;
}
inline ::Cmd::BirefWeddingInfo* ReqWeddingInfoCCmd::release_info() {
  clear_has_info();
  ::Cmd::BirefWeddingInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ReqWeddingInfoCCmd::set_allocated_info(::Cmd::BirefWeddingInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqWeddingInfoCCmd.info)
}

// -------------------------------------------------------------------

// ReserveWeddingDateCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReserveWeddingDateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReserveWeddingDateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReserveWeddingDateCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReserveWeddingDateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReserveWeddingDateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_RESERVE_WEDDINGDATE];
inline bool ReserveWeddingDateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReserveWeddingDateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReserveWeddingDateCCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReserveWeddingDateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReserveWeddingDateCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.param)
}

// optional uint32 date = 3;
inline bool ReserveWeddingDateCCmd::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReserveWeddingDateCCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReserveWeddingDateCCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 ReserveWeddingDateCCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.date)
  return date_;
}
inline void ReserveWeddingDateCCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.date)
}

// optional uint32 configid = 4;
inline bool ReserveWeddingDateCCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReserveWeddingDateCCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReserveWeddingDateCCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 ReserveWeddingDateCCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.configid)
  return configid_;
}
inline void ReserveWeddingDateCCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.configid)
}

// optional uint64 charid2 = 5;
inline bool ReserveWeddingDateCCmd::has_charid2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_charid2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReserveWeddingDateCCmd::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReserveWeddingDateCCmd::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 ReserveWeddingDateCCmd::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.charid2)
  return charid2_;
}
inline void ReserveWeddingDateCCmd::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.charid2)
}

// optional bool use_ticket = 6;
inline bool ReserveWeddingDateCCmd::has_use_ticket() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReserveWeddingDateCCmd::set_has_use_ticket() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReserveWeddingDateCCmd::clear_has_use_ticket() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReserveWeddingDateCCmd::clear_use_ticket() {
  use_ticket_ = false;
  clear_has_use_ticket();
}
inline bool ReserveWeddingDateCCmd::use_ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.ReserveWeddingDateCCmd.use_ticket)
  return use_ticket_;
}
inline void ReserveWeddingDateCCmd::set_use_ticket(bool value) {
  set_has_use_ticket();
  use_ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReserveWeddingDateCCmd.use_ticket)
}

// -------------------------------------------------------------------

// NtfReserveWeddingDateCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool NtfReserveWeddingDateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfReserveWeddingDateCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command NtfReserveWeddingDateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfReserveWeddingDateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_RESERVE_WEDDINGDATE];
inline bool NtfReserveWeddingDateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfReserveWeddingDateCCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::WeddingCParam NtfReserveWeddingDateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void NtfReserveWeddingDateCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.param)
}

// optional uint32 date = 3;
inline bool NtfReserveWeddingDateCCmd::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfReserveWeddingDateCCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.date)
  return date_;
}
inline void NtfReserveWeddingDateCCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.date)
}

// optional uint32 configid = 4;
inline bool NtfReserveWeddingDateCCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfReserveWeddingDateCCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.configid)
  return configid_;
}
inline void NtfReserveWeddingDateCCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.configid)
}

// optional uint64 charid1 = 5;
inline bool NtfReserveWeddingDateCCmd::has_charid1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_charid1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfReserveWeddingDateCCmd::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 NtfReserveWeddingDateCCmd::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.charid1)
  return charid1_;
}
inline void NtfReserveWeddingDateCCmd::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.charid1)
}

// optional string name = 6;
inline bool NtfReserveWeddingDateCCmd::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfReserveWeddingDateCCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NtfReserveWeddingDateCCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.name)
  return *name_;
}
inline void NtfReserveWeddingDateCCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.name)
}
inline void NtfReserveWeddingDateCCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NtfReserveWeddingDateCCmd.name)
}
inline void NtfReserveWeddingDateCCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NtfReserveWeddingDateCCmd.name)
}
inline ::std::string* NtfReserveWeddingDateCCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NtfReserveWeddingDateCCmd.name)
  return name_;
}
inline ::std::string* NtfReserveWeddingDateCCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NtfReserveWeddingDateCCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NtfReserveWeddingDateCCmd.name)
}

// optional uint32 starttime = 7;
inline bool NtfReserveWeddingDateCCmd::has_starttime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_starttime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NtfReserveWeddingDateCCmd::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.starttime)
  return starttime_;
}
inline void NtfReserveWeddingDateCCmd::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.starttime)
}

// optional uint32 endtime = 8;
inline bool NtfReserveWeddingDateCCmd::has_endtime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_endtime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NtfReserveWeddingDateCCmd::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.endtime)
  return endtime_;
}
inline void NtfReserveWeddingDateCCmd::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.endtime)
}

// optional uint32 time = 9;
inline bool NtfReserveWeddingDateCCmd::has_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NtfReserveWeddingDateCCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.time)
  return time_;
}
inline void NtfReserveWeddingDateCCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.time)
}

// optional bool use_ticket = 10;
inline bool NtfReserveWeddingDateCCmd::has_use_ticket() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_use_ticket() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_use_ticket() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NtfReserveWeddingDateCCmd::clear_use_ticket() {
  use_ticket_ = false;
  clear_has_use_ticket();
}
inline bool NtfReserveWeddingDateCCmd::use_ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.use_ticket)
  return use_ticket_;
}
inline void NtfReserveWeddingDateCCmd::set_use_ticket(bool value) {
  set_has_use_ticket();
  use_ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.use_ticket)
}

// optional uint32 zoneid = 11;
inline bool NtfReserveWeddingDateCCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NtfReserveWeddingDateCCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 NtfReserveWeddingDateCCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.zoneid)
  return zoneid_;
}
inline void NtfReserveWeddingDateCCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.zoneid)
}

// optional string sign = 12;
inline bool NtfReserveWeddingDateCCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NtfReserveWeddingDateCCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NtfReserveWeddingDateCCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NtfReserveWeddingDateCCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& NtfReserveWeddingDateCCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfReserveWeddingDateCCmd.sign)
  return *sign_;
}
inline void NtfReserveWeddingDateCCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NtfReserveWeddingDateCCmd.sign)
}
inline void NtfReserveWeddingDateCCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NtfReserveWeddingDateCCmd.sign)
}
inline void NtfReserveWeddingDateCCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NtfReserveWeddingDateCCmd.sign)
}
inline ::std::string* NtfReserveWeddingDateCCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NtfReserveWeddingDateCCmd.sign)
  return sign_;
}
inline ::std::string* NtfReserveWeddingDateCCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NtfReserveWeddingDateCCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NtfReserveWeddingDateCCmd.sign)
}

// -------------------------------------------------------------------

// ReplyReserveWeddingDateCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReplyReserveWeddingDateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyReserveWeddingDateCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReplyReserveWeddingDateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReplyReserveWeddingDateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_RESERVE_WEDDINGDATE];
inline bool ReplyReserveWeddingDateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyReserveWeddingDateCCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReplyReserveWeddingDateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReplyReserveWeddingDateCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.param)
}

// optional uint32 date = 3;
inline bool ReplyReserveWeddingDateCCmd::has_date() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_date() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_date() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyReserveWeddingDateCCmd::clear_date() {
  date_ = 0u;
  clear_has_date();
}
inline ::google::protobuf::uint32 ReplyReserveWeddingDateCCmd::date() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.date)
  return date_;
}
inline void ReplyReserveWeddingDateCCmd::set_date(::google::protobuf::uint32 value) {
  set_has_date();
  date_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.date)
}

// optional uint32 configid = 4;
inline bool ReplyReserveWeddingDateCCmd::has_configid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_configid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_configid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReplyReserveWeddingDateCCmd::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 ReplyReserveWeddingDateCCmd::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.configid)
  return configid_;
}
inline void ReplyReserveWeddingDateCCmd::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.configid)
}

// optional uint64 charid1 = 5;
inline bool ReplyReserveWeddingDateCCmd::has_charid1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_charid1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReplyReserveWeddingDateCCmd::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 ReplyReserveWeddingDateCCmd::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.charid1)
  return charid1_;
}
inline void ReplyReserveWeddingDateCCmd::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.charid1)
}

// optional .Cmd.EReply reply = 6;
inline bool ReplyReserveWeddingDateCCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReplyReserveWeddingDateCCmd::clear_reply() {
  reply_ = 1;
  clear_has_reply();
}
inline ::Cmd::EReply ReplyReserveWeddingDateCCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.reply)
  return static_cast< ::Cmd::EReply >(reply_);
}
inline void ReplyReserveWeddingDateCCmd::set_reply(::Cmd::EReply value) {
  assert(::Cmd::EReply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.reply)
}

// optional uint32 time = 7;
inline bool ReplyReserveWeddingDateCCmd::has_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReplyReserveWeddingDateCCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ReplyReserveWeddingDateCCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.time)
  return time_;
}
inline void ReplyReserveWeddingDateCCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.time)
}

// optional bool use_ticket = 8;
inline bool ReplyReserveWeddingDateCCmd::has_use_ticket() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_use_ticket() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_use_ticket() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReplyReserveWeddingDateCCmd::clear_use_ticket() {
  use_ticket_ = false;
  clear_has_use_ticket();
}
inline bool ReplyReserveWeddingDateCCmd::use_ticket() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.use_ticket)
  return use_ticket_;
}
inline void ReplyReserveWeddingDateCCmd::set_use_ticket(bool value) {
  set_has_use_ticket();
  use_ticket_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.use_ticket)
}

// optional uint32 zoneid = 9;
inline bool ReplyReserveWeddingDateCCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReplyReserveWeddingDateCCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ReplyReserveWeddingDateCCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.zoneid)
  return zoneid_;
}
inline void ReplyReserveWeddingDateCCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.zoneid)
}

// optional string sign = 10;
inline bool ReplyReserveWeddingDateCCmd::has_sign() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReplyReserveWeddingDateCCmd::set_has_sign() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReplyReserveWeddingDateCCmd::clear_has_sign() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReplyReserveWeddingDateCCmd::clear_sign() {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& ReplyReserveWeddingDateCCmd::sign() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyReserveWeddingDateCCmd.sign)
  return *sign_;
}
inline void ReplyReserveWeddingDateCCmd::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ReplyReserveWeddingDateCCmd.sign)
}
inline void ReplyReserveWeddingDateCCmd::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ReplyReserveWeddingDateCCmd.sign)
}
inline void ReplyReserveWeddingDateCCmd::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ReplyReserveWeddingDateCCmd.sign)
}
inline ::std::string* ReplyReserveWeddingDateCCmd::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sign_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ReplyReserveWeddingDateCCmd.sign)
  return sign_;
}
inline ::std::string* ReplyReserveWeddingDateCCmd::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ReplyReserveWeddingDateCCmd::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReplyReserveWeddingDateCCmd.sign)
}

// -------------------------------------------------------------------

// GiveUpReserveCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool GiveUpReserveCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveUpReserveCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveUpReserveCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveUpReserveCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command GiveUpReserveCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveUpReserveCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GiveUpReserveCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveUpReserveCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GIVEUP_RESERVE];
inline bool GiveUpReserveCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveUpReserveCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveUpReserveCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveUpReserveCCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::WeddingCParam GiveUpReserveCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveUpReserveCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void GiveUpReserveCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveUpReserveCCmd.param)
}

// optional uint64 id = 3;
inline bool GiveUpReserveCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveUpReserveCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveUpReserveCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveUpReserveCCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GiveUpReserveCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveUpReserveCCmd.id)
  return id_;
}
inline void GiveUpReserveCCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveUpReserveCCmd.id)
}

// -------------------------------------------------------------------

// ReqDivorceCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReqDivorceCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDivorceCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDivorceCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDivorceCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReqDivorceCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqDivorceCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqDivorceCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqDivorceCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_DIVORCE];
inline bool ReqDivorceCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqDivorceCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqDivorceCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqDivorceCCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReqDivorceCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqDivorceCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReqDivorceCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqDivorceCCmd.param)
}

// optional uint64 id = 3;
inline bool ReqDivorceCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqDivorceCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqDivorceCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqDivorceCCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReqDivorceCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqDivorceCCmd.id)
  return id_;
}
inline void ReqDivorceCCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqDivorceCCmd.id)
}

// optional .Cmd.EGiveUpType type = 4;
inline bool ReqDivorceCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqDivorceCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqDivorceCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqDivorceCCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EGiveUpType ReqDivorceCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqDivorceCCmd.type)
  return static_cast< ::Cmd::EGiveUpType >(type_);
}
inline void ReqDivorceCCmd::set_type(::Cmd::EGiveUpType value) {
  assert(::Cmd::EGiveUpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqDivorceCCmd.type)
}

// -------------------------------------------------------------------

// ClientWeddingManual

// repeated uint32 packageids = 1;
inline int ClientWeddingManual::packageids_size() const {
  return packageids_.size();
}
inline void ClientWeddingManual::clear_packageids() {
  packageids_.Clear();
}
inline ::google::protobuf::uint32 ClientWeddingManual::packageids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ClientWeddingManual.packageids)
  return packageids_.Get(index);
}
inline void ClientWeddingManual::set_packageids(int index, ::google::protobuf::uint32 value) {
  packageids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ClientWeddingManual.packageids)
}
inline void ClientWeddingManual::add_packageids(::google::protobuf::uint32 value) {
  packageids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ClientWeddingManual.packageids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClientWeddingManual::packageids() const {
  // @@protoc_insertion_point(field_list:Cmd.ClientWeddingManual.packageids)
  return packageids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClientWeddingManual::mutable_packageids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ClientWeddingManual.packageids)
  return &packageids_;
}

// optional uint32 ringid = 2 [default = 0];
inline bool ClientWeddingManual::has_ringid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientWeddingManual::set_has_ringid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientWeddingManual::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientWeddingManual::clear_ringid() {
  ringid_ = 0u;
  clear_has_ringid();
}
inline ::google::protobuf::uint32 ClientWeddingManual::ringid() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientWeddingManual.ringid)
  return ringid_;
}
inline void ClientWeddingManual::set_ringid(::google::protobuf::uint32 value) {
  set_has_ringid();
  ringid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientWeddingManual.ringid)
}

// optional uint32 photoindex = 3 [default = 0];
inline bool ClientWeddingManual::has_photoindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientWeddingManual::set_has_photoindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientWeddingManual::clear_has_photoindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientWeddingManual::clear_photoindex() {
  photoindex_ = 0u;
  clear_has_photoindex();
}
inline ::google::protobuf::uint32 ClientWeddingManual::photoindex() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientWeddingManual.photoindex)
  return photoindex_;
}
inline void ClientWeddingManual::set_photoindex(::google::protobuf::uint32 value) {
  set_has_photoindex();
  photoindex_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientWeddingManual.photoindex)
}

// optional uint32 phototime = 4 [default = 0];
inline bool ClientWeddingManual::has_phototime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientWeddingManual::set_has_phototime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientWeddingManual::clear_has_phototime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientWeddingManual::clear_phototime() {
  phototime_ = 0u;
  clear_has_phototime();
}
inline ::google::protobuf::uint32 ClientWeddingManual::phototime() const {
  // @@protoc_insertion_point(field_get:Cmd.ClientWeddingManual.phototime)
  return phototime_;
}
inline void ClientWeddingManual::set_phototime(::google::protobuf::uint32 value) {
  set_has_phototime();
  phototime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ClientWeddingManual.phototime)
}

// -------------------------------------------------------------------

// WeddingInvitee

// optional uint64 charid = 1 [default = 0];
inline bool WeddingInvitee::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingInvitee::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingInvitee::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingInvitee::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 WeddingInvitee::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInvitee.charid)
  return charid_;
}
inline void WeddingInvitee::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInvitee.charid)
}

// optional string name = 2;
inline bool WeddingInvitee::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingInvitee::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingInvitee::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingInvitee::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WeddingInvitee::name() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInvitee.name)
  return *name_;
}
inline void WeddingInvitee::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingInvitee.name)
}
inline void WeddingInvitee::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingInvitee.name)
}
inline void WeddingInvitee::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingInvitee.name)
}
inline ::std::string* WeddingInvitee::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingInvitee.name)
  return name_;
}
inline ::std::string* WeddingInvitee::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingInvitee::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingInvitee.name)
}

// optional uint32 invitetime = 3 [default = 0];
inline bool WeddingInvitee::has_invitetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingInvitee::set_has_invitetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingInvitee::clear_has_invitetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingInvitee::clear_invitetime() {
  invitetime_ = 0u;
  clear_has_invitetime();
}
inline ::google::protobuf::uint32 WeddingInvitee::invitetime() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInvitee.invitetime)
  return invitetime_;
}
inline void WeddingInvitee::set_invitetime(::google::protobuf::uint32 value) {
  set_has_invitetime();
  invitetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInvitee.invitetime)
}

// -------------------------------------------------------------------

// UpdateWeddingManualCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool UpdateWeddingManualCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateWeddingManualCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateWeddingManualCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateWeddingManualCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateWeddingManualCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateWeddingManualCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateWeddingManualCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPDATE_MANUAL];
inline bool UpdateWeddingManualCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateWeddingManualCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateWeddingManualCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateWeddingManualCCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::WeddingCParam UpdateWeddingManualCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void UpdateWeddingManualCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateWeddingManualCCmd.param)
}

// optional .Cmd.ClientWeddingManual manual = 3;
inline bool UpdateWeddingManualCCmd::has_manual() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateWeddingManualCCmd::set_has_manual() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateWeddingManualCCmd::clear_has_manual() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateWeddingManualCCmd::clear_manual() {
  if (manual_ != NULL) manual_->::Cmd::ClientWeddingManual::Clear();
  clear_has_manual();
}
inline const ::Cmd::ClientWeddingManual& UpdateWeddingManualCCmd::manual() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualCCmd.manual)
  return manual_ != NULL ? *manual_ : *default_instance_->manual_;
}
inline ::Cmd::ClientWeddingManual* UpdateWeddingManualCCmd::mutable_manual() {
  set_has_manual();
  if (manual_ == NULL) manual_ = new ::Cmd::ClientWeddingManual;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateWeddingManualCCmd.manual)
  return manual_;
}
inline ::Cmd::ClientWeddingManual* UpdateWeddingManualCCmd::release_manual() {
  clear_has_manual();
  ::Cmd::ClientWeddingManual* temp = manual_;
  manual_ = NULL;
  return temp;
}
inline void UpdateWeddingManualCCmd::set_allocated_manual(::Cmd::ClientWeddingManual* manual) {
  delete manual_;
  manual_ = manual;
  if (manual) {
    set_has_manual();
  } else {
    clear_has_manual();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateWeddingManualCCmd.manual)
}

// repeated .Cmd.WeddingInvitee invitees = 4;
inline int UpdateWeddingManualCCmd::invitees_size() const {
  return invitees_.size();
}
inline void UpdateWeddingManualCCmd::clear_invitees() {
  invitees_.Clear();
}
inline const ::Cmd::WeddingInvitee& UpdateWeddingManualCCmd::invitees(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateWeddingManualCCmd.invitees)
  return invitees_.Get(index);
}
inline ::Cmd::WeddingInvitee* UpdateWeddingManualCCmd::mutable_invitees(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateWeddingManualCCmd.invitees)
  return invitees_.Mutable(index);
}
inline ::Cmd::WeddingInvitee* UpdateWeddingManualCCmd::add_invitees() {
  // @@protoc_insertion_point(field_add:Cmd.UpdateWeddingManualCCmd.invitees)
  return invitees_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >&
UpdateWeddingManualCCmd::invitees() const {
  // @@protoc_insertion_point(field_list:Cmd.UpdateWeddingManualCCmd.invitees)
  return invitees_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::WeddingInvitee >*
UpdateWeddingManualCCmd::mutable_invitees() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.UpdateWeddingManualCCmd.invitees)
  return &invitees_;
}

// -------------------------------------------------------------------

// BuyWeddingPackageCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool BuyWeddingPackageCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyWeddingPackageCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyWeddingPackageCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyWeddingPackageCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command BuyWeddingPackageCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingPackageCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyWeddingPackageCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingPackageCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_PACKAGE];
inline bool BuyWeddingPackageCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyWeddingPackageCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyWeddingPackageCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyWeddingPackageCCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::WeddingCParam BuyWeddingPackageCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingPackageCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void BuyWeddingPackageCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingPackageCCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool BuyWeddingPackageCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyWeddingPackageCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyWeddingPackageCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyWeddingPackageCCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BuyWeddingPackageCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingPackageCCmd.id)
  return id_;
}
inline void BuyWeddingPackageCCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingPackageCCmd.id)
}

// optional uint32 priceitem = 4 [default = 0];
inline bool BuyWeddingPackageCCmd::has_priceitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyWeddingPackageCCmd::set_has_priceitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyWeddingPackageCCmd::clear_has_priceitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyWeddingPackageCCmd::clear_priceitem() {
  priceitem_ = 0u;
  clear_has_priceitem();
}
inline ::google::protobuf::uint32 BuyWeddingPackageCCmd::priceitem() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingPackageCCmd.priceitem)
  return priceitem_;
}
inline void BuyWeddingPackageCCmd::set_priceitem(::google::protobuf::uint32 value) {
  set_has_priceitem();
  priceitem_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingPackageCCmd.priceitem)
}

// -------------------------------------------------------------------

// BuyWeddingRingCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool BuyWeddingRingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyWeddingRingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyWeddingRingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyWeddingRingCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command BuyWeddingRingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingRingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyWeddingRingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingRingCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_BUY_RING];
inline bool BuyWeddingRingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyWeddingRingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyWeddingRingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyWeddingRingCCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::WeddingCParam BuyWeddingRingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingRingCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void BuyWeddingRingCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingRingCCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool BuyWeddingRingCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyWeddingRingCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyWeddingRingCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyWeddingRingCCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 BuyWeddingRingCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingRingCCmd.id)
  return id_;
}
inline void BuyWeddingRingCCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingRingCCmd.id)
}

// optional uint32 priceitem = 4 [default = 0];
inline bool BuyWeddingRingCCmd::has_priceitem() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyWeddingRingCCmd::set_has_priceitem() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyWeddingRingCCmd::clear_has_priceitem() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyWeddingRingCCmd::clear_priceitem() {
  priceitem_ = 0u;
  clear_has_priceitem();
}
inline ::google::protobuf::uint32 BuyWeddingRingCCmd::priceitem() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyWeddingRingCCmd.priceitem)
  return priceitem_;
}
inline void BuyWeddingRingCCmd::set_priceitem(::google::protobuf::uint32 value) {
  set_has_priceitem();
  priceitem_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyWeddingRingCCmd.priceitem)
}

// -------------------------------------------------------------------

// WeddingInviteCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool WeddingInviteCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingInviteCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingInviteCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingInviteCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command WeddingInviteCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInviteCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WeddingInviteCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInviteCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE];
inline bool WeddingInviteCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingInviteCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingInviteCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingInviteCCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::WeddingCParam WeddingInviteCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInviteCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void WeddingInviteCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingInviteCCmd.param)
}

// repeated uint64 charids = 3;
inline int WeddingInviteCCmd::charids_size() const {
  return charids_.size();
}
inline void WeddingInviteCCmd::clear_charids() {
  charids_.Clear();
}
inline ::google::protobuf::uint64 WeddingInviteCCmd::charids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingInviteCCmd.charids)
  return charids_.Get(index);
}
inline void WeddingInviteCCmd::set_charids(int index, ::google::protobuf::uint64 value) {
  charids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingInviteCCmd.charids)
}
inline void WeddingInviteCCmd::add_charids(::google::protobuf::uint64 value) {
  charids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.WeddingInviteCCmd.charids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
WeddingInviteCCmd::charids() const {
  // @@protoc_insertion_point(field_list:Cmd.WeddingInviteCCmd.charids)
  return charids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
WeddingInviteCCmd::mutable_charids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.WeddingInviteCCmd.charids)
  return &charids_;
}

// -------------------------------------------------------------------

// UploadWeddingPhotoCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool UploadWeddingPhotoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UploadWeddingPhotoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UploadWeddingPhotoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UploadWeddingPhotoCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command UploadWeddingPhotoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UploadWeddingPhotoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_UPLOAD_WEDDING_PHOTO];
inline bool UploadWeddingPhotoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UploadWeddingPhotoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UploadWeddingPhotoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UploadWeddingPhotoCCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::WeddingCParam UploadWeddingPhotoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void UploadWeddingPhotoCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoCCmd.param)
}

// optional uint32 index = 3 [default = 0];
inline bool UploadWeddingPhotoCCmd::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UploadWeddingPhotoCCmd::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UploadWeddingPhotoCCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UploadWeddingPhotoCCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 UploadWeddingPhotoCCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoCCmd.index)
  return index_;
}
inline void UploadWeddingPhotoCCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoCCmd.index)
}

// optional uint32 time = 4 [default = 0];
inline bool UploadWeddingPhotoCCmd::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UploadWeddingPhotoCCmd::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UploadWeddingPhotoCCmd::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UploadWeddingPhotoCCmd::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 UploadWeddingPhotoCCmd::time() const {
  // @@protoc_insertion_point(field_get:Cmd.UploadWeddingPhotoCCmd.time)
  return time_;
}
inline void UploadWeddingPhotoCCmd::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UploadWeddingPhotoCCmd.time)
}

// -------------------------------------------------------------------

// CheckCanReserveCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool CheckCanReserveCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckCanReserveCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckCanReserveCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckCanReserveCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command CheckCanReserveCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanReserveCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckCanReserveCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanReserveCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CHECK_CAN_RESERVE];
inline bool CheckCanReserveCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckCanReserveCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckCanReserveCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckCanReserveCCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::WeddingCParam CheckCanReserveCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanReserveCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void CheckCanReserveCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanReserveCCmd.param)
}

// optional uint64 charid2 = 3;
inline bool CheckCanReserveCCmd::has_charid2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CheckCanReserveCCmd::set_has_charid2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CheckCanReserveCCmd::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CheckCanReserveCCmd::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 CheckCanReserveCCmd::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanReserveCCmd.charid2)
  return charid2_;
}
inline void CheckCanReserveCCmd::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanReserveCCmd.charid2)
}

// optional bool success = 4;
inline bool CheckCanReserveCCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckCanReserveCCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckCanReserveCCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckCanReserveCCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool CheckCanReserveCCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckCanReserveCCmd.success)
  return success_;
}
inline void CheckCanReserveCCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckCanReserveCCmd.success)
}

// -------------------------------------------------------------------

// ReqPartnerInfoCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReqPartnerInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPartnerInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPartnerInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPartnerInfoCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReqPartnerInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqPartnerInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqPartnerInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqPartnerInfoCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REQ_PARTNER_INFO];
inline bool ReqPartnerInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPartnerInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPartnerInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPartnerInfoCCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReqPartnerInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqPartnerInfoCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReqPartnerInfoCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqPartnerInfoCCmd.param)
}

// optional .Cmd.CharData chardata = 3;
inline bool ReqPartnerInfoCCmd::has_chardata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqPartnerInfoCCmd::set_has_chardata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqPartnerInfoCCmd::clear_has_chardata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqPartnerInfoCCmd::clear_chardata() {
  if (chardata_ != NULL) chardata_->::Cmd::CharData::Clear();
  clear_has_chardata();
}
inline const ::Cmd::CharData& ReqPartnerInfoCCmd::chardata() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqPartnerInfoCCmd.chardata)
  return chardata_ != NULL ? *chardata_ : *default_instance_->chardata_;
}
inline ::Cmd::CharData* ReqPartnerInfoCCmd::mutable_chardata() {
  set_has_chardata();
  if (chardata_ == NULL) chardata_ = new ::Cmd::CharData;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqPartnerInfoCCmd.chardata)
  return chardata_;
}
inline ::Cmd::CharData* ReqPartnerInfoCCmd::release_chardata() {
  clear_has_chardata();
  ::Cmd::CharData* temp = chardata_;
  chardata_ = NULL;
  return temp;
}
inline void ReqPartnerInfoCCmd::set_allocated_chardata(::Cmd::CharData* chardata) {
  delete chardata_;
  chardata_ = chardata;
  if (chardata) {
    set_has_chardata();
  } else {
    clear_has_chardata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqPartnerInfoCCmd.chardata)
}

// -------------------------------------------------------------------

// NtfWeddingInfoCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool NtfWeddingInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfWeddingInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfWeddingInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfWeddingInfoCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command NtfWeddingInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfWeddingInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfWeddingInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfWeddingInfoCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_NTF_WEDDING_INFO];
inline bool NtfWeddingInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfWeddingInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfWeddingInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfWeddingInfoCCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::WeddingCParam NtfWeddingInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfWeddingInfoCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void NtfWeddingInfoCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfWeddingInfoCCmd.param)
}

// optional .Cmd.BirefWeddingInfo info = 3;
inline bool NtfWeddingInfoCCmd::has_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfWeddingInfoCCmd::set_has_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfWeddingInfoCCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfWeddingInfoCCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::BirefWeddingInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::BirefWeddingInfo& NtfWeddingInfoCCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfWeddingInfoCCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::BirefWeddingInfo* NtfWeddingInfoCCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::BirefWeddingInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.NtfWeddingInfoCCmd.info)
  return info_;
}
inline ::Cmd::BirefWeddingInfo* NtfWeddingInfoCCmd::release_info() {
  clear_has_info();
  ::Cmd::BirefWeddingInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void NtfWeddingInfoCCmd::set_allocated_info(::Cmd::BirefWeddingInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NtfWeddingInfoCCmd.info)
}

// -------------------------------------------------------------------

// InviteBeginWeddingCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool InviteBeginWeddingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteBeginWeddingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteBeginWeddingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteBeginWeddingCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command InviteBeginWeddingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteBeginWeddingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void InviteBeginWeddingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteBeginWeddingCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_INVITE_WEDDING];
inline bool InviteBeginWeddingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InviteBeginWeddingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InviteBeginWeddingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InviteBeginWeddingCCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::WeddingCParam InviteBeginWeddingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteBeginWeddingCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void InviteBeginWeddingCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteBeginWeddingCCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool InviteBeginWeddingCCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InviteBeginWeddingCCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InviteBeginWeddingCCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InviteBeginWeddingCCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 InviteBeginWeddingCCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteBeginWeddingCCmd.masterid)
  return masterid_;
}
inline void InviteBeginWeddingCCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteBeginWeddingCCmd.masterid)
}

// optional string name = 5;
inline bool InviteBeginWeddingCCmd::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InviteBeginWeddingCCmd::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InviteBeginWeddingCCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InviteBeginWeddingCCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& InviteBeginWeddingCCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteBeginWeddingCCmd.name)
  return *name_;
}
inline void InviteBeginWeddingCCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.InviteBeginWeddingCCmd.name)
}
inline void InviteBeginWeddingCCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.InviteBeginWeddingCCmd.name)
}
inline void InviteBeginWeddingCCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.InviteBeginWeddingCCmd.name)
}
inline ::std::string* InviteBeginWeddingCCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.InviteBeginWeddingCCmd.name)
  return name_;
}
inline ::std::string* InviteBeginWeddingCCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void InviteBeginWeddingCCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.InviteBeginWeddingCCmd.name)
}

// optional uint64 tocharid = 6 [default = 0];
inline bool InviteBeginWeddingCCmd::has_tocharid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InviteBeginWeddingCCmd::set_has_tocharid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InviteBeginWeddingCCmd::clear_has_tocharid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InviteBeginWeddingCCmd::clear_tocharid() {
  tocharid_ = GOOGLE_ULONGLONG(0);
  clear_has_tocharid();
}
inline ::google::protobuf::uint64 InviteBeginWeddingCCmd::tocharid() const {
  // @@protoc_insertion_point(field_get:Cmd.InviteBeginWeddingCCmd.tocharid)
  return tocharid_;
}
inline void InviteBeginWeddingCCmd::set_tocharid(::google::protobuf::uint64 value) {
  set_has_tocharid();
  tocharid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.InviteBeginWeddingCCmd.tocharid)
}

// -------------------------------------------------------------------

// ReplyBeginWeddingCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool ReplyBeginWeddingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplyBeginWeddingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplyBeginWeddingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplyBeginWeddingCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command ReplyBeginWeddingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyBeginWeddingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReplyBeginWeddingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyBeginWeddingCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_REPLY_WEDDING];
inline bool ReplyBeginWeddingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReplyBeginWeddingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReplyBeginWeddingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReplyBeginWeddingCCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::WeddingCParam ReplyBeginWeddingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyBeginWeddingCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void ReplyBeginWeddingCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyBeginWeddingCCmd.param)
}

// optional uint64 masterid = 3 [default = 0];
inline bool ReplyBeginWeddingCCmd::has_masterid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReplyBeginWeddingCCmd::set_has_masterid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReplyBeginWeddingCCmd::clear_has_masterid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReplyBeginWeddingCCmd::clear_masterid() {
  masterid_ = GOOGLE_ULONGLONG(0);
  clear_has_masterid();
}
inline ::google::protobuf::uint64 ReplyBeginWeddingCCmd::masterid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReplyBeginWeddingCCmd.masterid)
  return masterid_;
}
inline void ReplyBeginWeddingCCmd::set_masterid(::google::protobuf::uint64 value) {
  set_has_masterid();
  masterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReplyBeginWeddingCCmd.masterid)
}

// -------------------------------------------------------------------

// GoToWeddingPosCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool GoToWeddingPosCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GoToWeddingPosCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GoToWeddingPosCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GoToWeddingPosCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command GoToWeddingPosCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToWeddingPosCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GoToWeddingPosCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToWeddingPosCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_GOTO_WEDDINGPOS];
inline bool GoToWeddingPosCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GoToWeddingPosCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GoToWeddingPosCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GoToWeddingPosCCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::WeddingCParam GoToWeddingPosCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GoToWeddingPosCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void GoToWeddingPosCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GoToWeddingPosCCmd.param)
}

// -------------------------------------------------------------------

// QuestionWeddingCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool QuestionWeddingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QuestionWeddingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QuestionWeddingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QuestionWeddingCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command QuestionWeddingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestionWeddingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QuestionWeddingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestionWeddingCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION];
inline bool QuestionWeddingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QuestionWeddingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QuestionWeddingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QuestionWeddingCCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::WeddingCParam QuestionWeddingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestionWeddingCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void QuestionWeddingCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestionWeddingCCmd.param)
}

// optional uint32 questionid = 3 [default = 0];
inline bool QuestionWeddingCCmd::has_questionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QuestionWeddingCCmd::set_has_questionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QuestionWeddingCCmd::clear_has_questionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QuestionWeddingCCmd::clear_questionid() {
  questionid_ = 0u;
  clear_has_questionid();
}
inline ::google::protobuf::uint32 QuestionWeddingCCmd::questionid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestionWeddingCCmd.questionid)
  return questionid_;
}
inline void QuestionWeddingCCmd::set_questionid(::google::protobuf::uint32 value) {
  set_has_questionid();
  questionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestionWeddingCCmd.questionid)
}

// repeated uint64 charids = 4;
inline int QuestionWeddingCCmd::charids_size() const {
  return charids_.size();
}
inline void QuestionWeddingCCmd::clear_charids() {
  charids_.Clear();
}
inline ::google::protobuf::uint64 QuestionWeddingCCmd::charids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QuestionWeddingCCmd.charids)
  return charids_.Get(index);
}
inline void QuestionWeddingCCmd::set_charids(int index, ::google::protobuf::uint64 value) {
  charids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.QuestionWeddingCCmd.charids)
}
inline void QuestionWeddingCCmd::add_charids(::google::protobuf::uint64 value) {
  charids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.QuestionWeddingCCmd.charids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
QuestionWeddingCCmd::charids() const {
  // @@protoc_insertion_point(field_list:Cmd.QuestionWeddingCCmd.charids)
  return charids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
QuestionWeddingCCmd::mutable_charids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QuestionWeddingCCmd.charids)
  return &charids_;
}

// optional uint64 npcguid = 5 [default = 0];
inline bool QuestionWeddingCCmd::has_npcguid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QuestionWeddingCCmd::set_has_npcguid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QuestionWeddingCCmd::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QuestionWeddingCCmd::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 QuestionWeddingCCmd::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.QuestionWeddingCCmd.npcguid)
  return npcguid_;
}
inline void QuestionWeddingCCmd::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QuestionWeddingCCmd.npcguid)
}

// -------------------------------------------------------------------

// AnswerWeddingCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool AnswerWeddingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AnswerWeddingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AnswerWeddingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AnswerWeddingCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command AnswerWeddingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AnswerWeddingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AnswerWeddingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AnswerWeddingCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ANSWER];
inline bool AnswerWeddingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AnswerWeddingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AnswerWeddingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AnswerWeddingCCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::WeddingCParam AnswerWeddingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AnswerWeddingCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void AnswerWeddingCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AnswerWeddingCCmd.param)
}

// optional uint32 questionid = 3 [default = 0];
inline bool AnswerWeddingCCmd::has_questionid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AnswerWeddingCCmd::set_has_questionid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AnswerWeddingCCmd::clear_has_questionid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AnswerWeddingCCmd::clear_questionid() {
  questionid_ = 0u;
  clear_has_questionid();
}
inline ::google::protobuf::uint32 AnswerWeddingCCmd::questionid() const {
  // @@protoc_insertion_point(field_get:Cmd.AnswerWeddingCCmd.questionid)
  return questionid_;
}
inline void AnswerWeddingCCmd::set_questionid(::google::protobuf::uint32 value) {
  set_has_questionid();
  questionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AnswerWeddingCCmd.questionid)
}

// optional uint32 answer = 4 [default = 0];
inline bool AnswerWeddingCCmd::has_answer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AnswerWeddingCCmd::set_has_answer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AnswerWeddingCCmd::clear_has_answer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AnswerWeddingCCmd::clear_answer() {
  answer_ = 0u;
  clear_has_answer();
}
inline ::google::protobuf::uint32 AnswerWeddingCCmd::answer() const {
  // @@protoc_insertion_point(field_get:Cmd.AnswerWeddingCCmd.answer)
  return answer_;
}
inline void AnswerWeddingCCmd::set_answer(::google::protobuf::uint32 value) {
  set_has_answer();
  answer_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AnswerWeddingCCmd.answer)
}

// -------------------------------------------------------------------

// WeddingEventMsgCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool WeddingEventMsgCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingEventMsgCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingEventMsgCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command WeddingEventMsgCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WeddingEventMsgCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_EVENT_MSG];
inline bool WeddingEventMsgCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingEventMsgCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingEventMsgCCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::WeddingCParam WeddingEventMsgCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void WeddingEventMsgCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.param)
}

// optional uint64 charid = 3;
inline bool WeddingEventMsgCCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingEventMsgCCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingEventMsgCCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 WeddingEventMsgCCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.charid)
  return charid_;
}
inline void WeddingEventMsgCCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.charid)
}

// optional .Cmd.EWeddingEvent event = 4;
inline bool WeddingEventMsgCCmd::has_event() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_event() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingEventMsgCCmd::clear_has_event() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingEventMsgCCmd::clear_event() {
  event_ = 1;
  clear_has_event();
}
inline ::Cmd::EWeddingEvent WeddingEventMsgCCmd::event() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.event)
  return static_cast< ::Cmd::EWeddingEvent >(event_);
}
inline void WeddingEventMsgCCmd::set_event(::Cmd::EWeddingEvent value) {
  assert(::Cmd::EWeddingEvent_IsValid(value));
  set_has_event();
  event_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.event)
}

// optional uint64 id = 5;
inline bool WeddingEventMsgCCmd::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WeddingEventMsgCCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WeddingEventMsgCCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WeddingEventMsgCCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.id)
  return id_;
}
inline void WeddingEventMsgCCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.id)
}

// optional uint64 charid1 = 6;
inline bool WeddingEventMsgCCmd::has_charid1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_charid1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WeddingEventMsgCCmd::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WeddingEventMsgCCmd::clear_charid1() {
  charid1_ = GOOGLE_ULONGLONG(0);
  clear_has_charid1();
}
inline ::google::protobuf::uint64 WeddingEventMsgCCmd::charid1() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.charid1)
  return charid1_;
}
inline void WeddingEventMsgCCmd::set_charid1(::google::protobuf::uint64 value) {
  set_has_charid1();
  charid1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.charid1)
}

// optional uint64 charid2 = 7;
inline bool WeddingEventMsgCCmd::has_charid2() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_charid2() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WeddingEventMsgCCmd::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WeddingEventMsgCCmd::clear_charid2() {
  charid2_ = GOOGLE_ULONGLONG(0);
  clear_has_charid2();
}
inline ::google::protobuf::uint64 WeddingEventMsgCCmd::charid2() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.charid2)
  return charid2_;
}
inline void WeddingEventMsgCCmd::set_charid2(::google::protobuf::uint64 value) {
  set_has_charid2();
  charid2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.charid2)
}

// optional string msg = 8;
inline bool WeddingEventMsgCCmd::has_msg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_msg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WeddingEventMsgCCmd::clear_has_msg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WeddingEventMsgCCmd::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& WeddingEventMsgCCmd::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.msg)
  return *msg_;
}
inline void WeddingEventMsgCCmd::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.msg)
}
inline void WeddingEventMsgCCmd::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.WeddingEventMsgCCmd.msg)
}
inline void WeddingEventMsgCCmd::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.WeddingEventMsgCCmd.msg)
}
inline ::std::string* WeddingEventMsgCCmd::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.WeddingEventMsgCCmd.msg)
  return msg_;
}
inline ::std::string* WeddingEventMsgCCmd::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void WeddingEventMsgCCmd::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.WeddingEventMsgCCmd.msg)
}

// optional uint64 opt_charid = 9;
inline bool WeddingEventMsgCCmd::has_opt_charid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WeddingEventMsgCCmd::set_has_opt_charid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WeddingEventMsgCCmd::clear_has_opt_charid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WeddingEventMsgCCmd::clear_opt_charid() {
  opt_charid_ = GOOGLE_ULONGLONG(0);
  clear_has_opt_charid();
}
inline ::google::protobuf::uint64 WeddingEventMsgCCmd::opt_charid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingEventMsgCCmd.opt_charid)
  return opt_charid_;
}
inline void WeddingEventMsgCCmd::set_opt_charid(::google::protobuf::uint64 value) {
  set_has_opt_charid();
  opt_charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingEventMsgCCmd.opt_charid)
}

// -------------------------------------------------------------------

// WeddingOverCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool WeddingOverCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingOverCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingOverCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingOverCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command WeddingOverCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOverCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WeddingOverCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOverCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_WEDDING_STOP];
inline bool WeddingOverCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingOverCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingOverCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingOverCCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::WeddingCParam WeddingOverCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOverCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void WeddingOverCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOverCCmd.param)
}

// optional bool success = 3 [default = false];
inline bool WeddingOverCCmd::has_success() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingOverCCmd::set_has_success() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingOverCCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingOverCCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool WeddingOverCCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingOverCCmd.success)
  return success_;
}
inline void WeddingOverCCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingOverCCmd.success)
}

// -------------------------------------------------------------------

// WeddingSwitchQuestionCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool WeddingSwitchQuestionCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingSwitchQuestionCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingSwitchQuestionCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingSwitchQuestionCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command WeddingSwitchQuestionCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingSwitchQuestionCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WeddingSwitchQuestionCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingSwitchQuestionCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_QUESTION_SWITCH];
inline bool WeddingSwitchQuestionCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingSwitchQuestionCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingSwitchQuestionCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingSwitchQuestionCCmd::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::WeddingCParam WeddingSwitchQuestionCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingSwitchQuestionCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void WeddingSwitchQuestionCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingSwitchQuestionCCmd.param)
}

// optional bool onoff = 3 [default = false];
inline bool WeddingSwitchQuestionCCmd::has_onoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WeddingSwitchQuestionCCmd::set_has_onoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WeddingSwitchQuestionCCmd::clear_has_onoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WeddingSwitchQuestionCCmd::clear_onoff() {
  onoff_ = false;
  clear_has_onoff();
}
inline bool WeddingSwitchQuestionCCmd::onoff() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingSwitchQuestionCCmd.onoff)
  return onoff_;
}
inline void WeddingSwitchQuestionCCmd::set_onoff(bool value) {
  set_has_onoff();
  onoff_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingSwitchQuestionCCmd.onoff)
}

// optional uint64 npcguid = 4 [default = 0];
inline bool WeddingSwitchQuestionCCmd::has_npcguid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WeddingSwitchQuestionCCmd::set_has_npcguid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WeddingSwitchQuestionCCmd::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WeddingSwitchQuestionCCmd::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 WeddingSwitchQuestionCCmd::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingSwitchQuestionCCmd.npcguid)
  return npcguid_;
}
inline void WeddingSwitchQuestionCCmd::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingSwitchQuestionCCmd.npcguid)
}

// -------------------------------------------------------------------

// EnterRollerCoasterCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool EnterRollerCoasterCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterRollerCoasterCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterRollerCoasterCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterRollerCoasterCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command EnterRollerCoasterCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterRollerCoasterCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterRollerCoasterCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterRollerCoasterCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_ROLLER_COASTER];
inline bool EnterRollerCoasterCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterRollerCoasterCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterRollerCoasterCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterRollerCoasterCCmd::clear_param() {
  param_ = 26;
  clear_has_param();
}
inline ::Cmd::WeddingCParam EnterRollerCoasterCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterRollerCoasterCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void EnterRollerCoasterCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterRollerCoasterCCmd.param)
}

// -------------------------------------------------------------------

// DivorceRollerCoasterInviteCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool DivorceRollerCoasterInviteCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DivorceRollerCoasterInviteCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command DivorceRollerCoasterInviteCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterInviteCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DivorceRollerCoasterInviteCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterInviteCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_INVITE];
inline bool DivorceRollerCoasterInviteCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DivorceRollerCoasterInviteCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_param() {
  param_ = 27;
  clear_has_param();
}
inline ::Cmd::WeddingCParam DivorceRollerCoasterInviteCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterInviteCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void DivorceRollerCoasterInviteCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterInviteCCmd.param)
}

// optional uint64 inviter = 3;
inline bool DivorceRollerCoasterInviteCCmd::has_inviter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DivorceRollerCoasterInviteCCmd::set_has_inviter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_inviter() {
  inviter_ = GOOGLE_ULONGLONG(0);
  clear_has_inviter();
}
inline ::google::protobuf::uint64 DivorceRollerCoasterInviteCCmd::inviter() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterInviteCCmd.inviter)
  return inviter_;
}
inline void DivorceRollerCoasterInviteCCmd::set_inviter(::google::protobuf::uint64 value) {
  set_has_inviter();
  inviter_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterInviteCCmd.inviter)
}

// optional uint64 invitee = 4;
inline bool DivorceRollerCoasterInviteCCmd::has_invitee() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DivorceRollerCoasterInviteCCmd::set_has_invitee() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_has_invitee() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_invitee() {
  invitee_ = GOOGLE_ULONGLONG(0);
  clear_has_invitee();
}
inline ::google::protobuf::uint64 DivorceRollerCoasterInviteCCmd::invitee() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterInviteCCmd.invitee)
  return invitee_;
}
inline void DivorceRollerCoasterInviteCCmd::set_invitee(::google::protobuf::uint64 value) {
  set_has_invitee();
  invitee_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterInviteCCmd.invitee)
}

// optional string inviter_name = 5;
inline bool DivorceRollerCoasterInviteCCmd::has_inviter_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DivorceRollerCoasterInviteCCmd::set_has_inviter_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_has_inviter_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DivorceRollerCoasterInviteCCmd::clear_inviter_name() {
  if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviter_name_->clear();
  }
  clear_has_inviter_name();
}
inline const ::std::string& DivorceRollerCoasterInviteCCmd::inviter_name() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
  return *inviter_name_;
}
inline void DivorceRollerCoasterInviteCCmd::set_inviter_name(const ::std::string& value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
}
inline void DivorceRollerCoasterInviteCCmd::set_inviter_name(const char* value) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
}
inline void DivorceRollerCoasterInviteCCmd::set_inviter_name(const char* value, size_t size) {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviter_name_ = new ::std::string;
  }
  inviter_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
}
inline ::std::string* DivorceRollerCoasterInviteCCmd::mutable_inviter_name() {
  set_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    inviter_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
  return inviter_name_;
}
inline ::std::string* DivorceRollerCoasterInviteCCmd::release_inviter_name() {
  clear_has_inviter_name();
  if (inviter_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = inviter_name_;
    inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DivorceRollerCoasterInviteCCmd::set_allocated_inviter_name(::std::string* inviter_name) {
  if (inviter_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete inviter_name_;
  }
  if (inviter_name) {
    set_has_inviter_name();
    inviter_name_ = inviter_name;
  } else {
    clear_has_inviter_name();
    inviter_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DivorceRollerCoasterInviteCCmd.inviter_name)
}

// -------------------------------------------------------------------

// DivorceRollerCoasterReplyCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool DivorceRollerCoasterReplyCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DivorceRollerCoasterReplyCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command DivorceRollerCoasterReplyCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterReplyCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DivorceRollerCoasterReplyCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterReplyCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_DIVORCE_ROLLER_COASTER_REPLY];
inline bool DivorceRollerCoasterReplyCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DivorceRollerCoasterReplyCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_param() {
  param_ = 28;
  clear_has_param();
}
inline ::Cmd::WeddingCParam DivorceRollerCoasterReplyCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterReplyCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void DivorceRollerCoasterReplyCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterReplyCCmd.param)
}

// optional uint64 inviter = 3;
inline bool DivorceRollerCoasterReplyCCmd::has_inviter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DivorceRollerCoasterReplyCCmd::set_has_inviter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_has_inviter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_inviter() {
  inviter_ = GOOGLE_ULONGLONG(0);
  clear_has_inviter();
}
inline ::google::protobuf::uint64 DivorceRollerCoasterReplyCCmd::inviter() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterReplyCCmd.inviter)
  return inviter_;
}
inline void DivorceRollerCoasterReplyCCmd::set_inviter(::google::protobuf::uint64 value) {
  set_has_inviter();
  inviter_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterReplyCCmd.inviter)
}

// optional .Cmd.EReply reply = 5;
inline bool DivorceRollerCoasterReplyCCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DivorceRollerCoasterReplyCCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DivorceRollerCoasterReplyCCmd::clear_reply() {
  reply_ = 1;
  clear_has_reply();
}
inline ::Cmd::EReply DivorceRollerCoasterReplyCCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.DivorceRollerCoasterReplyCCmd.reply)
  return static_cast< ::Cmd::EReply >(reply_);
}
inline void DivorceRollerCoasterReplyCCmd::set_reply(::Cmd::EReply value) {
  assert(::Cmd::EReply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DivorceRollerCoasterReplyCCmd.reply)
}

// -------------------------------------------------------------------

// EnterWeddingMapCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool EnterWeddingMapCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnterWeddingMapCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnterWeddingMapCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnterWeddingMapCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command EnterWeddingMapCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterWeddingMapCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void EnterWeddingMapCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterWeddingMapCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_ENTER_WEDDINGMAP];
inline bool EnterWeddingMapCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnterWeddingMapCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnterWeddingMapCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnterWeddingMapCCmd::clear_param() {
  param_ = 29;
  clear_has_param();
}
inline ::Cmd::WeddingCParam EnterWeddingMapCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.EnterWeddingMapCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void EnterWeddingMapCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.EnterWeddingMapCCmd.param)
}

// -------------------------------------------------------------------

// MissyouInviteWedCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool MissyouInviteWedCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MissyouInviteWedCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MissyouInviteWedCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MissyouInviteWedCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command MissyouInviteWedCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MissyouInviteWedCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_INVITE];
inline bool MissyouInviteWedCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MissyouInviteWedCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MissyouInviteWedCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MissyouInviteWedCCmd::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::WeddingCParam MissyouInviteWedCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MissyouInviteWedCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void MissyouInviteWedCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MissyouInviteWedCCmd.param)
}

// -------------------------------------------------------------------

// MisccyouReplyWedCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool MisccyouReplyWedCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MisccyouReplyWedCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MisccyouReplyWedCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MisccyouReplyWedCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command MisccyouReplyWedCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MisccyouReplyWedCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MisccyouReplyWedCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MisccyouReplyWedCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_MISSYOU_REPLY];
inline bool MisccyouReplyWedCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MisccyouReplyWedCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MisccyouReplyWedCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MisccyouReplyWedCCmd::clear_param() {
  param_ = 31;
  clear_has_param();
}
inline ::Cmd::WeddingCParam MisccyouReplyWedCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MisccyouReplyWedCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void MisccyouReplyWedCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MisccyouReplyWedCCmd.param)
}

// optional bool agree = 3 [default = false];
inline bool MisccyouReplyWedCCmd::has_agree() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MisccyouReplyWedCCmd::set_has_agree() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MisccyouReplyWedCCmd::clear_has_agree() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MisccyouReplyWedCCmd::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool MisccyouReplyWedCCmd::agree() const {
  // @@protoc_insertion_point(field_get:Cmd.MisccyouReplyWedCCmd.agree)
  return agree_;
}
inline void MisccyouReplyWedCCmd::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MisccyouReplyWedCCmd.agree)
}

// -------------------------------------------------------------------

// WeddingCarrierCCmd

// optional .Cmd.Command cmd = 1 [default = WEDDINGC_PROTOCMD];
inline bool WeddingCarrierCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeddingCarrierCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeddingCarrierCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeddingCarrierCCmd::clear_cmd() {
  cmd_ = 65;
  clear_has_cmd();
}
inline ::Cmd::Command WeddingCarrierCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingCarrierCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void WeddingCarrierCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingCarrierCCmd.cmd)
}

// optional .Cmd.WeddingCParam param = 2 [default = WEDDINGCPARAM_CARRIER];
inline bool WeddingCarrierCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeddingCarrierCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeddingCarrierCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeddingCarrierCCmd::clear_param() {
  param_ = 32;
  clear_has_param();
}
inline ::Cmd::WeddingCParam WeddingCarrierCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.WeddingCarrierCCmd.param)
  return static_cast< ::Cmd::WeddingCParam >(param_);
}
inline void WeddingCarrierCCmd::set_param(::Cmd::WeddingCParam value) {
  assert(::Cmd::WeddingCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.WeddingCarrierCCmd.param)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::WeddingCParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::WeddingCParam>() {
  return ::Cmd::WeddingCParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EDateStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EDateStatus>() {
  return ::Cmd::EDateStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EWeddingStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EWeddingStatus>() {
  return ::Cmd::EWeddingStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EReply> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EReply>() {
  return ::Cmd::EReply_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGiveUpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGiveUpType>() {
  return ::Cmd::EGiveUpType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EWeddingEvent> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EWeddingEvent>() {
  return ::Cmd::EWeddingEvent_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_WeddingCCmd_2eproto__INCLUDED
