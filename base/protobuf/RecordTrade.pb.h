// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RecordTrade.proto

#ifndef PROTOBUF_RecordTrade_2eproto__INCLUDED
#define PROTOBUF_RecordTrade_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "SceneItem.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_RecordTrade_2eproto();
void protobuf_AssignDesc_RecordTrade_2eproto();
void protobuf_ShutdownFile_RecordTrade_2eproto();

class SearchCond;
class BriefPendingListRecordTradeCmd;
class DetailPendingListRecordTradeCmd;
class BriefBuyInfo;
class ItemSellInfoRecordTradeCmd;
class MyPendingListRecordTradeCmd;
class NameInfo;
class NameInfoList;
class LogItemInfo;
class MyTradeLogRecordTradeCmd;
class TakeLogCmd;
class AddNewLog;
class FetchNameInfoCmd;
class ReqServerPriceRecordTradeCmd;
class BuyItemRecordTradeCmd;
class SellItemRecordTradeCmd;
class CancelItemRecordTrade;
class ResellPendingRecordTrade;
class PanelRecordTrade;
class ListNtfRecordTrade;
class HotItemidRecordTrade;
class NtfCanTakeCountTradeCmd;
class GiveTradeCmd;
class AcceptTradeCmd;
class RefuseTradeCmd;
class GiveItemInfo;
class ReqGiveItemInfoCmd;
class CheckPackageSizeTradeCmd;
class QucikTakeLogTradeCmd;
class ItemCount;
class QueryItemCountTradeCmd;
class LotteryGiveInfo;
class LotteryGiveCmd;
class TodayFinanceItem;
class TodayFinanceRank;
class TodayFinanceDetail;
class BoothPlayerPendingListCmd;
class UpdateOrderTradeCmd;

enum RecordUserTradeParam {
  BRIEF_PENDING_LIST_RECORDTRADE = 1,
  DETAIL_PENDING_LIST_RECORDTRADE = 3,
  ITEM_SELL_INFO_RECORDTRADE = 4,
  MY_PENDING_LIST_RECORDTRADE = 7,
  MY_TRADE_LOG_LIST_RECORDTRADE = 9,
  REQ_SERVER_PRICE_RECORDTRADE = 14,
  BUY_ITEM_RECORDTRADE = 15,
  SELL_ITEM_RECORDTRADE = 20,
  CANCEL_PENDING_RECORDTRADE = 22,
  RESELL_PENDING_RECORDTRADE = 23,
  PANEL_RECORDTRADE = 24,
  LIST_NTF_RECORDTRADE = 25,
  HOT_ITEMID_RECORDTRADE = 26,
  TAKE_LOG_TRADE_PARAM = 27,
  ADD_NEWLOG_TRADE_PARAM = 28,
  FETCH_NAMEINFO_TRADE_PARAM = 29,
  NTF_CAN_TAKE_COUNT_TRADE_PARAM = 30,
  GIVE_TRADE_PARAM = 31,
  REQ_GIVE_ITEM_INFO_TRADE_PARAM = 32,
  ACCEPT_TRADE_PARAM = 33,
  REFUSE_TRADE_PARAM = 34,
  CHECK_PACKAGE_SIZE_TRADE_CMD = 35,
  QUICK_TAKE_LOG_TRADE_PARAM = 36,
  QUERY_ITEM_COUNT_TRADE_PARAM = 37,
  QUERY_LOTTERY_GIVE_TRADE_PARAM = 38,
  QUERY_SERVANT_FINANCE_RANK = 39,
  QUERY_SERVANT_FINANCE_DETAIL = 40,
  BOOTH_PLAYER_PENDING_LIST = 41,
  UPDATE_ORDER_TRADE_PARAM = 42
};
bool RecordUserTradeParam_IsValid(int value);
const RecordUserTradeParam RecordUserTradeParam_MIN = BRIEF_PENDING_LIST_RECORDTRADE;
const RecordUserTradeParam RecordUserTradeParam_MAX = UPDATE_ORDER_TRADE_PARAM;
const int RecordUserTradeParam_ARRAYSIZE = RecordUserTradeParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecordUserTradeParam_descriptor();
inline const ::std::string& RecordUserTradeParam_Name(RecordUserTradeParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecordUserTradeParam_descriptor(), value);
}
inline bool RecordUserTradeParam_Parse(
    const ::std::string& name, RecordUserTradeParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecordUserTradeParam>(
    RecordUserTradeParam_descriptor(), name, value);
}
enum RankType {
  RANKTYPE_ITEM_ID_INC = 1,
  RANKTYPE_ITEM_ID_DES = 2,
  RANKTYPE_REFINE_LV_INC = 3,
  RANKTYPE_REFINE_LV_DES = 4,
  RANKTYPE_ITEM_PRICE_INC = 5,
  RANKTYPE_ITEM_PRICE_DES = 6,
  RANKTYPE_PENDING_TIME_INC = 7,
  RANKTYPE_PENDING_TIME_DES = 8
};
bool RankType_IsValid(int value);
const RankType RankType_MIN = RANKTYPE_ITEM_ID_INC;
const RankType RankType_MAX = RANKTYPE_PENDING_TIME_DES;
const int RankType_ARRAYSIZE = RankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankType_descriptor();
inline const ::std::string& RankType_Name(RankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankType_descriptor(), value);
}
inline bool RankType_Parse(
    const ::std::string& name, RankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankType>(
    RankType_descriptor(), name, value);
}
enum EOperType {
  EOperType_PayPending = 0,
  EOperType_NormalSell = 1,
  EOperType_NoramlBuy = 2,
  EOperType_Publicity = 3,
  EOperType_PublicitySellSuccess = 4,
  EOperType_PublicitySellFail = 5,
  EOperType_PublicityBuySuccess = 6,
  EOperType_PublicityBuyFail = 7,
  EOperType_PublicityBuying = 8,
  EOperType_AutoOffTheShelf = 9,
  EOperType_PayFail = 10,
  EOperType_PayTimeout = 11
};
bool EOperType_IsValid(int value);
const EOperType EOperType_MIN = EOperType_PayPending;
const EOperType EOperType_MAX = EOperType_PayTimeout;
const int EOperType_ARRAYSIZE = EOperType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOperType_descriptor();
inline const ::std::string& EOperType_Name(EOperType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOperType_descriptor(), value);
}
inline bool EOperType_Parse(
    const ::std::string& name, EOperType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOperType>(
    EOperType_descriptor(), name, value);
}
enum ETakeStatus {
  ETakeStatus_CanTakeGive = 0,
  ETakeStatus_Took = 1,
  ETakeStatus_Taking = 2,
  ETakeStatus_Giving = 3,
  ETakeStatus_Give_Accepting = 4,
  ETakeStatus_Give_Accepted_1 = 5,
  ETakeStatus_Give_Accepted_2 = 6
};
bool ETakeStatus_IsValid(int value);
const ETakeStatus ETakeStatus_MIN = ETakeStatus_CanTakeGive;
const ETakeStatus ETakeStatus_MAX = ETakeStatus_Give_Accepted_2;
const int ETakeStatus_ARRAYSIZE = ETakeStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETakeStatus_descriptor();
inline const ::std::string& ETakeStatus_Name(ETakeStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETakeStatus_descriptor(), value);
}
inline bool ETakeStatus_Parse(
    const ::std::string& name, ETakeStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETakeStatus>(
    ETakeStatus_descriptor(), name, value);
}
enum StateType {
  St_OverlapNormal = 1,
  St_NonoverlapNormal = 2,
  St_WillPublicity = 3,
  St_InPublicity = 4
};
bool StateType_IsValid(int value);
const StateType StateType_MIN = St_OverlapNormal;
const StateType StateType_MAX = St_InPublicity;
const int StateType_ARRAYSIZE = StateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StateType_descriptor();
inline const ::std::string& StateType_Name(StateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StateType_descriptor(), value);
}
inline bool StateType_Parse(
    const ::std::string& name, StateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StateType>(
    StateType_descriptor(), name, value);
}
enum EPanelOperType {
  EPANEL_OPEN = 1,
  EPANEL_CLOSE = 2
};
bool EPanelOperType_IsValid(int value);
const EPanelOperType EPanelOperType_MIN = EPANEL_OPEN;
const EPanelOperType EPanelOperType_MAX = EPANEL_CLOSE;
const int EPanelOperType_ARRAYSIZE = EPanelOperType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPanelOperType_descriptor();
inline const ::std::string& EPanelOperType_Name(EPanelOperType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPanelOperType_descriptor(), value);
}
inline bool EPanelOperType_Parse(
    const ::std::string& name, EPanelOperType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPanelOperType>(
    EPanelOperType_descriptor(), name, value);
}
enum EListNtfType {
  ELIST_NTF_MY_PENDING = 1,
  ELIST_NTF_MY_LOG = 2
};
bool EListNtfType_IsValid(int value);
const EListNtfType EListNtfType_MIN = ELIST_NTF_MY_PENDING;
const EListNtfType EListNtfType_MAX = ELIST_NTF_MY_LOG;
const int EListNtfType_ARRAYSIZE = EListNtfType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EListNtfType_descriptor();
inline const ::std::string& EListNtfType_Name(EListNtfType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EListNtfType_descriptor(), value);
}
inline bool EListNtfType_Parse(
    const ::std::string& name, EListNtfType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EListNtfType>(
    EListNtfType_descriptor(), name, value);
}
enum EFinanceDateType {
  EFINANCE_DATE_THREE = 1,
  EFINANCE_DATE_SEVEN = 2
};
bool EFinanceDateType_IsValid(int value);
const EFinanceDateType EFinanceDateType_MIN = EFINANCE_DATE_THREE;
const EFinanceDateType EFinanceDateType_MAX = EFINANCE_DATE_SEVEN;
const int EFinanceDateType_ARRAYSIZE = EFinanceDateType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFinanceDateType_descriptor();
inline const ::std::string& EFinanceDateType_Name(EFinanceDateType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFinanceDateType_descriptor(), value);
}
inline bool EFinanceDateType_Parse(
    const ::std::string& name, EFinanceDateType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFinanceDateType>(
    EFinanceDateType_descriptor(), name, value);
}
enum EFinanceRankType {
  EFINANCE_RANK_DEALCOUNT = 1,
  EFINANCE_RANK_UPRATIO = 2,
  EFINANCE_RANK_DOWNRATIO = 3
};
bool EFinanceRankType_IsValid(int value);
const EFinanceRankType EFinanceRankType_MIN = EFINANCE_RANK_DEALCOUNT;
const EFinanceRankType EFinanceRankType_MAX = EFINANCE_RANK_DOWNRATIO;
const int EFinanceRankType_ARRAYSIZE = EFinanceRankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EFinanceRankType_descriptor();
inline const ::std::string& EFinanceRankType_Name(EFinanceRankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EFinanceRankType_descriptor(), value);
}
inline bool EFinanceRankType_Parse(
    const ::std::string& name, EFinanceRankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EFinanceRankType>(
    EFinanceRankType_descriptor(), name, value);
}
// ===================================================================

class SearchCond : public ::google::protobuf::Message {
 public:
  SearchCond();
  virtual ~SearchCond();

  SearchCond(const SearchCond& from);

  inline SearchCond& operator=(const SearchCond& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchCond& default_instance();

  void Swap(SearchCond* other);

  // implements Message ----------------------------------------------

  SearchCond* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchCond& from);
  void MergeFrom(const SearchCond& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 page_index = 7;
  inline bool has_page_index() const;
  inline void clear_page_index();
  static const int kPageIndexFieldNumber = 7;
  inline ::google::protobuf::uint32 page_index() const;
  inline void set_page_index(::google::protobuf::uint32 value);

  // optional uint32 page_count = 8;
  inline bool has_page_count() const;
  inline void clear_page_count();
  static const int kPageCountFieldNumber = 8;
  inline ::google::protobuf::uint32 page_count() const;
  inline void set_page_count(::google::protobuf::uint32 value);

  // optional .Cmd.RankType rank_type = 9 [default = RANKTYPE_ITEM_ID_INC];
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 9;
  inline ::Cmd::RankType rank_type() const;
  inline void set_rank_type(::Cmd::RankType value);

  // optional .Cmd.ETradeType trade_type = 10 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 10;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.SearchCond)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_page_index();
  inline void clear_has_page_index();
  inline void set_has_page_count();
  inline void clear_has_page_count();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 page_index_;
  ::google::protobuf::uint32 page_count_;
  int rank_type_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static SearchCond* default_instance_;
};
// -------------------------------------------------------------------

class BriefPendingListRecordTradeCmd : public ::google::protobuf::Message {
 public:
  BriefPendingListRecordTradeCmd();
  virtual ~BriefPendingListRecordTradeCmd();

  BriefPendingListRecordTradeCmd(const BriefPendingListRecordTradeCmd& from);

  inline BriefPendingListRecordTradeCmd& operator=(const BriefPendingListRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriefPendingListRecordTradeCmd& default_instance();

  void Swap(BriefPendingListRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  BriefPendingListRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriefPendingListRecordTradeCmd& from);
  void MergeFrom(const BriefPendingListRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = BRIEF_PENDING_LIST_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 category = 4;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 4;
  inline ::google::protobuf::uint32 category() const;
  inline void set_category(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 fashion = 6;
  inline bool has_fashion() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 6;
  inline ::google::protobuf::uint32 fashion() const;
  inline void set_fashion(::google::protobuf::uint32 value);

  // repeated uint32 pub_lists = 7;
  inline int pub_lists_size() const;
  inline void clear_pub_lists();
  static const int kPubListsFieldNumber = 7;
  inline ::google::protobuf::uint32 pub_lists(int index) const;
  inline void set_pub_lists(int index, ::google::protobuf::uint32 value);
  inline void add_pub_lists(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pub_lists() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pub_lists();

  // repeated uint32 lists = 8;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 8;
  inline ::google::protobuf::uint32 lists(int index) const;
  inline void set_lists(int index, ::google::protobuf::uint32 value);
  inline void add_lists(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lists() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.BriefPendingListRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_fashion();
  inline void clear_has_fashion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 category_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pub_lists_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lists_;
  ::google::protobuf::uint32 fashion_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static BriefPendingListRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class DetailPendingListRecordTradeCmd : public ::google::protobuf::Message {
 public:
  DetailPendingListRecordTradeCmd();
  virtual ~DetailPendingListRecordTradeCmd();

  DetailPendingListRecordTradeCmd(const DetailPendingListRecordTradeCmd& from);

  inline DetailPendingListRecordTradeCmd& operator=(const DetailPendingListRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetailPendingListRecordTradeCmd& default_instance();

  void Swap(DetailPendingListRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  DetailPendingListRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetailPendingListRecordTradeCmd& from);
  void MergeFrom(const DetailPendingListRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = DETAIL_PENDING_LIST_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.SearchCond search_cond = 3;
  inline bool has_search_cond() const;
  inline void clear_search_cond();
  static const int kSearchCondFieldNumber = 3;
  inline const ::Cmd::SearchCond& search_cond() const;
  inline ::Cmd::SearchCond* mutable_search_cond();
  inline ::Cmd::SearchCond* release_search_cond();
  inline void set_allocated_search_cond(::Cmd::SearchCond* search_cond);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.TradeItemBaseInfo lists = 5;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 5;
  inline const ::Cmd::TradeItemBaseInfo& lists(int index) const;
  inline ::Cmd::TradeItemBaseInfo* mutable_lists(int index);
  inline ::Cmd::TradeItemBaseInfo* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
      mutable_lists();

  // optional uint32 total_page_count = 6;
  inline bool has_total_page_count() const;
  inline void clear_total_page_count();
  static const int kTotalPageCountFieldNumber = 6;
  inline ::google::protobuf::uint32 total_page_count() const;
  inline void set_total_page_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.DetailPendingListRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_search_cond();
  inline void clear_has_search_cond();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_total_page_count();
  inline void clear_has_total_page_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::SearchCond* search_cond_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo > lists_;
  ::google::protobuf::uint32 total_page_count_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static DetailPendingListRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class BriefBuyInfo : public ::google::protobuf::Message {
 public:
  BriefBuyInfo();
  virtual ~BriefBuyInfo();

  BriefBuyInfo(const BriefBuyInfo& from);

  inline BriefBuyInfo& operator=(const BriefBuyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BriefBuyInfo& default_instance();

  void Swap(BriefBuyInfo* other);

  // implements Message ----------------------------------------------

  BriefBuyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BriefBuyInfo& from);
  void MergeFrom(const BriefBuyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BriefBuyInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static BriefBuyInfo* default_instance_;
};
// -------------------------------------------------------------------

class ItemSellInfoRecordTradeCmd : public ::google::protobuf::Message {
 public:
  ItemSellInfoRecordTradeCmd();
  virtual ~ItemSellInfoRecordTradeCmd();

  ItemSellInfoRecordTradeCmd(const ItemSellInfoRecordTradeCmd& from);

  inline ItemSellInfoRecordTradeCmd& operator=(const ItemSellInfoRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemSellInfoRecordTradeCmd& default_instance();

  void Swap(ItemSellInfoRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  ItemSellInfoRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemSellInfoRecordTradeCmd& from);
  void MergeFrom(const ItemSellInfoRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = ITEM_SELL_INFO_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 refine_lv = 5;
  inline bool has_refine_lv() const;
  inline void clear_refine_lv();
  static const int kRefineLvFieldNumber = 5;
  inline ::google::protobuf::uint32 refine_lv() const;
  inline void set_refine_lv(::google::protobuf::uint32 value);

  // optional uint32 publicity_id = 6;
  inline bool has_publicity_id() const;
  inline void clear_publicity_id();
  static const int kPublicityIdFieldNumber = 6;
  inline ::google::protobuf::uint32 publicity_id() const;
  inline void set_publicity_id(::google::protobuf::uint32 value);

  // optional .Cmd.StateType statetype = 7;
  inline bool has_statetype() const;
  inline void clear_statetype();
  static const int kStatetypeFieldNumber = 7;
  inline ::Cmd::StateType statetype() const;
  inline void set_statetype(::Cmd::StateType value);

  // optional uint32 count = 8 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 buyer_count = 9 [default = 0];
  inline bool has_buyer_count() const;
  inline void clear_buyer_count();
  static const int kBuyerCountFieldNumber = 9;
  inline ::google::protobuf::uint32 buyer_count() const;
  inline void set_buyer_count(::google::protobuf::uint32 value);

  // repeated .Cmd.BriefBuyInfo buy_info = 10;
  inline int buy_info_size() const;
  inline void clear_buy_info();
  static const int kBuyInfoFieldNumber = 10;
  inline const ::Cmd::BriefBuyInfo& buy_info(int index) const;
  inline ::Cmd::BriefBuyInfo* mutable_buy_info(int index);
  inline ::Cmd::BriefBuyInfo* add_buy_info();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BriefBuyInfo >&
      buy_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::BriefBuyInfo >*
      mutable_buy_info();

  // optional uint64 order_id = 11;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 11;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType type = 12 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 12;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint64 quota = 13;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 13;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemSellInfoRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_refine_lv();
  inline void clear_has_refine_lv();
  inline void set_has_publicity_id();
  inline void clear_has_publicity_id();
  inline void set_has_statetype();
  inline void clear_has_statetype();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_buyer_count();
  inline void clear_has_buyer_count();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quota();
  inline void clear_has_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 refine_lv_;
  ::google::protobuf::uint32 publicity_id_;
  int statetype_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 buyer_count_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::BriefBuyInfo > buy_info_;
  ::google::protobuf::uint64 order_id_;
  ::google::protobuf::uint64 quota_;
  int type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ItemSellInfoRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class MyPendingListRecordTradeCmd : public ::google::protobuf::Message {
 public:
  MyPendingListRecordTradeCmd();
  virtual ~MyPendingListRecordTradeCmd();

  MyPendingListRecordTradeCmd(const MyPendingListRecordTradeCmd& from);

  inline MyPendingListRecordTradeCmd& operator=(const MyPendingListRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyPendingListRecordTradeCmd& default_instance();

  void Swap(MyPendingListRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  MyPendingListRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyPendingListRecordTradeCmd& from);
  void MergeFrom(const MyPendingListRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = MY_PENDING_LIST_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.SearchCond search_cond = 3;
  inline bool has_search_cond() const;
  inline void clear_search_cond();
  static const int kSearchCondFieldNumber = 3;
  inline const ::Cmd::SearchCond& search_cond() const;
  inline ::Cmd::SearchCond* mutable_search_cond();
  inline ::Cmd::SearchCond* release_search_cond();
  inline void set_allocated_search_cond(::Cmd::SearchCond* search_cond);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.TradeItemBaseInfo lists = 6;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 6;
  inline const ::Cmd::TradeItemBaseInfo& lists(int index) const;
  inline ::Cmd::TradeItemBaseInfo* mutable_lists(int index);
  inline ::Cmd::TradeItemBaseInfo* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.MyPendingListRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_search_cond();
  inline void clear_has_search_cond();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::SearchCond* search_cond_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo > lists_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static MyPendingListRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class NameInfo : public ::google::protobuf::Message {
 public:
  NameInfo();
  virtual ~NameInfo();

  NameInfo(const NameInfo& from);

  inline NameInfo& operator=(const NameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameInfo& default_instance();

  void Swap(NameInfo* other);

  // implements Message ----------------------------------------------

  NameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameInfo& from);
  void MergeFrom(const NameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zoneid = 2;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NameInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static NameInfo* default_instance_;
};
// -------------------------------------------------------------------

class NameInfoList : public ::google::protobuf::Message {
 public:
  NameInfoList();
  virtual ~NameInfoList();

  NameInfoList(const NameInfoList& from);

  inline NameInfoList& operator=(const NameInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NameInfoList& default_instance();

  void Swap(NameInfoList* other);

  // implements Message ----------------------------------------------

  NameInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NameInfoList& from);
  void MergeFrom(const NameInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Cmd.NameInfo name_infos = 1;
  inline int name_infos_size() const;
  inline void clear_name_infos();
  static const int kNameInfosFieldNumber = 1;
  inline const ::Cmd::NameInfo& name_infos(int index) const;
  inline ::Cmd::NameInfo* mutable_name_infos(int index);
  inline ::Cmd::NameInfo* add_name_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::NameInfo >&
      name_infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::NameInfo >*
      mutable_name_infos();

  // @@protoc_insertion_point(class_scope:Cmd.NameInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::NameInfo > name_infos_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static NameInfoList* default_instance_;
};
// -------------------------------------------------------------------

class LogItemInfo : public ::google::protobuf::Message {
 public:
  LogItemInfo();
  virtual ~LogItemInfo();

  LogItemInfo(const LogItemInfo& from);

  inline LogItemInfo& operator=(const LogItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogItemInfo& default_instance();

  void Swap(LogItemInfo* other);

  // implements Message ----------------------------------------------

  LogItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogItemInfo& from);
  void MergeFrom(const LogItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETakeStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Cmd::ETakeStatus status() const;
  inline void set_status(::Cmd::ETakeStatus value);

  // optional .Cmd.EOperType logtype = 3;
  inline bool has_logtype() const;
  inline void clear_logtype();
  static const int kLogtypeFieldNumber = 3;
  inline ::Cmd::EOperType logtype() const;
  inline void set_logtype(::Cmd::EOperType value);

  // optional uint32 itemid = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 refine_lv = 5;
  inline bool has_refine_lv() const;
  inline void clear_refine_lv();
  static const int kRefineLvFieldNumber = 5;
  inline ::google::protobuf::uint32 refine_lv() const;
  inline void set_refine_lv(::google::protobuf::uint32 value);

  // optional bool damage = 6;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  inline bool damage() const;
  inline void set_damage(bool value);

  // optional uint32 tradetime = 7;
  inline bool has_tradetime() const;
  inline void clear_tradetime();
  static const int kTradetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 tradetime() const;
  inline void set_tradetime(::google::protobuf::uint32 value);

  // optional uint32 count = 8;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 price = 20;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 20;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 tax = 9;
  inline bool has_tax() const;
  inline void clear_tax();
  static const int kTaxFieldNumber = 9;
  inline ::google::protobuf::uint32 tax() const;
  inline void set_tax(::google::protobuf::uint32 value);

  // optional uint32 getmoney = 10;
  inline bool has_getmoney() const;
  inline void clear_getmoney();
  static const int kGetmoneyFieldNumber = 10;
  inline ::google::protobuf::uint32 getmoney() const;
  inline void set_getmoney(::google::protobuf::uint32 value);

  // optional uint32 costmoney = 11;
  inline bool has_costmoney() const;
  inline void clear_costmoney();
  static const int kCostmoneyFieldNumber = 11;
  inline ::google::protobuf::uint32 costmoney() const;
  inline void set_costmoney(::google::protobuf::uint32 value);

  // optional uint32 failcount = 12;
  inline bool has_failcount() const;
  inline void clear_failcount();
  static const int kFailcountFieldNumber = 12;
  inline ::google::protobuf::uint32 failcount() const;
  inline void set_failcount(::google::protobuf::uint32 value);

  // optional uint32 retmoney = 13;
  inline bool has_retmoney() const;
  inline void clear_retmoney();
  static const int kRetmoneyFieldNumber = 13;
  inline ::google::protobuf::uint32 retmoney() const;
  inline void set_retmoney(::google::protobuf::uint32 value);

  // optional uint32 totalcount = 14;
  inline bool has_totalcount() const;
  inline void clear_totalcount();
  static const int kTotalcountFieldNumber = 14;
  inline ::google::protobuf::uint32 totalcount() const;
  inline void set_totalcount(::google::protobuf::uint32 value);

  // optional uint32 endtime = 15;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 15;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional .Cmd.NameInfo name_info = 16;
  inline bool has_name_info() const;
  inline void clear_name_info();
  static const int kNameInfoFieldNumber = 16;
  inline const ::Cmd::NameInfo& name_info() const;
  inline ::Cmd::NameInfo* mutable_name_info();
  inline ::Cmd::NameInfo* release_name_info();
  inline void set_allocated_name_info(::Cmd::NameInfo* name_info);

  // optional bool is_many_people = 17;
  inline bool has_is_many_people() const;
  inline void clear_is_many_people();
  static const int kIsManyPeopleFieldNumber = 17;
  inline bool is_many_people() const;
  inline void set_is_many_people(bool value);

  // optional .Cmd.NameInfoList name_list = 18;
  inline bool has_name_list() const;
  inline void clear_name_list();
  static const int kNameListFieldNumber = 18;
  inline const ::Cmd::NameInfoList& name_list() const;
  inline ::Cmd::NameInfoList* mutable_name_list();
  inline ::Cmd::NameInfoList* release_name_list();
  inline void set_allocated_name_list(::Cmd::NameInfoList* name_list);

  // optional .Cmd.ItemData itemdata = 19;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 19;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional uint64 receiverid = 21;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiveridFieldNumber = 21;
  inline ::google::protobuf::uint64 receiverid() const;
  inline void set_receiverid(::google::protobuf::uint64 value);

  // optional string receivername = 22;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceivernameFieldNumber = 22;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // optional uint32 receiverzoneid = 23;
  inline bool has_receiverzoneid() const;
  inline void clear_receiverzoneid();
  static const int kReceiverzoneidFieldNumber = 23;
  inline ::google::protobuf::uint32 receiverzoneid() const;
  inline void set_receiverzoneid(::google::protobuf::uint32 value);

  // optional uint64 quota = 24;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 24;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional uint32 background = 25;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 25;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // optional uint32 expiretime = 26;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 26;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // optional uint32 ret_cost = 27;
  inline bool has_ret_cost() const;
  inline void clear_ret_cost();
  static const int kRetCostFieldNumber = 27;
  inline ::google::protobuf::uint32 ret_cost() const;
  inline void set_ret_cost(::google::protobuf::uint32 value);

  // optional bool cangive = 28;
  inline bool has_cangive() const;
  inline void clear_cangive();
  static const int kCangiveFieldNumber = 28;
  inline bool cangive() const;
  inline void set_cangive(bool value);

  // optional .Cmd.ETradeType trade_type = 29 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 29;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // optional bool is_public = 30;
  inline bool has_is_public() const;
  inline void clear_is_public();
  static const int kIsPublicFieldNumber = 30;
  inline bool is_public() const;
  inline void set_is_public(bool value);

  // optional uint64 quota_cost = 31 [default = 0];
  inline bool has_quota_cost() const;
  inline void clear_quota_cost();
  static const int kQuotaCostFieldNumber = 31;
  inline ::google::protobuf::uint64 quota_cost() const;
  inline void set_quota_cost(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.LogItemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_logtype();
  inline void clear_has_logtype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_refine_lv();
  inline void clear_has_refine_lv();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_tradetime();
  inline void clear_has_tradetime();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_tax();
  inline void clear_has_tax();
  inline void set_has_getmoney();
  inline void clear_has_getmoney();
  inline void set_has_costmoney();
  inline void clear_has_costmoney();
  inline void set_has_failcount();
  inline void clear_has_failcount();
  inline void set_has_retmoney();
  inline void clear_has_retmoney();
  inline void set_has_totalcount();
  inline void clear_has_totalcount();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_name_info();
  inline void clear_has_name_info();
  inline void set_has_is_many_people();
  inline void clear_has_is_many_people();
  inline void set_has_name_list();
  inline void clear_has_name_list();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();
  inline void set_has_receivername();
  inline void clear_has_receivername();
  inline void set_has_receiverzoneid();
  inline void clear_has_receiverzoneid();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_ret_cost();
  inline void clear_has_ret_cost();
  inline void set_has_cangive();
  inline void clear_has_cangive();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();
  inline void set_has_is_public();
  inline void clear_has_is_public();
  inline void set_has_quota_cost();
  inline void clear_has_quota_cost();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  int status_;
  int logtype_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 refine_lv_;
  ::google::protobuf::uint32 tradetime_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 tax_;
  ::google::protobuf::uint32 getmoney_;
  ::google::protobuf::uint32 costmoney_;
  ::google::protobuf::uint32 failcount_;
  ::google::protobuf::uint32 retmoney_;
  ::google::protobuf::uint32 totalcount_;
  ::google::protobuf::uint32 endtime_;
  ::Cmd::NameInfo* name_info_;
  ::Cmd::NameInfoList* name_list_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint64 receiverid_;
  bool damage_;
  bool is_many_people_;
  bool cangive_;
  bool is_public_;
  ::google::protobuf::uint32 receiverzoneid_;
  ::std::string* receivername_;
  ::google::protobuf::uint64 quota_;
  ::google::protobuf::uint32 background_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::uint32 ret_cost_;
  int trade_type_;
  ::google::protobuf::uint64 quota_cost_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static LogItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class MyTradeLogRecordTradeCmd : public ::google::protobuf::Message {
 public:
  MyTradeLogRecordTradeCmd();
  virtual ~MyTradeLogRecordTradeCmd();

  MyTradeLogRecordTradeCmd(const MyTradeLogRecordTradeCmd& from);

  inline MyTradeLogRecordTradeCmd& operator=(const MyTradeLogRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyTradeLogRecordTradeCmd& default_instance();

  void Swap(MyTradeLogRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  MyTradeLogRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyTradeLogRecordTradeCmd& from);
  void MergeFrom(const MyTradeLogRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = MY_TRADE_LOG_LIST_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 index = 4;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 4;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 total_page_count = 5;
  inline bool has_total_page_count() const;
  inline void clear_total_page_count();
  static const int kTotalPageCountFieldNumber = 5;
  inline ::google::protobuf::uint32 total_page_count() const;
  inline void set_total_page_count(::google::protobuf::uint32 value);

  // repeated .Cmd.LogItemInfo log_list = 6;
  inline int log_list_size() const;
  inline void clear_log_list();
  static const int kLogListFieldNumber = 6;
  inline const ::Cmd::LogItemInfo& log_list(int index) const;
  inline ::Cmd::LogItemInfo* mutable_log_list(int index);
  inline ::Cmd::LogItemInfo* add_log_list();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LogItemInfo >&
      log_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::LogItemInfo >*
      mutable_log_list();

  // optional .Cmd.ETradeType trade_type = 7 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 7;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.MyTradeLogRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_total_page_count();
  inline void clear_has_total_page_count();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 total_page_count_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::LogItemInfo > log_list_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static MyTradeLogRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class TakeLogCmd : public ::google::protobuf::Message {
 public:
  TakeLogCmd();
  virtual ~TakeLogCmd();

  TakeLogCmd(const TakeLogCmd& from);

  inline TakeLogCmd& operator=(const TakeLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TakeLogCmd& default_instance();

  void Swap(TakeLogCmd* other);

  // implements Message ----------------------------------------------

  TakeLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TakeLogCmd& from);
  void MergeFrom(const TakeLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = TAKE_LOG_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.LogItemInfo log = 3;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 3;
  inline const ::Cmd::LogItemInfo& log() const;
  inline ::Cmd::LogItemInfo* mutable_log();
  inline ::Cmd::LogItemInfo* release_log();
  inline void set_allocated_log(::Cmd::LogItemInfo* log);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.TakeLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::LogItemInfo* log_;
  bool success_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static TakeLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddNewLog : public ::google::protobuf::Message {
 public:
  AddNewLog();
  virtual ~AddNewLog();

  AddNewLog(const AddNewLog& from);

  inline AddNewLog& operator=(const AddNewLog& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNewLog& default_instance();

  void Swap(AddNewLog* other);

  // implements Message ----------------------------------------------

  AddNewLog* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddNewLog& from);
  void MergeFrom(const AddNewLog& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = ADD_NEWLOG_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.LogItemInfo log = 4;
  inline bool has_log() const;
  inline void clear_log();
  static const int kLogFieldNumber = 4;
  inline const ::Cmd::LogItemInfo& log() const;
  inline ::Cmd::LogItemInfo* mutable_log();
  inline ::Cmd::LogItemInfo* release_log();
  inline void set_allocated_log(::Cmd::LogItemInfo* log);

  // optional uint32 total_page_count = 5;
  inline bool has_total_page_count() const;
  inline void clear_total_page_count();
  static const int kTotalPageCountFieldNumber = 5;
  inline ::google::protobuf::uint32 total_page_count() const;
  inline void set_total_page_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddNewLog)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_log();
  inline void clear_has_log();
  inline void set_has_total_page_count();
  inline void clear_has_total_page_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::LogItemInfo* log_;
  ::google::protobuf::uint32 total_page_count_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static AddNewLog* default_instance_;
};
// -------------------------------------------------------------------

class FetchNameInfoCmd : public ::google::protobuf::Message {
 public:
  FetchNameInfoCmd();
  virtual ~FetchNameInfoCmd();

  FetchNameInfoCmd(const FetchNameInfoCmd& from);

  inline FetchNameInfoCmd& operator=(const FetchNameInfoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FetchNameInfoCmd& default_instance();

  void Swap(FetchNameInfoCmd* other);

  // implements Message ----------------------------------------------

  FetchNameInfoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FetchNameInfoCmd& from);
  void MergeFrom(const FetchNameInfoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = FETCH_NAMEINFO_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EOperType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EOperType type() const;
  inline void set_type(::Cmd::EOperType value);

  // optional uint32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 total_page_count = 6;
  inline bool has_total_page_count() const;
  inline void clear_total_page_count();
  static const int kTotalPageCountFieldNumber = 6;
  inline ::google::protobuf::uint32 total_page_count() const;
  inline void set_total_page_count(::google::protobuf::uint32 value);

  // optional .Cmd.NameInfoList name_list = 7;
  inline bool has_name_list() const;
  inline void clear_name_list();
  static const int kNameListFieldNumber = 7;
  inline const ::Cmd::NameInfoList& name_list() const;
  inline ::Cmd::NameInfoList* mutable_name_list();
  inline ::Cmd::NameInfoList* release_name_list();
  inline void set_allocated_name_list(::Cmd::NameInfoList* name_list);

  // @@protoc_insertion_point(class_scope:Cmd.FetchNameInfoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_total_page_count();
  inline void clear_has_total_page_count();
  inline void set_has_name_list();
  inline void clear_has_name_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  int type_;
  ::google::protobuf::uint32 index_;
  ::Cmd::NameInfoList* name_list_;
  ::google::protobuf::uint32 total_page_count_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static FetchNameInfoCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqServerPriceRecordTradeCmd : public ::google::protobuf::Message {
 public:
  ReqServerPriceRecordTradeCmd();
  virtual ~ReqServerPriceRecordTradeCmd();

  ReqServerPriceRecordTradeCmd(const ReqServerPriceRecordTradeCmd& from);

  inline ReqServerPriceRecordTradeCmd& operator=(const ReqServerPriceRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqServerPriceRecordTradeCmd& default_instance();

  void Swap(ReqServerPriceRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  ReqServerPriceRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqServerPriceRecordTradeCmd& from);
  void MergeFrom(const ReqServerPriceRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = REQ_SERVER_PRICE_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ItemData itemData = 4;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 4;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional uint32 price = 5;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional bool issell = 6 [default = false];
  inline bool has_issell() const;
  inline void clear_issell();
  static const int kIssellFieldNumber = 6;
  inline bool issell() const;
  inline void set_issell(bool value);

  // optional .Cmd.StateType statetype = 7;
  inline bool has_statetype() const;
  inline void clear_statetype();
  static const int kStatetypeFieldNumber = 7;
  inline ::Cmd::StateType statetype() const;
  inline void set_statetype(::Cmd::StateType value);

  // optional uint32 count = 8 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 8;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 buyer_count = 9 [default = 0];
  inline bool has_buyer_count() const;
  inline void clear_buyer_count();
  static const int kBuyerCountFieldNumber = 9;
  inline ::google::protobuf::uint32 buyer_count() const;
  inline void set_buyer_count(::google::protobuf::uint32 value);

  // optional uint32 end_time = 10 [default = 0];
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 end_time() const;
  inline void set_end_time(::google::protobuf::uint32 value);

  // optional .Cmd.ETradeType trade_type = 11 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 11;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqServerPriceRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_issell();
  inline void clear_has_issell();
  inline void set_has_statetype();
  inline void clear_has_statetype();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_buyer_count();
  inline void clear_has_buyer_count();
  inline void set_has_end_time();
  inline void clear_has_end_time();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint32 price_;
  bool issell_;
  int statetype_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 buyer_count_;
  ::google::protobuf::uint32 end_time_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ReqServerPriceRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class BuyItemRecordTradeCmd : public ::google::protobuf::Message {
 public:
  BuyItemRecordTradeCmd();
  virtual ~BuyItemRecordTradeCmd();

  BuyItemRecordTradeCmd(const BuyItemRecordTradeCmd& from);

  inline BuyItemRecordTradeCmd& operator=(const BuyItemRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyItemRecordTradeCmd& default_instance();

  void Swap(BuyItemRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  BuyItemRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BuyItemRecordTradeCmd& from);
  void MergeFrom(const BuyItemRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = BUY_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional .Cmd.ETradeType type = 6 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.BuyItemRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  int ret_;
  int type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static BuyItemRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class SellItemRecordTradeCmd : public ::google::protobuf::Message {
 public:
  SellItemRecordTradeCmd();
  virtual ~SellItemRecordTradeCmd();

  SellItemRecordTradeCmd(const SellItemRecordTradeCmd& from);

  inline SellItemRecordTradeCmd& operator=(const SellItemRecordTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SellItemRecordTradeCmd& default_instance();

  void Swap(SellItemRecordTradeCmd* other);

  // implements Message ----------------------------------------------

  SellItemRecordTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SellItemRecordTradeCmd& from);
  void MergeFrom(const SellItemRecordTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = SELL_ITEM_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional .Cmd.ETradeType type = 6 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.SellItemRecordTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  int ret_;
  int type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static SellItemRecordTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class CancelItemRecordTrade : public ::google::protobuf::Message {
 public:
  CancelItemRecordTrade();
  virtual ~CancelItemRecordTrade();

  CancelItemRecordTrade(const CancelItemRecordTrade& from);

  inline CancelItemRecordTrade& operator=(const CancelItemRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelItemRecordTrade& default_instance();

  void Swap(CancelItemRecordTrade* other);

  // implements Message ----------------------------------------------

  CancelItemRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CancelItemRecordTrade& from);
  void MergeFrom(const CancelItemRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = CANCEL_PENDING_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional uint64 order_id = 6;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 6;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType type = 7 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint64 quota = 8;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 8;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.CancelItemRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quota();
  inline void clear_has_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 order_id_;
  int ret_;
  int type_;
  ::google::protobuf::uint64 quota_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static CancelItemRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class ResellPendingRecordTrade : public ::google::protobuf::Message {
 public:
  ResellPendingRecordTrade();
  virtual ~ResellPendingRecordTrade();

  ResellPendingRecordTrade(const ResellPendingRecordTrade& from);

  inline ResellPendingRecordTrade& operator=(const ResellPendingRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResellPendingRecordTrade& default_instance();

  void Swap(ResellPendingRecordTrade* other);

  // implements Message ----------------------------------------------

  ResellPendingRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResellPendingRecordTrade& from);
  void MergeFrom(const ResellPendingRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = RESELL_PENDING_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.TradeItemBaseInfo item_info = 3;
  inline bool has_item_info() const;
  inline void clear_item_info();
  static const int kItemInfoFieldNumber = 3;
  inline const ::Cmd::TradeItemBaseInfo& item_info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_item_info();
  inline ::Cmd::TradeItemBaseInfo* release_item_info();
  inline void set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info);

  // optional uint64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.ETRADE_RET_CODE ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline ::Cmd::ETRADE_RET_CODE ret() const;
  inline void set_ret(::Cmd::ETRADE_RET_CODE value);

  // optional uint64 order_id = 6;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 6;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETradeType type = 7 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // optional uint64 quota = 8;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 8;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.ResellPendingRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_info();
  inline void clear_has_item_info();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_quota();
  inline void clear_has_quota();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TradeItemBaseInfo* item_info_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 order_id_;
  int ret_;
  int type_;
  ::google::protobuf::uint64 quota_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ResellPendingRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class PanelRecordTrade : public ::google::protobuf::Message {
 public:
  PanelRecordTrade();
  virtual ~PanelRecordTrade();

  PanelRecordTrade(const PanelRecordTrade& from);

  inline PanelRecordTrade& operator=(const PanelRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PanelRecordTrade& default_instance();

  void Swap(PanelRecordTrade* other);

  // implements Message ----------------------------------------------

  PanelRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PanelRecordTrade& from);
  void MergeFrom(const PanelRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = PANEL_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EPanelOperType oper = 4;
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 4;
  inline ::Cmd::EPanelOperType oper() const;
  inline void set_oper(::Cmd::EPanelOperType value);

  // optional .Cmd.ETradeType trade_type = 5 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 5;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.PanelRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int oper_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static PanelRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class ListNtfRecordTrade : public ::google::protobuf::Message {
 public:
  ListNtfRecordTrade();
  virtual ~ListNtfRecordTrade();

  ListNtfRecordTrade(const ListNtfRecordTrade& from);

  inline ListNtfRecordTrade& operator=(const ListNtfRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNtfRecordTrade& default_instance();

  void Swap(ListNtfRecordTrade* other);

  // implements Message ----------------------------------------------

  ListNtfRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListNtfRecordTrade& from);
  void MergeFrom(const ListNtfRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = LIST_NTF_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EListNtfType type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EListNtfType type() const;
  inline void set_type(::Cmd::EListNtfType value);

  // optional .Cmd.ETradeType trade_type = 5 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 5;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.ListNtfRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int type_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ListNtfRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class HotItemidRecordTrade : public ::google::protobuf::Message {
 public:
  HotItemidRecordTrade();
  virtual ~HotItemidRecordTrade();

  HotItemidRecordTrade(const HotItemidRecordTrade& from);

  inline HotItemidRecordTrade& operator=(const HotItemidRecordTrade& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HotItemidRecordTrade& default_instance();

  void Swap(HotItemidRecordTrade* other);

  // implements Message ----------------------------------------------

  HotItemidRecordTrade* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HotItemidRecordTrade& from);
  void MergeFrom(const HotItemidRecordTrade& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = HOT_ITEMID_RECORDTRADE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // repeated uint32 pub_lists = 5;
  inline int pub_lists_size() const;
  inline void clear_pub_lists();
  static const int kPubListsFieldNumber = 5;
  inline ::google::protobuf::uint32 pub_lists(int index) const;
  inline void set_pub_lists(int index, ::google::protobuf::uint32 value);
  inline void add_pub_lists(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pub_lists() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pub_lists();

  // repeated uint32 lists = 6;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 6;
  inline ::google::protobuf::uint32 lists(int index) const;
  inline void set_lists(int index, ::google::protobuf::uint32 value);
  inline void add_lists(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      lists() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.HotItemidRecordTrade)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_job();
  inline void clear_has_job();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pub_lists_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > lists_;
  ::google::protobuf::uint32 job_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static HotItemidRecordTrade* default_instance_;
};
// -------------------------------------------------------------------

class NtfCanTakeCountTradeCmd : public ::google::protobuf::Message {
 public:
  NtfCanTakeCountTradeCmd();
  virtual ~NtfCanTakeCountTradeCmd();

  NtfCanTakeCountTradeCmd(const NtfCanTakeCountTradeCmd& from);

  inline NtfCanTakeCountTradeCmd& operator=(const NtfCanTakeCountTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfCanTakeCountTradeCmd& default_instance();

  void Swap(NtfCanTakeCountTradeCmd* other);

  // implements Message ----------------------------------------------

  NtfCanTakeCountTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfCanTakeCountTradeCmd& from);
  void MergeFrom(const NtfCanTakeCountTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = NTF_CAN_TAKE_COUNT_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .Cmd.ETradeType trade_type = 4 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 4;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfCanTakeCountTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 count_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static NtfCanTakeCountTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class GiveTradeCmd : public ::google::protobuf::Message {
 public:
  GiveTradeCmd();
  virtual ~GiveTradeCmd();

  GiveTradeCmd(const GiveTradeCmd& from);

  inline GiveTradeCmd& operator=(const GiveTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveTradeCmd& default_instance();

  void Swap(GiveTradeCmd* other);

  // implements Message ----------------------------------------------

  GiveTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveTradeCmd& from);
  void MergeFrom(const GiveTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = GIVE_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.EOperType logtype = 4;
  inline bool has_logtype() const;
  inline void clear_logtype();
  static const int kLogtypeFieldNumber = 4;
  inline ::Cmd::EOperType logtype() const;
  inline void set_logtype(::Cmd::EOperType value);

  // optional uint64 friendid = 5;
  inline bool has_friendid() const;
  inline void clear_friendid();
  static const int kFriendidFieldNumber = 5;
  inline ::google::protobuf::uint64 friendid() const;
  inline void set_friendid(::google::protobuf::uint64 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional bool anonymous = 7;
  inline bool has_anonymous() const;
  inline void clear_anonymous();
  static const int kAnonymousFieldNumber = 7;
  inline bool anonymous() const;
  inline void set_anonymous(bool value);

  // optional uint32 background = 8;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 8;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // optional bool success = 9;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 9;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.GiveTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_logtype();
  inline void clear_has_logtype();
  inline void set_has_friendid();
  inline void clear_has_friendid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_anonymous();
  inline void clear_has_anonymous();
  inline void set_has_background();
  inline void clear_has_background();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 friendid_;
  ::std::string* content_;
  int logtype_;
  ::google::protobuf::uint32 background_;
  bool anonymous_;
  bool success_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static GiveTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class AcceptTradeCmd : public ::google::protobuf::Message {
 public:
  AcceptTradeCmd();
  virtual ~AcceptTradeCmd();

  AcceptTradeCmd(const AcceptTradeCmd& from);

  inline AcceptTradeCmd& operator=(const AcceptTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptTradeCmd& default_instance();

  void Swap(AcceptTradeCmd* other);

  // implements Message ----------------------------------------------

  AcceptTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptTradeCmd& from);
  void MergeFrom(const AcceptTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = ACCEPT_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.AcceptTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  bool success_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static AcceptTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class RefuseTradeCmd : public ::google::protobuf::Message {
 public:
  RefuseTradeCmd();
  virtual ~RefuseTradeCmd();

  RefuseTradeCmd(const RefuseTradeCmd& from);

  inline RefuseTradeCmd& operator=(const RefuseTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefuseTradeCmd& default_instance();

  void Swap(RefuseTradeCmd* other);

  // implements Message ----------------------------------------------

  RefuseTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefuseTradeCmd& from);
  void MergeFrom(const RefuseTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = REFUSE_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bool success = 4;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 4;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.RefuseTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  bool success_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static RefuseTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class GiveItemInfo : public ::google::protobuf::Message {
 public:
  GiveItemInfo();
  virtual ~GiveItemInfo();

  GiveItemInfo(const GiveItemInfo& from);

  inline GiveItemInfo& operator=(const GiveItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveItemInfo& default_instance();

  void Swap(GiveItemInfo* other);

  // implements Message ----------------------------------------------

  GiveItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveItemInfo& from);
  void MergeFrom(const GiveItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.ETakeStatus status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::Cmd::ETakeStatus status() const;
  inline void set_status(::Cmd::ETakeStatus value);

  // optional uint32 itemid = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional .Cmd.ItemData itemdata = 5;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 5;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional uint64 senderid = 6;
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderidFieldNumber = 6;
  inline ::google::protobuf::uint64 senderid() const;
  inline void set_senderid(::google::protobuf::uint64 value);

  // optional string sendername = 7;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSendernameFieldNumber = 7;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional bool anonymous = 8;
  inline bool has_anonymous() const;
  inline void clear_anonymous();
  static const int kAnonymousFieldNumber = 8;
  inline bool anonymous() const;
  inline void set_anonymous(bool value);

  // optional uint32 expiretime = 9;
  inline bool has_expiretime() const;
  inline void clear_expiretime();
  static const int kExpiretimeFieldNumber = 9;
  inline ::google::protobuf::uint32 expiretime() const;
  inline void set_expiretime(::google::protobuf::uint32 value);

  // optional string content = 10;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 10;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint64 quota = 11;
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 11;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional string receivername = 12;
  inline bool has_receivername() const;
  inline void clear_receivername();
  static const int kReceivernameFieldNumber = 12;
  inline const ::std::string& receivername() const;
  inline void set_receivername(const ::std::string& value);
  inline void set_receivername(const char* value);
  inline void set_receivername(const char* value, size_t size);
  inline ::std::string* mutable_receivername();
  inline ::std::string* release_receivername();
  inline void set_allocated_receivername(::std::string* receivername);

  // optional uint32 background = 13;
  inline bool has_background() const;
  inline void clear_background();
  static const int kBackgroundFieldNumber = 13;
  inline ::google::protobuf::uint32 background() const;
  inline void set_background(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GiveItemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_anonymous();
  inline void clear_has_anonymous();
  inline void set_has_expiretime();
  inline void clear_has_expiretime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_receivername();
  inline void clear_has_receivername();
  inline void set_has_background();
  inline void clear_has_background();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 id_;
  int status_;
  ::google::protobuf::uint32 itemid_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint64 senderid_;
  ::google::protobuf::uint32 count_;
  bool anonymous_;
  ::std::string* sendername_;
  ::std::string* content_;
  ::google::protobuf::uint64 quota_;
  ::google::protobuf::uint32 expiretime_;
  ::google::protobuf::uint32 background_;
  ::std::string* receivername_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static GiveItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqGiveItemInfoCmd : public ::google::protobuf::Message {
 public:
  ReqGiveItemInfoCmd();
  virtual ~ReqGiveItemInfoCmd();

  ReqGiveItemInfoCmd(const ReqGiveItemInfoCmd& from);

  inline ReqGiveItemInfoCmd& operator=(const ReqGiveItemInfoCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGiveItemInfoCmd& default_instance();

  void Swap(ReqGiveItemInfoCmd* other);

  // implements Message ----------------------------------------------

  ReqGiveItemInfoCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGiveItemInfoCmd& from);
  void MergeFrom(const ReqGiveItemInfoCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = REQ_GIVE_ITEM_INFO_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Cmd.GiveItemInfo iteminfo = 4;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 4;
  inline const ::Cmd::GiveItemInfo& iteminfo() const;
  inline ::Cmd::GiveItemInfo* mutable_iteminfo();
  inline ::Cmd::GiveItemInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::GiveItemInfo* iteminfo);

  // @@protoc_insertion_point(class_scope:Cmd.ReqGiveItemInfoCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::Cmd::GiveItemInfo* iteminfo_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ReqGiveItemInfoCmd* default_instance_;
};
// -------------------------------------------------------------------

class CheckPackageSizeTradeCmd : public ::google::protobuf::Message {
 public:
  CheckPackageSizeTradeCmd();
  virtual ~CheckPackageSizeTradeCmd();

  CheckPackageSizeTradeCmd(const CheckPackageSizeTradeCmd& from);

  inline CheckPackageSizeTradeCmd& operator=(const CheckPackageSizeTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CheckPackageSizeTradeCmd& default_instance();

  void Swap(CheckPackageSizeTradeCmd* other);

  // implements Message ----------------------------------------------

  CheckPackageSizeTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CheckPackageSizeTradeCmd& from);
  void MergeFrom(const CheckPackageSizeTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = CHECK_PACKAGE_SIZE_TRADE_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // repeated .Cmd.ItemInfo items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // optional bool ret = 4;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 4;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.CheckPackageSizeTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  bool ret_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static CheckPackageSizeTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class QucikTakeLogTradeCmd : public ::google::protobuf::Message {
 public:
  QucikTakeLogTradeCmd();
  virtual ~QucikTakeLogTradeCmd();

  QucikTakeLogTradeCmd(const QucikTakeLogTradeCmd& from);

  inline QucikTakeLogTradeCmd& operator=(const QucikTakeLogTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QucikTakeLogTradeCmd& default_instance();

  void Swap(QucikTakeLogTradeCmd* other);

  // implements Message ----------------------------------------------

  QucikTakeLogTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QucikTakeLogTradeCmd& from);
  void MergeFrom(const QucikTakeLogTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = QUICK_TAKE_LOG_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.ETradeType trade_type = 3 [default = ETRADETYPE_TRADE];
  inline bool has_trade_type() const;
  inline void clear_trade_type();
  static const int kTradeTypeFieldNumber = 3;
  inline ::Cmd::ETradeType trade_type() const;
  inline void set_trade_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.QucikTakeLogTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_trade_type();
  inline void clear_has_trade_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int trade_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static QucikTakeLogTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class ItemCount : public ::google::protobuf::Message {
 public:
  ItemCount();
  virtual ~ItemCount();

  ItemCount(const ItemCount& from);

  inline ItemCount& operator=(const ItemCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemCount& default_instance();

  void Swap(ItemCount* other);

  // implements Message ----------------------------------------------

  ItemCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemCount& from);
  void MergeFrom(const ItemCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ItemCount)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static ItemCount* default_instance_;
};
// -------------------------------------------------------------------

class QueryItemCountTradeCmd : public ::google::protobuf::Message {
 public:
  QueryItemCountTradeCmd();
  virtual ~QueryItemCountTradeCmd();

  QueryItemCountTradeCmd(const QueryItemCountTradeCmd& from);

  inline QueryItemCountTradeCmd& operator=(const QueryItemCountTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryItemCountTradeCmd& default_instance();

  void Swap(QueryItemCountTradeCmd* other);

  // implements Message ----------------------------------------------

  QueryItemCountTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryItemCountTradeCmd& from);
  void MergeFrom(const QueryItemCountTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_ITEM_COUNT_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.ItemCount items = 4;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 4;
  inline const ::Cmd::ItemCount& items(int index) const;
  inline ::Cmd::ItemCount* mutable_items(int index);
  inline ::Cmd::ItemCount* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemCount >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemCount >*
      mutable_items();

  // repeated .Cmd.TradeItemBaseInfo res_items = 5;
  inline int res_items_size() const;
  inline void clear_res_items();
  static const int kResItemsFieldNumber = 5;
  inline const ::Cmd::TradeItemBaseInfo& res_items(int index) const;
  inline ::Cmd::TradeItemBaseInfo* mutable_res_items(int index);
  inline ::Cmd::TradeItemBaseInfo* add_res_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
      res_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
      mutable_res_items();

  // @@protoc_insertion_point(class_scope:Cmd.QueryItemCountTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemCount > items_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo > res_items_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static QueryItemCountTradeCmd* default_instance_;
};
// -------------------------------------------------------------------

class LotteryGiveInfo : public ::google::protobuf::Message {
 public:
  LotteryGiveInfo();
  virtual ~LotteryGiveInfo();

  LotteryGiveInfo(const LotteryGiveInfo& from);

  inline LotteryGiveInfo& operator=(const LotteryGiveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryGiveInfo& default_instance();

  void Swap(LotteryGiveInfo* other);

  // implements Message ----------------------------------------------

  LotteryGiveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryGiveInfo& from);
  void MergeFrom(const LotteryGiveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::uint32 year() const;
  inline void set_year(::google::protobuf::uint32 value);

  // optional uint32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::uint32 month() const;
  inline void set_month(::google::protobuf::uint32 value);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 configid = 5;
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigidFieldNumber = 5;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional uint64 receiverid = 6;
  inline bool has_receiverid() const;
  inline void clear_receiverid();
  static const int kReceiveridFieldNumber = 6;
  inline ::google::protobuf::uint64 receiverid() const;
  inline void set_receiverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryGiveInfo)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_receiverid();
  inline void clear_has_receiverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 year_;
  ::google::protobuf::uint32 month_;
  ::std::string* content_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 configid_;
  ::google::protobuf::uint64 receiverid_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static LotteryGiveInfo* default_instance_;
};
// -------------------------------------------------------------------

class LotteryGiveCmd : public ::google::protobuf::Message {
 public:
  LotteryGiveCmd();
  virtual ~LotteryGiveCmd();

  LotteryGiveCmd(const LotteryGiveCmd& from);

  inline LotteryGiveCmd& operator=(const LotteryGiveCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LotteryGiveCmd& default_instance();

  void Swap(LotteryGiveCmd* other);

  // implements Message ----------------------------------------------

  LotteryGiveCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LotteryGiveCmd& from);
  void MergeFrom(const LotteryGiveCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_LOTTERY_GIVE_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.LotteryGiveInfo iteminfo = 3;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kIteminfoFieldNumber = 3;
  inline const ::Cmd::LotteryGiveInfo& iteminfo() const;
  inline ::Cmd::LotteryGiveInfo* mutable_iteminfo();
  inline ::Cmd::LotteryGiveInfo* release_iteminfo();
  inline void set_allocated_iteminfo(::Cmd::LotteryGiveInfo* iteminfo);

  // @@protoc_insertion_point(class_scope:Cmd.LotteryGiveCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::LotteryGiveInfo* iteminfo_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static LotteryGiveCmd* default_instance_;
};
// -------------------------------------------------------------------

class TodayFinanceItem : public ::google::protobuf::Message {
 public:
  TodayFinanceItem();
  virtual ~TodayFinanceItem();

  TodayFinanceItem(const TodayFinanceItem& from);

  inline TodayFinanceItem& operator=(const TodayFinanceItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayFinanceItem& default_instance();

  void Swap(TodayFinanceItem* other);

  // implements Message ----------------------------------------------

  TodayFinanceItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayFinanceItem& from);
  void MergeFrom(const TodayFinanceItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 item_id = 1;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional uint32 ratio = 2;
  inline bool has_ratio() const;
  inline void clear_ratio();
  static const int kRatioFieldNumber = 2;
  inline ::google::protobuf::uint32 ratio() const;
  inline void set_ratio(::google::protobuf::uint32 value);

  // optional uint32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.TodayFinanceItem)
 private:
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_ratio();
  inline void clear_has_ratio();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 item_id_;
  ::google::protobuf::uint32 ratio_;
  ::google::protobuf::uint32 time_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static TodayFinanceItem* default_instance_;
};
// -------------------------------------------------------------------

class TodayFinanceRank : public ::google::protobuf::Message {
 public:
  TodayFinanceRank();
  virtual ~TodayFinanceRank();

  TodayFinanceRank(const TodayFinanceRank& from);

  inline TodayFinanceRank& operator=(const TodayFinanceRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayFinanceRank& default_instance();

  void Swap(TodayFinanceRank* other);

  // implements Message ----------------------------------------------

  TodayFinanceRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayFinanceRank& from);
  void MergeFrom(const TodayFinanceRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_SERVANT_FINANCE_RANK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional .Cmd.EFinanceRankType rank_type = 3 [default = EFINANCE_RANK_DEALCOUNT];
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 3;
  inline ::Cmd::EFinanceRankType rank_type() const;
  inline void set_rank_type(::Cmd::EFinanceRankType value);

  // optional .Cmd.EFinanceDateType date_type = 4 [default = EFINANCE_DATE_THREE];
  inline bool has_date_type() const;
  inline void clear_date_type();
  static const int kDateTypeFieldNumber = 4;
  inline ::Cmd::EFinanceDateType date_type() const;
  inline void set_date_type(::Cmd::EFinanceDateType value);

  // repeated .Cmd.TodayFinanceItem lists = 5;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 5;
  inline const ::Cmd::TodayFinanceItem& lists(int index) const;
  inline ::Cmd::TodayFinanceItem* mutable_lists(int index);
  inline ::Cmd::TodayFinanceItem* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.TodayFinanceRank)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_date_type();
  inline void clear_has_date_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int rank_type_;
  int date_type_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem > lists_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static TodayFinanceRank* default_instance_;
};
// -------------------------------------------------------------------

class TodayFinanceDetail : public ::google::protobuf::Message {
 public:
  TodayFinanceDetail();
  virtual ~TodayFinanceDetail();

  TodayFinanceDetail(const TodayFinanceDetail& from);

  inline TodayFinanceDetail& operator=(const TodayFinanceDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TodayFinanceDetail& default_instance();

  void Swap(TodayFinanceDetail* other);

  // implements Message ----------------------------------------------

  TodayFinanceDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TodayFinanceDetail& from);
  void MergeFrom(const TodayFinanceDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_SERVANT_FINANCE_DETAIL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint32 item_id = 3;
  inline bool has_item_id() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 3;
  inline ::google::protobuf::uint32 item_id() const;
  inline void set_item_id(::google::protobuf::uint32 value);

  // optional .Cmd.EFinanceRankType rank_type = 4 [default = EFINANCE_RANK_DEALCOUNT];
  inline bool has_rank_type() const;
  inline void clear_rank_type();
  static const int kRankTypeFieldNumber = 4;
  inline ::Cmd::EFinanceRankType rank_type() const;
  inline void set_rank_type(::Cmd::EFinanceRankType value);

  // optional .Cmd.EFinanceDateType date_type = 5 [default = EFINANCE_DATE_THREE];
  inline bool has_date_type() const;
  inline void clear_date_type();
  static const int kDateTypeFieldNumber = 5;
  inline ::Cmd::EFinanceDateType date_type() const;
  inline void set_date_type(::Cmd::EFinanceDateType value);

  // repeated .Cmd.TodayFinanceItem lists = 6;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 6;
  inline const ::Cmd::TodayFinanceItem& lists(int index) const;
  inline ::Cmd::TodayFinanceItem* mutable_lists(int index);
  inline ::Cmd::TodayFinanceItem* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.TodayFinanceDetail)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_item_id();
  inline void clear_has_item_id();
  inline void set_has_rank_type();
  inline void clear_has_rank_type();
  inline void set_has_date_type();
  inline void clear_has_date_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 item_id_;
  int rank_type_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem > lists_;
  int date_type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static TodayFinanceDetail* default_instance_;
};
// -------------------------------------------------------------------

class BoothPlayerPendingListCmd : public ::google::protobuf::Message {
 public:
  BoothPlayerPendingListCmd();
  virtual ~BoothPlayerPendingListCmd();

  BoothPlayerPendingListCmd(const BoothPlayerPendingListCmd& from);

  inline BoothPlayerPendingListCmd& operator=(const BoothPlayerPendingListCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoothPlayerPendingListCmd& default_instance();

  void Swap(BoothPlayerPendingListCmd* other);

  // implements Message ----------------------------------------------

  BoothPlayerPendingListCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoothPlayerPendingListCmd& from);
  void MergeFrom(const BoothPlayerPendingListCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = BOOTH_PLAYER_PENDING_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.TradeItemBaseInfo lists = 4;
  inline int lists_size() const;
  inline void clear_lists();
  static const int kListsFieldNumber = 4;
  inline const ::Cmd::TradeItemBaseInfo& lists(int index) const;
  inline ::Cmd::TradeItemBaseInfo* mutable_lists(int index);
  inline ::Cmd::TradeItemBaseInfo* add_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
      lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
      mutable_lists();

  // @@protoc_insertion_point(class_scope:Cmd.BoothPlayerPendingListCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo > lists_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static BoothPlayerPendingListCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdateOrderTradeCmd : public ::google::protobuf::Message {
 public:
  UpdateOrderTradeCmd();
  virtual ~UpdateOrderTradeCmd();

  UpdateOrderTradeCmd(const UpdateOrderTradeCmd& from);

  inline UpdateOrderTradeCmd& operator=(const UpdateOrderTradeCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateOrderTradeCmd& default_instance();

  void Swap(UpdateOrderTradeCmd* other);

  // implements Message ----------------------------------------------

  UpdateOrderTradeCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateOrderTradeCmd& from);
  void MergeFrom(const UpdateOrderTradeCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.RecordUserTradeParam param = 2 [default = UPDATE_ORDER_TRADE_PARAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::RecordUserTradeParam param() const;
  inline void set_param(::Cmd::RecordUserTradeParam value);

  // optional uint64 charid = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.TradeItemBaseInfo info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::Cmd::TradeItemBaseInfo& info() const;
  inline ::Cmd::TradeItemBaseInfo* mutable_info();
  inline ::Cmd::TradeItemBaseInfo* release_info();
  inline void set_allocated_info(::Cmd::TradeItemBaseInfo* info);

  // optional .Cmd.ETradeType type = 5 [default = ETRADETYPE_TRADE];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::Cmd::ETradeType type() const;
  inline void set_type(::Cmd::ETradeType value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdateOrderTradeCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::Cmd::TradeItemBaseInfo* info_;
  int type_;
  friend void  protobuf_AddDesc_RecordTrade_2eproto();
  friend void protobuf_AssignDesc_RecordTrade_2eproto();
  friend void protobuf_ShutdownFile_RecordTrade_2eproto();

  void InitAsDefaultInstance();
  static UpdateOrderTradeCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// SearchCond

// optional uint32 item_id = 1;
inline bool SearchCond::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchCond::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchCond::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchCond::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 SearchCond::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.SearchCond.item_id)
  return item_id_;
}
inline void SearchCond::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SearchCond.item_id)
}

// optional uint32 page_index = 7;
inline bool SearchCond::has_page_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchCond::set_has_page_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchCond::clear_has_page_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchCond::clear_page_index() {
  page_index_ = 0u;
  clear_has_page_index();
}
inline ::google::protobuf::uint32 SearchCond::page_index() const {
  // @@protoc_insertion_point(field_get:Cmd.SearchCond.page_index)
  return page_index_;
}
inline void SearchCond::set_page_index(::google::protobuf::uint32 value) {
  set_has_page_index();
  page_index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SearchCond.page_index)
}

// optional uint32 page_count = 8;
inline bool SearchCond::has_page_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SearchCond::set_has_page_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SearchCond::clear_has_page_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SearchCond::clear_page_count() {
  page_count_ = 0u;
  clear_has_page_count();
}
inline ::google::protobuf::uint32 SearchCond::page_count() const {
  // @@protoc_insertion_point(field_get:Cmd.SearchCond.page_count)
  return page_count_;
}
inline void SearchCond::set_page_count(::google::protobuf::uint32 value) {
  set_has_page_count();
  page_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SearchCond.page_count)
}

// optional .Cmd.RankType rank_type = 9 [default = RANKTYPE_ITEM_ID_INC];
inline bool SearchCond::has_rank_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SearchCond::set_has_rank_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SearchCond::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SearchCond::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::Cmd::RankType SearchCond::rank_type() const {
  // @@protoc_insertion_point(field_get:Cmd.SearchCond.rank_type)
  return static_cast< ::Cmd::RankType >(rank_type_);
}
inline void SearchCond::set_rank_type(::Cmd::RankType value) {
  assert(::Cmd::RankType_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SearchCond.rank_type)
}

// optional .Cmd.ETradeType trade_type = 10 [default = ETRADETYPE_TRADE];
inline bool SearchCond::has_trade_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SearchCond::set_has_trade_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SearchCond::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SearchCond::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType SearchCond::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.SearchCond.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void SearchCond::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SearchCond.trade_type)
}

// -------------------------------------------------------------------

// BriefPendingListRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool BriefPendingListRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriefPendingListRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command BriefPendingListRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BriefPendingListRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = BRIEF_PENDING_LIST_RECORDTRADE];
inline bool BriefPendingListRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BriefPendingListRecordTradeCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam BriefPendingListRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void BriefPendingListRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool BriefPendingListRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BriefPendingListRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BriefPendingListRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.charid)
  return charid_;
}
inline void BriefPendingListRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.charid)
}

// optional uint32 category = 4;
inline bool BriefPendingListRecordTradeCmd::has_category() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_category() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_category() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BriefPendingListRecordTradeCmd::clear_category() {
  category_ = 0u;
  clear_has_category();
}
inline ::google::protobuf::uint32 BriefPendingListRecordTradeCmd::category() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.category)
  return category_;
}
inline void BriefPendingListRecordTradeCmd::set_category(::google::protobuf::uint32 value) {
  set_has_category();
  category_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.category)
}

// optional uint32 job = 5;
inline bool BriefPendingListRecordTradeCmd::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BriefPendingListRecordTradeCmd::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 BriefPendingListRecordTradeCmd::job() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.job)
  return job_;
}
inline void BriefPendingListRecordTradeCmd::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.job)
}

// optional uint32 fashion = 6;
inline bool BriefPendingListRecordTradeCmd::has_fashion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BriefPendingListRecordTradeCmd::set_has_fashion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BriefPendingListRecordTradeCmd::clear_has_fashion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BriefPendingListRecordTradeCmd::clear_fashion() {
  fashion_ = 0u;
  clear_has_fashion();
}
inline ::google::protobuf::uint32 BriefPendingListRecordTradeCmd::fashion() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.fashion)
  return fashion_;
}
inline void BriefPendingListRecordTradeCmd::set_fashion(::google::protobuf::uint32 value) {
  set_has_fashion();
  fashion_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.fashion)
}

// repeated uint32 pub_lists = 7;
inline int BriefPendingListRecordTradeCmd::pub_lists_size() const {
  return pub_lists_.size();
}
inline void BriefPendingListRecordTradeCmd::clear_pub_lists() {
  pub_lists_.Clear();
}
inline ::google::protobuf::uint32 BriefPendingListRecordTradeCmd::pub_lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.pub_lists)
  return pub_lists_.Get(index);
}
inline void BriefPendingListRecordTradeCmd::set_pub_lists(int index, ::google::protobuf::uint32 value) {
  pub_lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.pub_lists)
}
inline void BriefPendingListRecordTradeCmd::add_pub_lists(::google::protobuf::uint32 value) {
  pub_lists_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BriefPendingListRecordTradeCmd.pub_lists)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BriefPendingListRecordTradeCmd::pub_lists() const {
  // @@protoc_insertion_point(field_list:Cmd.BriefPendingListRecordTradeCmd.pub_lists)
  return pub_lists_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BriefPendingListRecordTradeCmd::mutable_pub_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BriefPendingListRecordTradeCmd.pub_lists)
  return &pub_lists_;
}

// repeated uint32 lists = 8;
inline int BriefPendingListRecordTradeCmd::lists_size() const {
  return lists_.size();
}
inline void BriefPendingListRecordTradeCmd::clear_lists() {
  lists_.Clear();
}
inline ::google::protobuf::uint32 BriefPendingListRecordTradeCmd::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BriefPendingListRecordTradeCmd.lists)
  return lists_.Get(index);
}
inline void BriefPendingListRecordTradeCmd::set_lists(int index, ::google::protobuf::uint32 value) {
  lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.BriefPendingListRecordTradeCmd.lists)
}
inline void BriefPendingListRecordTradeCmd::add_lists(::google::protobuf::uint32 value) {
  lists_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.BriefPendingListRecordTradeCmd.lists)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BriefPendingListRecordTradeCmd::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.BriefPendingListRecordTradeCmd.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BriefPendingListRecordTradeCmd::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BriefPendingListRecordTradeCmd.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// DetailPendingListRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool DetailPendingListRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetailPendingListRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetailPendingListRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetailPendingListRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command DetailPendingListRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DetailPendingListRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DetailPendingListRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = DETAIL_PENDING_LIST_RECORDTRADE];
inline bool DetailPendingListRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetailPendingListRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetailPendingListRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetailPendingListRecordTradeCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam DetailPendingListRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void DetailPendingListRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DetailPendingListRecordTradeCmd.param)
}

// optional .Cmd.SearchCond search_cond = 3;
inline bool DetailPendingListRecordTradeCmd::has_search_cond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetailPendingListRecordTradeCmd::set_has_search_cond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetailPendingListRecordTradeCmd::clear_has_search_cond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetailPendingListRecordTradeCmd::clear_search_cond() {
  if (search_cond_ != NULL) search_cond_->::Cmd::SearchCond::Clear();
  clear_has_search_cond();
}
inline const ::Cmd::SearchCond& DetailPendingListRecordTradeCmd::search_cond() const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.search_cond)
  return search_cond_ != NULL ? *search_cond_ : *default_instance_->search_cond_;
}
inline ::Cmd::SearchCond* DetailPendingListRecordTradeCmd::mutable_search_cond() {
  set_has_search_cond();
  if (search_cond_ == NULL) search_cond_ = new ::Cmd::SearchCond;
  // @@protoc_insertion_point(field_mutable:Cmd.DetailPendingListRecordTradeCmd.search_cond)
  return search_cond_;
}
inline ::Cmd::SearchCond* DetailPendingListRecordTradeCmd::release_search_cond() {
  clear_has_search_cond();
  ::Cmd::SearchCond* temp = search_cond_;
  search_cond_ = NULL;
  return temp;
}
inline void DetailPendingListRecordTradeCmd::set_allocated_search_cond(::Cmd::SearchCond* search_cond) {
  delete search_cond_;
  search_cond_ = search_cond;
  if (search_cond) {
    set_has_search_cond();
  } else {
    clear_has_search_cond();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DetailPendingListRecordTradeCmd.search_cond)
}

// optional uint64 charid = 4;
inline bool DetailPendingListRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetailPendingListRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetailPendingListRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetailPendingListRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 DetailPendingListRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.charid)
  return charid_;
}
inline void DetailPendingListRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DetailPendingListRecordTradeCmd.charid)
}

// repeated .Cmd.TradeItemBaseInfo lists = 5;
inline int DetailPendingListRecordTradeCmd::lists_size() const {
  return lists_.size();
}
inline void DetailPendingListRecordTradeCmd::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::TradeItemBaseInfo& DetailPendingListRecordTradeCmd::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.lists)
  return lists_.Get(index);
}
inline ::Cmd::TradeItemBaseInfo* DetailPendingListRecordTradeCmd::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.DetailPendingListRecordTradeCmd.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::TradeItemBaseInfo* DetailPendingListRecordTradeCmd::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.DetailPendingListRecordTradeCmd.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
DetailPendingListRecordTradeCmd::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.DetailPendingListRecordTradeCmd.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
DetailPendingListRecordTradeCmd::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.DetailPendingListRecordTradeCmd.lists)
  return &lists_;
}

// optional uint32 total_page_count = 6;
inline bool DetailPendingListRecordTradeCmd::has_total_page_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetailPendingListRecordTradeCmd::set_has_total_page_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetailPendingListRecordTradeCmd::clear_has_total_page_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetailPendingListRecordTradeCmd::clear_total_page_count() {
  total_page_count_ = 0u;
  clear_has_total_page_count();
}
inline ::google::protobuf::uint32 DetailPendingListRecordTradeCmd::total_page_count() const {
  // @@protoc_insertion_point(field_get:Cmd.DetailPendingListRecordTradeCmd.total_page_count)
  return total_page_count_;
}
inline void DetailPendingListRecordTradeCmd::set_total_page_count(::google::protobuf::uint32 value) {
  set_has_total_page_count();
  total_page_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DetailPendingListRecordTradeCmd.total_page_count)
}

// -------------------------------------------------------------------

// BriefBuyInfo

// optional string name = 1;
inline bool BriefBuyInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BriefBuyInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BriefBuyInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BriefBuyInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BriefBuyInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefBuyInfo.name)
  return *name_;
}
inline void BriefBuyInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BriefBuyInfo.name)
}
inline void BriefBuyInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BriefBuyInfo.name)
}
inline void BriefBuyInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BriefBuyInfo.name)
}
inline ::std::string* BriefBuyInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BriefBuyInfo.name)
  return name_;
}
inline ::std::string* BriefBuyInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BriefBuyInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BriefBuyInfo.name)
}

// optional uint32 time = 2;
inline bool BriefBuyInfo::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BriefBuyInfo::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BriefBuyInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BriefBuyInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 BriefBuyInfo::time() const {
  // @@protoc_insertion_point(field_get:Cmd.BriefBuyInfo.time)
  return time_;
}
inline void BriefBuyInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BriefBuyInfo.time)
}

// -------------------------------------------------------------------

// ItemSellInfoRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool ItemSellInfoRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemSellInfoRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command ItemSellInfoRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ItemSellInfoRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = ITEM_SELL_INFO_RECORDTRADE];
inline bool ItemSellInfoRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemSellInfoRecordTradeCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam ItemSellInfoRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void ItemSellInfoRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool ItemSellInfoRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemSellInfoRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ItemSellInfoRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.charid)
  return charid_;
}
inline void ItemSellInfoRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.charid)
}

// optional uint32 itemid = 4;
inline bool ItemSellInfoRecordTradeCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ItemSellInfoRecordTradeCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemSellInfoRecordTradeCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.itemid)
  return itemid_;
}
inline void ItemSellInfoRecordTradeCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.itemid)
}

// optional uint32 refine_lv = 5;
inline bool ItemSellInfoRecordTradeCmd::has_refine_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_refine_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_refine_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ItemSellInfoRecordTradeCmd::clear_refine_lv() {
  refine_lv_ = 0u;
  clear_has_refine_lv();
}
inline ::google::protobuf::uint32 ItemSellInfoRecordTradeCmd::refine_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.refine_lv)
  return refine_lv_;
}
inline void ItemSellInfoRecordTradeCmd::set_refine_lv(::google::protobuf::uint32 value) {
  set_has_refine_lv();
  refine_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.refine_lv)
}

// optional uint32 publicity_id = 6;
inline bool ItemSellInfoRecordTradeCmd::has_publicity_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_publicity_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_publicity_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ItemSellInfoRecordTradeCmd::clear_publicity_id() {
  publicity_id_ = 0u;
  clear_has_publicity_id();
}
inline ::google::protobuf::uint32 ItemSellInfoRecordTradeCmd::publicity_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.publicity_id)
  return publicity_id_;
}
inline void ItemSellInfoRecordTradeCmd::set_publicity_id(::google::protobuf::uint32 value) {
  set_has_publicity_id();
  publicity_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.publicity_id)
}

// optional .Cmd.StateType statetype = 7;
inline bool ItemSellInfoRecordTradeCmd::has_statetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_statetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_statetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ItemSellInfoRecordTradeCmd::clear_statetype() {
  statetype_ = 1;
  clear_has_statetype();
}
inline ::Cmd::StateType ItemSellInfoRecordTradeCmd::statetype() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.statetype)
  return static_cast< ::Cmd::StateType >(statetype_);
}
inline void ItemSellInfoRecordTradeCmd::set_statetype(::Cmd::StateType value) {
  assert(::Cmd::StateType_IsValid(value));
  set_has_statetype();
  statetype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.statetype)
}

// optional uint32 count = 8 [default = 0];
inline bool ItemSellInfoRecordTradeCmd::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ItemSellInfoRecordTradeCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemSellInfoRecordTradeCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.count)
  return count_;
}
inline void ItemSellInfoRecordTradeCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.count)
}

// optional uint32 buyer_count = 9 [default = 0];
inline bool ItemSellInfoRecordTradeCmd::has_buyer_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_buyer_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_buyer_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ItemSellInfoRecordTradeCmd::clear_buyer_count() {
  buyer_count_ = 0u;
  clear_has_buyer_count();
}
inline ::google::protobuf::uint32 ItemSellInfoRecordTradeCmd::buyer_count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.buyer_count)
  return buyer_count_;
}
inline void ItemSellInfoRecordTradeCmd::set_buyer_count(::google::protobuf::uint32 value) {
  set_has_buyer_count();
  buyer_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.buyer_count)
}

// repeated .Cmd.BriefBuyInfo buy_info = 10;
inline int ItemSellInfoRecordTradeCmd::buy_info_size() const {
  return buy_info_.size();
}
inline void ItemSellInfoRecordTradeCmd::clear_buy_info() {
  buy_info_.Clear();
}
inline const ::Cmd::BriefBuyInfo& ItemSellInfoRecordTradeCmd::buy_info(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.buy_info)
  return buy_info_.Get(index);
}
inline ::Cmd::BriefBuyInfo* ItemSellInfoRecordTradeCmd::mutable_buy_info(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ItemSellInfoRecordTradeCmd.buy_info)
  return buy_info_.Mutable(index);
}
inline ::Cmd::BriefBuyInfo* ItemSellInfoRecordTradeCmd::add_buy_info() {
  // @@protoc_insertion_point(field_add:Cmd.ItemSellInfoRecordTradeCmd.buy_info)
  return buy_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::BriefBuyInfo >&
ItemSellInfoRecordTradeCmd::buy_info() const {
  // @@protoc_insertion_point(field_list:Cmd.ItemSellInfoRecordTradeCmd.buy_info)
  return buy_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::BriefBuyInfo >*
ItemSellInfoRecordTradeCmd::mutable_buy_info() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ItemSellInfoRecordTradeCmd.buy_info)
  return &buy_info_;
}

// optional uint64 order_id = 11;
inline bool ItemSellInfoRecordTradeCmd::has_order_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_order_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ItemSellInfoRecordTradeCmd::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 ItemSellInfoRecordTradeCmd::order_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.order_id)
  return order_id_;
}
inline void ItemSellInfoRecordTradeCmd::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.order_id)
}

// optional .Cmd.ETradeType type = 12 [default = ETRADETYPE_TRADE];
inline bool ItemSellInfoRecordTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ItemSellInfoRecordTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType ItemSellInfoRecordTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void ItemSellInfoRecordTradeCmd::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.type)
}

// optional uint64 quota = 13;
inline bool ItemSellInfoRecordTradeCmd::has_quota() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ItemSellInfoRecordTradeCmd::set_has_quota() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ItemSellInfoRecordTradeCmd::clear_has_quota() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ItemSellInfoRecordTradeCmd::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ItemSellInfoRecordTradeCmd::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemSellInfoRecordTradeCmd.quota)
  return quota_;
}
inline void ItemSellInfoRecordTradeCmd::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemSellInfoRecordTradeCmd.quota)
}

// -------------------------------------------------------------------

// MyPendingListRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool MyPendingListRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyPendingListRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyPendingListRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyPendingListRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command MyPendingListRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MyPendingListRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MyPendingListRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyPendingListRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = MY_PENDING_LIST_RECORDTRADE];
inline bool MyPendingListRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyPendingListRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyPendingListRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyPendingListRecordTradeCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam MyPendingListRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MyPendingListRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void MyPendingListRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyPendingListRecordTradeCmd.param)
}

// optional .Cmd.SearchCond search_cond = 3;
inline bool MyPendingListRecordTradeCmd::has_search_cond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyPendingListRecordTradeCmd::set_has_search_cond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyPendingListRecordTradeCmd::clear_has_search_cond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyPendingListRecordTradeCmd::clear_search_cond() {
  if (search_cond_ != NULL) search_cond_->::Cmd::SearchCond::Clear();
  clear_has_search_cond();
}
inline const ::Cmd::SearchCond& MyPendingListRecordTradeCmd::search_cond() const {
  // @@protoc_insertion_point(field_get:Cmd.MyPendingListRecordTradeCmd.search_cond)
  return search_cond_ != NULL ? *search_cond_ : *default_instance_->search_cond_;
}
inline ::Cmd::SearchCond* MyPendingListRecordTradeCmd::mutable_search_cond() {
  set_has_search_cond();
  if (search_cond_ == NULL) search_cond_ = new ::Cmd::SearchCond;
  // @@protoc_insertion_point(field_mutable:Cmd.MyPendingListRecordTradeCmd.search_cond)
  return search_cond_;
}
inline ::Cmd::SearchCond* MyPendingListRecordTradeCmd::release_search_cond() {
  clear_has_search_cond();
  ::Cmd::SearchCond* temp = search_cond_;
  search_cond_ = NULL;
  return temp;
}
inline void MyPendingListRecordTradeCmd::set_allocated_search_cond(::Cmd::SearchCond* search_cond) {
  delete search_cond_;
  search_cond_ = search_cond;
  if (search_cond) {
    set_has_search_cond();
  } else {
    clear_has_search_cond();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MyPendingListRecordTradeCmd.search_cond)
}

// optional uint64 charid = 4;
inline bool MyPendingListRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MyPendingListRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MyPendingListRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MyPendingListRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MyPendingListRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MyPendingListRecordTradeCmd.charid)
  return charid_;
}
inline void MyPendingListRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyPendingListRecordTradeCmd.charid)
}

// repeated .Cmd.TradeItemBaseInfo lists = 6;
inline int MyPendingListRecordTradeCmd::lists_size() const {
  return lists_.size();
}
inline void MyPendingListRecordTradeCmd::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::TradeItemBaseInfo& MyPendingListRecordTradeCmd::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MyPendingListRecordTradeCmd.lists)
  return lists_.Get(index);
}
inline ::Cmd::TradeItemBaseInfo* MyPendingListRecordTradeCmd::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MyPendingListRecordTradeCmd.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::TradeItemBaseInfo* MyPendingListRecordTradeCmd::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.MyPendingListRecordTradeCmd.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
MyPendingListRecordTradeCmd::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.MyPendingListRecordTradeCmd.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
MyPendingListRecordTradeCmd::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MyPendingListRecordTradeCmd.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// NameInfo

// optional string name = 1;
inline bool NameInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NameInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NameInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NameInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NameInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.NameInfo.name)
  return *name_;
}
inline void NameInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NameInfo.name)
}
inline void NameInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NameInfo.name)
}
inline void NameInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NameInfo.name)
}
inline ::std::string* NameInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NameInfo.name)
  return name_;
}
inline ::std::string* NameInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NameInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NameInfo.name)
}

// optional uint32 zoneid = 2;
inline bool NameInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NameInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NameInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NameInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 NameInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.NameInfo.zoneid)
  return zoneid_;
}
inline void NameInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NameInfo.zoneid)
}

// optional uint32 count = 3;
inline bool NameInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NameInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NameInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NameInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NameInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.NameInfo.count)
  return count_;
}
inline void NameInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NameInfo.count)
}

// -------------------------------------------------------------------

// NameInfoList

// repeated .Cmd.NameInfo name_infos = 1;
inline int NameInfoList::name_infos_size() const {
  return name_infos_.size();
}
inline void NameInfoList::clear_name_infos() {
  name_infos_.Clear();
}
inline const ::Cmd::NameInfo& NameInfoList::name_infos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NameInfoList.name_infos)
  return name_infos_.Get(index);
}
inline ::Cmd::NameInfo* NameInfoList::mutable_name_infos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NameInfoList.name_infos)
  return name_infos_.Mutable(index);
}
inline ::Cmd::NameInfo* NameInfoList::add_name_infos() {
  // @@protoc_insertion_point(field_add:Cmd.NameInfoList.name_infos)
  return name_infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::NameInfo >&
NameInfoList::name_infos() const {
  // @@protoc_insertion_point(field_list:Cmd.NameInfoList.name_infos)
  return name_infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::NameInfo >*
NameInfoList::mutable_name_infos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NameInfoList.name_infos)
  return &name_infos_;
}

// -------------------------------------------------------------------

// LogItemInfo

// optional uint64 id = 1;
inline bool LogItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 LogItemInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.id)
  return id_;
}
inline void LogItemInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.id)
}

// optional .Cmd.ETakeStatus status = 2;
inline bool LogItemInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogItemInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogItemInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogItemInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ETakeStatus LogItemInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.status)
  return static_cast< ::Cmd::ETakeStatus >(status_);
}
inline void LogItemInfo::set_status(::Cmd::ETakeStatus value) {
  assert(::Cmd::ETakeStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.status)
}

// optional .Cmd.EOperType logtype = 3;
inline bool LogItemInfo::has_logtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogItemInfo::set_has_logtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogItemInfo::clear_has_logtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogItemInfo::clear_logtype() {
  logtype_ = 0;
  clear_has_logtype();
}
inline ::Cmd::EOperType LogItemInfo::logtype() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.logtype)
  return static_cast< ::Cmd::EOperType >(logtype_);
}
inline void LogItemInfo::set_logtype(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_logtype();
  logtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.logtype)
}

// optional uint32 itemid = 4;
inline bool LogItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LogItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LogItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LogItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 LogItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.itemid)
  return itemid_;
}
inline void LogItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.itemid)
}

// optional uint32 refine_lv = 5;
inline bool LogItemInfo::has_refine_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LogItemInfo::set_has_refine_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LogItemInfo::clear_has_refine_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LogItemInfo::clear_refine_lv() {
  refine_lv_ = 0u;
  clear_has_refine_lv();
}
inline ::google::protobuf::uint32 LogItemInfo::refine_lv() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.refine_lv)
  return refine_lv_;
}
inline void LogItemInfo::set_refine_lv(::google::protobuf::uint32 value) {
  set_has_refine_lv();
  refine_lv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.refine_lv)
}

// optional bool damage = 6;
inline bool LogItemInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LogItemInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LogItemInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LogItemInfo::clear_damage() {
  damage_ = false;
  clear_has_damage();
}
inline bool LogItemInfo::damage() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.damage)
  return damage_;
}
inline void LogItemInfo::set_damage(bool value) {
  set_has_damage();
  damage_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.damage)
}

// optional uint32 tradetime = 7;
inline bool LogItemInfo::has_tradetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LogItemInfo::set_has_tradetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LogItemInfo::clear_has_tradetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LogItemInfo::clear_tradetime() {
  tradetime_ = 0u;
  clear_has_tradetime();
}
inline ::google::protobuf::uint32 LogItemInfo::tradetime() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.tradetime)
  return tradetime_;
}
inline void LogItemInfo::set_tradetime(::google::protobuf::uint32 value) {
  set_has_tradetime();
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.tradetime)
}

// optional uint32 count = 8;
inline bool LogItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LogItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LogItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LogItemInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LogItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.count)
  return count_;
}
inline void LogItemInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.count)
}

// optional uint32 price = 20;
inline bool LogItemInfo::has_price() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LogItemInfo::set_has_price() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LogItemInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LogItemInfo::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 LogItemInfo::price() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.price)
  return price_;
}
inline void LogItemInfo::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.price)
}

// optional uint32 tax = 9;
inline bool LogItemInfo::has_tax() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LogItemInfo::set_has_tax() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LogItemInfo::clear_has_tax() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LogItemInfo::clear_tax() {
  tax_ = 0u;
  clear_has_tax();
}
inline ::google::protobuf::uint32 LogItemInfo::tax() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.tax)
  return tax_;
}
inline void LogItemInfo::set_tax(::google::protobuf::uint32 value) {
  set_has_tax();
  tax_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.tax)
}

// optional uint32 getmoney = 10;
inline bool LogItemInfo::has_getmoney() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LogItemInfo::set_has_getmoney() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LogItemInfo::clear_has_getmoney() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LogItemInfo::clear_getmoney() {
  getmoney_ = 0u;
  clear_has_getmoney();
}
inline ::google::protobuf::uint32 LogItemInfo::getmoney() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.getmoney)
  return getmoney_;
}
inline void LogItemInfo::set_getmoney(::google::protobuf::uint32 value) {
  set_has_getmoney();
  getmoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.getmoney)
}

// optional uint32 costmoney = 11;
inline bool LogItemInfo::has_costmoney() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LogItemInfo::set_has_costmoney() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LogItemInfo::clear_has_costmoney() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LogItemInfo::clear_costmoney() {
  costmoney_ = 0u;
  clear_has_costmoney();
}
inline ::google::protobuf::uint32 LogItemInfo::costmoney() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.costmoney)
  return costmoney_;
}
inline void LogItemInfo::set_costmoney(::google::protobuf::uint32 value) {
  set_has_costmoney();
  costmoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.costmoney)
}

// optional uint32 failcount = 12;
inline bool LogItemInfo::has_failcount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LogItemInfo::set_has_failcount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LogItemInfo::clear_has_failcount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LogItemInfo::clear_failcount() {
  failcount_ = 0u;
  clear_has_failcount();
}
inline ::google::protobuf::uint32 LogItemInfo::failcount() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.failcount)
  return failcount_;
}
inline void LogItemInfo::set_failcount(::google::protobuf::uint32 value) {
  set_has_failcount();
  failcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.failcount)
}

// optional uint32 retmoney = 13;
inline bool LogItemInfo::has_retmoney() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LogItemInfo::set_has_retmoney() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LogItemInfo::clear_has_retmoney() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LogItemInfo::clear_retmoney() {
  retmoney_ = 0u;
  clear_has_retmoney();
}
inline ::google::protobuf::uint32 LogItemInfo::retmoney() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.retmoney)
  return retmoney_;
}
inline void LogItemInfo::set_retmoney(::google::protobuf::uint32 value) {
  set_has_retmoney();
  retmoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.retmoney)
}

// optional uint32 totalcount = 14;
inline bool LogItemInfo::has_totalcount() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LogItemInfo::set_has_totalcount() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LogItemInfo::clear_has_totalcount() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LogItemInfo::clear_totalcount() {
  totalcount_ = 0u;
  clear_has_totalcount();
}
inline ::google::protobuf::uint32 LogItemInfo::totalcount() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.totalcount)
  return totalcount_;
}
inline void LogItemInfo::set_totalcount(::google::protobuf::uint32 value) {
  set_has_totalcount();
  totalcount_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.totalcount)
}

// optional uint32 endtime = 15;
inline bool LogItemInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LogItemInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LogItemInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LogItemInfo::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 LogItemInfo::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.endtime)
  return endtime_;
}
inline void LogItemInfo::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.endtime)
}

// optional .Cmd.NameInfo name_info = 16;
inline bool LogItemInfo::has_name_info() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LogItemInfo::set_has_name_info() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LogItemInfo::clear_has_name_info() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LogItemInfo::clear_name_info() {
  if (name_info_ != NULL) name_info_->::Cmd::NameInfo::Clear();
  clear_has_name_info();
}
inline const ::Cmd::NameInfo& LogItemInfo::name_info() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.name_info)
  return name_info_ != NULL ? *name_info_ : *default_instance_->name_info_;
}
inline ::Cmd::NameInfo* LogItemInfo::mutable_name_info() {
  set_has_name_info();
  if (name_info_ == NULL) name_info_ = new ::Cmd::NameInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.LogItemInfo.name_info)
  return name_info_;
}
inline ::Cmd::NameInfo* LogItemInfo::release_name_info() {
  clear_has_name_info();
  ::Cmd::NameInfo* temp = name_info_;
  name_info_ = NULL;
  return temp;
}
inline void LogItemInfo::set_allocated_name_info(::Cmd::NameInfo* name_info) {
  delete name_info_;
  name_info_ = name_info;
  if (name_info) {
    set_has_name_info();
  } else {
    clear_has_name_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LogItemInfo.name_info)
}

// optional bool is_many_people = 17;
inline bool LogItemInfo::has_is_many_people() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LogItemInfo::set_has_is_many_people() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LogItemInfo::clear_has_is_many_people() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LogItemInfo::clear_is_many_people() {
  is_many_people_ = false;
  clear_has_is_many_people();
}
inline bool LogItemInfo::is_many_people() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.is_many_people)
  return is_many_people_;
}
inline void LogItemInfo::set_is_many_people(bool value) {
  set_has_is_many_people();
  is_many_people_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.is_many_people)
}

// optional .Cmd.NameInfoList name_list = 18;
inline bool LogItemInfo::has_name_list() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LogItemInfo::set_has_name_list() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LogItemInfo::clear_has_name_list() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LogItemInfo::clear_name_list() {
  if (name_list_ != NULL) name_list_->::Cmd::NameInfoList::Clear();
  clear_has_name_list();
}
inline const ::Cmd::NameInfoList& LogItemInfo::name_list() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.name_list)
  return name_list_ != NULL ? *name_list_ : *default_instance_->name_list_;
}
inline ::Cmd::NameInfoList* LogItemInfo::mutable_name_list() {
  set_has_name_list();
  if (name_list_ == NULL) name_list_ = new ::Cmd::NameInfoList;
  // @@protoc_insertion_point(field_mutable:Cmd.LogItemInfo.name_list)
  return name_list_;
}
inline ::Cmd::NameInfoList* LogItemInfo::release_name_list() {
  clear_has_name_list();
  ::Cmd::NameInfoList* temp = name_list_;
  name_list_ = NULL;
  return temp;
}
inline void LogItemInfo::set_allocated_name_list(::Cmd::NameInfoList* name_list) {
  delete name_list_;
  name_list_ = name_list;
  if (name_list) {
    set_has_name_list();
  } else {
    clear_has_name_list();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LogItemInfo.name_list)
}

// optional .Cmd.ItemData itemdata = 19;
inline bool LogItemInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LogItemInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LogItemInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LogItemInfo::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& LogItemInfo::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* LogItemInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.LogItemInfo.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* LogItemInfo::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void LogItemInfo::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LogItemInfo.itemdata)
}

// optional uint64 receiverid = 21;
inline bool LogItemInfo::has_receiverid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LogItemInfo::set_has_receiverid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LogItemInfo::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LogItemInfo::clear_receiverid() {
  receiverid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiverid();
}
inline ::google::protobuf::uint64 LogItemInfo::receiverid() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.receiverid)
  return receiverid_;
}
inline void LogItemInfo::set_receiverid(::google::protobuf::uint64 value) {
  set_has_receiverid();
  receiverid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.receiverid)
}

// optional string receivername = 22;
inline bool LogItemInfo::has_receivername() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LogItemInfo::set_has_receivername() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LogItemInfo::clear_has_receivername() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LogItemInfo::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& LogItemInfo::receivername() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.receivername)
  return *receivername_;
}
inline void LogItemInfo::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.receivername)
}
inline void LogItemInfo::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LogItemInfo.receivername)
}
inline void LogItemInfo::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LogItemInfo.receivername)
}
inline ::std::string* LogItemInfo::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LogItemInfo.receivername)
  return receivername_;
}
inline ::std::string* LogItemInfo::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LogItemInfo::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LogItemInfo.receivername)
}

// optional uint32 receiverzoneid = 23;
inline bool LogItemInfo::has_receiverzoneid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LogItemInfo::set_has_receiverzoneid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LogItemInfo::clear_has_receiverzoneid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LogItemInfo::clear_receiverzoneid() {
  receiverzoneid_ = 0u;
  clear_has_receiverzoneid();
}
inline ::google::protobuf::uint32 LogItemInfo::receiverzoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.receiverzoneid)
  return receiverzoneid_;
}
inline void LogItemInfo::set_receiverzoneid(::google::protobuf::uint32 value) {
  set_has_receiverzoneid();
  receiverzoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.receiverzoneid)
}

// optional uint64 quota = 24;
inline bool LogItemInfo::has_quota() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LogItemInfo::set_has_quota() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LogItemInfo::clear_has_quota() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LogItemInfo::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 LogItemInfo::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.quota)
  return quota_;
}
inline void LogItemInfo::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.quota)
}

// optional uint32 background = 25;
inline bool LogItemInfo::has_background() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LogItemInfo::set_has_background() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LogItemInfo::clear_has_background() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LogItemInfo::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 LogItemInfo::background() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.background)
  return background_;
}
inline void LogItemInfo::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.background)
}

// optional uint32 expiretime = 26;
inline bool LogItemInfo::has_expiretime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LogItemInfo::set_has_expiretime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LogItemInfo::clear_has_expiretime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LogItemInfo::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 LogItemInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.expiretime)
  return expiretime_;
}
inline void LogItemInfo::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.expiretime)
}

// optional uint32 ret_cost = 27;
inline bool LogItemInfo::has_ret_cost() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LogItemInfo::set_has_ret_cost() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LogItemInfo::clear_has_ret_cost() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LogItemInfo::clear_ret_cost() {
  ret_cost_ = 0u;
  clear_has_ret_cost();
}
inline ::google::protobuf::uint32 LogItemInfo::ret_cost() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.ret_cost)
  return ret_cost_;
}
inline void LogItemInfo::set_ret_cost(::google::protobuf::uint32 value) {
  set_has_ret_cost();
  ret_cost_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.ret_cost)
}

// optional bool cangive = 28;
inline bool LogItemInfo::has_cangive() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LogItemInfo::set_has_cangive() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LogItemInfo::clear_has_cangive() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LogItemInfo::clear_cangive() {
  cangive_ = false;
  clear_has_cangive();
}
inline bool LogItemInfo::cangive() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.cangive)
  return cangive_;
}
inline void LogItemInfo::set_cangive(bool value) {
  set_has_cangive();
  cangive_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.cangive)
}

// optional .Cmd.ETradeType trade_type = 29 [default = ETRADETYPE_TRADE];
inline bool LogItemInfo::has_trade_type() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LogItemInfo::set_has_trade_type() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LogItemInfo::clear_has_trade_type() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LogItemInfo::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType LogItemInfo::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void LogItemInfo::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.trade_type)
}

// optional bool is_public = 30;
inline bool LogItemInfo::has_is_public() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LogItemInfo::set_has_is_public() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LogItemInfo::clear_has_is_public() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LogItemInfo::clear_is_public() {
  is_public_ = false;
  clear_has_is_public();
}
inline bool LogItemInfo::is_public() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.is_public)
  return is_public_;
}
inline void LogItemInfo::set_is_public(bool value) {
  set_has_is_public();
  is_public_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.is_public)
}

// optional uint64 quota_cost = 31 [default = 0];
inline bool LogItemInfo::has_quota_cost() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LogItemInfo::set_has_quota_cost() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LogItemInfo::clear_has_quota_cost() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LogItemInfo::clear_quota_cost() {
  quota_cost_ = GOOGLE_ULONGLONG(0);
  clear_has_quota_cost();
}
inline ::google::protobuf::uint64 LogItemInfo::quota_cost() const {
  // @@protoc_insertion_point(field_get:Cmd.LogItemInfo.quota_cost)
  return quota_cost_;
}
inline void LogItemInfo::set_quota_cost(::google::protobuf::uint64 value) {
  set_has_quota_cost();
  quota_cost_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LogItemInfo.quota_cost)
}

// -------------------------------------------------------------------

// MyTradeLogRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool MyTradeLogRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyTradeLogRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command MyTradeLogRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void MyTradeLogRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = MY_TRADE_LOG_LIST_RECORDTRADE];
inline bool MyTradeLogRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyTradeLogRecordTradeCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam MyTradeLogRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void MyTradeLogRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool MyTradeLogRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MyTradeLogRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MyTradeLogRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.charid)
  return charid_;
}
inline void MyTradeLogRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.charid)
}

// optional uint32 index = 4;
inline bool MyTradeLogRecordTradeCmd::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MyTradeLogRecordTradeCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MyTradeLogRecordTradeCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.index)
  return index_;
}
inline void MyTradeLogRecordTradeCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.index)
}

// optional uint32 total_page_count = 5;
inline bool MyTradeLogRecordTradeCmd::has_total_page_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_total_page_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_total_page_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MyTradeLogRecordTradeCmd::clear_total_page_count() {
  total_page_count_ = 0u;
  clear_has_total_page_count();
}
inline ::google::protobuf::uint32 MyTradeLogRecordTradeCmd::total_page_count() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.total_page_count)
  return total_page_count_;
}
inline void MyTradeLogRecordTradeCmd::set_total_page_count(::google::protobuf::uint32 value) {
  set_has_total_page_count();
  total_page_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.total_page_count)
}

// repeated .Cmd.LogItemInfo log_list = 6;
inline int MyTradeLogRecordTradeCmd::log_list_size() const {
  return log_list_.size();
}
inline void MyTradeLogRecordTradeCmd::clear_log_list() {
  log_list_.Clear();
}
inline const ::Cmd::LogItemInfo& MyTradeLogRecordTradeCmd::log_list(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.log_list)
  return log_list_.Get(index);
}
inline ::Cmd::LogItemInfo* MyTradeLogRecordTradeCmd::mutable_log_list(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MyTradeLogRecordTradeCmd.log_list)
  return log_list_.Mutable(index);
}
inline ::Cmd::LogItemInfo* MyTradeLogRecordTradeCmd::add_log_list() {
  // @@protoc_insertion_point(field_add:Cmd.MyTradeLogRecordTradeCmd.log_list)
  return log_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::LogItemInfo >&
MyTradeLogRecordTradeCmd::log_list() const {
  // @@protoc_insertion_point(field_list:Cmd.MyTradeLogRecordTradeCmd.log_list)
  return log_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::LogItemInfo >*
MyTradeLogRecordTradeCmd::mutable_log_list() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MyTradeLogRecordTradeCmd.log_list)
  return &log_list_;
}

// optional .Cmd.ETradeType trade_type = 7 [default = ETRADETYPE_TRADE];
inline bool MyTradeLogRecordTradeCmd::has_trade_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MyTradeLogRecordTradeCmd::set_has_trade_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MyTradeLogRecordTradeCmd::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MyTradeLogRecordTradeCmd::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType MyTradeLogRecordTradeCmd::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.MyTradeLogRecordTradeCmd.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void MyTradeLogRecordTradeCmd::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MyTradeLogRecordTradeCmd.trade_type)
}

// -------------------------------------------------------------------

// TakeLogCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool TakeLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TakeLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TakeLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TakeLogCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command TakeLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TakeLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeLogCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = TAKE_LOG_TRADE_PARAM];
inline bool TakeLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TakeLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TakeLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TakeLogCmd::clear_param() {
  param_ = 27;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam TakeLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeLogCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void TakeLogCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeLogCmd.param)
}

// optional .Cmd.LogItemInfo log = 3;
inline bool TakeLogCmd::has_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TakeLogCmd::set_has_log() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TakeLogCmd::clear_has_log() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TakeLogCmd::clear_log() {
  if (log_ != NULL) log_->::Cmd::LogItemInfo::Clear();
  clear_has_log();
}
inline const ::Cmd::LogItemInfo& TakeLogCmd::log() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeLogCmd.log)
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::Cmd::LogItemInfo* TakeLogCmd::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::Cmd::LogItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.TakeLogCmd.log)
  return log_;
}
inline ::Cmd::LogItemInfo* TakeLogCmd::release_log() {
  clear_has_log();
  ::Cmd::LogItemInfo* temp = log_;
  log_ = NULL;
  return temp;
}
inline void TakeLogCmd::set_allocated_log(::Cmd::LogItemInfo* log) {
  delete log_;
  log_ = log;
  if (log) {
    set_has_log();
  } else {
    clear_has_log();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TakeLogCmd.log)
}

// optional bool success = 4;
inline bool TakeLogCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TakeLogCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TakeLogCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TakeLogCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool TakeLogCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.TakeLogCmd.success)
  return success_;
}
inline void TakeLogCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TakeLogCmd.success)
}

// -------------------------------------------------------------------

// AddNewLog

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool AddNewLog::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddNewLog::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddNewLog::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddNewLog::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command AddNewLog::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddNewLog.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddNewLog::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddNewLog.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = ADD_NEWLOG_TRADE_PARAM];
inline bool AddNewLog::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddNewLog::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddNewLog::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddNewLog::clear_param() {
  param_ = 28;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam AddNewLog::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddNewLog.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void AddNewLog::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddNewLog.param)
}

// optional uint64 charid = 3;
inline bool AddNewLog::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddNewLog::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddNewLog::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddNewLog::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 AddNewLog::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddNewLog.charid)
  return charid_;
}
inline void AddNewLog::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddNewLog.charid)
}

// optional .Cmd.LogItemInfo log = 4;
inline bool AddNewLog::has_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddNewLog::set_has_log() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddNewLog::clear_has_log() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddNewLog::clear_log() {
  if (log_ != NULL) log_->::Cmd::LogItemInfo::Clear();
  clear_has_log();
}
inline const ::Cmd::LogItemInfo& AddNewLog::log() const {
  // @@protoc_insertion_point(field_get:Cmd.AddNewLog.log)
  return log_ != NULL ? *log_ : *default_instance_->log_;
}
inline ::Cmd::LogItemInfo* AddNewLog::mutable_log() {
  set_has_log();
  if (log_ == NULL) log_ = new ::Cmd::LogItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.AddNewLog.log)
  return log_;
}
inline ::Cmd::LogItemInfo* AddNewLog::release_log() {
  clear_has_log();
  ::Cmd::LogItemInfo* temp = log_;
  log_ = NULL;
  return temp;
}
inline void AddNewLog::set_allocated_log(::Cmd::LogItemInfo* log) {
  delete log_;
  log_ = log;
  if (log) {
    set_has_log();
  } else {
    clear_has_log();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.AddNewLog.log)
}

// optional uint32 total_page_count = 5;
inline bool AddNewLog::has_total_page_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddNewLog::set_has_total_page_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddNewLog::clear_has_total_page_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddNewLog::clear_total_page_count() {
  total_page_count_ = 0u;
  clear_has_total_page_count();
}
inline ::google::protobuf::uint32 AddNewLog::total_page_count() const {
  // @@protoc_insertion_point(field_get:Cmd.AddNewLog.total_page_count)
  return total_page_count_;
}
inline void AddNewLog::set_total_page_count(::google::protobuf::uint32 value) {
  set_has_total_page_count();
  total_page_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddNewLog.total_page_count)
}

// -------------------------------------------------------------------

// FetchNameInfoCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool FetchNameInfoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FetchNameInfoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FetchNameInfoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FetchNameInfoCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command FetchNameInfoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FetchNameInfoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = FETCH_NAMEINFO_TRADE_PARAM];
inline bool FetchNameInfoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FetchNameInfoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FetchNameInfoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FetchNameInfoCmd::clear_param() {
  param_ = 29;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam FetchNameInfoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void FetchNameInfoCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.param)
}

// optional uint64 id = 3;
inline bool FetchNameInfoCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FetchNameInfoCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FetchNameInfoCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FetchNameInfoCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 FetchNameInfoCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.id)
  return id_;
}
inline void FetchNameInfoCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.id)
}

// optional .Cmd.EOperType type = 4;
inline bool FetchNameInfoCmd::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FetchNameInfoCmd::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FetchNameInfoCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FetchNameInfoCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOperType FetchNameInfoCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.type)
  return static_cast< ::Cmd::EOperType >(type_);
}
inline void FetchNameInfoCmd::set_type(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.type)
}

// optional uint32 index = 5;
inline bool FetchNameInfoCmd::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FetchNameInfoCmd::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FetchNameInfoCmd::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FetchNameInfoCmd::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 FetchNameInfoCmd::index() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.index)
  return index_;
}
inline void FetchNameInfoCmd::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.index)
}

// optional uint32 total_page_count = 6;
inline bool FetchNameInfoCmd::has_total_page_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FetchNameInfoCmd::set_has_total_page_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FetchNameInfoCmd::clear_has_total_page_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FetchNameInfoCmd::clear_total_page_count() {
  total_page_count_ = 0u;
  clear_has_total_page_count();
}
inline ::google::protobuf::uint32 FetchNameInfoCmd::total_page_count() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.total_page_count)
  return total_page_count_;
}
inline void FetchNameInfoCmd::set_total_page_count(::google::protobuf::uint32 value) {
  set_has_total_page_count();
  total_page_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FetchNameInfoCmd.total_page_count)
}

// optional .Cmd.NameInfoList name_list = 7;
inline bool FetchNameInfoCmd::has_name_list() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FetchNameInfoCmd::set_has_name_list() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FetchNameInfoCmd::clear_has_name_list() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FetchNameInfoCmd::clear_name_list() {
  if (name_list_ != NULL) name_list_->::Cmd::NameInfoList::Clear();
  clear_has_name_list();
}
inline const ::Cmd::NameInfoList& FetchNameInfoCmd::name_list() const {
  // @@protoc_insertion_point(field_get:Cmd.FetchNameInfoCmd.name_list)
  return name_list_ != NULL ? *name_list_ : *default_instance_->name_list_;
}
inline ::Cmd::NameInfoList* FetchNameInfoCmd::mutable_name_list() {
  set_has_name_list();
  if (name_list_ == NULL) name_list_ = new ::Cmd::NameInfoList;
  // @@protoc_insertion_point(field_mutable:Cmd.FetchNameInfoCmd.name_list)
  return name_list_;
}
inline ::Cmd::NameInfoList* FetchNameInfoCmd::release_name_list() {
  clear_has_name_list();
  ::Cmd::NameInfoList* temp = name_list_;
  name_list_ = NULL;
  return temp;
}
inline void FetchNameInfoCmd::set_allocated_name_list(::Cmd::NameInfoList* name_list) {
  delete name_list_;
  name_list_ = name_list;
  if (name_list) {
    set_has_name_list();
  } else {
    clear_has_name_list();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FetchNameInfoCmd.name_list)
}

// -------------------------------------------------------------------

// ReqServerPriceRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool ReqServerPriceRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqServerPriceRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command ReqServerPriceRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqServerPriceRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = REQ_SERVER_PRICE_RECORDTRADE];
inline bool ReqServerPriceRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqServerPriceRecordTradeCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam ReqServerPriceRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void ReqServerPriceRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool ReqServerPriceRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqServerPriceRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ReqServerPriceRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.charid)
  return charid_;
}
inline void ReqServerPriceRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.charid)
}

// optional .Cmd.ItemData itemData = 4;
inline bool ReqServerPriceRecordTradeCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqServerPriceRecordTradeCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& ReqServerPriceRecordTradeCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.itemData)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* ReqServerPriceRecordTradeCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqServerPriceRecordTradeCmd.itemData)
  return itemdata_;
}
inline ::Cmd::ItemData* ReqServerPriceRecordTradeCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void ReqServerPriceRecordTradeCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqServerPriceRecordTradeCmd.itemData)
}

// optional uint32 price = 5;
inline bool ReqServerPriceRecordTradeCmd::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqServerPriceRecordTradeCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 ReqServerPriceRecordTradeCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.price)
  return price_;
}
inline void ReqServerPriceRecordTradeCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.price)
}

// optional bool issell = 6 [default = false];
inline bool ReqServerPriceRecordTradeCmd::has_issell() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_issell() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_issell() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqServerPriceRecordTradeCmd::clear_issell() {
  issell_ = false;
  clear_has_issell();
}
inline bool ReqServerPriceRecordTradeCmd::issell() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.issell)
  return issell_;
}
inline void ReqServerPriceRecordTradeCmd::set_issell(bool value) {
  set_has_issell();
  issell_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.issell)
}

// optional .Cmd.StateType statetype = 7;
inline bool ReqServerPriceRecordTradeCmd::has_statetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_statetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_statetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqServerPriceRecordTradeCmd::clear_statetype() {
  statetype_ = 1;
  clear_has_statetype();
}
inline ::Cmd::StateType ReqServerPriceRecordTradeCmd::statetype() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.statetype)
  return static_cast< ::Cmd::StateType >(statetype_);
}
inline void ReqServerPriceRecordTradeCmd::set_statetype(::Cmd::StateType value) {
  assert(::Cmd::StateType_IsValid(value));
  set_has_statetype();
  statetype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.statetype)
}

// optional uint32 count = 8 [default = 0];
inline bool ReqServerPriceRecordTradeCmd::has_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReqServerPriceRecordTradeCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ReqServerPriceRecordTradeCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.count)
  return count_;
}
inline void ReqServerPriceRecordTradeCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.count)
}

// optional uint32 buyer_count = 9 [default = 0];
inline bool ReqServerPriceRecordTradeCmd::has_buyer_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_buyer_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_buyer_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReqServerPriceRecordTradeCmd::clear_buyer_count() {
  buyer_count_ = 0u;
  clear_has_buyer_count();
}
inline ::google::protobuf::uint32 ReqServerPriceRecordTradeCmd::buyer_count() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.buyer_count)
  return buyer_count_;
}
inline void ReqServerPriceRecordTradeCmd::set_buyer_count(::google::protobuf::uint32 value) {
  set_has_buyer_count();
  buyer_count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.buyer_count)
}

// optional uint32 end_time = 10 [default = 0];
inline bool ReqServerPriceRecordTradeCmd::has_end_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_end_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReqServerPriceRecordTradeCmd::clear_end_time() {
  end_time_ = 0u;
  clear_has_end_time();
}
inline ::google::protobuf::uint32 ReqServerPriceRecordTradeCmd::end_time() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.end_time)
  return end_time_;
}
inline void ReqServerPriceRecordTradeCmd::set_end_time(::google::protobuf::uint32 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.end_time)
}

// optional .Cmd.ETradeType trade_type = 11 [default = ETRADETYPE_TRADE];
inline bool ReqServerPriceRecordTradeCmd::has_trade_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReqServerPriceRecordTradeCmd::set_has_trade_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReqServerPriceRecordTradeCmd::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReqServerPriceRecordTradeCmd::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType ReqServerPriceRecordTradeCmd::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqServerPriceRecordTradeCmd.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void ReqServerPriceRecordTradeCmd::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqServerPriceRecordTradeCmd.trade_type)
}

// -------------------------------------------------------------------

// BuyItemRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool BuyItemRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BuyItemRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BuyItemRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command BuyItemRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BuyItemRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyItemRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = BUY_ITEM_RECORDTRADE];
inline bool BuyItemRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BuyItemRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BuyItemRecordTradeCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam BuyItemRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void BuyItemRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyItemRecordTradeCmd.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool BuyItemRecordTradeCmd::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BuyItemRecordTradeCmd::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BuyItemRecordTradeCmd::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& BuyItemRecordTradeCmd::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* BuyItemRecordTradeCmd::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BuyItemRecordTradeCmd.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* BuyItemRecordTradeCmd::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void BuyItemRecordTradeCmd::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BuyItemRecordTradeCmd.item_info)
}

// optional uint64 charid = 4;
inline bool BuyItemRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BuyItemRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BuyItemRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BuyItemRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.charid)
  return charid_;
}
inline void BuyItemRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyItemRecordTradeCmd.charid)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool BuyItemRecordTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BuyItemRecordTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BuyItemRecordTradeCmd::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE BuyItemRecordTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void BuyItemRecordTradeCmd::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyItemRecordTradeCmd.ret)
}

// optional .Cmd.ETradeType type = 6 [default = ETRADETYPE_TRADE];
inline bool BuyItemRecordTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BuyItemRecordTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BuyItemRecordTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BuyItemRecordTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType BuyItemRecordTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.BuyItemRecordTradeCmd.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void BuyItemRecordTradeCmd::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BuyItemRecordTradeCmd.type)
}

// -------------------------------------------------------------------

// SellItemRecordTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool SellItemRecordTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SellItemRecordTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SellItemRecordTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command SellItemRecordTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void SellItemRecordTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItemRecordTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = SELL_ITEM_RECORDTRADE];
inline bool SellItemRecordTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SellItemRecordTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SellItemRecordTradeCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam SellItemRecordTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void SellItemRecordTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItemRecordTradeCmd.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool SellItemRecordTradeCmd::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SellItemRecordTradeCmd::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SellItemRecordTradeCmd::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& SellItemRecordTradeCmd::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* SellItemRecordTradeCmd::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.SellItemRecordTradeCmd.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* SellItemRecordTradeCmd::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void SellItemRecordTradeCmd::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.SellItemRecordTradeCmd.item_info)
}

// optional uint64 charid = 4;
inline bool SellItemRecordTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SellItemRecordTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SellItemRecordTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 SellItemRecordTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.charid)
  return charid_;
}
inline void SellItemRecordTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItemRecordTradeCmd.charid)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool SellItemRecordTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SellItemRecordTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SellItemRecordTradeCmd::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE SellItemRecordTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void SellItemRecordTradeCmd::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItemRecordTradeCmd.ret)
}

// optional .Cmd.ETradeType type = 6 [default = ETRADETYPE_TRADE];
inline bool SellItemRecordTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SellItemRecordTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SellItemRecordTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SellItemRecordTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType SellItemRecordTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.SellItemRecordTradeCmd.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void SellItemRecordTradeCmd::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.SellItemRecordTradeCmd.type)
}

// -------------------------------------------------------------------

// CancelItemRecordTrade

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool CancelItemRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelItemRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelItemRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelItemRecordTrade::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command CancelItemRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CancelItemRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = CANCEL_PENDING_RECORDTRADE];
inline bool CancelItemRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CancelItemRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CancelItemRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CancelItemRecordTrade::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam CancelItemRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void CancelItemRecordTrade::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool CancelItemRecordTrade::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CancelItemRecordTrade::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CancelItemRecordTrade::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CancelItemRecordTrade::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& CancelItemRecordTrade::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* CancelItemRecordTrade::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.CancelItemRecordTrade.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* CancelItemRecordTrade::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void CancelItemRecordTrade::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.CancelItemRecordTrade.item_info)
}

// optional uint64 charid = 4;
inline bool CancelItemRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CancelItemRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CancelItemRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CancelItemRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 CancelItemRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.charid)
  return charid_;
}
inline void CancelItemRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.charid)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool CancelItemRecordTrade::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CancelItemRecordTrade::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CancelItemRecordTrade::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CancelItemRecordTrade::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE CancelItemRecordTrade::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void CancelItemRecordTrade::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.ret)
}

// optional uint64 order_id = 6;
inline bool CancelItemRecordTrade::has_order_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CancelItemRecordTrade::set_has_order_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CancelItemRecordTrade::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CancelItemRecordTrade::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 CancelItemRecordTrade::order_id() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.order_id)
  return order_id_;
}
inline void CancelItemRecordTrade::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.order_id)
}

// optional .Cmd.ETradeType type = 7 [default = ETRADETYPE_TRADE];
inline bool CancelItemRecordTrade::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CancelItemRecordTrade::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CancelItemRecordTrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CancelItemRecordTrade::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType CancelItemRecordTrade::type() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void CancelItemRecordTrade::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.type)
}

// optional uint64 quota = 8;
inline bool CancelItemRecordTrade::has_quota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CancelItemRecordTrade::set_has_quota() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CancelItemRecordTrade::clear_has_quota() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CancelItemRecordTrade::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 CancelItemRecordTrade::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.CancelItemRecordTrade.quota)
  return quota_;
}
inline void CancelItemRecordTrade::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CancelItemRecordTrade.quota)
}

// -------------------------------------------------------------------

// ResellPendingRecordTrade

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool ResellPendingRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResellPendingRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResellPendingRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResellPendingRecordTrade::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command ResellPendingRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ResellPendingRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = RESELL_PENDING_RECORDTRADE];
inline bool ResellPendingRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResellPendingRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResellPendingRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResellPendingRecordTrade::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam ResellPendingRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void ResellPendingRecordTrade::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.param)
}

// optional .Cmd.TradeItemBaseInfo item_info = 3;
inline bool ResellPendingRecordTrade::has_item_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResellPendingRecordTrade::set_has_item_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResellPendingRecordTrade::clear_has_item_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResellPendingRecordTrade::clear_item_info() {
  if (item_info_ != NULL) item_info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_item_info();
}
inline const ::Cmd::TradeItemBaseInfo& ResellPendingRecordTrade::item_info() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.item_info)
  return item_info_ != NULL ? *item_info_ : *default_instance_->item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ResellPendingRecordTrade::mutable_item_info() {
  set_has_item_info();
  if (item_info_ == NULL) item_info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ResellPendingRecordTrade.item_info)
  return item_info_;
}
inline ::Cmd::TradeItemBaseInfo* ResellPendingRecordTrade::release_item_info() {
  clear_has_item_info();
  ::Cmd::TradeItemBaseInfo* temp = item_info_;
  item_info_ = NULL;
  return temp;
}
inline void ResellPendingRecordTrade::set_allocated_item_info(::Cmd::TradeItemBaseInfo* item_info) {
  delete item_info_;
  item_info_ = item_info;
  if (item_info) {
    set_has_item_info();
  } else {
    clear_has_item_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ResellPendingRecordTrade.item_info)
}

// optional uint64 charid = 4;
inline bool ResellPendingRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ResellPendingRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ResellPendingRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ResellPendingRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ResellPendingRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.charid)
  return charid_;
}
inline void ResellPendingRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.charid)
}

// optional .Cmd.ETRADE_RET_CODE ret = 5;
inline bool ResellPendingRecordTrade::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ResellPendingRecordTrade::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ResellPendingRecordTrade::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ResellPendingRecordTrade::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::Cmd::ETRADE_RET_CODE ResellPendingRecordTrade::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.ret)
  return static_cast< ::Cmd::ETRADE_RET_CODE >(ret_);
}
inline void ResellPendingRecordTrade::set_ret(::Cmd::ETRADE_RET_CODE value) {
  assert(::Cmd::ETRADE_RET_CODE_IsValid(value));
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.ret)
}

// optional uint64 order_id = 6;
inline bool ResellPendingRecordTrade::has_order_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ResellPendingRecordTrade::set_has_order_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ResellPendingRecordTrade::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ResellPendingRecordTrade::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 ResellPendingRecordTrade::order_id() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.order_id)
  return order_id_;
}
inline void ResellPendingRecordTrade::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.order_id)
}

// optional .Cmd.ETradeType type = 7 [default = ETRADETYPE_TRADE];
inline bool ResellPendingRecordTrade::has_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ResellPendingRecordTrade::set_has_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ResellPendingRecordTrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ResellPendingRecordTrade::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType ResellPendingRecordTrade::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void ResellPendingRecordTrade::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.type)
}

// optional uint64 quota = 8;
inline bool ResellPendingRecordTrade::has_quota() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ResellPendingRecordTrade::set_has_quota() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ResellPendingRecordTrade::clear_has_quota() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ResellPendingRecordTrade::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 ResellPendingRecordTrade::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.ResellPendingRecordTrade.quota)
  return quota_;
}
inline void ResellPendingRecordTrade::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ResellPendingRecordTrade.quota)
}

// -------------------------------------------------------------------

// PanelRecordTrade

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool PanelRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PanelRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PanelRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PanelRecordTrade::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command PanelRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PanelRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PanelRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PanelRecordTrade.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = PANEL_RECORDTRADE];
inline bool PanelRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PanelRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PanelRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PanelRecordTrade::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam PanelRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PanelRecordTrade.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void PanelRecordTrade::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PanelRecordTrade.param)
}

// optional uint64 charid = 3;
inline bool PanelRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PanelRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PanelRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PanelRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PanelRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.PanelRecordTrade.charid)
  return charid_;
}
inline void PanelRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PanelRecordTrade.charid)
}

// optional .Cmd.EPanelOperType oper = 4;
inline bool PanelRecordTrade::has_oper() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PanelRecordTrade::set_has_oper() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PanelRecordTrade::clear_has_oper() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PanelRecordTrade::clear_oper() {
  oper_ = 1;
  clear_has_oper();
}
inline ::Cmd::EPanelOperType PanelRecordTrade::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.PanelRecordTrade.oper)
  return static_cast< ::Cmd::EPanelOperType >(oper_);
}
inline void PanelRecordTrade::set_oper(::Cmd::EPanelOperType value) {
  assert(::Cmd::EPanelOperType_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PanelRecordTrade.oper)
}

// optional .Cmd.ETradeType trade_type = 5 [default = ETRADETYPE_TRADE];
inline bool PanelRecordTrade::has_trade_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PanelRecordTrade::set_has_trade_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PanelRecordTrade::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PanelRecordTrade::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType PanelRecordTrade::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.PanelRecordTrade.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void PanelRecordTrade::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PanelRecordTrade.trade_type)
}

// -------------------------------------------------------------------

// ListNtfRecordTrade

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool ListNtfRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListNtfRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListNtfRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListNtfRecordTrade::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command ListNtfRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ListNtfRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ListNtfRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ListNtfRecordTrade.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = LIST_NTF_RECORDTRADE];
inline bool ListNtfRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListNtfRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListNtfRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListNtfRecordTrade::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam ListNtfRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ListNtfRecordTrade.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void ListNtfRecordTrade::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ListNtfRecordTrade.param)
}

// optional uint64 charid = 3;
inline bool ListNtfRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListNtfRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListNtfRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListNtfRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 ListNtfRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.ListNtfRecordTrade.charid)
  return charid_;
}
inline void ListNtfRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ListNtfRecordTrade.charid)
}

// optional .Cmd.EListNtfType type = 4;
inline bool ListNtfRecordTrade::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListNtfRecordTrade::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListNtfRecordTrade::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListNtfRecordTrade::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::EListNtfType ListNtfRecordTrade::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ListNtfRecordTrade.type)
  return static_cast< ::Cmd::EListNtfType >(type_);
}
inline void ListNtfRecordTrade::set_type(::Cmd::EListNtfType value) {
  assert(::Cmd::EListNtfType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ListNtfRecordTrade.type)
}

// optional .Cmd.ETradeType trade_type = 5 [default = ETRADETYPE_TRADE];
inline bool ListNtfRecordTrade::has_trade_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ListNtfRecordTrade::set_has_trade_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ListNtfRecordTrade::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ListNtfRecordTrade::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType ListNtfRecordTrade::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.ListNtfRecordTrade.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void ListNtfRecordTrade::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ListNtfRecordTrade.trade_type)
}

// -------------------------------------------------------------------

// HotItemidRecordTrade

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool HotItemidRecordTrade::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HotItemidRecordTrade::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HotItemidRecordTrade::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HotItemidRecordTrade::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command HotItemidRecordTrade::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void HotItemidRecordTrade::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = HOT_ITEMID_RECORDTRADE];
inline bool HotItemidRecordTrade::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HotItemidRecordTrade::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HotItemidRecordTrade::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HotItemidRecordTrade::clear_param() {
  param_ = 26;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam HotItemidRecordTrade::param() const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void HotItemidRecordTrade::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.param)
}

// optional uint64 charid = 3;
inline bool HotItemidRecordTrade::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HotItemidRecordTrade::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HotItemidRecordTrade::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HotItemidRecordTrade::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 HotItemidRecordTrade::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.charid)
  return charid_;
}
inline void HotItemidRecordTrade::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.charid)
}

// optional uint32 job = 4;
inline bool HotItemidRecordTrade::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HotItemidRecordTrade::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HotItemidRecordTrade::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HotItemidRecordTrade::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 HotItemidRecordTrade::job() const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.job)
  return job_;
}
inline void HotItemidRecordTrade::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.job)
}

// repeated uint32 pub_lists = 5;
inline int HotItemidRecordTrade::pub_lists_size() const {
  return pub_lists_.size();
}
inline void HotItemidRecordTrade::clear_pub_lists() {
  pub_lists_.Clear();
}
inline ::google::protobuf::uint32 HotItemidRecordTrade::pub_lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.pub_lists)
  return pub_lists_.Get(index);
}
inline void HotItemidRecordTrade::set_pub_lists(int index, ::google::protobuf::uint32 value) {
  pub_lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.pub_lists)
}
inline void HotItemidRecordTrade::add_pub_lists(::google::protobuf::uint32 value) {
  pub_lists_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.HotItemidRecordTrade.pub_lists)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HotItemidRecordTrade::pub_lists() const {
  // @@protoc_insertion_point(field_list:Cmd.HotItemidRecordTrade.pub_lists)
  return pub_lists_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HotItemidRecordTrade::mutable_pub_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.HotItemidRecordTrade.pub_lists)
  return &pub_lists_;
}

// repeated uint32 lists = 6;
inline int HotItemidRecordTrade::lists_size() const {
  return lists_.size();
}
inline void HotItemidRecordTrade::clear_lists() {
  lists_.Clear();
}
inline ::google::protobuf::uint32 HotItemidRecordTrade::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.HotItemidRecordTrade.lists)
  return lists_.Get(index);
}
inline void HotItemidRecordTrade::set_lists(int index, ::google::protobuf::uint32 value) {
  lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.HotItemidRecordTrade.lists)
}
inline void HotItemidRecordTrade::add_lists(::google::protobuf::uint32 value) {
  lists_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.HotItemidRecordTrade.lists)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
HotItemidRecordTrade::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.HotItemidRecordTrade.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
HotItemidRecordTrade::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.HotItemidRecordTrade.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// NtfCanTakeCountTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool NtfCanTakeCountTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfCanTakeCountTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfCanTakeCountTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfCanTakeCountTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command NtfCanTakeCountTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCountTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfCanTakeCountTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCountTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = NTF_CAN_TAKE_COUNT_TRADE_PARAM];
inline bool NtfCanTakeCountTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfCanTakeCountTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfCanTakeCountTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfCanTakeCountTradeCmd::clear_param() {
  param_ = 30;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam NtfCanTakeCountTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCountTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void NtfCanTakeCountTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCountTradeCmd.param)
}

// optional uint32 count = 3;
inline bool NtfCanTakeCountTradeCmd::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfCanTakeCountTradeCmd::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfCanTakeCountTradeCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfCanTakeCountTradeCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 NtfCanTakeCountTradeCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCountTradeCmd.count)
  return count_;
}
inline void NtfCanTakeCountTradeCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCountTradeCmd.count)
}

// optional .Cmd.ETradeType trade_type = 4 [default = ETRADETYPE_TRADE];
inline bool NtfCanTakeCountTradeCmd::has_trade_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfCanTakeCountTradeCmd::set_has_trade_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfCanTakeCountTradeCmd::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfCanTakeCountTradeCmd::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType NtfCanTakeCountTradeCmd::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfCanTakeCountTradeCmd.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void NtfCanTakeCountTradeCmd::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfCanTakeCountTradeCmd.trade_type)
}

// -------------------------------------------------------------------

// GiveTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool GiveTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command GiveTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GiveTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = GIVE_TRADE_PARAM];
inline bool GiveTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveTradeCmd::clear_param() {
  param_ = 31;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam GiveTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void GiveTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.param)
}

// optional uint64 id = 3;
inline bool GiveTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GiveTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.id)
  return id_;
}
inline void GiveTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.id)
}

// optional .Cmd.EOperType logtype = 4;
inline bool GiveTradeCmd::has_logtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiveTradeCmd::set_has_logtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiveTradeCmd::clear_has_logtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiveTradeCmd::clear_logtype() {
  logtype_ = 0;
  clear_has_logtype();
}
inline ::Cmd::EOperType GiveTradeCmd::logtype() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.logtype)
  return static_cast< ::Cmd::EOperType >(logtype_);
}
inline void GiveTradeCmd::set_logtype(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_logtype();
  logtype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.logtype)
}

// optional uint64 friendid = 5;
inline bool GiveTradeCmd::has_friendid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GiveTradeCmd::set_has_friendid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GiveTradeCmd::clear_has_friendid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GiveTradeCmd::clear_friendid() {
  friendid_ = GOOGLE_ULONGLONG(0);
  clear_has_friendid();
}
inline ::google::protobuf::uint64 GiveTradeCmd::friendid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.friendid)
  return friendid_;
}
inline void GiveTradeCmd::set_friendid(::google::protobuf::uint64 value) {
  set_has_friendid();
  friendid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.friendid)
}

// optional string content = 6;
inline bool GiveTradeCmd::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GiveTradeCmd::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GiveTradeCmd::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GiveTradeCmd::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GiveTradeCmd::content() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.content)
  return *content_;
}
inline void GiveTradeCmd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.content)
}
inline void GiveTradeCmd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveTradeCmd.content)
}
inline void GiveTradeCmd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveTradeCmd.content)
}
inline ::std::string* GiveTradeCmd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveTradeCmd.content)
  return content_;
}
inline ::std::string* GiveTradeCmd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveTradeCmd::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveTradeCmd.content)
}

// optional bool anonymous = 7;
inline bool GiveTradeCmd::has_anonymous() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GiveTradeCmd::set_has_anonymous() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GiveTradeCmd::clear_has_anonymous() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GiveTradeCmd::clear_anonymous() {
  anonymous_ = false;
  clear_has_anonymous();
}
inline bool GiveTradeCmd::anonymous() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.anonymous)
  return anonymous_;
}
inline void GiveTradeCmd::set_anonymous(bool value) {
  set_has_anonymous();
  anonymous_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.anonymous)
}

// optional uint32 background = 8;
inline bool GiveTradeCmd::has_background() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GiveTradeCmd::set_has_background() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GiveTradeCmd::clear_has_background() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GiveTradeCmd::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 GiveTradeCmd::background() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.background)
  return background_;
}
inline void GiveTradeCmd::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.background)
}

// optional bool success = 9;
inline bool GiveTradeCmd::has_success() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GiveTradeCmd::set_has_success() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GiveTradeCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GiveTradeCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool GiveTradeCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveTradeCmd.success)
  return success_;
}
inline void GiveTradeCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveTradeCmd.success)
}

// -------------------------------------------------------------------

// AcceptTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool AcceptTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command AcceptTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AcceptTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AcceptTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AcceptTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = ACCEPT_TRADE_PARAM];
inline bool AcceptTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptTradeCmd::clear_param() {
  param_ = 33;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam AcceptTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AcceptTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void AcceptTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AcceptTradeCmd.param)
}

// optional uint64 id = 3;
inline bool AcceptTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AcceptTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AcceptTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AcceptTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 AcceptTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.AcceptTradeCmd.id)
  return id_;
}
inline void AcceptTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AcceptTradeCmd.id)
}

// optional bool success = 4;
inline bool AcceptTradeCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AcceptTradeCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AcceptTradeCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AcceptTradeCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool AcceptTradeCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.AcceptTradeCmd.success)
  return success_;
}
inline void AcceptTradeCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AcceptTradeCmd.success)
}

// -------------------------------------------------------------------

// RefuseTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool RefuseTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RefuseTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RefuseTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RefuseTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command RefuseTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RefuseTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RefuseTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefuseTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = REFUSE_TRADE_PARAM];
inline bool RefuseTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefuseTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefuseTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefuseTradeCmd::clear_param() {
  param_ = 34;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam RefuseTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RefuseTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void RefuseTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefuseTradeCmd.param)
}

// optional uint64 id = 3;
inline bool RefuseTradeCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RefuseTradeCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RefuseTradeCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RefuseTradeCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 RefuseTradeCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.RefuseTradeCmd.id)
  return id_;
}
inline void RefuseTradeCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefuseTradeCmd.id)
}

// optional bool success = 4;
inline bool RefuseTradeCmd::has_success() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RefuseTradeCmd::set_has_success() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RefuseTradeCmd::clear_has_success() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RefuseTradeCmd::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool RefuseTradeCmd::success() const {
  // @@protoc_insertion_point(field_get:Cmd.RefuseTradeCmd.success)
  return success_;
}
inline void RefuseTradeCmd::set_success(bool value) {
  set_has_success();
  success_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RefuseTradeCmd.success)
}

// -------------------------------------------------------------------

// GiveItemInfo

// optional uint64 id = 1;
inline bool GiveItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveItemInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GiveItemInfo::id() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.id)
  return id_;
}
inline void GiveItemInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.id)
}

// optional .Cmd.ETakeStatus status = 2;
inline bool GiveItemInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveItemInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveItemInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveItemInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ETakeStatus GiveItemInfo::status() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.status)
  return static_cast< ::Cmd::ETakeStatus >(status_);
}
inline void GiveItemInfo::set_status(::Cmd::ETakeStatus value) {
  assert(::Cmd::ETakeStatus_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.status)
}

// optional uint32 itemid = 3;
inline bool GiveItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GiveItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GiveItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GiveItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 GiveItemInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.itemid)
  return itemid_;
}
inline void GiveItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.itemid)
}

// optional uint32 count = 4;
inline bool GiveItemInfo::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GiveItemInfo::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GiveItemInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GiveItemInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 GiveItemInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.count)
  return count_;
}
inline void GiveItemInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.count)
}

// optional .Cmd.ItemData itemdata = 5;
inline bool GiveItemInfo::has_itemdata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GiveItemInfo::set_has_itemdata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GiveItemInfo::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GiveItemInfo::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& GiveItemInfo::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* GiveItemInfo::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.GiveItemInfo.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* GiveItemInfo::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void GiveItemInfo::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveItemInfo.itemdata)
}

// optional uint64 senderid = 6;
inline bool GiveItemInfo::has_senderid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GiveItemInfo::set_has_senderid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GiveItemInfo::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GiveItemInfo::clear_senderid() {
  senderid_ = GOOGLE_ULONGLONG(0);
  clear_has_senderid();
}
inline ::google::protobuf::uint64 GiveItemInfo::senderid() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.senderid)
  return senderid_;
}
inline void GiveItemInfo::set_senderid(::google::protobuf::uint64 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.senderid)
}

// optional string sendername = 7;
inline bool GiveItemInfo::has_sendername() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GiveItemInfo::set_has_sendername() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GiveItemInfo::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GiveItemInfo::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& GiveItemInfo::sendername() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.sendername)
  return *sendername_;
}
inline void GiveItemInfo::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.sendername)
}
inline void GiveItemInfo::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveItemInfo.sendername)
}
inline void GiveItemInfo::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveItemInfo.sendername)
}
inline ::std::string* GiveItemInfo::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveItemInfo.sendername)
  return sendername_;
}
inline ::std::string* GiveItemInfo::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveItemInfo::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveItemInfo.sendername)
}

// optional bool anonymous = 8;
inline bool GiveItemInfo::has_anonymous() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GiveItemInfo::set_has_anonymous() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GiveItemInfo::clear_has_anonymous() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GiveItemInfo::clear_anonymous() {
  anonymous_ = false;
  clear_has_anonymous();
}
inline bool GiveItemInfo::anonymous() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.anonymous)
  return anonymous_;
}
inline void GiveItemInfo::set_anonymous(bool value) {
  set_has_anonymous();
  anonymous_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.anonymous)
}

// optional uint32 expiretime = 9;
inline bool GiveItemInfo::has_expiretime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GiveItemInfo::set_has_expiretime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GiveItemInfo::clear_has_expiretime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GiveItemInfo::clear_expiretime() {
  expiretime_ = 0u;
  clear_has_expiretime();
}
inline ::google::protobuf::uint32 GiveItemInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.expiretime)
  return expiretime_;
}
inline void GiveItemInfo::set_expiretime(::google::protobuf::uint32 value) {
  set_has_expiretime();
  expiretime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.expiretime)
}

// optional string content = 10;
inline bool GiveItemInfo::has_content() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GiveItemInfo::set_has_content() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GiveItemInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GiveItemInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GiveItemInfo::content() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.content)
  return *content_;
}
inline void GiveItemInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.content)
}
inline void GiveItemInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveItemInfo.content)
}
inline void GiveItemInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveItemInfo.content)
}
inline ::std::string* GiveItemInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveItemInfo.content)
  return content_;
}
inline ::std::string* GiveItemInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveItemInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveItemInfo.content)
}

// optional uint64 quota = 11;
inline bool GiveItemInfo::has_quota() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GiveItemInfo::set_has_quota() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GiveItemInfo::clear_has_quota() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GiveItemInfo::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 GiveItemInfo::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.quota)
  return quota_;
}
inline void GiveItemInfo::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.quota)
}

// optional string receivername = 12;
inline bool GiveItemInfo::has_receivername() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GiveItemInfo::set_has_receivername() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GiveItemInfo::clear_has_receivername() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GiveItemInfo::clear_receivername() {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_->clear();
  }
  clear_has_receivername();
}
inline const ::std::string& GiveItemInfo::receivername() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.receivername)
  return *receivername_;
}
inline void GiveItemInfo::set_receivername(const ::std::string& value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.receivername)
}
inline void GiveItemInfo::set_receivername(const char* value) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.GiveItemInfo.receivername)
}
inline void GiveItemInfo::set_receivername(const char* value, size_t size) {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  receivername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.GiveItemInfo.receivername)
}
inline ::std::string* GiveItemInfo::mutable_receivername() {
  set_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    receivername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.GiveItemInfo.receivername)
  return receivername_;
}
inline ::std::string* GiveItemInfo::release_receivername() {
  clear_has_receivername();
  if (receivername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = receivername_;
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GiveItemInfo::set_allocated_receivername(::std::string* receivername) {
  if (receivername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete receivername_;
  }
  if (receivername) {
    set_has_receivername();
    receivername_ = receivername;
  } else {
    clear_has_receivername();
    receivername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.GiveItemInfo.receivername)
}

// optional uint32 background = 13;
inline bool GiveItemInfo::has_background() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GiveItemInfo::set_has_background() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GiveItemInfo::clear_has_background() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GiveItemInfo::clear_background() {
  background_ = 0u;
  clear_has_background();
}
inline ::google::protobuf::uint32 GiveItemInfo::background() const {
  // @@protoc_insertion_point(field_get:Cmd.GiveItemInfo.background)
  return background_;
}
inline void GiveItemInfo::set_background(::google::protobuf::uint32 value) {
  set_has_background();
  background_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GiveItemInfo.background)
}

// -------------------------------------------------------------------

// ReqGiveItemInfoCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool ReqGiveItemInfoCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGiveItemInfoCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGiveItemInfoCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGiveItemInfoCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command ReqGiveItemInfoCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqGiveItemInfoCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqGiveItemInfoCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqGiveItemInfoCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = REQ_GIVE_ITEM_INFO_TRADE_PARAM];
inline bool ReqGiveItemInfoCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGiveItemInfoCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGiveItemInfoCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGiveItemInfoCmd::clear_param() {
  param_ = 32;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam ReqGiveItemInfoCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqGiveItemInfoCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void ReqGiveItemInfoCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqGiveItemInfoCmd.param)
}

// optional uint64 id = 3;
inline bool ReqGiveItemInfoCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqGiveItemInfoCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqGiveItemInfoCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqGiveItemInfoCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ReqGiveItemInfoCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqGiveItemInfoCmd.id)
  return id_;
}
inline void ReqGiveItemInfoCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqGiveItemInfoCmd.id)
}

// optional .Cmd.GiveItemInfo iteminfo = 4;
inline bool ReqGiveItemInfoCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqGiveItemInfoCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqGiveItemInfoCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqGiveItemInfoCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::GiveItemInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::GiveItemInfo& ReqGiveItemInfoCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqGiveItemInfoCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::GiveItemInfo* ReqGiveItemInfoCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::GiveItemInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqGiveItemInfoCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::GiveItemInfo* ReqGiveItemInfoCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::GiveItemInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void ReqGiveItemInfoCmd::set_allocated_iteminfo(::Cmd::GiveItemInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqGiveItemInfoCmd.iteminfo)
}

// -------------------------------------------------------------------

// CheckPackageSizeTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool CheckPackageSizeTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CheckPackageSizeTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CheckPackageSizeTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CheckPackageSizeTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command CheckPackageSizeTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckPackageSizeTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void CheckPackageSizeTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckPackageSizeTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = CHECK_PACKAGE_SIZE_TRADE_CMD];
inline bool CheckPackageSizeTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CheckPackageSizeTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CheckPackageSizeTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CheckPackageSizeTradeCmd::clear_param() {
  param_ = 35;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam CheckPackageSizeTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckPackageSizeTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void CheckPackageSizeTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckPackageSizeTradeCmd.param)
}

// repeated .Cmd.ItemInfo items = 3;
inline int CheckPackageSizeTradeCmd::items_size() const {
  return items_.size();
}
inline void CheckPackageSizeTradeCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& CheckPackageSizeTradeCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.CheckPackageSizeTradeCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* CheckPackageSizeTradeCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.CheckPackageSizeTradeCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* CheckPackageSizeTradeCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.CheckPackageSizeTradeCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
CheckPackageSizeTradeCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.CheckPackageSizeTradeCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
CheckPackageSizeTradeCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.CheckPackageSizeTradeCmd.items)
  return &items_;
}

// optional bool ret = 4;
inline bool CheckPackageSizeTradeCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CheckPackageSizeTradeCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CheckPackageSizeTradeCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CheckPackageSizeTradeCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool CheckPackageSizeTradeCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.CheckPackageSizeTradeCmd.ret)
  return ret_;
}
inline void CheckPackageSizeTradeCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.CheckPackageSizeTradeCmd.ret)
}

// -------------------------------------------------------------------

// QucikTakeLogTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool QucikTakeLogTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QucikTakeLogTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QucikTakeLogTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QucikTakeLogTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command QucikTakeLogTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QucikTakeLogTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QucikTakeLogTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QucikTakeLogTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = QUICK_TAKE_LOG_TRADE_PARAM];
inline bool QucikTakeLogTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QucikTakeLogTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QucikTakeLogTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QucikTakeLogTradeCmd::clear_param() {
  param_ = 36;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam QucikTakeLogTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QucikTakeLogTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void QucikTakeLogTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QucikTakeLogTradeCmd.param)
}

// optional .Cmd.ETradeType trade_type = 3 [default = ETRADETYPE_TRADE];
inline bool QucikTakeLogTradeCmd::has_trade_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QucikTakeLogTradeCmd::set_has_trade_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QucikTakeLogTradeCmd::clear_has_trade_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QucikTakeLogTradeCmd::clear_trade_type() {
  trade_type_ = 1;
  clear_has_trade_type();
}
inline ::Cmd::ETradeType QucikTakeLogTradeCmd::trade_type() const {
  // @@protoc_insertion_point(field_get:Cmd.QucikTakeLogTradeCmd.trade_type)
  return static_cast< ::Cmd::ETradeType >(trade_type_);
}
inline void QucikTakeLogTradeCmd::set_trade_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_trade_type();
  trade_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QucikTakeLogTradeCmd.trade_type)
}

// -------------------------------------------------------------------

// ItemCount

// optional uint32 itemid = 1;
inline bool ItemCount::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemCount::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemCount::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemCount::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 ItemCount::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemCount.itemid)
  return itemid_;
}
inline void ItemCount::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemCount.itemid)
}

// optional uint32 count = 2;
inline bool ItemCount::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemCount::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 ItemCount::count() const {
  // @@protoc_insertion_point(field_get:Cmd.ItemCount.count)
  return count_;
}
inline void ItemCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ItemCount.count)
}

// -------------------------------------------------------------------

// QueryItemCountTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool QueryItemCountTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryItemCountTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryItemCountTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryItemCountTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command QueryItemCountTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemCountTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryItemCountTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryItemCountTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_ITEM_COUNT_TRADE_PARAM];
inline bool QueryItemCountTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryItemCountTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryItemCountTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryItemCountTradeCmd::clear_param() {
  param_ = 37;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam QueryItemCountTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemCountTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void QueryItemCountTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryItemCountTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool QueryItemCountTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryItemCountTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryItemCountTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryItemCountTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryItemCountTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemCountTradeCmd.charid)
  return charid_;
}
inline void QueryItemCountTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryItemCountTradeCmd.charid)
}

// repeated .Cmd.ItemCount items = 4;
inline int QueryItemCountTradeCmd::items_size() const {
  return items_.size();
}
inline void QueryItemCountTradeCmd::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemCount& QueryItemCountTradeCmd::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemCountTradeCmd.items)
  return items_.Get(index);
}
inline ::Cmd::ItemCount* QueryItemCountTradeCmd::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryItemCountTradeCmd.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemCount* QueryItemCountTradeCmd::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryItemCountTradeCmd.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemCount >&
QueryItemCountTradeCmd::items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryItemCountTradeCmd.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemCount >*
QueryItemCountTradeCmd::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryItemCountTradeCmd.items)
  return &items_;
}

// repeated .Cmd.TradeItemBaseInfo res_items = 5;
inline int QueryItemCountTradeCmd::res_items_size() const {
  return res_items_.size();
}
inline void QueryItemCountTradeCmd::clear_res_items() {
  res_items_.Clear();
}
inline const ::Cmd::TradeItemBaseInfo& QueryItemCountTradeCmd::res_items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemCountTradeCmd.res_items)
  return res_items_.Get(index);
}
inline ::Cmd::TradeItemBaseInfo* QueryItemCountTradeCmd::mutable_res_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryItemCountTradeCmd.res_items)
  return res_items_.Mutable(index);
}
inline ::Cmd::TradeItemBaseInfo* QueryItemCountTradeCmd::add_res_items() {
  // @@protoc_insertion_point(field_add:Cmd.QueryItemCountTradeCmd.res_items)
  return res_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
QueryItemCountTradeCmd::res_items() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryItemCountTradeCmd.res_items)
  return res_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
QueryItemCountTradeCmd::mutable_res_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryItemCountTradeCmd.res_items)
  return &res_items_;
}

// -------------------------------------------------------------------

// LotteryGiveInfo

// optional uint32 year = 1;
inline bool LotteryGiveInfo::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryGiveInfo::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryGiveInfo::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryGiveInfo::clear_year() {
  year_ = 0u;
  clear_has_year();
}
inline ::google::protobuf::uint32 LotteryGiveInfo::year() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.year)
  return year_;
}
inline void LotteryGiveInfo::set_year(::google::protobuf::uint32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.year)
}

// optional uint32 month = 2;
inline bool LotteryGiveInfo::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryGiveInfo::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryGiveInfo::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryGiveInfo::clear_month() {
  month_ = 0u;
  clear_has_month();
}
inline ::google::protobuf::uint32 LotteryGiveInfo::month() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.month)
  return month_;
}
inline void LotteryGiveInfo::set_month(::google::protobuf::uint32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.month)
}

// optional uint32 count = 3;
inline bool LotteryGiveInfo::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryGiveInfo::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryGiveInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryGiveInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LotteryGiveInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.count)
  return count_;
}
inline void LotteryGiveInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.count)
}

// optional string content = 4;
inline bool LotteryGiveInfo::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LotteryGiveInfo::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LotteryGiveInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LotteryGiveInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& LotteryGiveInfo::content() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.content)
  return *content_;
}
inline void LotteryGiveInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.content)
}
inline void LotteryGiveInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LotteryGiveInfo.content)
}
inline void LotteryGiveInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LotteryGiveInfo.content)
}
inline ::std::string* LotteryGiveInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryGiveInfo.content)
  return content_;
}
inline ::std::string* LotteryGiveInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LotteryGiveInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotteryGiveInfo.content)
}

// optional uint32 configid = 5;
inline bool LotteryGiveInfo::has_configid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LotteryGiveInfo::set_has_configid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LotteryGiveInfo::clear_has_configid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LotteryGiveInfo::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 LotteryGiveInfo::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.configid)
  return configid_;
}
inline void LotteryGiveInfo::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.configid)
}

// optional uint64 receiverid = 6;
inline bool LotteryGiveInfo::has_receiverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LotteryGiveInfo::set_has_receiverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LotteryGiveInfo::clear_has_receiverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LotteryGiveInfo::clear_receiverid() {
  receiverid_ = GOOGLE_ULONGLONG(0);
  clear_has_receiverid();
}
inline ::google::protobuf::uint64 LotteryGiveInfo::receiverid() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveInfo.receiverid)
  return receiverid_;
}
inline void LotteryGiveInfo::set_receiverid(::google::protobuf::uint64 value) {
  set_has_receiverid();
  receiverid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveInfo.receiverid)
}

// -------------------------------------------------------------------

// LotteryGiveCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool LotteryGiveCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LotteryGiveCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LotteryGiveCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LotteryGiveCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command LotteryGiveCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LotteryGiveCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_LOTTERY_GIVE_TRADE_PARAM];
inline bool LotteryGiveCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LotteryGiveCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LotteryGiveCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LotteryGiveCmd::clear_param() {
  param_ = 38;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam LotteryGiveCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void LotteryGiveCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LotteryGiveCmd.param)
}

// optional .Cmd.LotteryGiveInfo iteminfo = 3;
inline bool LotteryGiveCmd::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LotteryGiveCmd::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LotteryGiveCmd::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LotteryGiveCmd::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Cmd::LotteryGiveInfo::Clear();
  clear_has_iteminfo();
}
inline const ::Cmd::LotteryGiveInfo& LotteryGiveCmd::iteminfo() const {
  // @@protoc_insertion_point(field_get:Cmd.LotteryGiveCmd.iteminfo)
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Cmd::LotteryGiveInfo* LotteryGiveCmd::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Cmd::LotteryGiveInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.LotteryGiveCmd.iteminfo)
  return iteminfo_;
}
inline ::Cmd::LotteryGiveInfo* LotteryGiveCmd::release_iteminfo() {
  clear_has_iteminfo();
  ::Cmd::LotteryGiveInfo* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void LotteryGiveCmd::set_allocated_iteminfo(::Cmd::LotteryGiveInfo* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LotteryGiveCmd.iteminfo)
}

// -------------------------------------------------------------------

// TodayFinanceItem

// optional uint32 item_id = 1;
inline bool TodayFinanceItem::has_item_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayFinanceItem::set_has_item_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayFinanceItem::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayFinanceItem::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 TodayFinanceItem::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceItem.item_id)
  return item_id_;
}
inline void TodayFinanceItem::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceItem.item_id)
}

// optional uint32 ratio = 2;
inline bool TodayFinanceItem::has_ratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayFinanceItem::set_has_ratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayFinanceItem::clear_has_ratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayFinanceItem::clear_ratio() {
  ratio_ = 0u;
  clear_has_ratio();
}
inline ::google::protobuf::uint32 TodayFinanceItem::ratio() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceItem.ratio)
  return ratio_;
}
inline void TodayFinanceItem::set_ratio(::google::protobuf::uint32 value) {
  set_has_ratio();
  ratio_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceItem.ratio)
}

// optional uint32 time = 3;
inline bool TodayFinanceItem::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayFinanceItem::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayFinanceItem::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayFinanceItem::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 TodayFinanceItem::time() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceItem.time)
  return time_;
}
inline void TodayFinanceItem::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceItem.time)
}

// -------------------------------------------------------------------

// TodayFinanceRank

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool TodayFinanceRank::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayFinanceRank::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayFinanceRank::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayFinanceRank::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command TodayFinanceRank::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceRank.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TodayFinanceRank::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceRank.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_SERVANT_FINANCE_RANK];
inline bool TodayFinanceRank::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayFinanceRank::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayFinanceRank::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayFinanceRank::clear_param() {
  param_ = 39;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam TodayFinanceRank::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceRank.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void TodayFinanceRank::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceRank.param)
}

// optional .Cmd.EFinanceRankType rank_type = 3 [default = EFINANCE_RANK_DEALCOUNT];
inline bool TodayFinanceRank::has_rank_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayFinanceRank::set_has_rank_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayFinanceRank::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayFinanceRank::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::Cmd::EFinanceRankType TodayFinanceRank::rank_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceRank.rank_type)
  return static_cast< ::Cmd::EFinanceRankType >(rank_type_);
}
inline void TodayFinanceRank::set_rank_type(::Cmd::EFinanceRankType value) {
  assert(::Cmd::EFinanceRankType_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceRank.rank_type)
}

// optional .Cmd.EFinanceDateType date_type = 4 [default = EFINANCE_DATE_THREE];
inline bool TodayFinanceRank::has_date_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TodayFinanceRank::set_has_date_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TodayFinanceRank::clear_has_date_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TodayFinanceRank::clear_date_type() {
  date_type_ = 1;
  clear_has_date_type();
}
inline ::Cmd::EFinanceDateType TodayFinanceRank::date_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceRank.date_type)
  return static_cast< ::Cmd::EFinanceDateType >(date_type_);
}
inline void TodayFinanceRank::set_date_type(::Cmd::EFinanceDateType value) {
  assert(::Cmd::EFinanceDateType_IsValid(value));
  set_has_date_type();
  date_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceRank.date_type)
}

// repeated .Cmd.TodayFinanceItem lists = 5;
inline int TodayFinanceRank::lists_size() const {
  return lists_.size();
}
inline void TodayFinanceRank::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::TodayFinanceItem& TodayFinanceRank::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceRank.lists)
  return lists_.Get(index);
}
inline ::Cmd::TodayFinanceItem* TodayFinanceRank::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TodayFinanceRank.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::TodayFinanceItem* TodayFinanceRank::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.TodayFinanceRank.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >&
TodayFinanceRank::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.TodayFinanceRank.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >*
TodayFinanceRank::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TodayFinanceRank.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// TodayFinanceDetail

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool TodayFinanceDetail::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TodayFinanceDetail::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TodayFinanceDetail::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TodayFinanceDetail::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command TodayFinanceDetail::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TodayFinanceDetail::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceDetail.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = QUERY_SERVANT_FINANCE_DETAIL];
inline bool TodayFinanceDetail::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TodayFinanceDetail::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TodayFinanceDetail::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TodayFinanceDetail::clear_param() {
  param_ = 40;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam TodayFinanceDetail::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void TodayFinanceDetail::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceDetail.param)
}

// optional uint32 item_id = 3;
inline bool TodayFinanceDetail::has_item_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TodayFinanceDetail::set_has_item_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TodayFinanceDetail::clear_has_item_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TodayFinanceDetail::clear_item_id() {
  item_id_ = 0u;
  clear_has_item_id();
}
inline ::google::protobuf::uint32 TodayFinanceDetail::item_id() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.item_id)
  return item_id_;
}
inline void TodayFinanceDetail::set_item_id(::google::protobuf::uint32 value) {
  set_has_item_id();
  item_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceDetail.item_id)
}

// optional .Cmd.EFinanceRankType rank_type = 4 [default = EFINANCE_RANK_DEALCOUNT];
inline bool TodayFinanceDetail::has_rank_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TodayFinanceDetail::set_has_rank_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TodayFinanceDetail::clear_has_rank_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TodayFinanceDetail::clear_rank_type() {
  rank_type_ = 1;
  clear_has_rank_type();
}
inline ::Cmd::EFinanceRankType TodayFinanceDetail::rank_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.rank_type)
  return static_cast< ::Cmd::EFinanceRankType >(rank_type_);
}
inline void TodayFinanceDetail::set_rank_type(::Cmd::EFinanceRankType value) {
  assert(::Cmd::EFinanceRankType_IsValid(value));
  set_has_rank_type();
  rank_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceDetail.rank_type)
}

// optional .Cmd.EFinanceDateType date_type = 5 [default = EFINANCE_DATE_THREE];
inline bool TodayFinanceDetail::has_date_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TodayFinanceDetail::set_has_date_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TodayFinanceDetail::clear_has_date_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TodayFinanceDetail::clear_date_type() {
  date_type_ = 1;
  clear_has_date_type();
}
inline ::Cmd::EFinanceDateType TodayFinanceDetail::date_type() const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.date_type)
  return static_cast< ::Cmd::EFinanceDateType >(date_type_);
}
inline void TodayFinanceDetail::set_date_type(::Cmd::EFinanceDateType value) {
  assert(::Cmd::EFinanceDateType_IsValid(value));
  set_has_date_type();
  date_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TodayFinanceDetail.date_type)
}

// repeated .Cmd.TodayFinanceItem lists = 6;
inline int TodayFinanceDetail::lists_size() const {
  return lists_.size();
}
inline void TodayFinanceDetail::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::TodayFinanceItem& TodayFinanceDetail::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TodayFinanceDetail.lists)
  return lists_.Get(index);
}
inline ::Cmd::TodayFinanceItem* TodayFinanceDetail::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TodayFinanceDetail.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::TodayFinanceItem* TodayFinanceDetail::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.TodayFinanceDetail.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >&
TodayFinanceDetail::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.TodayFinanceDetail.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TodayFinanceItem >*
TodayFinanceDetail::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TodayFinanceDetail.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// BoothPlayerPendingListCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool BoothPlayerPendingListCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoothPlayerPendingListCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoothPlayerPendingListCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoothPlayerPendingListCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command BoothPlayerPendingListCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothPlayerPendingListCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BoothPlayerPendingListCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothPlayerPendingListCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = BOOTH_PLAYER_PENDING_LIST];
inline bool BoothPlayerPendingListCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoothPlayerPendingListCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoothPlayerPendingListCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoothPlayerPendingListCmd::clear_param() {
  param_ = 41;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam BoothPlayerPendingListCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothPlayerPendingListCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void BoothPlayerPendingListCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothPlayerPendingListCmd.param)
}

// optional uint64 charid = 3;
inline bool BoothPlayerPendingListCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoothPlayerPendingListCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoothPlayerPendingListCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoothPlayerPendingListCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 BoothPlayerPendingListCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.BoothPlayerPendingListCmd.charid)
  return charid_;
}
inline void BoothPlayerPendingListCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BoothPlayerPendingListCmd.charid)
}

// repeated .Cmd.TradeItemBaseInfo lists = 4;
inline int BoothPlayerPendingListCmd::lists_size() const {
  return lists_.size();
}
inline void BoothPlayerPendingListCmd::clear_lists() {
  lists_.Clear();
}
inline const ::Cmd::TradeItemBaseInfo& BoothPlayerPendingListCmd::lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.BoothPlayerPendingListCmd.lists)
  return lists_.Get(index);
}
inline ::Cmd::TradeItemBaseInfo* BoothPlayerPendingListCmd::mutable_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.BoothPlayerPendingListCmd.lists)
  return lists_.Mutable(index);
}
inline ::Cmd::TradeItemBaseInfo* BoothPlayerPendingListCmd::add_lists() {
  // @@protoc_insertion_point(field_add:Cmd.BoothPlayerPendingListCmd.lists)
  return lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >&
BoothPlayerPendingListCmd::lists() const {
  // @@protoc_insertion_point(field_list:Cmd.BoothPlayerPendingListCmd.lists)
  return lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TradeItemBaseInfo >*
BoothPlayerPendingListCmd::mutable_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.BoothPlayerPendingListCmd.lists)
  return &lists_;
}

// -------------------------------------------------------------------

// UpdateOrderTradeCmd

// optional .Cmd.Command cmd = 1 [default = RECORD_USER_TRADE_PROTOCMD];
inline bool UpdateOrderTradeCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateOrderTradeCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateOrderTradeCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateOrderTradeCmd::clear_cmd() {
  cmd_ = 57;
  clear_has_cmd();
}
inline ::Cmd::Command UpdateOrderTradeCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateOrderTradeCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdateOrderTradeCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateOrderTradeCmd.cmd)
}

// optional .Cmd.RecordUserTradeParam param = 2 [default = UPDATE_ORDER_TRADE_PARAM];
inline bool UpdateOrderTradeCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateOrderTradeCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateOrderTradeCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateOrderTradeCmd::clear_param() {
  param_ = 42;
  clear_has_param();
}
inline ::Cmd::RecordUserTradeParam UpdateOrderTradeCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateOrderTradeCmd.param)
  return static_cast< ::Cmd::RecordUserTradeParam >(param_);
}
inline void UpdateOrderTradeCmd::set_param(::Cmd::RecordUserTradeParam value) {
  assert(::Cmd::RecordUserTradeParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateOrderTradeCmd.param)
}

// optional uint64 charid = 3;
inline bool UpdateOrderTradeCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateOrderTradeCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateOrderTradeCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateOrderTradeCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UpdateOrderTradeCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateOrderTradeCmd.charid)
  return charid_;
}
inline void UpdateOrderTradeCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateOrderTradeCmd.charid)
}

// optional .Cmd.TradeItemBaseInfo info = 4;
inline bool UpdateOrderTradeCmd::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateOrderTradeCmd::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateOrderTradeCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateOrderTradeCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::TradeItemBaseInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::TradeItemBaseInfo& UpdateOrderTradeCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateOrderTradeCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::TradeItemBaseInfo* UpdateOrderTradeCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::TradeItemBaseInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.UpdateOrderTradeCmd.info)
  return info_;
}
inline ::Cmd::TradeItemBaseInfo* UpdateOrderTradeCmd::release_info() {
  clear_has_info();
  ::Cmd::TradeItemBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void UpdateOrderTradeCmd::set_allocated_info(::Cmd::TradeItemBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.UpdateOrderTradeCmd.info)
}

// optional .Cmd.ETradeType type = 5 [default = ETRADETYPE_TRADE];
inline bool UpdateOrderTradeCmd::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateOrderTradeCmd::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateOrderTradeCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateOrderTradeCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Cmd::ETradeType UpdateOrderTradeCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdateOrderTradeCmd.type)
  return static_cast< ::Cmd::ETradeType >(type_);
}
inline void UpdateOrderTradeCmd::set_type(::Cmd::ETradeType value) {
  assert(::Cmd::ETradeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdateOrderTradeCmd.type)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::RecordUserTradeParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::RecordUserTradeParam>() {
  return ::Cmd::RecordUserTradeParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::RankType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::RankType>() {
  return ::Cmd::RankType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EOperType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EOperType>() {
  return ::Cmd::EOperType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETakeStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETakeStatus>() {
  return ::Cmd::ETakeStatus_descriptor();
}
template <> struct is_proto_enum< ::Cmd::StateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::StateType>() {
  return ::Cmd::StateType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPanelOperType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPanelOperType>() {
  return ::Cmd::EPanelOperType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EListNtfType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EListNtfType>() {
  return ::Cmd::EListNtfType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFinanceDateType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFinanceDateType>() {
  return ::Cmd::EFinanceDateType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EFinanceRankType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EFinanceRankType>() {
  return ::Cmd::EFinanceRankType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RecordTrade_2eproto__INCLUDED
