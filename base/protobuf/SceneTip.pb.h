// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneTip.proto

#ifndef PROTOBUF_SceneTip_2eproto__INCLUDED
#define PROTOBUF_SceneTip_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SceneTip_2eproto();
void protobuf_AssignDesc_SceneTip_2eproto();
void protobuf_ShutdownFile_SceneTip_2eproto();

class RedTip;
class GameTipCmd;
class BrowseRedTipCmd;
class AddRedTip;

enum TipParam {
  TIPPARAM_RED = 1,
  TIPPARAM_BROWSE = 2,
  TIPPARAM_ADDREDTIP = 3,
  TIPPARAM_MAX = 4
};
bool TipParam_IsValid(int value);
const TipParam TipParam_MIN = TIPPARAM_RED;
const TipParam TipParam_MAX = TIPPARAM_MAX;
const int TipParam_ARRAYSIZE = TipParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* TipParam_descriptor();
inline const ::std::string& TipParam_Name(TipParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    TipParam_descriptor(), value);
}
inline bool TipParam_Parse(
    const ::std::string& name, TipParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TipParam>(
    TipParam_descriptor(), name, value);
}
enum ERedSys {
  EREDSYS_MIN = 0,
  EREDSYS_ADD_POINT = 1,
  EREDSYS_NEW_PROFESSION = 2,
  EREDSYS_PROFESSION_UP = 3,
  EREDSYS_ROLE_IMG = 4,
  EREDSYS_MONSTER_IMG = 5,
  EREDSYS_PHOTOFRAME = 6,
  EREDSYS_SKILL_POINT = 7,
  EREDSYS_TEAMAPPLY = 19,
  EREDSYS_MANUAL_MONSTER = 20,
  EREDSYS_MANUAL_HEAD = 21,
  EREDSYS_MANUAL_FACE = 22,
  EREDSYS_MANUAL_BACK = 23,
  EREDSYS_MANUAL_TAIL = 24,
  EREDSYS_MANUAL_CARD_WEAPON = 25,
  EREDSYS_MANUAL_CARD_ASSISTANT = 26,
  EREDSYS_MANUAL_CARD_ARMOUR = 27,
  EREDSYS_MANUAL_CARD_ROBE = 28,
  EREDSYS_MANUAL_CARD_SHOES = 29,
  EREDSYS_MANUAL_CARD_ACCESSORY = 30,
  EREDSYS_MANUAL_CARD_HEAD = 31,
  EREDSYS_MANUAL_NPC = 32,
  EREDSYS_MANUAL_MOUNT = 33,
  EREDSYS_SOCIAL_FRIEND_APPLY = 34,
  EREDSYS_MANUAL_MONTHCARD = 35,
  EREDSYS_MANUAL_NEWTAIL = 36,
  EREDSYS_MANUAL_COLLECTION = 37,
  EREDSYS_MANUAL_FOOD = 38,
  EREDSYS_GUILD_APPLY = 40,
  EREDSYS_GUILD_CHALLENGE_ADD = 41,
  EREDSYS_GUILD_CHALLENGE_REWARD = 42,
  EREDSYS_GUILD_ICON = 43,
  EREDSYS_PRIVATE_CHAT = 50,
  EREDSYS_TRADE_RECORD = 60,
  EREDSYS_PET_ADVENTURE = 70,
  EREDSYS_TUTOR_TUTOR_UNLOCK = 80,
  EREDSYS_TUTOR_STUDENT_UNLOCK = 81,
  EREDSYS_TUTOR_APPLY = 82,
  EREDSYS_TUTOR_TASK = 83,
  EREDSYS_TUTOR_GROW_REWARD = 85,
  EREDSYS_MANUAL_PRONTERA = 101,
  EREDSYS_MANUAL_GEFFEN = 102,
  EREDSYS_MANUAL_MOROCC = 103,
  EREDSYS_MANUAL_PAYON = 104,
  EREDSYS_MANUAL_GLAST = 105,
  EREDSYS_PACK_TEMP = 106,
  EREDSYS_AUCTION_RECORD = 84,
  EREDSYS_PEAK_LEVEL = 132,
  EREDSYS_BEING_BODY = 300,
  EREDSYS_SERVANT_RECOMMNED = 400,
  EREDSYS_SERVANT_GROWTH = 401,
  EREDSYS_DEAD_BOSS = 600,
  EREDSYS_MAX = 601
};
bool ERedSys_IsValid(int value);
const ERedSys ERedSys_MIN = EREDSYS_MIN;
const ERedSys ERedSys_MAX = EREDSYS_MAX;
const int ERedSys_ARRAYSIZE = ERedSys_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERedSys_descriptor();
inline const ::std::string& ERedSys_Name(ERedSys value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERedSys_descriptor(), value);
}
inline bool ERedSys_Parse(
    const ::std::string& name, ERedSys* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERedSys>(
    ERedSys_descriptor(), name, value);
}
enum ETipOpt {
  ETIPOPT_MIN = 0,
  ETIPOPT_UPDATE = 1,
  ETIPOPT_DELETE = 2
};
bool ETipOpt_IsValid(int value);
const ETipOpt ETipOpt_MIN = ETIPOPT_MIN;
const ETipOpt ETipOpt_MAX = ETIPOPT_DELETE;
const int ETipOpt_ARRAYSIZE = ETipOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETipOpt_descriptor();
inline const ::std::string& ETipOpt_Name(ETipOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETipOpt_descriptor(), value);
}
inline bool ETipOpt_Parse(
    const ::std::string& name, ETipOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETipOpt>(
    ETipOpt_descriptor(), name, value);
}
enum ETipItemOpt {
  ETIPITEMOPT_ADD = 1,
  ETIPITEMOPT_DELETE = 2
};
bool ETipItemOpt_IsValid(int value);
const ETipItemOpt ETipItemOpt_MIN = ETIPITEMOPT_ADD;
const ETipItemOpt ETipItemOpt_MAX = ETIPITEMOPT_DELETE;
const int ETipItemOpt_ARRAYSIZE = ETipItemOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETipItemOpt_descriptor();
inline const ::std::string& ETipItemOpt_Name(ETipItemOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETipItemOpt_descriptor(), value);
}
inline bool ETipItemOpt_Parse(
    const ::std::string& name, ETipItemOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETipItemOpt>(
    ETipItemOpt_descriptor(), name, value);
}
// ===================================================================

class RedTip : public ::google::protobuf::Message {
 public:
  RedTip();
  virtual ~RedTip();

  RedTip(const RedTip& from);

  inline RedTip& operator=(const RedTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedTip& default_instance();

  void Swap(RedTip* other);

  // implements Message ----------------------------------------------

  RedTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedTip& from);
  void MergeFrom(const RedTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
  inline bool has_redsys() const;
  inline void clear_redsys();
  static const int kRedsysFieldNumber = 1;
  inline ::Cmd::ERedSys redsys() const;
  inline void set_redsys(::Cmd::ERedSys value);

  // optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
  inline bool has_optitem() const;
  inline void clear_optitem();
  static const int kOptItemFieldNumber = 2;
  inline ::Cmd::ETipItemOpt optitem() const;
  inline void set_optitem(::Cmd::ETipItemOpt value);

  // repeated uint64 tipid = 3;
  inline int tipid_size() const;
  inline void clear_tipid();
  static const int kTipidFieldNumber = 3;
  inline ::google::protobuf::uint64 tipid(int index) const;
  inline void set_tipid(int index, ::google::protobuf::uint64 value);
  inline void add_tipid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      tipid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_tipid();

  // @@protoc_insertion_point(class_scope:Cmd.RedTip)
 private:
  inline void set_has_redsys();
  inline void clear_has_redsys();
  inline void set_has_optitem();
  inline void clear_has_optitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int redsys_;
  int optitem_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > tipid_;
  friend void  protobuf_AddDesc_SceneTip_2eproto();
  friend void protobuf_AssignDesc_SceneTip_2eproto();
  friend void protobuf_ShutdownFile_SceneTip_2eproto();

  void InitAsDefaultInstance();
  static RedTip* default_instance_;
};
// -------------------------------------------------------------------

class GameTipCmd : public ::google::protobuf::Message {
 public:
  GameTipCmd();
  virtual ~GameTipCmd();

  GameTipCmd(const GameTipCmd& from);

  inline GameTipCmd& operator=(const GameTipCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTipCmd& default_instance();

  void Swap(GameTipCmd* other);

  // implements Message ----------------------------------------------

  GameTipCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameTipCmd& from);
  void MergeFrom(const GameTipCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TipParam param() const;
  inline void set_param(::Cmd::TipParam value);

  // optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline ::Cmd::ETipOpt opt() const;
  inline void set_opt(::Cmd::ETipOpt value);

  // repeated .Cmd.RedTip redtip = 4;
  inline int redtip_size() const;
  inline void clear_redtip();
  static const int kRedtipFieldNumber = 4;
  inline const ::Cmd::RedTip& redtip(int index) const;
  inline ::Cmd::RedTip* mutable_redtip(int index);
  inline ::Cmd::RedTip* add_redtip();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RedTip >&
      redtip() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RedTip >*
      mutable_redtip();

  // @@protoc_insertion_point(class_scope:Cmd.GameTipCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RedTip > redtip_;
  int opt_;
  friend void  protobuf_AddDesc_SceneTip_2eproto();
  friend void protobuf_AssignDesc_SceneTip_2eproto();
  friend void protobuf_ShutdownFile_SceneTip_2eproto();

  void InitAsDefaultInstance();
  static GameTipCmd* default_instance_;
};
// -------------------------------------------------------------------

class BrowseRedTipCmd : public ::google::protobuf::Message {
 public:
  BrowseRedTipCmd();
  virtual ~BrowseRedTipCmd();

  BrowseRedTipCmd(const BrowseRedTipCmd& from);

  inline BrowseRedTipCmd& operator=(const BrowseRedTipCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BrowseRedTipCmd& default_instance();

  void Swap(BrowseRedTipCmd* other);

  // implements Message ----------------------------------------------

  BrowseRedTipCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BrowseRedTipCmd& from);
  void MergeFrom(const BrowseRedTipCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TipParam param() const;
  inline void set_param(::Cmd::TipParam value);

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 3;
  inline ::Cmd::ERedSys red() const;
  inline void set_red(::Cmd::ERedSys value);

  // optional uint64 tipid = 4 [default = 0];
  inline bool has_tipid() const;
  inline void clear_tipid();
  static const int kTipidFieldNumber = 4;
  inline ::google::protobuf::uint64 tipid() const;
  inline void set_tipid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.BrowseRedTipCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_tipid();
  inline void clear_has_tipid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 tipid_;
  int red_;
  friend void  protobuf_AddDesc_SceneTip_2eproto();
  friend void protobuf_AssignDesc_SceneTip_2eproto();
  friend void protobuf_ShutdownFile_SceneTip_2eproto();

  void InitAsDefaultInstance();
  static BrowseRedTipCmd* default_instance_;
};
// -------------------------------------------------------------------

class AddRedTip : public ::google::protobuf::Message {
 public:
  AddRedTip();
  virtual ~AddRedTip();

  AddRedTip(const AddRedTip& from);

  inline AddRedTip& operator=(const AddRedTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddRedTip& default_instance();

  void Swap(AddRedTip* other);

  // implements Message ----------------------------------------------

  AddRedTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddRedTip& from);
  void MergeFrom(const AddRedTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::TipParam param() const;
  inline void set_param(::Cmd::TipParam value);

  // optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
  inline bool has_red() const;
  inline void clear_red();
  static const int kRedFieldNumber = 3;
  inline ::Cmd::ERedSys red() const;
  inline void set_red(::Cmd::ERedSys value);

  // optional uint64 tipid = 4 [default = 0];
  inline bool has_tipid() const;
  inline void clear_tipid();
  static const int kTipidFieldNumber = 4;
  inline ::google::protobuf::uint64 tipid() const;
  inline void set_tipid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.AddRedTip)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_red();
  inline void clear_has_red();
  inline void set_has_tipid();
  inline void clear_has_tipid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 tipid_;
  int red_;
  friend void  protobuf_AddDesc_SceneTip_2eproto();
  friend void protobuf_AssignDesc_SceneTip_2eproto();
  friend void protobuf_ShutdownFile_SceneTip_2eproto();

  void InitAsDefaultInstance();
  static AddRedTip* default_instance_;
};
// ===================================================================


// ===================================================================

// RedTip

// optional .Cmd.ERedSys redsys = 1 [default = EREDSYS_MIN];
inline bool RedTip::has_redsys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedTip::set_has_redsys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedTip::clear_has_redsys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedTip::clear_redsys() {
  redsys_ = 0;
  clear_has_redsys();
}
inline ::Cmd::ERedSys RedTip::redsys() const {
  // @@protoc_insertion_point(field_get:Cmd.RedTip.redsys)
  return static_cast< ::Cmd::ERedSys >(redsys_);
}
inline void RedTip::set_redsys(::Cmd::ERedSys value) {
  assert(::Cmd::ERedSys_IsValid(value));
  set_has_redsys();
  redsys_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedTip.redsys)
}

// optional .Cmd.ETipItemOpt optItem = 2 [default = ETIPITEMOPT_ADD];
inline bool RedTip::has_optitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedTip::set_has_optitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedTip::clear_has_optitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedTip::clear_optitem() {
  optitem_ = 1;
  clear_has_optitem();
}
inline ::Cmd::ETipItemOpt RedTip::optitem() const {
  // @@protoc_insertion_point(field_get:Cmd.RedTip.optItem)
  return static_cast< ::Cmd::ETipItemOpt >(optitem_);
}
inline void RedTip::set_optitem(::Cmd::ETipItemOpt value) {
  assert(::Cmd::ETipItemOpt_IsValid(value));
  set_has_optitem();
  optitem_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RedTip.optItem)
}

// repeated uint64 tipid = 3;
inline int RedTip::tipid_size() const {
  return tipid_.size();
}
inline void RedTip::clear_tipid() {
  tipid_.Clear();
}
inline ::google::protobuf::uint64 RedTip::tipid(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RedTip.tipid)
  return tipid_.Get(index);
}
inline void RedTip::set_tipid(int index, ::google::protobuf::uint64 value) {
  tipid_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.RedTip.tipid)
}
inline void RedTip::add_tipid(::google::protobuf::uint64 value) {
  tipid_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.RedTip.tipid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
RedTip::tipid() const {
  // @@protoc_insertion_point(field_list:Cmd.RedTip.tipid)
  return tipid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
RedTip::mutable_tipid() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RedTip.tipid)
  return &tipid_;
}

// -------------------------------------------------------------------

// GameTipCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
inline bool GameTipCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameTipCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameTipCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameTipCmd::clear_cmd() {
  cmd_ = 18;
  clear_has_cmd();
}
inline ::Cmd::Command GameTipCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTipCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GameTipCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTipCmd.cmd)
}

// optional .Cmd.TipParam param = 2 [default = TIPPARAM_RED];
inline bool GameTipCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameTipCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameTipCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameTipCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::TipParam GameTipCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTipCmd.param)
  return static_cast< ::Cmd::TipParam >(param_);
}
inline void GameTipCmd::set_param(::Cmd::TipParam value) {
  assert(::Cmd::TipParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTipCmd.param)
}

// optional .Cmd.ETipOpt opt = 3 [default = ETIPOPT_MIN];
inline bool GameTipCmd::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameTipCmd::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GameTipCmd::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GameTipCmd::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::Cmd::ETipOpt GameTipCmd::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.GameTipCmd.opt)
  return static_cast< ::Cmd::ETipOpt >(opt_);
}
inline void GameTipCmd::set_opt(::Cmd::ETipOpt value) {
  assert(::Cmd::ETipOpt_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GameTipCmd.opt)
}

// repeated .Cmd.RedTip redtip = 4;
inline int GameTipCmd::redtip_size() const {
  return redtip_.size();
}
inline void GameTipCmd::clear_redtip() {
  redtip_.Clear();
}
inline const ::Cmd::RedTip& GameTipCmd::redtip(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.GameTipCmd.redtip)
  return redtip_.Get(index);
}
inline ::Cmd::RedTip* GameTipCmd::mutable_redtip(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.GameTipCmd.redtip)
  return redtip_.Mutable(index);
}
inline ::Cmd::RedTip* GameTipCmd::add_redtip() {
  // @@protoc_insertion_point(field_add:Cmd.GameTipCmd.redtip)
  return redtip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RedTip >&
GameTipCmd::redtip() const {
  // @@protoc_insertion_point(field_list:Cmd.GameTipCmd.redtip)
  return redtip_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RedTip >*
GameTipCmd::mutable_redtip() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.GameTipCmd.redtip)
  return &redtip_;
}

// -------------------------------------------------------------------

// BrowseRedTipCmd

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
inline bool BrowseRedTipCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BrowseRedTipCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BrowseRedTipCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BrowseRedTipCmd::clear_cmd() {
  cmd_ = 18;
  clear_has_cmd();
}
inline ::Cmd::Command BrowseRedTipCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowseRedTipCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BrowseRedTipCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowseRedTipCmd.cmd)
}

// optional .Cmd.TipParam param = 2 [default = TIPPARAM_BROWSE];
inline bool BrowseRedTipCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BrowseRedTipCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BrowseRedTipCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BrowseRedTipCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::TipParam BrowseRedTipCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowseRedTipCmd.param)
  return static_cast< ::Cmd::TipParam >(param_);
}
inline void BrowseRedTipCmd::set_param(::Cmd::TipParam value) {
  assert(::Cmd::TipParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowseRedTipCmd.param)
}

// optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
inline bool BrowseRedTipCmd::has_red() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BrowseRedTipCmd::set_has_red() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BrowseRedTipCmd::clear_has_red() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BrowseRedTipCmd::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::Cmd::ERedSys BrowseRedTipCmd::red() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowseRedTipCmd.red)
  return static_cast< ::Cmd::ERedSys >(red_);
}
inline void BrowseRedTipCmd::set_red(::Cmd::ERedSys value) {
  assert(::Cmd::ERedSys_IsValid(value));
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowseRedTipCmd.red)
}

// optional uint64 tipid = 4 [default = 0];
inline bool BrowseRedTipCmd::has_tipid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BrowseRedTipCmd::set_has_tipid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BrowseRedTipCmd::clear_has_tipid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BrowseRedTipCmd::clear_tipid() {
  tipid_ = GOOGLE_ULONGLONG(0);
  clear_has_tipid();
}
inline ::google::protobuf::uint64 BrowseRedTipCmd::tipid() const {
  // @@protoc_insertion_point(field_get:Cmd.BrowseRedTipCmd.tipid)
  return tipid_;
}
inline void BrowseRedTipCmd::set_tipid(::google::protobuf::uint64 value) {
  set_has_tipid();
  tipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BrowseRedTipCmd.tipid)
}

// -------------------------------------------------------------------

// AddRedTip

// optional .Cmd.Command cmd = 1 [default = SCENE_USER_TIP_PROTOCMD];
inline bool AddRedTip::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddRedTip::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddRedTip::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddRedTip::clear_cmd() {
  cmd_ = 18;
  clear_has_cmd();
}
inline ::Cmd::Command AddRedTip::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.AddRedTip.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void AddRedTip::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddRedTip.cmd)
}

// optional .Cmd.TipParam param = 2 [default = TIPPARAM_ADDREDTIP];
inline bool AddRedTip::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddRedTip::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddRedTip::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddRedTip::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::TipParam AddRedTip::param() const {
  // @@protoc_insertion_point(field_get:Cmd.AddRedTip.param)
  return static_cast< ::Cmd::TipParam >(param_);
}
inline void AddRedTip::set_param(::Cmd::TipParam value) {
  assert(::Cmd::TipParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddRedTip.param)
}

// optional .Cmd.ERedSys red = 3 [default = EREDSYS_MIN];
inline bool AddRedTip::has_red() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddRedTip::set_has_red() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddRedTip::clear_has_red() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddRedTip::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::Cmd::ERedSys AddRedTip::red() const {
  // @@protoc_insertion_point(field_get:Cmd.AddRedTip.red)
  return static_cast< ::Cmd::ERedSys >(red_);
}
inline void AddRedTip::set_red(::Cmd::ERedSys value) {
  assert(::Cmd::ERedSys_IsValid(value));
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddRedTip.red)
}

// optional uint64 tipid = 4 [default = 0];
inline bool AddRedTip::has_tipid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddRedTip::set_has_tipid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddRedTip::clear_has_tipid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddRedTip::clear_tipid() {
  tipid_ = GOOGLE_ULONGLONG(0);
  clear_has_tipid();
}
inline ::google::protobuf::uint64 AddRedTip::tipid() const {
  // @@protoc_insertion_point(field_get:Cmd.AddRedTip.tipid)
  return tipid_;
}
inline void AddRedTip::set_tipid(::google::protobuf::uint64 value) {
  set_has_tipid();
  tipid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.AddRedTip.tipid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::TipParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::TipParam>() {
  return ::Cmd::TipParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERedSys> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERedSys>() {
  return ::Cmd::ERedSys_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETipOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETipOpt>() {
  return ::Cmd::ETipOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETipItemOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETipItemOpt>() {
  return ::Cmd::ETipItemOpt_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SceneTip_2eproto__INCLUDED
