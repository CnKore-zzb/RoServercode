// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneAugury.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneAugury.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* AuguryInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuguryInviteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryInviteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuguryChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuguryTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuguryAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuguryQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuguryQuit_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuguryParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAuguryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EReplyType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneAugury_2eproto() {
  protobuf_AddDesc_SceneAugury_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneAugury.proto");
  GOOGLE_CHECK(file != NULL);
  AuguryInvite_descriptor_ = file->message_type(0);
  static const int AuguryInvite_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, invitername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, isextra_),
  };
  AuguryInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryInvite_descriptor_,
      AuguryInvite::default_instance_,
      AuguryInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryInvite));
  AuguryInviteReply_descriptor_ = file->message_type(1);
  static const int AuguryInviteReply_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, inviterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, augurytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, isextra_),
  };
  AuguryInviteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryInviteReply_descriptor_,
      AuguryInviteReply::default_instance_,
      AuguryInviteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryInviteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryInviteReply));
  AuguryChat_descriptor_ = file->message_type(2);
  static const int AuguryChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, sender_),
  };
  AuguryChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryChat_descriptor_,
      AuguryChat::default_instance_,
      AuguryChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryChat));
  AuguryTitle_descriptor_ = file->message_type(3);
  static const int AuguryTitle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, subtableid_),
  };
  AuguryTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryTitle_descriptor_,
      AuguryTitle::default_instance_,
      AuguryTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryTitle));
  AuguryAnswer_descriptor_ = file->message_type(4);
  static const int AuguryAnswer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, answer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, answerid_),
  };
  AuguryAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryAnswer_descriptor_,
      AuguryAnswer::default_instance_,
      AuguryAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryAnswer));
  AuguryQuit_descriptor_ = file->message_type(5);
  static const int AuguryQuit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryQuit, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryQuit, param_),
  };
  AuguryQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuguryQuit_descriptor_,
      AuguryQuit::default_instance_,
      AuguryQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuguryQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuguryQuit));
  AuguryParam_descriptor_ = file->enum_type(0);
  EAuguryType_descriptor_ = file->enum_type(1);
  EReplyType_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneAugury_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryInvite_descriptor_, &AuguryInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryInviteReply_descriptor_, &AuguryInviteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryChat_descriptor_, &AuguryChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryTitle_descriptor_, &AuguryTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryAnswer_descriptor_, &AuguryAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuguryQuit_descriptor_, &AuguryQuit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneAugury_2eproto() {
  delete AuguryInvite::default_instance_;
  delete AuguryInvite_reflection_;
  delete AuguryInviteReply::default_instance_;
  delete AuguryInviteReply_reflection_;
  delete AuguryChat::default_instance_;
  delete AuguryChat_reflection_;
  delete AuguryTitle::default_instance_;
  delete AuguryTitle_reflection_;
  delete AuguryAnswer::default_instance_;
  delete AuguryAnswer_reflection_;
  delete AuguryQuit::default_instance_;
  delete AuguryQuit_reflection_;
}

void protobuf_AddDesc_SceneAugury_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SceneAugury.proto\022\003Cmd\032\nxCmd.proto\"\344\001\n"
    "\014AuguryInvite\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\032SCENE_USER_AUGURY_PROTOCMD\0223\n\005param\030\002 "
    "\001(\0162\020.Cmd.AuguryParam:\022AUGURYPARAM_INVIT"
    "E\022\021\n\tinviterid\030\003 \001(\004\022\023\n\013invitername\030\004 \001("
    "\t\022\017\n\007npcguid\030\005 \001(\004\022\036\n\004type\030\006 \001(\0162\020.Cmd.E"
    "AuguryType\022\017\n\007isextra\030\007 \001(\010\"\222\002\n\021AuguryIn"
    "viteReply\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SC"
    "ENE_USER_AUGURY_PROTOCMD\0229\n\005param\030\002 \001(\0162"
    "\020.Cmd.AuguryParam:\030AUGURYPARAM_INVITE_RE"
    "PLY\0220\n\004type\030\003 \001(\0162\017.Cmd.EReplyType:\021ERep"
    "lyType_Refuse\022\021\n\tinviterid\030\004 \001(\004\022\017\n\007npcg"
    "uid\030\005 \001(\004\022$\n\naugurytype\030\006 \001(\0162\020.Cmd.EAug"
    "uryType\022\017\n\007isextra\030\007 \001(\010\"\227\001\n\nAuguryChat\022"
    "5\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_A"
    "UGURY_PROTOCMD\0221\n\005param\030\002 \001(\0162\020.Cmd.Augu"
    "ryParam:\020AUGURYPARAM_CHAT\022\017\n\007content\030\003 \001"
    "(\t\022\016\n\006sender\030\004 \001(\t\"\275\001\n\013AuguryTitle\0225\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_AUGURY"
    "_PROTOCMD\0222\n\005param\030\002 \001(\0162\020.Cmd.AuguryPar"
    "am:\021AUGURYPARAM_TITLE\022\017\n\007titleid\030\003 \001(\r\022\036"
    "\n\004type\030\004 \001(\0162\020.Cmd.EAuguryType\022\022\n\nsubtab"
    "leid\030\005 \001(\r\"\255\001\n\014AuguryAnswer\0225\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\032SCENE_USER_AUGURY_PROTOC"
    "MD\0223\n\005param\030\002 \001(\0162\020.Cmd.AuguryParam:\022AUG"
    "URYPARAM_ANSWER\022\017\n\007titleid\030\003 \001(\r\022\016\n\006answ"
    "er\030\004 \001(\r\022\020\n\010answerid\030\005 \001(\004\"v\n\nAuguryQuit"
    "\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_"
    "AUGURY_PROTOCMD\0221\n\005param\030\002 \001(\0162\020.Cmd.Aug"
    "uryParam:\020AUGURYPARAM_QUIT*\236\001\n\013AuguryPar"
    "am\022\026\n\022AUGURYPARAM_INVITE\020\001\022\034\n\030AUGURYPARA"
    "M_INVITE_REPLY\020\002\022\024\n\020AUGURYPARAM_CHAT\020\003\022\025"
    "\n\021AUGURYPARAM_TITLE\020\004\022\026\n\022AUGURYPARAM_ANS"
    "WER\020\005\022\024\n\020AUGURYPARAM_QUIT\020\006*\226\001\n\013EAuguryT"
    "ype\022\033\n\027EAUGURYTYPE_LOVE_SEASON\020\001\022\032\n\026EAUG"
    "URYTYPE_STAR_GUIDE\020\002\022\031\n\025EAUGURYTYPE_ADVE"
    "NTURE\020\003\022\031\n\025EAUGURYTYPE_VALENTINE\020\004\022\030\n\024EA"
    "UGURYTYPE_ACTIVITY\020\005*9\n\nEReplyType\022\024\n\020ER"
    "eplyType_Agree\020\001\022\025\n\021EReplyType_Refuse\020\002", 1559);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneAugury.proto", &protobuf_RegisterTypes);
  AuguryInvite::default_instance_ = new AuguryInvite();
  AuguryInviteReply::default_instance_ = new AuguryInviteReply();
  AuguryChat::default_instance_ = new AuguryChat();
  AuguryTitle::default_instance_ = new AuguryTitle();
  AuguryAnswer::default_instance_ = new AuguryAnswer();
  AuguryQuit::default_instance_ = new AuguryQuit();
  AuguryInvite::default_instance_->InitAsDefaultInstance();
  AuguryInviteReply::default_instance_->InitAsDefaultInstance();
  AuguryChat::default_instance_->InitAsDefaultInstance();
  AuguryTitle::default_instance_->InitAsDefaultInstance();
  AuguryAnswer::default_instance_->InitAsDefaultInstance();
  AuguryQuit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneAugury_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneAugury_2eproto {
  StaticDescriptorInitializer_SceneAugury_2eproto() {
    protobuf_AddDesc_SceneAugury_2eproto();
  }
} static_descriptor_initializer_SceneAugury_2eproto_;
const ::google::protobuf::EnumDescriptor* AuguryParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryParam_descriptor_;
}
bool AuguryParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAuguryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAuguryType_descriptor_;
}
bool EAuguryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EReplyType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EReplyType_descriptor_;
}
bool EReplyType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryInvite::kCmdFieldNumber;
const int AuguryInvite::kParamFieldNumber;
const int AuguryInvite::kInviteridFieldNumber;
const int AuguryInvite::kInviternameFieldNumber;
const int AuguryInvite::kNpcguidFieldNumber;
const int AuguryInvite::kTypeFieldNumber;
const int AuguryInvite::kIsextraFieldNumber;
#endif  // !_MSC_VER

AuguryInvite::AuguryInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryInvite)
}

void AuguryInvite::InitAsDefaultInstance() {
}

AuguryInvite::AuguryInvite(const AuguryInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryInvite)
}

void AuguryInvite::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 1;
  inviterid_ = GOOGLE_ULONGLONG(0);
  invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  npcguid_ = GOOGLE_ULONGLONG(0);
  type_ = 1;
  isextra_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryInvite::~AuguryInvite() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryInvite)
  SharedDtor();
}

void AuguryInvite::SharedDtor() {
  if (invitername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete invitername_;
  }
  if (this != default_instance_) {
  }
}

void AuguryInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryInvite_descriptor_;
}

const AuguryInvite& AuguryInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryInvite* AuguryInvite::default_instance_ = NULL;

AuguryInvite* AuguryInvite::New() const {
  return new AuguryInvite;
}

void AuguryInvite::Clear() {
  if (_has_bits_[0 / 32] & 127) {
    cmd_ = 27;
    param_ = 1;
    inviterid_ = GOOGLE_ULONGLONG(0);
    if (has_invitername()) {
      if (invitername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        invitername_->clear();
      }
    }
    npcguid_ = GOOGLE_ULONGLONG(0);
    type_ = 1;
    isextra_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryInvite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_inviterid;
        break;
      }

      // optional uint64 inviterid = 3;
      case 3: {
        if (tag == 24) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_invitername;
        break;
      }

      // optional string invitername = 4;
      case 4: {
        if (tag == 34) {
         parse_invitername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->invitername().data(), this->invitername().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "invitername");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 5;
      case 5: {
        if (tag == 40) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Cmd.EAuguryType type = 6;
      case 6: {
        if (tag == 48) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuguryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAuguryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isextra;
        break;
      }

      // optional bool isextra = 7;
      case 7: {
        if (tag == 56) {
         parse_isextra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextra_)));
          set_has_isextra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryInvite)
  return false;
#undef DO_
}

void AuguryInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryInvite)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 inviterid = 3;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->inviterid(), output);
  }

  // optional string invitername = 4;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitername");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->invitername(), output);
  }

  // optional uint64 npcguid = 5;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->npcguid(), output);
  }

  // optional .Cmd.EAuguryType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  // optional bool isextra = 7;
  if (has_isextra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isextra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryInvite)
}

::google::protobuf::uint8* AuguryInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryInvite)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 inviterid = 3;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->inviterid(), target);
  }

  // optional string invitername = 4;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "invitername");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->invitername(), target);
  }

  // optional uint64 npcguid = 5;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->npcguid(), target);
  }

  // optional .Cmd.EAuguryType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  // optional bool isextra = 7;
  if (has_isextra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isextra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryInvite)
  return target;
}

int AuguryInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 inviterid = 3;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviterid());
    }

    // optional string invitername = 4;
    if (has_invitername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitername());
    }

    // optional uint64 npcguid = 5;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional .Cmd.EAuguryType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional bool isextra = 7;
    if (has_isextra()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryInvite::MergeFrom(const AuguryInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_invitername()) {
      set_invitername(from.invitername());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isextra()) {
      set_isextra(from.isextra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryInvite::CopyFrom(const AuguryInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryInvite::IsInitialized() const {

  return true;
}

void AuguryInvite::Swap(AuguryInvite* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(invitername_, other->invitername_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(type_, other->type_);
    std::swap(isextra_, other->isextra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryInvite_descriptor_;
  metadata.reflection = AuguryInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryInviteReply::kCmdFieldNumber;
const int AuguryInviteReply::kParamFieldNumber;
const int AuguryInviteReply::kTypeFieldNumber;
const int AuguryInviteReply::kInviteridFieldNumber;
const int AuguryInviteReply::kNpcguidFieldNumber;
const int AuguryInviteReply::kAugurytypeFieldNumber;
const int AuguryInviteReply::kIsextraFieldNumber;
#endif  // !_MSC_VER

AuguryInviteReply::AuguryInviteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryInviteReply)
}

void AuguryInviteReply::InitAsDefaultInstance() {
}

AuguryInviteReply::AuguryInviteReply(const AuguryInviteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryInviteReply)
}

void AuguryInviteReply::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 2;
  type_ = 2;
  inviterid_ = GOOGLE_ULONGLONG(0);
  npcguid_ = GOOGLE_ULONGLONG(0);
  augurytype_ = 1;
  isextra_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryInviteReply::~AuguryInviteReply() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryInviteReply)
  SharedDtor();
}

void AuguryInviteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuguryInviteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryInviteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryInviteReply_descriptor_;
}

const AuguryInviteReply& AuguryInviteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryInviteReply* AuguryInviteReply::default_instance_ = NULL;

AuguryInviteReply* AuguryInviteReply::New() const {
  return new AuguryInviteReply;
}

void AuguryInviteReply::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuguryInviteReply*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(npcguid_, isextra_);
    cmd_ = 27;
    param_ = 2;
    type_ = 2;
    inviterid_ = GOOGLE_ULONGLONG(0);
    augurytype_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryInviteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryInviteReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EReplyType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EReplyType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_inviterid;
        break;
      }

      // optional uint64 inviterid = 4;
      case 4: {
        if (tag == 32) {
         parse_inviterid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_npcguid;
        break;
      }

      // optional uint64 npcguid = 5;
      case 5: {
        if (tag == 40) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_augurytype;
        break;
      }

      // optional .Cmd.EAuguryType augurytype = 6;
      case 6: {
        if (tag == 48) {
         parse_augurytype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuguryType_IsValid(value)) {
            set_augurytype(static_cast< ::Cmd::EAuguryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_isextra;
        break;
      }

      // optional bool isextra = 7;
      case 7: {
        if (tag == 56) {
         parse_isextra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextra_)));
          set_has_isextra();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryInviteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryInviteReply)
  return false;
#undef DO_
}

void AuguryInviteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryInviteReply)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint64 inviterid = 4;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->inviterid(), output);
  }

  // optional uint64 npcguid = 5;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->npcguid(), output);
  }

  // optional .Cmd.EAuguryType augurytype = 6;
  if (has_augurytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->augurytype(), output);
  }

  // optional bool isextra = 7;
  if (has_isextra()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isextra(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryInviteReply)
}

::google::protobuf::uint8* AuguryInviteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryInviteReply)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint64 inviterid = 4;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->inviterid(), target);
  }

  // optional uint64 npcguid = 5;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->npcguid(), target);
  }

  // optional .Cmd.EAuguryType augurytype = 6;
  if (has_augurytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->augurytype(), target);
  }

  // optional bool isextra = 7;
  if (has_isextra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isextra(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryInviteReply)
  return target;
}

int AuguryInviteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_INVITE_REPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EReplyType type = 3 [default = EReplyType_Refuse];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint64 inviterid = 4;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->inviterid());
    }

    // optional uint64 npcguid = 5;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

    // optional .Cmd.EAuguryType augurytype = 6;
    if (has_augurytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->augurytype());
    }

    // optional bool isextra = 7;
    if (has_isextra()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryInviteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryInviteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryInviteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryInviteReply::MergeFrom(const AuguryInviteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
    if (from.has_augurytype()) {
      set_augurytype(from.augurytype());
    }
    if (from.has_isextra()) {
      set_isextra(from.isextra());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryInviteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryInviteReply::CopyFrom(const AuguryInviteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryInviteReply::IsInitialized() const {

  return true;
}

void AuguryInviteReply::Swap(AuguryInviteReply* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(npcguid_, other->npcguid_);
    std::swap(augurytype_, other->augurytype_);
    std::swap(isextra_, other->isextra_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryInviteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryInviteReply_descriptor_;
  metadata.reflection = AuguryInviteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryChat::kCmdFieldNumber;
const int AuguryChat::kParamFieldNumber;
const int AuguryChat::kContentFieldNumber;
const int AuguryChat::kSenderFieldNumber;
#endif  // !_MSC_VER

AuguryChat::AuguryChat()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryChat)
}

void AuguryChat::InitAsDefaultInstance() {
}

AuguryChat::AuguryChat(const AuguryChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryChat)
}

void AuguryChat::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 3;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryChat::~AuguryChat() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryChat)
  SharedDtor();
}

void AuguryChat::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void AuguryChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryChat_descriptor_;
}

const AuguryChat& AuguryChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryChat* AuguryChat::default_instance_ = NULL;

AuguryChat* AuguryChat::New() const {
  return new AuguryChat;
}

void AuguryChat::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 27;
    param_ = 3;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sender_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sender;
        break;
      }

      // optional string sender = 4;
      case 4: {
        if (tag == 34) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sender");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryChat)
  return false;
#undef DO_
}

void AuguryChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryChat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryChat)
}

::google::protobuf::uint8* AuguryChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryChat)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string sender = 4;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sender");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryChat)
  return target;
}

int AuguryChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_CHAT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string sender = 4;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryChat::MergeFrom(const AuguryChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryChat::CopyFrom(const AuguryChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryChat::IsInitialized() const {

  return true;
}

void AuguryChat::Swap(AuguryChat* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(content_, other->content_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryChat_descriptor_;
  metadata.reflection = AuguryChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryTitle::kCmdFieldNumber;
const int AuguryTitle::kParamFieldNumber;
const int AuguryTitle::kTitleidFieldNumber;
const int AuguryTitle::kTypeFieldNumber;
const int AuguryTitle::kSubtableidFieldNumber;
#endif  // !_MSC_VER

AuguryTitle::AuguryTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryTitle)
}

void AuguryTitle::InitAsDefaultInstance() {
}

AuguryTitle::AuguryTitle(const AuguryTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryTitle)
}

void AuguryTitle::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 4;
  titleid_ = 0u;
  type_ = 1;
  subtableid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryTitle::~AuguryTitle() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryTitle)
  SharedDtor();
}

void AuguryTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuguryTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryTitle_descriptor_;
}

const AuguryTitle& AuguryTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryTitle* AuguryTitle::default_instance_ = NULL;

AuguryTitle* AuguryTitle::New() const {
  return new AuguryTitle;
}

void AuguryTitle::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 27;
    param_ = 4;
    titleid_ = 0u;
    type_ = 1;
    subtableid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryTitle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_titleid;
        break;
      }

      // optional uint32 titleid = 3;
      case 3: {
        if (tag == 24) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .Cmd.EAuguryType type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EAuguryType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EAuguryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_subtableid;
        break;
      }

      // optional uint32 subtableid = 5;
      case 5: {
        if (tag == 40) {
         parse_subtableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subtableid_)));
          set_has_subtableid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryTitle)
  return false;
#undef DO_
}

void AuguryTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryTitle)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 titleid = 3;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->titleid(), output);
  }

  // optional .Cmd.EAuguryType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional uint32 subtableid = 5;
  if (has_subtableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subtableid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryTitle)
}

::google::protobuf::uint8* AuguryTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryTitle)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 titleid = 3;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->titleid(), target);
  }

  // optional .Cmd.EAuguryType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional uint32 subtableid = 5;
  if (has_subtableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subtableid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryTitle)
  return target;
}

int AuguryTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_TITLE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 titleid = 3;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

    // optional .Cmd.EAuguryType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 subtableid = 5;
    if (has_subtableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subtableid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryTitle::MergeFrom(const AuguryTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_subtableid()) {
      set_subtableid(from.subtableid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryTitle::CopyFrom(const AuguryTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryTitle::IsInitialized() const {

  return true;
}

void AuguryTitle::Swap(AuguryTitle* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(titleid_, other->titleid_);
    std::swap(type_, other->type_);
    std::swap(subtableid_, other->subtableid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryTitle_descriptor_;
  metadata.reflection = AuguryTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryAnswer::kCmdFieldNumber;
const int AuguryAnswer::kParamFieldNumber;
const int AuguryAnswer::kTitleidFieldNumber;
const int AuguryAnswer::kAnswerFieldNumber;
const int AuguryAnswer::kAnsweridFieldNumber;
#endif  // !_MSC_VER

AuguryAnswer::AuguryAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryAnswer)
}

void AuguryAnswer::InitAsDefaultInstance() {
}

AuguryAnswer::AuguryAnswer(const AuguryAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryAnswer)
}

void AuguryAnswer::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 5;
  titleid_ = 0u;
  answer_ = 0u;
  answerid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryAnswer::~AuguryAnswer() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryAnswer)
  SharedDtor();
}

void AuguryAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuguryAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryAnswer_descriptor_;
}

const AuguryAnswer& AuguryAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryAnswer* AuguryAnswer::default_instance_ = NULL;

AuguryAnswer* AuguryAnswer::New() const {
  return new AuguryAnswer;
}

void AuguryAnswer::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuguryAnswer*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(titleid_, answerid_);
    cmd_ = 27;
    param_ = 5;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryAnswer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_titleid;
        break;
      }

      // optional uint32 titleid = 3;
      case 3: {
        if (tag == 24) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_answer;
        break;
      }

      // optional uint32 answer = 4;
      case 4: {
        if (tag == 32) {
         parse_answer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_)));
          set_has_answer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_answerid;
        break;
      }

      // optional uint64 answerid = 5;
      case 5: {
        if (tag == 40) {
         parse_answerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &answerid_)));
          set_has_answerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryAnswer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryAnswer)
  return false;
#undef DO_
}

void AuguryAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryAnswer)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 titleid = 3;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->titleid(), output);
  }

  // optional uint32 answer = 4;
  if (has_answer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->answer(), output);
  }

  // optional uint64 answerid = 5;
  if (has_answerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->answerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryAnswer)
}

::google::protobuf::uint8* AuguryAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryAnswer)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 titleid = 3;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->titleid(), target);
  }

  // optional uint32 answer = 4;
  if (has_answer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->answer(), target);
  }

  // optional uint64 answerid = 5;
  if (has_answerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->answerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryAnswer)
  return target;
}

int AuguryAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_ANSWER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 titleid = 3;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

    // optional uint32 answer = 4;
    if (has_answer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer());
    }

    // optional uint64 answerid = 5;
    if (has_answerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->answerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryAnswer::MergeFrom(const AuguryAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_answer()) {
      set_answer(from.answer());
    }
    if (from.has_answerid()) {
      set_answerid(from.answerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryAnswer::CopyFrom(const AuguryAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryAnswer::IsInitialized() const {

  return true;
}

void AuguryAnswer::Swap(AuguryAnswer* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(titleid_, other->titleid_);
    std::swap(answer_, other->answer_);
    std::swap(answerid_, other->answerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryAnswer_descriptor_;
  metadata.reflection = AuguryAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuguryQuit::kCmdFieldNumber;
const int AuguryQuit::kParamFieldNumber;
#endif  // !_MSC_VER

AuguryQuit::AuguryQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuguryQuit)
}

void AuguryQuit::InitAsDefaultInstance() {
}

AuguryQuit::AuguryQuit(const AuguryQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuguryQuit)
}

void AuguryQuit::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 27;
  param_ = 6;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuguryQuit::~AuguryQuit() {
  // @@protoc_insertion_point(destructor:Cmd.AuguryQuit)
  SharedDtor();
}

void AuguryQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuguryQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuguryQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuguryQuit_descriptor_;
}

const AuguryQuit& AuguryQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneAugury_2eproto();
  return *default_instance_;
}

AuguryQuit* AuguryQuit::default_instance_ = NULL;

AuguryQuit* AuguryQuit::New() const {
  return new AuguryQuit;
}

void AuguryQuit::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 27;
    param_ = 6;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuguryQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuguryQuit)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuguryParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuguryParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuguryQuit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuguryQuit)
  return false;
#undef DO_
}

void AuguryQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuguryQuit)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuguryQuit)
}

::google::protobuf::uint8* AuguryQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuguryQuit)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuguryQuit)
  return target;
}

int AuguryQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_AUGURY_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuguryParam param = 2 [default = AUGURYPARAM_QUIT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuguryQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuguryQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuguryQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuguryQuit::MergeFrom(const AuguryQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuguryQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuguryQuit::CopyFrom(const AuguryQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuguryQuit::IsInitialized() const {

  return true;
}

void AuguryQuit::Swap(AuguryQuit* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuguryQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuguryQuit_descriptor_;
  metadata.reflection = AuguryQuit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
