// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneChatRoom.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneChatRoom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ChatRoomMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickChatMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickChatMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeRoomOwner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeRoomOwner_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomMemberUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomMemberUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterChatRoom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterChatRoom_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomSummary_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomDataSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomDataSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatRoomTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatRoomTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatRoomParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatRoomJob_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatRoomType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatRoomSync_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EChatRoomTip_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneChatRoom_2eproto() {
  protobuf_AddDesc_SceneChatRoom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneChatRoom.proto");
  GOOGLE_CHECK(file != NULL);
  ChatRoomMember_descriptor_ = file->message_type(0);
  static const int ChatRoomMember_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, body_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, hair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, haircolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, portrait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, eye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, rolejob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, blink_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, guildname_),
  };
  ChatRoomMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomMember_descriptor_,
      ChatRoomMember::default_instance_,
      ChatRoomMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomMember));
  ChatRoomData_descriptor_ = file->message_type(1);
  static const int ChatRoomData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, pswd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, members_),
  };
  ChatRoomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomData_descriptor_,
      ChatRoomData::default_instance_,
      ChatRoomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomData));
  CreateChatRoom_descriptor_ = file->message_type(2);
  static const int CreateChatRoom_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, roomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, pswd_),
  };
  CreateChatRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateChatRoom_descriptor_,
      CreateChatRoom::default_instance_,
      CreateChatRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateChatRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateChatRoom));
  JoinChatRoom_descriptor_ = file->message_type(3);
  static const int JoinChatRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, pswd_),
  };
  JoinChatRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinChatRoom_descriptor_,
      JoinChatRoom::default_instance_,
      JoinChatRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinChatRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinChatRoom));
  ExitChatRoom_descriptor_ = file->message_type(4);
  static const int ExitChatRoom_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, userid_),
  };
  ExitChatRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitChatRoom_descriptor_,
      ExitChatRoom::default_instance_,
      ExitChatRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitChatRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitChatRoom));
  KickChatMember_descriptor_ = file->message_type(5);
  static const int KickChatMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, memberid_),
  };
  KickChatMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickChatMember_descriptor_,
      KickChatMember::default_instance_,
      KickChatMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickChatMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickChatMember));
  ExchangeRoomOwner_descriptor_ = file->message_type(6);
  static const int ExchangeRoomOwner_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRoomOwner, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRoomOwner, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRoomOwner, userid_),
  };
  ExchangeRoomOwner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeRoomOwner_descriptor_,
      ExchangeRoomOwner::default_instance_,
      ExchangeRoomOwner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRoomOwner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRoomOwner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeRoomOwner));
  RoomMemberUpdate_descriptor_ = file->message_type(7);
  static const int RoomMemberUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, deletes_),
  };
  RoomMemberUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomMemberUpdate_descriptor_,
      RoomMemberUpdate::default_instance_,
      RoomMemberUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomMemberUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomMemberUpdate));
  EnterChatRoom_descriptor_ = file->message_type(8);
  static const int EnterChatRoom_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, data_),
  };
  EnterChatRoom_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterChatRoom_descriptor_,
      EnterChatRoom::default_instance_,
      EnterChatRoom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterChatRoom, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterChatRoom));
  ChatRoomSummary_descriptor_ = file->message_type(9);
  static const int ChatRoomSummary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, ownerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, roomtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, curnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, pswd_),
  };
  ChatRoomSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomSummary_descriptor_,
      ChatRoomSummary::default_instance_,
      ChatRoomSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomSummary));
  ChatRoomDataSync_descriptor_ = file->message_type(10);
  static const int ChatRoomDataSync_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, esync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, data_),
  };
  ChatRoomDataSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomDataSync_descriptor_,
      ChatRoomDataSync::default_instance_,
      ChatRoomDataSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomDataSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomDataSync));
  ChatRoomTip_descriptor_ = file->message_type(11);
  static const int ChatRoomTip_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, name_),
  };
  ChatRoomTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatRoomTip_descriptor_,
      ChatRoomTip::default_instance_,
      ChatRoomTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatRoomTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatRoomTip));
  EChatRoomParam_descriptor_ = file->enum_type(0);
  EChatRoomJob_descriptor_ = file->enum_type(1);
  EChatRoomType_descriptor_ = file->enum_type(2);
  EChatRoomSync_descriptor_ = file->enum_type(3);
  EChatRoomTip_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneChatRoom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomMember_descriptor_, &ChatRoomMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomData_descriptor_, &ChatRoomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateChatRoom_descriptor_, &CreateChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinChatRoom_descriptor_, &JoinChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitChatRoom_descriptor_, &ExitChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickChatMember_descriptor_, &KickChatMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeRoomOwner_descriptor_, &ExchangeRoomOwner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomMemberUpdate_descriptor_, &RoomMemberUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterChatRoom_descriptor_, &EnterChatRoom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomSummary_descriptor_, &ChatRoomSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomDataSync_descriptor_, &ChatRoomDataSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatRoomTip_descriptor_, &ChatRoomTip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneChatRoom_2eproto() {
  delete ChatRoomMember::default_instance_;
  delete ChatRoomMember_reflection_;
  delete ChatRoomData::default_instance_;
  delete ChatRoomData_reflection_;
  delete CreateChatRoom::default_instance_;
  delete CreateChatRoom_reflection_;
  delete JoinChatRoom::default_instance_;
  delete JoinChatRoom_reflection_;
  delete ExitChatRoom::default_instance_;
  delete ExitChatRoom_reflection_;
  delete KickChatMember::default_instance_;
  delete KickChatMember_reflection_;
  delete ExchangeRoomOwner::default_instance_;
  delete ExchangeRoomOwner_reflection_;
  delete RoomMemberUpdate::default_instance_;
  delete RoomMemberUpdate_reflection_;
  delete EnterChatRoom::default_instance_;
  delete EnterChatRoom_reflection_;
  delete ChatRoomSummary::default_instance_;
  delete ChatRoomSummary_reflection_;
  delete ChatRoomDataSync::default_instance_;
  delete ChatRoomDataSync_reflection_;
  delete ChatRoomTip::default_instance_;
  delete ChatRoomTip_reflection_;
}

void protobuf_AddDesc_SceneChatRoom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SceneChatRoom.proto\022\003Cmd\032\nxCmd.proto\032\021"
    "ProtoCommon.proto\"\326\002\n\016ChatRoomMember\022\r\n\002"
    "id\030\001 \001(\004:\0010\022\020\n\005level\030\002 \001(\r:\0010\022\017\n\004body\030\003 "
    "\001(\r:\0010\022\017\n\004hair\030\004 \001(\r:\0010\022\024\n\thaircolor\030\005 \001"
    "(\r:\0010\022\023\n\010portrait\030\014 \001(\r:\0010\022\016\n\003eye\030\r \001(\r:"
    "\0010\022)\n\006gender\030\006 \001(\0162\014.Cmd.EGender:\013EGENDE"
    "R_MIN\0222\n\007rolejob\030\007 \001(\0162\020.Cmd.EProfession"
    ":\017EPROFESSION_MIN\0220\n\003job\030\010 \001(\0162\021.Cmd.ECh"
    "atRoomJob:\020ECHATROOM_MEMBER\022\024\n\005blink\030\t \001"
    "(\010:\005false\022\014\n\004name\030\n \001(\t\022\021\n\tguildname\030\013 \001"
    "(\t\"\306\001\n\014ChatRoomData\022\021\n\006roomid\030\001 \001(\r:\0010\022\014"
    "\n\004name\030\002 \001(\t\022\014\n\004pswd\030\003 \001(\t\022\022\n\007ownerid\030\004 "
    "\001(\004:\0010\022\021\n\006maxnum\030\005 \001(\r:\0012\022:\n\010roomtype\030\006 "
    "\001(\0162\022.Cmd.EChatRoomType:\024ECHATROOMTYPE_P"
    "UBLIC\022$\n\007members\030\007 \003(\0132\023.Cmd.ChatRoomMem"
    "ber\"\267\001\n\016CreateChatRoom\0227\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\034SCENE_USER_CHATROOM_PROTOCMD\022"
    "9\n\005param\030\002 \001(\0162\023.Cmd.EChatRoomParam:\025ECH"
    "ATROOMPARAM_CREATE\022\020\n\010roomname\030\003 \001(\t\022\021\n\006"
    "maxnum\030\004 \001(\r:\0012\022\014\n\004pswd\030\005 \001(\t\"\241\001\n\014JoinCh"
    "atRoom\0227\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\034SCENE"
    "_USER_CHATROOM_PROTOCMD\0227\n\005param\030\002 \001(\0162\023"
    ".Cmd.EChatRoomParam:\023ECHATROOMPARAM_JOIN"
    "\022\021\n\006roomid\030\003 \001(\004:\0010\022\014\n\004pswd\030\004 \001(\t\"\246\001\n\014Ex"
    "itChatRoom\0227\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\034S"
    "CENE_USER_CHATROOM_PROTOCMD\0227\n\005param\030\002 \001"
    "(\0162\023.Cmd.EChatRoomParam:\023ECHATROOMPARAM_"
    "EXIT\022\021\n\006roomid\030\003 \001(\004:\0010\022\021\n\006userid\030\004 \001(\004:"
    "\0010\"\260\001\n\016KickChatMember\0227\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\034SCENE_USER_CHATROOM_PROTOCMD\022="
    "\n\005param\030\002 \001(\0162\023.Cmd.EChatRoomParam:\031ECHA"
    "TROOMPARAM_KICKMEMBER\022\021\n\006roomid\030\003 \001(\004:\0010"
    "\022\023\n\010memberid\030\004 \001(\004:\0010\"\237\001\n\021ExchangeRoomOw"
    "ner\0227\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\034SCENE_US"
    "ER_CHATROOM_PROTOCMD\022>\n\005param\030\002 \001(\0162\023.Cm"
    "d.EChatRoomParam:\032ECHATROOMPARAM_CHANGEO"
    "WNER\022\021\n\006userid\030\003 \001(\004:\0010\"\303\001\n\020RoomMemberUp"
    "date\0227\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\034SCENE_U"
    "SER_CHATROOM_PROTOCMD\022\?\n\005param\030\002 \001(\0162\023.C"
    "md.EChatRoomParam:\033ECHATROOMPARAM_MEMBER"
    "UPDATE\022$\n\007updates\030\003 \003(\0132\023.Cmd.ChatRoomMe"
    "mber\022\017\n\007deletes\030\004 \003(\004\"\247\001\n\rEnterChatRoom\022"
    "7\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\034SCENE_USER_C"
    "HATROOM_PROTOCMD\022<\n\005param\030\002 \001(\0162\023.Cmd.EC"
    "hatRoomParam:\030ECHATROOMPARAM_ENTERROOM\022\037"
    "\n\004data\030\003 \001(\0132\021.Cmd.ChatRoomData\"\266\001\n\017Chat"
    "RoomSummary\022\022\n\007ownerid\030\001 \001(\004:\0010\022\021\n\006roomi"
    "d\030\002 \001(\r:\0010\022\014\n\004name\030\003 \001(\t\022:\n\010roomtype\030\004 \001"
    "(\0162\022.Cmd.EChatRoomType:\024ECHATROOMTYPE_PU"
    "BLIC\022\021\n\006maxnum\030\005 \001(\r:\0010\022\021\n\006curnum\030\006 \001(\r:"
    "\0010\022\014\n\004pswd\030\007 \001(\t\"\351\001\n\020ChatRoomDataSync\0227\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\034SCENE_USER_CHA"
    "TROOM_PROTOCMD\022\?\n\005param\030\002 \001(\0162\023.Cmd.ECha"
    "tRoomParam:\033ECHATROOMPARAM_ROOMDATASYNC\022"
    "7\n\005esync\030\003 \001(\0162\022.Cmd.EChatRoomSync:\024ECHA"
    "TROOMSYNC_UPDATE\022\"\n\004data\030\004 \001(\0132\024.Cmd.Cha"
    "tRoomSummary\"\326\001\n\013ChatRoomTip\0227\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\034SCENE_USER_CHATROOM_PRO"
    "TOCMD\022:\n\005param\030\002 \001(\0162\023.Cmd.EChatRoomPara"
    "m:\026ECHATROOMPARAM_ROOMTIP\0221\n\003tip\030\003 \001(\0162\021"
    ".Cmd.EChatRoomTip:\021ECHATROOMTIP_JOIN\022\021\n\006"
    "userid\030\004 \001(\004:\0010\022\014\n\004name\030\005 \001(\t*\230\002\n\016EChatR"
    "oomParam\022\031\n\025ECHATROOMPARAM_CREATE\020\001\022\027\n\023E"
    "CHATROOMPARAM_JOIN\020\002\022\027\n\023ECHATROOMPARAM_E"
    "XIT\020\003\022\035\n\031ECHATROOMPARAM_KICKMEMBER\020\004\022\036\n\032"
    "ECHATROOMPARAM_CHANGEOWNER\020\005\022\034\n\030ECHATROO"
    "MPARAM_ENTERROOM\020\006\022\037\n\033ECHATROOMPARAM_MEM"
    "BERUPDATE\020\007\022\037\n\033ECHATROOMPARAM_ROOMDATASY"
    "NC\020\010\022\032\n\026ECHATROOMPARAM_ROOMTIP\020\t*9\n\014ECha"
    "tRoomJob\022\023\n\017ECHATROOM_OWNER\020\001\022\024\n\020ECHATRO"
    "OM_MEMBER\020\002*D\n\rEChatRoomType\022\030\n\024ECHATROO"
    "MTYPE_PUBLIC\020\001\022\031\n\025ECHATROOMTYPE_PRIVATE\020"
    "\002*C\n\rEChatRoomSync\022\030\n\024ECHATROOMSYNC_UPDA"
    "TE\020\001\022\030\n\024ECHATROOMSYNC_REMOVE\020\002*q\n\014EChatR"
    "oomTip\022\025\n\021ECHATROOMTIP_JOIN\020\001\022\025\n\021ECHATRO"
    "OMTIP_EXIT\020\002\022\025\n\021ECHATROOMTIP_KICK\020\003\022\034\n\030E"
    "CHATROOMTIP_OWNERCHANGE\020\004", 3065);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneChatRoom.proto", &protobuf_RegisterTypes);
  ChatRoomMember::default_instance_ = new ChatRoomMember();
  ChatRoomData::default_instance_ = new ChatRoomData();
  CreateChatRoom::default_instance_ = new CreateChatRoom();
  JoinChatRoom::default_instance_ = new JoinChatRoom();
  ExitChatRoom::default_instance_ = new ExitChatRoom();
  KickChatMember::default_instance_ = new KickChatMember();
  ExchangeRoomOwner::default_instance_ = new ExchangeRoomOwner();
  RoomMemberUpdate::default_instance_ = new RoomMemberUpdate();
  EnterChatRoom::default_instance_ = new EnterChatRoom();
  ChatRoomSummary::default_instance_ = new ChatRoomSummary();
  ChatRoomDataSync::default_instance_ = new ChatRoomDataSync();
  ChatRoomTip::default_instance_ = new ChatRoomTip();
  ChatRoomMember::default_instance_->InitAsDefaultInstance();
  ChatRoomData::default_instance_->InitAsDefaultInstance();
  CreateChatRoom::default_instance_->InitAsDefaultInstance();
  JoinChatRoom::default_instance_->InitAsDefaultInstance();
  ExitChatRoom::default_instance_->InitAsDefaultInstance();
  KickChatMember::default_instance_->InitAsDefaultInstance();
  ExchangeRoomOwner::default_instance_->InitAsDefaultInstance();
  RoomMemberUpdate::default_instance_->InitAsDefaultInstance();
  EnterChatRoom::default_instance_->InitAsDefaultInstance();
  ChatRoomSummary::default_instance_->InitAsDefaultInstance();
  ChatRoomDataSync::default_instance_->InitAsDefaultInstance();
  ChatRoomTip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneChatRoom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneChatRoom_2eproto {
  StaticDescriptorInitializer_SceneChatRoom_2eproto() {
    protobuf_AddDesc_SceneChatRoom_2eproto();
  }
} static_descriptor_initializer_SceneChatRoom_2eproto_;
const ::google::protobuf::EnumDescriptor* EChatRoomParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatRoomParam_descriptor_;
}
bool EChatRoomParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomJob_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatRoomJob_descriptor_;
}
bool EChatRoomJob_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatRoomType_descriptor_;
}
bool EChatRoomType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomSync_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatRoomSync_descriptor_;
}
bool EChatRoomSync_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EChatRoomTip_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EChatRoomTip_descriptor_;
}
bool EChatRoomTip_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomMember::kIdFieldNumber;
const int ChatRoomMember::kLevelFieldNumber;
const int ChatRoomMember::kBodyFieldNumber;
const int ChatRoomMember::kHairFieldNumber;
const int ChatRoomMember::kHaircolorFieldNumber;
const int ChatRoomMember::kPortraitFieldNumber;
const int ChatRoomMember::kEyeFieldNumber;
const int ChatRoomMember::kGenderFieldNumber;
const int ChatRoomMember::kRolejobFieldNumber;
const int ChatRoomMember::kJobFieldNumber;
const int ChatRoomMember::kBlinkFieldNumber;
const int ChatRoomMember::kNameFieldNumber;
const int ChatRoomMember::kGuildnameFieldNumber;
#endif  // !_MSC_VER

ChatRoomMember::ChatRoomMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRoomMember)
}

void ChatRoomMember::InitAsDefaultInstance() {
}

ChatRoomMember::ChatRoomMember(const ChatRoomMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRoomMember)
}

void ChatRoomMember::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  body_ = 0u;
  hair_ = 0u;
  haircolor_ = 0u;
  portrait_ = 0u;
  eye_ = 0u;
  gender_ = 0;
  rolejob_ = 0;
  job_ = 2;
  blink_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomMember::~ChatRoomMember() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRoomMember)
  SharedDtor();
}

void ChatRoomMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomMember_descriptor_;
}

const ChatRoomMember& ChatRoomMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ChatRoomMember* ChatRoomMember::default_instance_ = NULL;

ChatRoomMember* ChatRoomMember::New() const {
  return new ChatRoomMember;
}

void ChatRoomMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, gender_);
  }
  if (_has_bits_[8 / 32] & 7936) {
    rolejob_ = 0;
    job_ = 2;
    blink_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRoomMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_body;
        break;
      }

      // optional uint32 body = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_body:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &body_)));
          set_has_body();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hair;
        break;
      }

      // optional uint32 hair = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_hair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hair_)));
          set_has_hair();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_haircolor;
        break;
      }

      // optional uint32 haircolor = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_haircolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haircolor_)));
          set_has_haircolor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_gender;
        break;
      }

      // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
      case 6: {
        if (tag == 48) {
         parse_gender:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGender_IsValid(value)) {
            set_gender(static_cast< ::Cmd::EGender >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_rolejob;
        break;
      }

      // optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
      case 7: {
        if (tag == 56) {
         parse_rolejob:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_rolejob(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_job;
        break;
      }

      // optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
      case 8: {
        if (tag == 64) {
         parse_job:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomJob_IsValid(value)) {
            set_job(static_cast< ::Cmd::EChatRoomJob >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_blink;
        break;
      }

      // optional bool blink = 9 [default = false];
      case 9: {
        if (tag == 72) {
         parse_blink:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blink_)));
          set_has_blink();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_name;
        break;
      }

      // optional string name = 10;
      case 10: {
        if (tag == 82) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_guildname;
        break;
      }

      // optional string guildname = 11;
      case 11: {
        if (tag == 90) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_portrait;
        break;
      }

      // optional uint32 portrait = 12 [default = 0];
      case 12: {
        if (tag == 96) {
         parse_portrait:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &portrait_)));
          set_has_portrait();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_eye;
        break;
      }

      // optional uint32 eye = 13 [default = 0];
      case 13: {
        if (tag == 104) {
         parse_eye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eye_)));
          set_has_eye();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRoomMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRoomMember)
  return false;
#undef DO_
}

void ChatRoomMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRoomMember)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 body = 3 [default = 0];
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->body(), output);
  }

  // optional uint32 hair = 4 [default = 0];
  if (has_hair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->hair(), output);
  }

  // optional uint32 haircolor = 5 [default = 0];
  if (has_haircolor()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->haircolor(), output);
  }

  // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->gender(), output);
  }

  // optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
  if (has_rolejob()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->rolejob(), output);
  }

  // optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->job(), output);
  }

  // optional bool blink = 9 [default = false];
  if (has_blink()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->blink(), output);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->name(), output);
  }

  // optional string guildname = 11;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->guildname(), output);
  }

  // optional uint32 portrait = 12 [default = 0];
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->portrait(), output);
  }

  // optional uint32 eye = 13 [default = 0];
  if (has_eye()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->eye(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRoomMember)
}

::google::protobuf::uint8* ChatRoomMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRoomMember)
  // optional uint64 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 body = 3 [default = 0];
  if (has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->body(), target);
  }

  // optional uint32 hair = 4 [default = 0];
  if (has_hair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->hair(), target);
  }

  // optional uint32 haircolor = 5 [default = 0];
  if (has_haircolor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->haircolor(), target);
  }

  // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->gender(), target);
  }

  // optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
  if (has_rolejob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->rolejob(), target);
  }

  // optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->job(), target);
  }

  // optional bool blink = 9 [default = false];
  if (has_blink()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->blink(), target);
  }

  // optional string name = 10;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->name(), target);
  }

  // optional string guildname = 11;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->guildname(), target);
  }

  // optional uint32 portrait = 12 [default = 0];
  if (has_portrait()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->portrait(), target);
  }

  // optional uint32 eye = 13 [default = 0];
  if (has_eye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->eye(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRoomMember)
  return target;
}

int ChatRoomMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 body = 3 [default = 0];
    if (has_body()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->body());
    }

    // optional uint32 hair = 4 [default = 0];
    if (has_hair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hair());
    }

    // optional uint32 haircolor = 5 [default = 0];
    if (has_haircolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haircolor());
    }

    // optional uint32 portrait = 12 [default = 0];
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->portrait());
    }

    // optional uint32 eye = 13 [default = 0];
    if (has_eye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eye());
    }

    // optional .Cmd.EGender gender = 6 [default = EGENDER_MIN];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gender());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.EProfession rolejob = 7 [default = EPROFESSION_MIN];
    if (has_rolejob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolejob());
    }

    // optional .Cmd.EChatRoomJob job = 8 [default = ECHATROOM_MEMBER];
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->job());
    }

    // optional bool blink = 9 [default = false];
    if (has_blink()) {
      total_size += 1 + 1;
    }

    // optional string name = 10;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string guildname = 11;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomMember::MergeFrom(const ChatRoomMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_body()) {
      set_body(from.body());
    }
    if (from.has_hair()) {
      set_hair(from.hair());
    }
    if (from.has_haircolor()) {
      set_haircolor(from.haircolor());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
    if (from.has_eye()) {
      set_eye(from.eye());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rolejob()) {
      set_rolejob(from.rolejob());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_blink()) {
      set_blink(from.blink());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomMember::CopyFrom(const ChatRoomMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomMember::IsInitialized() const {

  return true;
}

void ChatRoomMember::Swap(ChatRoomMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(body_, other->body_);
    std::swap(hair_, other->hair_);
    std::swap(haircolor_, other->haircolor_);
    std::swap(portrait_, other->portrait_);
    std::swap(eye_, other->eye_);
    std::swap(gender_, other->gender_);
    std::swap(rolejob_, other->rolejob_);
    std::swap(job_, other->job_);
    std::swap(blink_, other->blink_);
    std::swap(name_, other->name_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomMember_descriptor_;
  metadata.reflection = ChatRoomMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomData::kRoomidFieldNumber;
const int ChatRoomData::kNameFieldNumber;
const int ChatRoomData::kPswdFieldNumber;
const int ChatRoomData::kOwneridFieldNumber;
const int ChatRoomData::kMaxnumFieldNumber;
const int ChatRoomData::kRoomtypeFieldNumber;
const int ChatRoomData::kMembersFieldNumber;
#endif  // !_MSC_VER

ChatRoomData::ChatRoomData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRoomData)
}

void ChatRoomData::InitAsDefaultInstance() {
}

ChatRoomData::ChatRoomData(const ChatRoomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRoomData)
}

void ChatRoomData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  roomid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ownerid_ = GOOGLE_ULONGLONG(0);
  maxnum_ = 2u;
  roomtype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomData::~ChatRoomData() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRoomData)
  SharedDtor();
}

void ChatRoomData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomData_descriptor_;
}

const ChatRoomData& ChatRoomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ChatRoomData* ChatRoomData::default_instance_ = NULL;

ChatRoomData* ChatRoomData::New() const {
  return new ChatRoomData;
}

void ChatRoomData::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    roomid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pswd_->clear();
      }
    }
    ownerid_ = GOOGLE_ULONGLONG(0);
    maxnum_ = 2u;
    roomtype_ = 1;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRoomData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 roomid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pswd;
        break;
      }

      // optional string pswd = 3;
      case 3: {
        if (tag == 26) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ownerid;
        break;
      }

      // optional uint64 ownerid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_ownerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxnum;
        break;
      }

      // optional uint32 maxnum = 5 [default = 2];
      case 5: {
        if (tag == 40) {
         parse_maxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_roomtype;
        break;
      }

      // optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
      case 6: {
        if (tag == 48) {
         parse_roomtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::Cmd::EChatRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        break;
      }

      // repeated .Cmd.ChatRoomMember members = 7;
      case 7: {
        if (tag == 58) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_members;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRoomData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRoomData)
  return false;
#undef DO_
}

void ChatRoomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRoomData)
  // optional uint32 roomid = 1 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->pswd(), output);
  }

  // optional uint64 ownerid = 4 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ownerid(), output);
  }

  // optional uint32 maxnum = 5 [default = 2];
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxnum(), output);
  }

  // optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->roomtype(), output);
  }

  // repeated .Cmd.ChatRoomMember members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRoomData)
}

::google::protobuf::uint8* ChatRoomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRoomData)
  // optional uint32 roomid = 1 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string pswd = 3;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->pswd(), target);
  }

  // optional uint64 ownerid = 4 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ownerid(), target);
  }

  // optional uint32 maxnum = 5 [default = 2];
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxnum(), target);
  }

  // optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->roomtype(), target);
  }

  // repeated .Cmd.ChatRoomMember members = 7;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRoomData)
  return target;
}

int ChatRoomData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 roomid = 1 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string pswd = 3;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

    // optional uint64 ownerid = 4 [default = 0];
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint32 maxnum = 5 [default = 2];
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // optional .Cmd.EChatRoomType roomtype = 6 [default = ECHATROOMTYPE_PUBLIC];
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

  }
  // repeated .Cmd.ChatRoomMember members = 7;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomData::MergeFrom(const ChatRoomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomData::CopyFrom(const ChatRoomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomData::IsInitialized() const {

  return true;
}

void ChatRoomData::Swap(ChatRoomData* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    std::swap(pswd_, other->pswd_);
    std::swap(ownerid_, other->ownerid_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(roomtype_, other->roomtype_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomData_descriptor_;
  metadata.reflection = ChatRoomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateChatRoom::kCmdFieldNumber;
const int CreateChatRoom::kParamFieldNumber;
const int CreateChatRoom::kRoomnameFieldNumber;
const int CreateChatRoom::kMaxnumFieldNumber;
const int CreateChatRoom::kPswdFieldNumber;
#endif  // !_MSC_VER

CreateChatRoom::CreateChatRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateChatRoom)
}

void CreateChatRoom::InitAsDefaultInstance() {
}

CreateChatRoom::CreateChatRoom(const CreateChatRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateChatRoom)
}

void CreateChatRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 1;
  roomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  maxnum_ = 2u;
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateChatRoom::~CreateChatRoom() {
  // @@protoc_insertion_point(destructor:Cmd.CreateChatRoom)
  SharedDtor();
}

void CreateChatRoom::SharedDtor() {
  if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete roomname_;
  }
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void CreateChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateChatRoom_descriptor_;
}

const CreateChatRoom& CreateChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

CreateChatRoom* CreateChatRoom::default_instance_ = NULL;

CreateChatRoom* CreateChatRoom::New() const {
  return new CreateChatRoom;
}

void CreateChatRoom::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 19;
    param_ = 1;
    if (has_roomname()) {
      if (roomname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        roomname_->clear();
      }
    }
    maxnum_ = 2u;
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_roomname;
        break;
      }

      // optional string roomname = 3;
      case 3: {
        if (tag == 26) {
         parse_roomname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->roomname().data(), this->roomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roomname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_maxnum;
        break;
      }

      // optional uint32 maxnum = 4 [default = 2];
      case 4: {
        if (tag == 32) {
         parse_maxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_pswd;
        break;
      }

      // optional string pswd = 5;
      case 5: {
        if (tag == 42) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateChatRoom)
  return false;
#undef DO_
}

void CreateChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string roomname = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->roomname(), output);
  }

  // optional uint32 maxnum = 4 [default = 2];
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxnum(), output);
  }

  // optional string pswd = 5;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateChatRoom)
}

::google::protobuf::uint8* CreateChatRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string roomname = 3;
  if (has_roomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->roomname().data(), this->roomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roomname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->roomname(), target);
  }

  // optional uint32 maxnum = 4 [default = 2];
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxnum(), target);
  }

  // optional string pswd = 5;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateChatRoom)
  return target;
}

int CreateChatRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CREATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string roomname = 3;
    if (has_roomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roomname());
    }

    // optional uint32 maxnum = 4 [default = 2];
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // optional string pswd = 5;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateChatRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateChatRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateChatRoom::MergeFrom(const CreateChatRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomname()) {
      set_roomname(from.roomname());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateChatRoom::CopyFrom(const CreateChatRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateChatRoom::IsInitialized() const {

  return true;
}

void CreateChatRoom::Swap(CreateChatRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomname_, other->roomname_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateChatRoom_descriptor_;
  metadata.reflection = CreateChatRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinChatRoom::kCmdFieldNumber;
const int JoinChatRoom::kParamFieldNumber;
const int JoinChatRoom::kRoomidFieldNumber;
const int JoinChatRoom::kPswdFieldNumber;
#endif  // !_MSC_VER

JoinChatRoom::JoinChatRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.JoinChatRoom)
}

void JoinChatRoom::InitAsDefaultInstance() {
}

JoinChatRoom::JoinChatRoom(const JoinChatRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.JoinChatRoom)
}

void JoinChatRoom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 2;
  roomid_ = GOOGLE_ULONGLONG(0);
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinChatRoom::~JoinChatRoom() {
  // @@protoc_insertion_point(destructor:Cmd.JoinChatRoom)
  SharedDtor();
}

void JoinChatRoom::SharedDtor() {
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void JoinChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinChatRoom_descriptor_;
}

const JoinChatRoom& JoinChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

JoinChatRoom* JoinChatRoom::default_instance_ = NULL;

JoinChatRoom* JoinChatRoom::New() const {
  return new JoinChatRoom;
}

void JoinChatRoom::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 19;
    param_ = 2;
    roomid_ = GOOGLE_ULONGLONG(0);
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pswd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.JoinChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_pswd;
        break;
      }

      // optional string pswd = 4;
      case 4: {
        if (tag == 34) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.JoinChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.JoinChatRoom)
  return false;
#undef DO_
}

void JoinChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.JoinChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional string pswd = 4;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->pswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.JoinChatRoom)
}

::google::protobuf::uint8* JoinChatRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.JoinChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional string pswd = 4;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.JoinChatRoom)
  return target;
}

int JoinChatRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_JOIN];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional string pswd = 4;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinChatRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinChatRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinChatRoom::MergeFrom(const JoinChatRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinChatRoom::CopyFrom(const JoinChatRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinChatRoom::IsInitialized() const {

  return true;
}

void JoinChatRoom::Swap(JoinChatRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinChatRoom_descriptor_;
  metadata.reflection = JoinChatRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExitChatRoom::kCmdFieldNumber;
const int ExitChatRoom::kParamFieldNumber;
const int ExitChatRoom::kRoomidFieldNumber;
const int ExitChatRoom::kUseridFieldNumber;
#endif  // !_MSC_VER

ExitChatRoom::ExitChatRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExitChatRoom)
}

void ExitChatRoom::InitAsDefaultInstance() {
}

ExitChatRoom::ExitChatRoom(const ExitChatRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExitChatRoom)
}

void ExitChatRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 3;
  roomid_ = GOOGLE_ULONGLONG(0);
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitChatRoom::~ExitChatRoom() {
  // @@protoc_insertion_point(destructor:Cmd.ExitChatRoom)
  SharedDtor();
}

void ExitChatRoom::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitChatRoom_descriptor_;
}

const ExitChatRoom& ExitChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ExitChatRoom* ExitChatRoom::default_instance_ = NULL;

ExitChatRoom* ExitChatRoom::New() const {
  return new ExitChatRoom;
}

void ExitChatRoom::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ExitChatRoom*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, userid_);
    cmd_ = 19;
    param_ = 3;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExitChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExitChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExitChatRoom)
  return false;
#undef DO_
}

void ExitChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExitChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExitChatRoom)
}

::google::protobuf::uint8* ExitChatRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExitChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExitChatRoom)
  return target;
}

int ExitChatRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_EXIT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitChatRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitChatRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitChatRoom::MergeFrom(const ExitChatRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitChatRoom::CopyFrom(const ExitChatRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitChatRoom::IsInitialized() const {

  return true;
}

void ExitChatRoom::Swap(ExitChatRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitChatRoom_descriptor_;
  metadata.reflection = ExitChatRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickChatMember::kCmdFieldNumber;
const int KickChatMember::kParamFieldNumber;
const int KickChatMember::kRoomidFieldNumber;
const int KickChatMember::kMemberidFieldNumber;
#endif  // !_MSC_VER

KickChatMember::KickChatMember()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickChatMember)
}

void KickChatMember::InitAsDefaultInstance() {
}

KickChatMember::KickChatMember(const KickChatMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickChatMember)
}

void KickChatMember::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 4;
  roomid_ = GOOGLE_ULONGLONG(0);
  memberid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickChatMember::~KickChatMember() {
  // @@protoc_insertion_point(destructor:Cmd.KickChatMember)
  SharedDtor();
}

void KickChatMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickChatMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickChatMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickChatMember_descriptor_;
}

const KickChatMember& KickChatMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

KickChatMember* KickChatMember::default_instance_ = NULL;

KickChatMember* KickChatMember::New() const {
  return new KickChatMember;
}

void KickChatMember::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KickChatMember*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(roomid_, memberid_);
    cmd_ = 19;
    param_ = 4;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickChatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickChatMember)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_roomid;
        break;
      }

      // optional uint64 roomid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_memberid;
        break;
      }

      // optional uint64 memberid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_memberid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &memberid_)));
          set_has_memberid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickChatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickChatMember)
  return false;
#undef DO_
}

void KickChatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickChatMember)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->roomid(), output);
  }

  // optional uint64 memberid = 4 [default = 0];
  if (has_memberid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->memberid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickChatMember)
}

::google::protobuf::uint8* KickChatMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickChatMember)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 roomid = 3 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->roomid(), target);
  }

  // optional uint64 memberid = 4 [default = 0];
  if (has_memberid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->memberid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickChatMember)
  return target;
}

int KickChatMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_KICKMEMBER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 roomid = 3 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roomid());
    }

    // optional uint64 memberid = 4 [default = 0];
    if (has_memberid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->memberid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickChatMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickChatMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickChatMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickChatMember::MergeFrom(const KickChatMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_memberid()) {
      set_memberid(from.memberid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickChatMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickChatMember::CopyFrom(const KickChatMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickChatMember::IsInitialized() const {

  return true;
}

void KickChatMember::Swap(KickChatMember* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(roomid_, other->roomid_);
    std::swap(memberid_, other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickChatMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickChatMember_descriptor_;
  metadata.reflection = KickChatMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRoomOwner::kCmdFieldNumber;
const int ExchangeRoomOwner::kParamFieldNumber;
const int ExchangeRoomOwner::kUseridFieldNumber;
#endif  // !_MSC_VER

ExchangeRoomOwner::ExchangeRoomOwner()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ExchangeRoomOwner)
}

void ExchangeRoomOwner::InitAsDefaultInstance() {
}

ExchangeRoomOwner::ExchangeRoomOwner(const ExchangeRoomOwner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ExchangeRoomOwner)
}

void ExchangeRoomOwner::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 5;
  userid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRoomOwner::~ExchangeRoomOwner() {
  // @@protoc_insertion_point(destructor:Cmd.ExchangeRoomOwner)
  SharedDtor();
}

void ExchangeRoomOwner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExchangeRoomOwner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeRoomOwner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeRoomOwner_descriptor_;
}

const ExchangeRoomOwner& ExchangeRoomOwner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ExchangeRoomOwner* ExchangeRoomOwner::default_instance_ = NULL;

ExchangeRoomOwner* ExchangeRoomOwner::New() const {
  return new ExchangeRoomOwner;
}

void ExchangeRoomOwner::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 19;
    param_ = 5;
    userid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeRoomOwner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ExchangeRoomOwner)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ExchangeRoomOwner)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ExchangeRoomOwner)
  return false;
#undef DO_
}

void ExchangeRoomOwner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ExchangeRoomOwner)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ExchangeRoomOwner)
}

::google::protobuf::uint8* ExchangeRoomOwner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ExchangeRoomOwner)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ExchangeRoomOwner)
  return target;
}

int ExchangeRoomOwner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_CHANGEOWNER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRoomOwner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeRoomOwner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeRoomOwner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeRoomOwner::MergeFrom(const ExchangeRoomOwner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeRoomOwner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRoomOwner::CopyFrom(const ExchangeRoomOwner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRoomOwner::IsInitialized() const {

  return true;
}

void ExchangeRoomOwner::Swap(ExchangeRoomOwner* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeRoomOwner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeRoomOwner_descriptor_;
  metadata.reflection = ExchangeRoomOwner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomMemberUpdate::kCmdFieldNumber;
const int RoomMemberUpdate::kParamFieldNumber;
const int RoomMemberUpdate::kUpdatesFieldNumber;
const int RoomMemberUpdate::kDeletesFieldNumber;
#endif  // !_MSC_VER

RoomMemberUpdate::RoomMemberUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RoomMemberUpdate)
}

void RoomMemberUpdate::InitAsDefaultInstance() {
}

RoomMemberUpdate::RoomMemberUpdate(const RoomMemberUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RoomMemberUpdate)
}

void RoomMemberUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 7;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomMemberUpdate::~RoomMemberUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.RoomMemberUpdate)
  SharedDtor();
}

void RoomMemberUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomMemberUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomMemberUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomMemberUpdate_descriptor_;
}

const RoomMemberUpdate& RoomMemberUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

RoomMemberUpdate* RoomMemberUpdate::default_instance_ = NULL;

RoomMemberUpdate* RoomMemberUpdate::New() const {
  return new RoomMemberUpdate;
}

void RoomMemberUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 19;
    param_ = 7;
  }
  updates_.Clear();
  deletes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomMemberUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RoomMemberUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        break;
      }

      // repeated .Cmd.ChatRoomMember updates = 3;
      case 3: {
        if (tag == 26) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_updates;
        if (input->ExpectTag(32)) goto parse_deletes;
        break;
      }

      // repeated uint64 deletes = 4;
      case 4: {
        if (tag == 32) {
         parse_deletes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_deletes())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_deletes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_deletes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RoomMemberUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RoomMemberUpdate)
  return false;
#undef DO_
}

void RoomMemberUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RoomMemberUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ChatRoomMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->updates(i), output);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->deletes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RoomMemberUpdate)
}

::google::protobuf::uint8* RoomMemberUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RoomMemberUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ChatRoomMember updates = 3;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->updates(i), target);
  }

  // repeated uint64 deletes = 4;
  for (int i = 0; i < this->deletes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->deletes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RoomMemberUpdate)
  return target;
}

int RoomMemberUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_MEMBERUPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ChatRoomMember updates = 3;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 deletes = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->deletes_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->deletes(i));
    }
    total_size += 1 * this->deletes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomMemberUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomMemberUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomMemberUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomMemberUpdate::MergeFrom(const RoomMemberUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  deletes_.MergeFrom(from.deletes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomMemberUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomMemberUpdate::CopyFrom(const RoomMemberUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomMemberUpdate::IsInitialized() const {

  return true;
}

void RoomMemberUpdate::Swap(RoomMemberUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    updates_.Swap(&other->updates_);
    deletes_.Swap(&other->deletes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomMemberUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomMemberUpdate_descriptor_;
  metadata.reflection = RoomMemberUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterChatRoom::kCmdFieldNumber;
const int EnterChatRoom::kParamFieldNumber;
const int EnterChatRoom::kDataFieldNumber;
#endif  // !_MSC_VER

EnterChatRoom::EnterChatRoom()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterChatRoom)
}

void EnterChatRoom::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::ChatRoomData*>(&::Cmd::ChatRoomData::default_instance());
}

EnterChatRoom::EnterChatRoom(const EnterChatRoom& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterChatRoom)
}

void EnterChatRoom::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 6;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterChatRoom::~EnterChatRoom() {
  // @@protoc_insertion_point(destructor:Cmd.EnterChatRoom)
  SharedDtor();
}

void EnterChatRoom::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void EnterChatRoom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterChatRoom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterChatRoom_descriptor_;
}

const EnterChatRoom& EnterChatRoom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

EnterChatRoom* EnterChatRoom::default_instance_ = NULL;

EnterChatRoom* EnterChatRoom::New() const {
  return new EnterChatRoom;
}

void EnterChatRoom::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 19;
    param_ = 6;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::ChatRoomData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterChatRoom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterChatRoom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .Cmd.ChatRoomData data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterChatRoom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterChatRoom)
  return false;
#undef DO_
}

void EnterChatRoom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ChatRoomData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterChatRoom)
}

::google::protobuf::uint8* EnterChatRoom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterChatRoom)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ChatRoomData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterChatRoom)
  return target;
}

int EnterChatRoom::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ENTERROOM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ChatRoomData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterChatRoom::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterChatRoom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterChatRoom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterChatRoom::MergeFrom(const EnterChatRoom& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::ChatRoomData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterChatRoom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterChatRoom::CopyFrom(const EnterChatRoom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterChatRoom::IsInitialized() const {

  return true;
}

void EnterChatRoom::Swap(EnterChatRoom* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterChatRoom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterChatRoom_descriptor_;
  metadata.reflection = EnterChatRoom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomSummary::kOwneridFieldNumber;
const int ChatRoomSummary::kRoomidFieldNumber;
const int ChatRoomSummary::kNameFieldNumber;
const int ChatRoomSummary::kRoomtypeFieldNumber;
const int ChatRoomSummary::kMaxnumFieldNumber;
const int ChatRoomSummary::kCurnumFieldNumber;
const int ChatRoomSummary::kPswdFieldNumber;
#endif  // !_MSC_VER

ChatRoomSummary::ChatRoomSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRoomSummary)
}

void ChatRoomSummary::InitAsDefaultInstance() {
}

ChatRoomSummary::ChatRoomSummary(const ChatRoomSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRoomSummary)
}

void ChatRoomSummary::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ownerid_ = GOOGLE_ULONGLONG(0);
  roomid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roomtype_ = 1;
  maxnum_ = 0u;
  curnum_ = 0u;
  pswd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomSummary::~ChatRoomSummary() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRoomSummary)
  SharedDtor();
}

void ChatRoomSummary::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete pswd_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomSummary_descriptor_;
}

const ChatRoomSummary& ChatRoomSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ChatRoomSummary* ChatRoomSummary::default_instance_ = NULL;

ChatRoomSummary* ChatRoomSummary::New() const {
  return new ChatRoomSummary;
}

void ChatRoomSummary::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatRoomSummary*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(maxnum_, curnum_);
    ownerid_ = GOOGLE_ULONGLONG(0);
    roomid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    roomtype_ = 1;
    if (has_pswd()) {
      if (pswd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        pswd_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRoomSummary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 ownerid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownerid_)));
          set_has_ownerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional uint32 roomid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_roomtype;
        break;
      }

      // optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
      case 4: {
        if (tag == 32) {
         parse_roomtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomType_IsValid(value)) {
            set_roomtype(static_cast< ::Cmd::EChatRoomType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxnum;
        break;
      }

      // optional uint32 maxnum = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_maxnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_curnum;
        break;
      }

      // optional uint32 curnum = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_pswd;
        break;
      }

      // optional string pswd = 7;
      case 7: {
        if (tag == 58) {
         parse_pswd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pswd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pswd().data(), this->pswd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "pswd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRoomSummary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRoomSummary)
  return false;
#undef DO_
}

void ChatRoomSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRoomSummary)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->ownerid(), output);
  }

  // optional uint32 roomid = 2 [default = 0];
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
  if (has_roomtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->roomtype(), output);
  }

  // optional uint32 maxnum = 5 [default = 0];
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->maxnum(), output);
  }

  // optional uint32 curnum = 6 [default = 0];
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->curnum(), output);
  }

  // optional string pswd = 7;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pswd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRoomSummary)
}

::google::protobuf::uint8* ChatRoomSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRoomSummary)
  // optional uint64 ownerid = 1 [default = 0];
  if (has_ownerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->ownerid(), target);
  }

  // optional uint32 roomid = 2 [default = 0];
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
  if (has_roomtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->roomtype(), target);
  }

  // optional uint32 maxnum = 5 [default = 0];
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->maxnum(), target);
  }

  // optional uint32 curnum = 6 [default = 0];
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->curnum(), target);
  }

  // optional string pswd = 7;
  if (has_pswd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pswd().data(), this->pswd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "pswd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pswd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRoomSummary)
  return target;
}

int ChatRoomSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 ownerid = 1 [default = 0];
    if (has_ownerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownerid());
    }

    // optional uint32 roomid = 2 [default = 0];
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .Cmd.EChatRoomType roomtype = 4 [default = ECHATROOMTYPE_PUBLIC];
    if (has_roomtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->roomtype());
    }

    // optional uint32 maxnum = 5 [default = 0];
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // optional uint32 curnum = 6 [default = 0];
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curnum());
    }

    // optional string pswd = 7;
    if (has_pswd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pswd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomSummary::MergeFrom(const ChatRoomSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownerid()) {
      set_ownerid(from.ownerid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_roomtype()) {
      set_roomtype(from.roomtype());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
    if (from.has_pswd()) {
      set_pswd(from.pswd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomSummary::CopyFrom(const ChatRoomSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomSummary::IsInitialized() const {

  return true;
}

void ChatRoomSummary::Swap(ChatRoomSummary* other) {
  if (other != this) {
    std::swap(ownerid_, other->ownerid_);
    std::swap(roomid_, other->roomid_);
    std::swap(name_, other->name_);
    std::swap(roomtype_, other->roomtype_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(curnum_, other->curnum_);
    std::swap(pswd_, other->pswd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomSummary_descriptor_;
  metadata.reflection = ChatRoomSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomDataSync::kCmdFieldNumber;
const int ChatRoomDataSync::kParamFieldNumber;
const int ChatRoomDataSync::kEsyncFieldNumber;
const int ChatRoomDataSync::kDataFieldNumber;
#endif  // !_MSC_VER

ChatRoomDataSync::ChatRoomDataSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRoomDataSync)
}

void ChatRoomDataSync::InitAsDefaultInstance() {
  data_ = const_cast< ::Cmd::ChatRoomSummary*>(&::Cmd::ChatRoomSummary::default_instance());
}

ChatRoomDataSync::ChatRoomDataSync(const ChatRoomDataSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRoomDataSync)
}

void ChatRoomDataSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 8;
  esync_ = 1;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomDataSync::~ChatRoomDataSync() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRoomDataSync)
  SharedDtor();
}

void ChatRoomDataSync::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void ChatRoomDataSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomDataSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomDataSync_descriptor_;
}

const ChatRoomDataSync& ChatRoomDataSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ChatRoomDataSync* ChatRoomDataSync::default_instance_ = NULL;

ChatRoomDataSync* ChatRoomDataSync::New() const {
  return new ChatRoomDataSync;
}

void ChatRoomDataSync::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 19;
    param_ = 8;
    esync_ = 1;
    if (has_data()) {
      if (data_ != NULL) data_->::Cmd::ChatRoomSummary::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomDataSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRoomDataSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_esync;
        break;
      }

      // optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
      case 3: {
        if (tag == 24) {
         parse_esync:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomSync_IsValid(value)) {
            set_esync(static_cast< ::Cmd::EChatRoomSync >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional .Cmd.ChatRoomSummary data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRoomDataSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRoomDataSync)
  return false;
#undef DO_
}

void ChatRoomDataSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRoomDataSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
  if (has_esync()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->esync(), output);
  }

  // optional .Cmd.ChatRoomSummary data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRoomDataSync)
}

::google::protobuf::uint8* ChatRoomDataSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRoomDataSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
  if (has_esync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->esync(), target);
  }

  // optional .Cmd.ChatRoomSummary data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRoomDataSync)
  return target;
}

int ChatRoomDataSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMDATASYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EChatRoomSync esync = 3 [default = ECHATROOMSYNC_UPDATE];
    if (has_esync()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->esync());
    }

    // optional .Cmd.ChatRoomSummary data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomDataSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomDataSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomDataSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomDataSync::MergeFrom(const ChatRoomDataSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_esync()) {
      set_esync(from.esync());
    }
    if (from.has_data()) {
      mutable_data()->::Cmd::ChatRoomSummary::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomDataSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomDataSync::CopyFrom(const ChatRoomDataSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomDataSync::IsInitialized() const {

  return true;
}

void ChatRoomDataSync::Swap(ChatRoomDataSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(esync_, other->esync_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomDataSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomDataSync_descriptor_;
  metadata.reflection = ChatRoomDataSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatRoomTip::kCmdFieldNumber;
const int ChatRoomTip::kParamFieldNumber;
const int ChatRoomTip::kTipFieldNumber;
const int ChatRoomTip::kUseridFieldNumber;
const int ChatRoomTip::kNameFieldNumber;
#endif  // !_MSC_VER

ChatRoomTip::ChatRoomTip()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatRoomTip)
}

void ChatRoomTip::InitAsDefaultInstance() {
}

ChatRoomTip::ChatRoomTip(const ChatRoomTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatRoomTip)
}

void ChatRoomTip::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 19;
  param_ = 9;
  tip_ = 1;
  userid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatRoomTip::~ChatRoomTip() {
  // @@protoc_insertion_point(destructor:Cmd.ChatRoomTip)
  SharedDtor();
}

void ChatRoomTip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChatRoomTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatRoomTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatRoomTip_descriptor_;
}

const ChatRoomTip& ChatRoomTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneChatRoom_2eproto();
  return *default_instance_;
}

ChatRoomTip* ChatRoomTip::default_instance_ = NULL;

ChatRoomTip* ChatRoomTip::New() const {
  return new ChatRoomTip;
}

void ChatRoomTip::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 19;
    param_ = 9;
    tip_ = 1;
    userid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatRoomTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatRoomTip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EChatRoomParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_tip;
        break;
      }

      // optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
      case 3: {
        if (tag == 24) {
         parse_tip:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EChatRoomTip_IsValid(value)) {
            set_tip(static_cast< ::Cmd::EChatRoomTip >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatRoomTip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatRoomTip)
  return false;
#undef DO_
}

void ChatRoomTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatRoomTip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
  if (has_tip()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tip(), output);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->userid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatRoomTip)
}

::google::protobuf::uint8* ChatRoomTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatRoomTip)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
  if (has_tip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tip(), target);
  }

  // optional uint64 userid = 4 [default = 0];
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->userid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatRoomTip)
  return target;
}

int ChatRoomTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_CHATROOM_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EChatRoomParam param = 2 [default = ECHATROOMPARAM_ROOMTIP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EChatRoomTip tip = 3 [default = ECHATROOMTIP_JOIN];
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tip());
    }

    // optional uint64 userid = 4 [default = 0];
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatRoomTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatRoomTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatRoomTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatRoomTip::MergeFrom(const ChatRoomTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_tip()) {
      set_tip(from.tip());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatRoomTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatRoomTip::CopyFrom(const ChatRoomTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatRoomTip::IsInitialized() const {

  return true;
}

void ChatRoomTip::Swap(ChatRoomTip* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(tip_, other->tip_);
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatRoomTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatRoomTip_descriptor_;
  metadata.reflection = ChatRoomTip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
