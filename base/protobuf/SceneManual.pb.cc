// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SceneManual.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SceneManual.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* ManualQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualSubItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualSubItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryVersion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryVersion_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryManualData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryManualData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PointSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PointSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* ManualUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ManualUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAchieveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAchieveReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* Unlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Unlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPointSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPointSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* LevelSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LevelSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetQuestReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetQuestReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreManualCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreManualCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetManualCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetManualCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupActionManualCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupActionManualCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsolvedPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsolvedPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnsolvedUserPhoto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnsolvedUserPhoto_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryUnsolvedPhotoManualCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryUnsolvedPhotoManualCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateSolvedPhotoManualCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateSolvedPhotoManualCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ManualParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EManualType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EManualLockMethod_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EManualStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EGroupAction_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SceneManual_2eproto() {
  protobuf_AddDesc_SceneManual_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SceneManual.proto");
  GOOGLE_CHECK(file != NULL);
  ManualQuest_descriptor_ = file->message_type(0);
  static const int ManualQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, rewardget_),
  };
  ManualQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualQuest_descriptor_,
      ManualQuest::default_instance_,
      ManualQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualQuest));
  ManualSubItem_descriptor_ = file->message_type(1);
  static const int ManualSubItem_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, unlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, quests_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, data_params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, storeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, item_),
  };
  ManualSubItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualSubItem_descriptor_,
      ManualSubItem::default_instance_,
      ManualSubItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualSubItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualSubItem));
  ManualItem_descriptor_ = file->message_type(2);
  static const int ManualItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, quests_),
  };
  ManualItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualItem_descriptor_,
      ManualItem::default_instance_,
      ManualItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualItem));
  ManualGroup_descriptor_ = file->message_type(3);
  static const int ManualGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualGroup, id_),
  };
  ManualGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualGroup_descriptor_,
      ManualGroup::default_instance_,
      ManualGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualGroup));
  ManualData_descriptor_ = file->message_type(4);
  static const int ManualData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, skillpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, exchange_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, groups_),
  };
  ManualData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualData_descriptor_,
      ManualData::default_instance_,
      ManualData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualData));
  ManualVersion_descriptor_ = file->message_type(5);
  static const int ManualVersion_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVersion, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVersion, version_),
  };
  ManualVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualVersion_descriptor_,
      ManualVersion::default_instance_,
      ManualVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualVersion));
  QueryVersion_descriptor_ = file->message_type(6);
  static const int QueryVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersion, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersion, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersion, versions_),
  };
  QueryVersion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryVersion_descriptor_,
      QueryVersion::default_instance_,
      QueryVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryVersion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryVersion));
  QueryManualData_descriptor_ = file->message_type(7);
  static const int QueryManualData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, item_),
  };
  QueryManualData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryManualData_descriptor_,
      QueryManualData::default_instance_,
      QueryManualData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryManualData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryManualData));
  PointSync_descriptor_ = file->message_type(8);
  static const int PointSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSync, point_),
  };
  PointSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PointSync_descriptor_,
      PointSync::default_instance_,
      PointSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PointSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PointSync));
  ManualUpdate_descriptor_ = file->message_type(9);
  static const int ManualUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualUpdate, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualUpdate, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualUpdate, update_),
  };
  ManualUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ManualUpdate_descriptor_,
      ManualUpdate::default_instance_,
      ManualUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ManualUpdate));
  GetAchieveReward_descriptor_ = file->message_type(10);
  static const int GetAchieveReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchieveReward, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchieveReward, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchieveReward, id_),
  };
  GetAchieveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAchieveReward_descriptor_,
      GetAchieveReward::default_instance_,
      GetAchieveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchieveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAchieveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAchieveReward));
  Unlock_descriptor_ = file->message_type(11);
  static const int Unlock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, id_),
  };
  Unlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Unlock_descriptor_,
      Unlock::default_instance_,
      Unlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Unlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Unlock));
  SkillPointSync_descriptor_ = file->message_type(12);
  static const int SkillPointSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPointSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPointSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPointSync, skillpoint_),
  };
  SkillPointSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPointSync_descriptor_,
      SkillPointSync::default_instance_,
      SkillPointSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPointSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPointSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPointSync));
  LevelSync_descriptor_ = file->message_type(13);
  static const int LevelSync_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelSync, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelSync, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelSync, level_),
  };
  LevelSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LevelSync_descriptor_,
      LevelSync::default_instance_,
      LevelSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LevelSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LevelSync));
  GetQuestReward_descriptor_ = file->message_type(14);
  static const int GetQuestReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestReward, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestReward, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestReward, appendid_),
  };
  GetQuestReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetQuestReward_descriptor_,
      GetQuestReward::default_instance_,
      GetQuestReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetQuestReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetQuestReward));
  StoreManualCmd_descriptor_ = file->message_type(15);
  static const int StoreManualCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, guid_),
  };
  StoreManualCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreManualCmd_descriptor_,
      StoreManualCmd::default_instance_,
      StoreManualCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreManualCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreManualCmd));
  GetManualCmd_descriptor_ = file->message_type(16);
  static const int GetManualCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, itemid_),
  };
  GetManualCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetManualCmd_descriptor_,
      GetManualCmd::default_instance_,
      GetManualCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetManualCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetManualCmd));
  GroupActionManualCmd_descriptor_ = file->message_type(17);
  static const int GroupActionManualCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, group_id_),
  };
  GroupActionManualCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupActionManualCmd_descriptor_,
      GroupActionManualCmd::default_instance_,
      GroupActionManualCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupActionManualCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupActionManualCmd));
  UnsolvedPhoto_descriptor_ = file->message_type(18);
  static const int UnsolvedPhoto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedPhoto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedPhoto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedPhoto, anglez_),
  };
  UnsolvedPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsolvedPhoto_descriptor_,
      UnsolvedPhoto::default_instance_,
      UnsolvedPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsolvedPhoto));
  UnsolvedUserPhoto_descriptor_ = file->message_type(19);
  static const int UnsolvedUserPhoto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedUserPhoto, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedUserPhoto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedUserPhoto, photos_),
  };
  UnsolvedUserPhoto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnsolvedUserPhoto_descriptor_,
      UnsolvedUserPhoto::default_instance_,
      UnsolvedUserPhoto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedUserPhoto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnsolvedUserPhoto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnsolvedUserPhoto));
  QueryUnsolvedPhotoManualCmd_descriptor_ = file->message_type(20);
  static const int QueryUnsolvedPhotoManualCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, photos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, time_),
  };
  QueryUnsolvedPhotoManualCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryUnsolvedPhotoManualCmd_descriptor_,
      QueryUnsolvedPhotoManualCmd::default_instance_,
      QueryUnsolvedPhotoManualCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryUnsolvedPhotoManualCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryUnsolvedPhotoManualCmd));
  UpdateSolvedPhotoManualCmd_descriptor_ = file->message_type(21);
  static const int UpdateSolvedPhotoManualCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, sceneryid_),
  };
  UpdateSolvedPhotoManualCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateSolvedPhotoManualCmd_descriptor_,
      UpdateSolvedPhotoManualCmd::default_instance_,
      UpdateSolvedPhotoManualCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateSolvedPhotoManualCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateSolvedPhotoManualCmd));
  ManualParam_descriptor_ = file->enum_type(0);
  EManualType_descriptor_ = file->enum_type(1);
  EManualLockMethod_descriptor_ = file->enum_type(2);
  EManualStatus_descriptor_ = file->enum_type(3);
  EGroupAction_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SceneManual_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualQuest_descriptor_, &ManualQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualSubItem_descriptor_, &ManualSubItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualItem_descriptor_, &ManualItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualGroup_descriptor_, &ManualGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualData_descriptor_, &ManualData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualVersion_descriptor_, &ManualVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryVersion_descriptor_, &QueryVersion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryManualData_descriptor_, &QueryManualData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PointSync_descriptor_, &PointSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ManualUpdate_descriptor_, &ManualUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAchieveReward_descriptor_, &GetAchieveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Unlock_descriptor_, &Unlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPointSync_descriptor_, &SkillPointSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LevelSync_descriptor_, &LevelSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetQuestReward_descriptor_, &GetQuestReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreManualCmd_descriptor_, &StoreManualCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetManualCmd_descriptor_, &GetManualCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupActionManualCmd_descriptor_, &GroupActionManualCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsolvedPhoto_descriptor_, &UnsolvedPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnsolvedUserPhoto_descriptor_, &UnsolvedUserPhoto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryUnsolvedPhotoManualCmd_descriptor_, &QueryUnsolvedPhotoManualCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateSolvedPhotoManualCmd_descriptor_, &UpdateSolvedPhotoManualCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SceneManual_2eproto() {
  delete ManualQuest::default_instance_;
  delete ManualQuest_reflection_;
  delete ManualSubItem::default_instance_;
  delete ManualSubItem_reflection_;
  delete ManualItem::default_instance_;
  delete ManualItem_reflection_;
  delete ManualGroup::default_instance_;
  delete ManualGroup_reflection_;
  delete ManualData::default_instance_;
  delete ManualData_reflection_;
  delete ManualVersion::default_instance_;
  delete ManualVersion_reflection_;
  delete QueryVersion::default_instance_;
  delete QueryVersion_reflection_;
  delete QueryManualData::default_instance_;
  delete QueryManualData_reflection_;
  delete PointSync::default_instance_;
  delete PointSync_reflection_;
  delete ManualUpdate::default_instance_;
  delete ManualUpdate_reflection_;
  delete GetAchieveReward::default_instance_;
  delete GetAchieveReward_reflection_;
  delete Unlock::default_instance_;
  delete Unlock_reflection_;
  delete SkillPointSync::default_instance_;
  delete SkillPointSync_reflection_;
  delete LevelSync::default_instance_;
  delete LevelSync_reflection_;
  delete GetQuestReward::default_instance_;
  delete GetQuestReward_reflection_;
  delete StoreManualCmd::default_instance_;
  delete StoreManualCmd_reflection_;
  delete GetManualCmd::default_instance_;
  delete GetManualCmd_reflection_;
  delete GroupActionManualCmd::default_instance_;
  delete GroupActionManualCmd_reflection_;
  delete UnsolvedPhoto::default_instance_;
  delete UnsolvedPhoto_reflection_;
  delete UnsolvedUserPhoto::default_instance_;
  delete UnsolvedUserPhoto_reflection_;
  delete QueryUnsolvedPhotoManualCmd::default_instance_;
  delete QueryUnsolvedPhotoManualCmd_reflection_;
  delete UpdateSolvedPhotoManualCmd::default_instance_;
  delete UpdateSolvedPhotoManualCmd_reflection_;
}

void protobuf_AddDesc_SceneManual_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021SceneManual.proto\022\003Cmd\032\nxCmd.proto\032\017Sc"
    "eneItem.proto\"a\n\013ManualQuest\022\r\n\002id\030\001 \001(\r"
    ":\0010\022\022\n\007process\030\002 \001(\r:\0010\022\025\n\006finish\030\003 \001(\010:"
    "\005false\022\030\n\trewardget\030\004 \001(\010:\005false\"\363\001\n\rMan"
    "ualSubItem\0225\n\006status\030\001 \001(\0162\022.Cmd.EManual"
    "Status:\021EMANUALSTATUS_MIN\022\r\n\002id\030\002 \001(\r:\0010"
    "\022\025\n\006unlock\030\003 \001(\010:\005false\022 \n\006quests\030\004 \003(\0132"
    "\020.Cmd.ManualQuest\022\r\n\005store\030\005 \001(\010\022\016\n\006para"
    "ms\030\006 \003(\r\022\023\n\013data_params\030\007 \003(\t\022\022\n\007storeid"
    "\030\010 \001(\r:\0010\022\033\n\004item\030\t \001(\0132\r.Cmd.ItemData\"\226"
    "\001\n\nManualItem\022/\n\004type\030\001 \001(\0162\020.Cmd.EManua"
    "lType:\017EMANUALTYPE_MIN\022\022\n\007version\030\002 \001(\r:"
    "\0010\022!\n\005items\030\003 \003(\0132\022.Cmd.ManualSubItem\022 \n"
    "\006quests\030\004 \003(\0132\020.Cmd.ManualQuest\"\034\n\013Manua"
    "lGroup\022\r\n\002id\030\001 \001(\r:\0010\"\267\001\n\nManualData\022\022\n\007"
    "version\030\006 \001(\r:\0010\022\020\n\005point\030\001 \001(\r:\0010\022\020\n\005le"
    "vel\030\002 \001(\r:\0010\022\025\n\nskillpoint\030\004 \001(\r:\0010\022\030\n\re"
    "xchange_time\030\010 \001(\r:\0010\022\036\n\005items\030\003 \003(\0132\017.C"
    "md.ManualItem\022 \n\006groups\030\005 \003(\0132\020.Cmd.Manu"
    "alGroup\"T\n\rManualVersion\022/\n\004type\030\001 \001(\0162\020"
    ".Cmd.EManualType:\017EMANUALTYPE_MIN\022\022\n\007ver"
    "sion\030\002 \001(\r:\0010\"\246\001\n\014QueryVersion\0225\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\032SCENE_USER_MANUAL_PRO"
    "TOCMD\0229\n\005param\030\002 \001(\0162\020.Cmd.ManualParam:\030"
    "MANUALPARAM_QUERYVERSION\022$\n\010versions\030\003 \003"
    "(\0132\022.Cmd.ManualVersion\"\320\001\n\017QueryManualDa"
    "ta\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USE"
    "R_MANUAL_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.M"
    "anualParam:\025MANUALPARAM_QUERYDATA\022/\n\004typ"
    "e\030\003 \001(\0162\020.Cmd.EManualType:\017EMANUALTYPE_M"
    "IN\022\035\n\004item\030\004 \001(\0132\017.Cmd.ManualItem\"\214\001\n\tPo"
    "intSync\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCEN"
    "E_USER_MANUAL_PROTOCMD\0226\n\005param\030\002 \001(\0162\020."
    "Cmd.ManualParam:\025MANUALPARAM_POINTSYNC\022\020"
    "\n\005point\030\003 \001(\r:\0010\"\233\001\n\014ManualUpdate\0225\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_MANUAL_"
    "PROTOCMD\0223\n\005param\030\002 \001(\0162\020.Cmd.ManualPara"
    "m:\022MANUALPARAM_UPDATE\022\037\n\006update\030\003 \001(\0132\017."
    "Cmd.ManualItem\"\220\001\n\020GetAchieveReward\0225\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_MANUA"
    "L_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.ManualPa"
    "ram:\025MANUALPARAM_GETREWARD\022\r\n\002id\030\003 \001(\r:\001"
    "0\"\264\001\n\006Unlock\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\032SCENE_USER_MANUAL_PROTOCMD\0223\n\005param\030\002 \001"
    "(\0162\020.Cmd.ManualParam:\022MANUALPARAM_UNLOCK"
    "\022/\n\004type\030\003 \001(\0162\020.Cmd.EManualType:\017EMANUA"
    "LTYPE_MIN\022\r\n\002id\030\004 \001(\r:\0010\"\233\001\n\016SkillPointS"
    "ync\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_US"
    "ER_MANUAL_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd."
    "ManualParam:\032MANUALPARAM_SKILLPOINTSYNC\022"
    "\025\n\nskillpoint\030\003 \001(\r:\0010\"\214\001\n\tLevelSync\0225\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_MANU"
    "AL_PROTOCMD\0226\n\005param\030\002 \001(\0162\020.Cmd.ManualP"
    "aram:\025MANUALPARAM_LEVELSYNC\022\020\n\005level\030\003 \001"
    "(\r:\0010\"\231\001\n\016GetQuestReward\0225\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\032SCENE_USER_MANUAL_PROTOCMD\022"
    ";\n\005param\030\002 \001(\0162\020.Cmd.ManualParam:\032MANUAL"
    "PARAM_GETQUESTREWARD\022\023\n\010appendid\030\003 \001(\r:\001"
    "0\"\276\001\n\016StoreManualCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\032SCENE_USER_MANUAL_PROTOCMD\0226\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.ManualParam:\025MANUALPARA"
    "M_STOREITEM\022/\n\004type\030\003 \001(\0162\020.Cmd.EManualT"
    "ype:\017EMANUALTYPE_MIN\022\014\n\004guid\030\004 \001(\t\"\277\001\n\014G"
    "etManualCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032"
    "SCENE_USER_MANUAL_PROTOCMD\0224\n\005param\030\002 \001("
    "\0162\020.Cmd.ManualParam:\023MANUALPARAM_GETITEM"
    "\022/\n\004type\030\003 \001(\0162\020.Cmd.EManualType:\017EMANUA"
    "LTYPE_MIN\022\021\n\006itemid\030\004 \001(\r:\0010\"\321\001\n\024GroupAc"
    "tionManualCmd\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\032SCENE_USER_MANUAL_PROTOCMD\0228\n\005param\030\002 "
    "\001(\0162\020.Cmd.ManualParam:\027MANUALPARAM_GROUP"
    "ACTION\0223\n\006action\030\003 \001(\0162\021.Cmd.EGroupActio"
    "n:\020EGROUPACTION_MIN\022\023\n\010group_id\030\004 \001(\r:\0010"
    "\"B\n\rUnsolvedPhoto\022\r\n\002id\030\001 \001(\r:\0010\022\017\n\004time"
    "\030\002 \001(\r:\0010\022\021\n\006anglez\030\003 \001(\r:\0010\"X\n\021Unsolved"
    "UserPhoto\022\021\n\006charid\030\001 \001(\004:\0010\022\014\n\004name\030\002 \001"
    "(\t\022\"\n\006photos\030\003 \003(\0132\022.Cmd.UnsolvedPhoto\"\320"
    "\001\n\033QueryUnsolvedPhotoManualCmd\0225\n\003cmd\030\001 "
    "\001(\0162\014.Cmd.Command:\032SCENE_USER_MANUAL_PRO"
    "TOCMD\022A\n\005param\030\002 \001(\0162\020.Cmd.ManualParam: "
    "MANUALPARAM_QUERY_UNSOLVED_PHOTO\022&\n\006phot"
    "os\030\003 \003(\0132\026.Cmd.UnsolvedUserPhoto\022\017\n\004time"
    "\030\004 \001(\r:\0010\"\300\001\n\032UpdateSolvedPhotoManualCmd"
    "\0225\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\032SCENE_USER_"
    "MANUAL_PROTOCMD\022B\n\005param\030\002 \001(\0162\020.Cmd.Man"
    "ualParam:!MANUALPARAM_UPDATE_UNSOLVED_PH"
    "OTO\022\021\n\006charid\030\003 \001(\004:\0010\022\024\n\tsceneryid\030\004 \001("
    "\r:\0010*\245\003\n\013ManualParam\022\034\n\030MANUALPARAM_QUER"
    "YVERSION\020\001\022\031\n\025MANUALPARAM_QUERYDATA\020\002\022\031\n"
    "\025MANUALPARAM_POINTSYNC\020\003\022\026\n\022MANUALPARAM_"
    "UPDATE\020\004\022\031\n\025MANUALPARAM_GETREWARD\020\005\022\026\n\022M"
    "ANUALPARAM_UNLOCK\020\006\022\036\n\032MANUALPARAM_SKILL"
    "POINTSYNC\020\007\022\031\n\025MANUALPARAM_LEVELSYNC\020\010\022\036"
    "\n\032MANUALPARAM_GETQUESTREWARD\020\t\022\031\n\025MANUAL"
    "PARAM_STOREITEM\020\n\022\027\n\023MANUALPARAM_GETITEM"
    "\020\013\022\033\n\027MANUALPARAM_GROUPACTION\020\014\022$\n MANUA"
    "LPARAM_QUERY_UNSOLVED_PHOTO\020\r\022%\n!MANUALP"
    "ARAM_UPDATE_UNSOLVED_PHOTO\020\016*\313\003\n\013EManual"
    "Type\022\023\n\017EMANUALTYPE_MIN\020\000\022\027\n\023EMANUALTYPE"
    "_FASHION\020\001\022\024\n\020EMANUALTYPE_CARD\020\002\022\025\n\021EMAN"
    "UALTYPE_EQUIP\020\003\022\024\n\020EMANUALTYPE_ITEM\020\004\022\025\n"
    "\021EMANUALTYPE_MOUNT\020\005\022\027\n\023EMANUALTYPE_MONS"
    "TER\020\006\022\023\n\017EMANUALTYPE_NPC\020\007\022\030\n\024EMANUALTYP"
    "E_HOMEPAGE\020\010\022\023\n\017EMANUALTYPE_MAP\020\t\022\027\n\023EMA"
    "NUALTYPE_ACHIEVE\020\n\022\027\n\023EMANUALTYPE_SCENER"
    "Y\020\013\022\032\n\026EMANUALTYPE_COLLECTION\020\016\022\030\n\024EMANU"
    "ALTYPE_RESEARCH\020\017\022\031\n\025EMANUALTYPE_HAIRSTY"
    "LE\020\020\022\024\n\020EMANUALTYPE_MATE\020\021\022\024\n\020EMANUALTYP"
    "E_FOOD\020\022\022\023\n\017EMANUALTYPE_PET\020\023\022\023\n\017EMANUAL"
    "TYPE_MAX\020\024*\255\002\n\021EManualLockMethod\022\031\n\025EMAN"
    "UALLOCKMETHOD_MIN\020\000\022\032\n\026EMANUALLOCKMETHOD"
    "_KILL\020\001\022\032\n\026EMANUALLOCKMETHOD_PICK\020\002\022\035\n\031E"
    "MANUALLOCKMETHOD_PRODUCE\020\003\022\031\n\025EMANUALLOC"
    "KMETHOD_GET\020\004\022\033\n\027EMANUALLOCKMETHOD_VISIT"
    "\020\005\022\033\n\027EMANUALLOCKMETHOD_PHOTO\020\006\022\032\n\026EMANU"
    "ALLOCKMETHOD_USED\020\007\022\032\n\026EMANUALLOCKMETHOD"
    "_DRAW\020\010\022\031\n\025EMANUALLOCKMETHOD_MAX\020\t*\262\001\n\rE"
    "ManualStatus\022\025\n\021EMANUALSTATUS_MIN\020\000\022\031\n\025E"
    "MANUALSTATUS_DISPLAY\020\001\022\037\n\033EMANUALSTATUS_"
    "UNLOCK_CLIENT\020\002\022\035\n\031EMANUALSTATUS_UNLOCK_"
    "STEP\020\003\022\030\n\024EMANUALSTATUS_UNLOCK\020\004\022\025\n\021EMAN"
    "UALSTATUS_MAX\020\005*V\n\014EGroupAction\022\024\n\020EGROU"
    "PACTION_MIN\020\000\022\032\n\026EGROUPACTION_ENTER_END\020"
    "\001\022\024\n\020EGROUPACTION_MAX\020\002", 4943);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SceneManual.proto", &protobuf_RegisterTypes);
  ManualQuest::default_instance_ = new ManualQuest();
  ManualSubItem::default_instance_ = new ManualSubItem();
  ManualItem::default_instance_ = new ManualItem();
  ManualGroup::default_instance_ = new ManualGroup();
  ManualData::default_instance_ = new ManualData();
  ManualVersion::default_instance_ = new ManualVersion();
  QueryVersion::default_instance_ = new QueryVersion();
  QueryManualData::default_instance_ = new QueryManualData();
  PointSync::default_instance_ = new PointSync();
  ManualUpdate::default_instance_ = new ManualUpdate();
  GetAchieveReward::default_instance_ = new GetAchieveReward();
  Unlock::default_instance_ = new Unlock();
  SkillPointSync::default_instance_ = new SkillPointSync();
  LevelSync::default_instance_ = new LevelSync();
  GetQuestReward::default_instance_ = new GetQuestReward();
  StoreManualCmd::default_instance_ = new StoreManualCmd();
  GetManualCmd::default_instance_ = new GetManualCmd();
  GroupActionManualCmd::default_instance_ = new GroupActionManualCmd();
  UnsolvedPhoto::default_instance_ = new UnsolvedPhoto();
  UnsolvedUserPhoto::default_instance_ = new UnsolvedUserPhoto();
  QueryUnsolvedPhotoManualCmd::default_instance_ = new QueryUnsolvedPhotoManualCmd();
  UpdateSolvedPhotoManualCmd::default_instance_ = new UpdateSolvedPhotoManualCmd();
  ManualQuest::default_instance_->InitAsDefaultInstance();
  ManualSubItem::default_instance_->InitAsDefaultInstance();
  ManualItem::default_instance_->InitAsDefaultInstance();
  ManualGroup::default_instance_->InitAsDefaultInstance();
  ManualData::default_instance_->InitAsDefaultInstance();
  ManualVersion::default_instance_->InitAsDefaultInstance();
  QueryVersion::default_instance_->InitAsDefaultInstance();
  QueryManualData::default_instance_->InitAsDefaultInstance();
  PointSync::default_instance_->InitAsDefaultInstance();
  ManualUpdate::default_instance_->InitAsDefaultInstance();
  GetAchieveReward::default_instance_->InitAsDefaultInstance();
  Unlock::default_instance_->InitAsDefaultInstance();
  SkillPointSync::default_instance_->InitAsDefaultInstance();
  LevelSync::default_instance_->InitAsDefaultInstance();
  GetQuestReward::default_instance_->InitAsDefaultInstance();
  StoreManualCmd::default_instance_->InitAsDefaultInstance();
  GetManualCmd::default_instance_->InitAsDefaultInstance();
  GroupActionManualCmd::default_instance_->InitAsDefaultInstance();
  UnsolvedPhoto::default_instance_->InitAsDefaultInstance();
  UnsolvedUserPhoto::default_instance_->InitAsDefaultInstance();
  QueryUnsolvedPhotoManualCmd::default_instance_->InitAsDefaultInstance();
  UpdateSolvedPhotoManualCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SceneManual_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SceneManual_2eproto {
  StaticDescriptorInitializer_SceneManual_2eproto() {
    protobuf_AddDesc_SceneManual_2eproto();
  }
} static_descriptor_initializer_SceneManual_2eproto_;
const ::google::protobuf::EnumDescriptor* ManualParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualParam_descriptor_;
}
bool ManualParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EManualType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EManualType_descriptor_;
}
bool EManualType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EManualLockMethod_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EManualLockMethod_descriptor_;
}
bool EManualLockMethod_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EManualStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EManualStatus_descriptor_;
}
bool EManualStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGroupAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EGroupAction_descriptor_;
}
bool EGroupAction_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ManualQuest::kIdFieldNumber;
const int ManualQuest::kProcessFieldNumber;
const int ManualQuest::kFinishFieldNumber;
const int ManualQuest::kRewardgetFieldNumber;
#endif  // !_MSC_VER

ManualQuest::ManualQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualQuest)
}

void ManualQuest::InitAsDefaultInstance() {
}

ManualQuest::ManualQuest(const ManualQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualQuest)
}

void ManualQuest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  process_ = 0u;
  finish_ = false;
  rewardget_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualQuest::~ManualQuest() {
  // @@protoc_insertion_point(destructor:Cmd.ManualQuest)
  SharedDtor();
}

void ManualQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManualQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualQuest_descriptor_;
}

const ManualQuest& ManualQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualQuest* ManualQuest::default_instance_ = NULL;

ManualQuest* ManualQuest::New() const {
  return new ManualQuest;
}

void ManualQuest::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualQuest*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, rewardget_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualQuest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_process;
        break;
      }

      // optional uint32 process = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_finish;
        break;
      }

      // optional bool finish = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_rewardget;
        break;
      }

      // optional bool rewardget = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_rewardget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rewardget_)));
          set_has_rewardget();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualQuest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualQuest)
  return false;
#undef DO_
}

void ManualQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualQuest)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->process(), output);
  }

  // optional bool finish = 3 [default = false];
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->finish(), output);
  }

  // optional bool rewardget = 4 [default = false];
  if (has_rewardget()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->rewardget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualQuest)
}

::google::protobuf::uint8* ManualQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualQuest)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 process = 2 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->process(), target);
  }

  // optional bool finish = 3 [default = false];
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->finish(), target);
  }

  // optional bool rewardget = 4 [default = false];
  if (has_rewardget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->rewardget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualQuest)
  return target;
}

int ManualQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 process = 2 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

    // optional bool finish = 3 [default = false];
    if (has_finish()) {
      total_size += 1 + 1;
    }

    // optional bool rewardget = 4 [default = false];
    if (has_rewardget()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualQuest::MergeFrom(const ManualQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_rewardget()) {
      set_rewardget(from.rewardget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualQuest::CopyFrom(const ManualQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualQuest::IsInitialized() const {

  return true;
}

void ManualQuest::Swap(ManualQuest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(process_, other->process_);
    std::swap(finish_, other->finish_);
    std::swap(rewardget_, other->rewardget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualQuest_descriptor_;
  metadata.reflection = ManualQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualSubItem::kStatusFieldNumber;
const int ManualSubItem::kIdFieldNumber;
const int ManualSubItem::kUnlockFieldNumber;
const int ManualSubItem::kQuestsFieldNumber;
const int ManualSubItem::kStoreFieldNumber;
const int ManualSubItem::kParamsFieldNumber;
const int ManualSubItem::kDataParamsFieldNumber;
const int ManualSubItem::kStoreidFieldNumber;
const int ManualSubItem::kItemFieldNumber;
#endif  // !_MSC_VER

ManualSubItem::ManualSubItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualSubItem)
}

void ManualSubItem::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ItemData*>(&::Cmd::ItemData::default_instance());
}

ManualSubItem::ManualSubItem(const ManualSubItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualSubItem)
}

void ManualSubItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = 0;
  id_ = 0u;
  unlock_ = false;
  store_ = false;
  storeid_ = 0u;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualSubItem::~ManualSubItem() {
  // @@protoc_insertion_point(destructor:Cmd.ManualSubItem)
  SharedDtor();
}

void ManualSubItem::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void ManualSubItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualSubItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualSubItem_descriptor_;
}

const ManualSubItem& ManualSubItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualSubItem* ManualSubItem::default_instance_ = NULL;

ManualSubItem* ManualSubItem::New() const {
  return new ManualSubItem;
}

void ManualSubItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualSubItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 151) {
    ZR_(status_, id_);
    ZR_(unlock_, storeid_);
  }
  if (has_item()) {
    if (item_ != NULL) item_->::Cmd::ItemData::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  quests_.Clear();
  params_.Clear();
  data_params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualSubItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualSubItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EManualStatus status = 1 [default = EMANUALSTATUS_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualStatus_IsValid(value)) {
            set_status(static_cast< ::Cmd::EManualStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional bool unlock = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quests;
        break;
      }

      // repeated .Cmd.ManualQuest quests = 4;
      case 4: {
        if (tag == 34) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quests;
        if (input->ExpectTag(40)) goto parse_store;
        break;
      }

      // optional bool store = 5;
      case 5: {
        if (tag == 40) {
         parse_store:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &store_)));
          set_has_store();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_params;
        break;
      }

      // repeated uint32 params = 6;
      case 6: {
        if (tag == 48) {
         parse_params:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_params())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_params())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_params;
        if (input->ExpectTag(58)) goto parse_data_params;
        break;
      }

      // repeated string data_params = 7;
      case 7: {
        if (tag == 58) {
         parse_data_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data_params(this->data_params_size() - 1).data(),
            this->data_params(this->data_params_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "data_params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_data_params;
        if (input->ExpectTag(64)) goto parse_storeid;
        break;
      }

      // optional uint32 storeid = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_storeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &storeid_)));
          set_has_storeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_item;
        break;
      }

      // optional .Cmd.ItemData item = 9;
      case 9: {
        if (tag == 74) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualSubItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualSubItem)
  return false;
#undef DO_
}

void ManualSubItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualSubItem)
  // optional .Cmd.EManualStatus status = 1 [default = EMANUALSTATUS_MIN];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional bool unlock = 3 [default = false];
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unlock(), output);
  }

  // repeated .Cmd.ManualQuest quests = 4;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quests(i), output);
  }

  // optional bool store = 5;
  if (has_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->store(), output);
  }

  // repeated uint32 params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->params(i), output);
  }

  // repeated string data_params = 7;
  for (int i = 0; i < this->data_params_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->data_params(i).data(), this->data_params(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "data_params");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->data_params(i), output);
  }

  // optional uint32 storeid = 8 [default = 0];
  if (has_storeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->storeid(), output);
  }

  // optional .Cmd.ItemData item = 9;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualSubItem)
}

::google::protobuf::uint8* ManualSubItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualSubItem)
  // optional .Cmd.EManualStatus status = 1 [default = EMANUALSTATUS_MIN];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint32 id = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional bool unlock = 3 [default = false];
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unlock(), target);
  }

  // repeated .Cmd.ManualQuest quests = 4;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quests(i), target);
  }

  // optional bool store = 5;
  if (has_store()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->store(), target);
  }

  // repeated uint32 params = 6;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->params(i), target);
  }

  // repeated string data_params = 7;
  for (int i = 0; i < this->data_params_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data_params(i).data(), this->data_params(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "data_params");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->data_params(i), target);
  }

  // optional uint32 storeid = 8 [default = 0];
  if (has_storeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->storeid(), target);
  }

  // optional .Cmd.ItemData item = 9;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualSubItem)
  return target;
}

int ManualSubItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EManualStatus status = 1 [default = EMANUALSTATUS_MIN];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 id = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool unlock = 3 [default = false];
    if (has_unlock()) {
      total_size += 1 + 1;
    }

    // optional bool store = 5;
    if (has_store()) {
      total_size += 1 + 1;
    }

    // optional uint32 storeid = 8 [default = 0];
    if (has_storeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->storeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Cmd.ItemData item = 9;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  // repeated .Cmd.ManualQuest quests = 4;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  // repeated uint32 params = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->params_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->params(i));
    }
    total_size += 1 * this->params_size() + data_size;
  }

  // repeated string data_params = 7;
  total_size += 1 * this->data_params_size();
  for (int i = 0; i < this->data_params_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data_params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualSubItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualSubItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualSubItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualSubItem::MergeFrom(const ManualSubItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  quests_.MergeFrom(from.quests_);
  params_.MergeFrom(from.params_);
  data_params_.MergeFrom(from.data_params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
    if (from.has_store()) {
      set_store(from.store());
    }
    if (from.has_storeid()) {
      set_storeid(from.storeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_item()) {
      mutable_item()->::Cmd::ItemData::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualSubItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualSubItem::CopyFrom(const ManualSubItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualSubItem::IsInitialized() const {

  return true;
}

void ManualSubItem::Swap(ManualSubItem* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(id_, other->id_);
    std::swap(unlock_, other->unlock_);
    quests_.Swap(&other->quests_);
    std::swap(store_, other->store_);
    params_.Swap(&other->params_);
    data_params_.Swap(&other->data_params_);
    std::swap(storeid_, other->storeid_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualSubItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualSubItem_descriptor_;
  metadata.reflection = ManualSubItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualItem::kTypeFieldNumber;
const int ManualItem::kVersionFieldNumber;
const int ManualItem::kItemsFieldNumber;
const int ManualItem::kQuestsFieldNumber;
#endif  // !_MSC_VER

ManualItem::ManualItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualItem)
}

void ManualItem::InitAsDefaultInstance() {
}

ManualItem::ManualItem(const ManualItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualItem)
}

void ManualItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualItem::~ManualItem() {
  // @@protoc_insertion_point(destructor:Cmd.ManualItem)
  SharedDtor();
}

void ManualItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManualItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualItem_descriptor_;
}

const ManualItem& ManualItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualItem* ManualItem::default_instance_ = NULL;

ManualItem* ManualItem::New() const {
  return new ManualItem;
}

void ManualItem::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualItem*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  quests_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ManualSubItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(34)) goto parse_quests;
        break;
      }

      // repeated .Cmd.ManualQuest quests = 4;
      case 4: {
        if (tag == 34) {
         parse_quests:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quests()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quests;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualItem)
  return false;
#undef DO_
}

void ManualItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualItem)
  // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  // repeated .Cmd.ManualSubItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // repeated .Cmd.ManualQuest quests = 4;
  for (int i = 0; i < this->quests_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->quests(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualItem)
}

::google::protobuf::uint8* ManualItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualItem)
  // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  // repeated .Cmd.ManualSubItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // repeated .Cmd.ManualQuest quests = 4;
  for (int i = 0; i < this->quests_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->quests(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualItem)
  return target;
}

int ManualItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 version = 2 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  // repeated .Cmd.ManualSubItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.ManualQuest quests = 4;
  total_size += 1 * this->quests_size();
  for (int i = 0; i < this->quests_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quests(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualItem::MergeFrom(const ManualItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  quests_.MergeFrom(from.quests_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualItem::CopyFrom(const ManualItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualItem::IsInitialized() const {

  return true;
}

void ManualItem::Swap(ManualItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(version_, other->version_);
    items_.Swap(&other->items_);
    quests_.Swap(&other->quests_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualItem_descriptor_;
  metadata.reflection = ManualItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualGroup::kIdFieldNumber;
#endif  // !_MSC_VER

ManualGroup::ManualGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualGroup)
}

void ManualGroup::InitAsDefaultInstance() {
}

ManualGroup::ManualGroup(const ManualGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualGroup)
}

void ManualGroup::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualGroup::~ManualGroup() {
  // @@protoc_insertion_point(destructor:Cmd.ManualGroup)
  SharedDtor();
}

void ManualGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManualGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualGroup_descriptor_;
}

const ManualGroup& ManualGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualGroup* ManualGroup::default_instance_ = NULL;

ManualGroup* ManualGroup::New() const {
  return new ManualGroup;
}

void ManualGroup::Clear() {
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualGroup)
  return false;
#undef DO_
}

void ManualGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualGroup)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualGroup)
}

::google::protobuf::uint8* ManualGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualGroup)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualGroup)
  return target;
}

int ManualGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualGroup::MergeFrom(const ManualGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualGroup::CopyFrom(const ManualGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualGroup::IsInitialized() const {

  return true;
}

void ManualGroup::Swap(ManualGroup* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualGroup_descriptor_;
  metadata.reflection = ManualGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualData::kVersionFieldNumber;
const int ManualData::kPointFieldNumber;
const int ManualData::kLevelFieldNumber;
const int ManualData::kSkillpointFieldNumber;
const int ManualData::kExchangeTimeFieldNumber;
const int ManualData::kItemsFieldNumber;
const int ManualData::kGroupsFieldNumber;
#endif  // !_MSC_VER

ManualData::ManualData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualData)
}

void ManualData::InitAsDefaultInstance() {
}

ManualData::ManualData(const ManualData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualData)
}

void ManualData::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0u;
  point_ = 0u;
  level_ = 0u;
  skillpoint_ = 0u;
  exchange_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualData::~ManualData() {
  // @@protoc_insertion_point(destructor:Cmd.ManualData)
  SharedDtor();
}

void ManualData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManualData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualData_descriptor_;
}

const ManualData& ManualData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualData* ManualData::default_instance_ = NULL;

ManualData* ManualData::New() const {
  return new ManualData;
}

void ManualData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(version_, skillpoint_);
    exchange_time_ = 0u;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 point = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Cmd.ManualItem items = 3;
      case 3: {
        if (tag == 26) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectTag(32)) goto parse_skillpoint;
        break;
      }

      // optional uint32 skillpoint = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_skillpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_groups;
        break;
      }

      // repeated .Cmd.ManualGroup groups = 5;
      case 5: {
        if (tag == 42) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_groups;
        if (input->ExpectTag(48)) goto parse_version;
        break;
      }

      // optional uint32 version = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_exchange_time;
        break;
      }

      // optional uint32 exchange_time = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_exchange_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exchange_time_)));
          set_has_exchange_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualData)
  return false;
#undef DO_
}

void ManualData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualData)
  // optional uint32 point = 1 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->point(), output);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .Cmd.ManualItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  // optional uint32 skillpoint = 4 [default = 0];
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skillpoint(), output);
  }

  // repeated .Cmd.ManualGroup groups = 5;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->groups(i), output);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  // optional uint32 exchange_time = 8 [default = 0];
  if (has_exchange_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->exchange_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualData)
}

::google::protobuf::uint8* ManualData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualData)
  // optional uint32 point = 1 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->point(), target);
  }

  // optional uint32 level = 2 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .Cmd.ManualItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  // optional uint32 skillpoint = 4 [default = 0];
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skillpoint(), target);
  }

  // repeated .Cmd.ManualGroup groups = 5;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->groups(i), target);
  }

  // optional uint32 version = 6 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  // optional uint32 exchange_time = 8 [default = 0];
  if (has_exchange_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->exchange_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualData)
  return target;
}

int ManualData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 version = 6 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 point = 1 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // optional uint32 level = 2 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 skillpoint = 4 [default = 0];
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

    // optional uint32 exchange_time = 8 [default = 0];
    if (has_exchange_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exchange_time());
    }

  }
  // repeated .Cmd.ManualItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .Cmd.ManualGroup groups = 5;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualData::MergeFrom(const ManualData& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
    if (from.has_exchange_time()) {
      set_exchange_time(from.exchange_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualData::CopyFrom(const ManualData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualData::IsInitialized() const {

  return true;
}

void ManualData::Swap(ManualData* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(point_, other->point_);
    std::swap(level_, other->level_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(exchange_time_, other->exchange_time_);
    items_.Swap(&other->items_);
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualData_descriptor_;
  metadata.reflection = ManualData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualVersion::kTypeFieldNumber;
const int ManualVersion::kVersionFieldNumber;
#endif  // !_MSC_VER

ManualVersion::ManualVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualVersion)
}

void ManualVersion::InitAsDefaultInstance() {
}

ManualVersion::ManualVersion(const ManualVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualVersion)
}

void ManualVersion::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  version_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualVersion::~ManualVersion() {
  // @@protoc_insertion_point(destructor:Cmd.ManualVersion)
  SharedDtor();
}

void ManualVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ManualVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualVersion_descriptor_;
}

const ManualVersion& ManualVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualVersion* ManualVersion::default_instance_ = NULL;

ManualVersion* ManualVersion::New() const {
  return new ManualVersion;
}

void ManualVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ManualVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, version_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }

      // optional uint32 version = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualVersion)
  return false;
#undef DO_
}

void ManualVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualVersion)
  // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualVersion)
}

::google::protobuf::uint8* ManualVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualVersion)
  // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 version = 2 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualVersion)
  return target;
}

int ManualVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.EManualType type = 1 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 version = 2 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualVersion::MergeFrom(const ManualVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualVersion::CopyFrom(const ManualVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVersion::IsInitialized() const {

  return true;
}

void ManualVersion::Swap(ManualVersion* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualVersion_descriptor_;
  metadata.reflection = ManualVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryVersion::kCmdFieldNumber;
const int QueryVersion::kParamFieldNumber;
const int QueryVersion::kVersionsFieldNumber;
#endif  // !_MSC_VER

QueryVersion::QueryVersion()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryVersion)
}

void QueryVersion::InitAsDefaultInstance() {
}

QueryVersion::QueryVersion(const QueryVersion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryVersion)
}

void QueryVersion::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryVersion::~QueryVersion() {
  // @@protoc_insertion_point(destructor:Cmd.QueryVersion)
  SharedDtor();
}

void QueryVersion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryVersion_descriptor_;
}

const QueryVersion& QueryVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

QueryVersion* QueryVersion::default_instance_ = NULL;

QueryVersion* QueryVersion::New() const {
  return new QueryVersion;
}

void QueryVersion::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 23;
    param_ = 1;
  }
  versions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryVersion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryVersion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYVERSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_versions;
        break;
      }

      // repeated .Cmd.ManualVersion versions = 3;
      case 3: {
        if (tag == 26) {
         parse_versions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_versions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_versions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryVersion)
  return false;
#undef DO_
}

void QueryVersion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryVersion)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYVERSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.ManualVersion versions = 3;
  for (int i = 0; i < this->versions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->versions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryVersion)
}

::google::protobuf::uint8* QueryVersion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryVersion)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYVERSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.ManualVersion versions = 3;
  for (int i = 0; i < this->versions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->versions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryVersion)
  return target;
}

int QueryVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYVERSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.ManualVersion versions = 3;
  total_size += 1 * this->versions_size();
  for (int i = 0; i < this->versions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->versions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryVersion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryVersion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryVersion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryVersion::MergeFrom(const QueryVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  versions_.MergeFrom(from.versions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryVersion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryVersion::CopyFrom(const QueryVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryVersion::IsInitialized() const {

  return true;
}

void QueryVersion::Swap(QueryVersion* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    versions_.Swap(&other->versions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryVersion_descriptor_;
  metadata.reflection = QueryVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryManualData::kCmdFieldNumber;
const int QueryManualData::kParamFieldNumber;
const int QueryManualData::kTypeFieldNumber;
const int QueryManualData::kItemFieldNumber;
#endif  // !_MSC_VER

QueryManualData::QueryManualData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryManualData)
}

void QueryManualData::InitAsDefaultInstance() {
  item_ = const_cast< ::Cmd::ManualItem*>(&::Cmd::ManualItem::default_instance());
}

QueryManualData::QueryManualData(const QueryManualData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryManualData)
}

void QueryManualData::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 2;
  type_ = 0;
  item_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryManualData::~QueryManualData() {
  // @@protoc_insertion_point(destructor:Cmd.QueryManualData)
  SharedDtor();
}

void QueryManualData::SharedDtor() {
  if (this != default_instance_) {
    delete item_;
  }
}

void QueryManualData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryManualData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryManualData_descriptor_;
}

const QueryManualData& QueryManualData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

QueryManualData* QueryManualData::default_instance_ = NULL;

QueryManualData* QueryManualData::New() const {
  return new QueryManualData;
}

void QueryManualData::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 23;
    param_ = 2;
    type_ = 0;
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::ManualItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryManualData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryManualData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYDATA];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .Cmd.ManualItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryManualData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryManualData)
  return false;
#undef DO_
}

void QueryManualData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYDATA];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.ManualItem item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryManualData)
}

::google::protobuf::uint8* QueryManualData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryManualData)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYDATA];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.ManualItem item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryManualData)
  return target;
}

int QueryManualData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERYDATA];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.ManualItem item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryManualData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryManualData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryManualData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryManualData::MergeFrom(const QueryManualData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::ManualItem::MergeFrom(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryManualData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryManualData::CopyFrom(const QueryManualData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryManualData::IsInitialized() const {

  return true;
}

void QueryManualData::Swap(QueryManualData* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryManualData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryManualData_descriptor_;
  metadata.reflection = QueryManualData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PointSync::kCmdFieldNumber;
const int PointSync::kParamFieldNumber;
const int PointSync::kPointFieldNumber;
#endif  // !_MSC_VER

PointSync::PointSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PointSync)
}

void PointSync::InitAsDefaultInstance() {
}

PointSync::PointSync(const PointSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PointSync)
}

void PointSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 3;
  point_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PointSync::~PointSync() {
  // @@protoc_insertion_point(destructor:Cmd.PointSync)
  SharedDtor();
}

void PointSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PointSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PointSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PointSync_descriptor_;
}

const PointSync& PointSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

PointSync* PointSync::default_instance_ = NULL;

PointSync* PointSync::New() const {
  return new PointSync;
}

void PointSync::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 3;
    point_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PointSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PointSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_POINTSYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional uint32 point = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PointSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PointSync)
  return false;
#undef DO_
}

void PointSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PointSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_POINTSYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 point = 3 [default = 0];
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PointSync)
}

::google::protobuf::uint8* PointSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PointSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_POINTSYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 point = 3 [default = 0];
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PointSync)
  return target;
}

int PointSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_POINTSYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 point = 3 [default = 0];
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PointSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PointSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PointSync::MergeFrom(const PointSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PointSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PointSync::CopyFrom(const PointSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointSync::IsInitialized() const {

  return true;
}

void PointSync::Swap(PointSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PointSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PointSync_descriptor_;
  metadata.reflection = PointSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ManualUpdate::kCmdFieldNumber;
const int ManualUpdate::kParamFieldNumber;
const int ManualUpdate::kUpdateFieldNumber;
#endif  // !_MSC_VER

ManualUpdate::ManualUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ManualUpdate)
}

void ManualUpdate::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::ManualItem*>(&::Cmd::ManualItem::default_instance());
}

ManualUpdate::ManualUpdate(const ManualUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ManualUpdate)
}

void ManualUpdate::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 4;
  update_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ManualUpdate::~ManualUpdate() {
  // @@protoc_insertion_point(destructor:Cmd.ManualUpdate)
  SharedDtor();
}

void ManualUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void ManualUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ManualUpdate_descriptor_;
}

const ManualUpdate& ManualUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

ManualUpdate* ManualUpdate::default_instance_ = NULL;

ManualUpdate* ManualUpdate::New() const {
  return new ManualUpdate;
}

void ManualUpdate::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 4;
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::ManualItem::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ManualUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ManualUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_update;
        break;
      }

      // optional .Cmd.ManualItem update = 3;
      case 3: {
        if (tag == 26) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ManualUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ManualUpdate)
  return false;
#undef DO_
}

void ManualUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ManualUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ManualItem update = 3;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->update(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ManualUpdate)
}

::google::protobuf::uint8* ManualUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ManualUpdate)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ManualItem update = 3;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->update(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ManualUpdate)
  return target;
}

int ManualUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ManualItem update = 3;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ManualUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ManualUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ManualUpdate::MergeFrom(const ManualUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::ManualItem::MergeFrom(from.update());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ManualUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualUpdate::CopyFrom(const ManualUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualUpdate::IsInitialized() const {

  return true;
}

void ManualUpdate::Swap(ManualUpdate* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(update_, other->update_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ManualUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ManualUpdate_descriptor_;
  metadata.reflection = ManualUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAchieveReward::kCmdFieldNumber;
const int GetAchieveReward::kParamFieldNumber;
const int GetAchieveReward::kIdFieldNumber;
#endif  // !_MSC_VER

GetAchieveReward::GetAchieveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetAchieveReward)
}

void GetAchieveReward::InitAsDefaultInstance() {
}

GetAchieveReward::GetAchieveReward(const GetAchieveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetAchieveReward)
}

void GetAchieveReward::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 5;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAchieveReward::~GetAchieveReward() {
  // @@protoc_insertion_point(destructor:Cmd.GetAchieveReward)
  SharedDtor();
}

void GetAchieveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAchieveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAchieveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAchieveReward_descriptor_;
}

const GetAchieveReward& GetAchieveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

GetAchieveReward* GetAchieveReward::default_instance_ = NULL;

GetAchieveReward* GetAchieveReward::New() const {
  return new GetAchieveReward;
}

void GetAchieveReward::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 5;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAchieveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetAchieveReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETREWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetAchieveReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetAchieveReward)
  return false;
#undef DO_
}

void GetAchieveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetAchieveReward)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETREWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetAchieveReward)
}

::google::protobuf::uint8* GetAchieveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetAchieveReward)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETREWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 id = 3 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetAchieveReward)
  return target;
}

int GetAchieveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETREWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 id = 3 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAchieveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAchieveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAchieveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAchieveReward::MergeFrom(const GetAchieveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAchieveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAchieveReward::CopyFrom(const GetAchieveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAchieveReward::IsInitialized() const {

  return true;
}

void GetAchieveReward::Swap(GetAchieveReward* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAchieveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAchieveReward_descriptor_;
  metadata.reflection = GetAchieveReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Unlock::kCmdFieldNumber;
const int Unlock::kParamFieldNumber;
const int Unlock::kTypeFieldNumber;
const int Unlock::kIdFieldNumber;
#endif  // !_MSC_VER

Unlock::Unlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.Unlock)
}

void Unlock::InitAsDefaultInstance() {
}

Unlock::Unlock(const Unlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.Unlock)
}

void Unlock::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 6;
  type_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Unlock::~Unlock() {
  // @@protoc_insertion_point(destructor:Cmd.Unlock)
  SharedDtor();
}

void Unlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Unlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Unlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Unlock_descriptor_;
}

const Unlock& Unlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

Unlock* Unlock::default_instance_ = NULL;

Unlock* Unlock::New() const {
  return new Unlock;
}

void Unlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Unlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, id_);
    cmd_ = 23;
    param_ = 6;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Unlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.Unlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UNLOCK];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional uint32 id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.Unlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.Unlock)
  return false;
#undef DO_
}

void Unlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.Unlock)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UNLOCK];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.Unlock)
}

::google::protobuf::uint8* Unlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.Unlock)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UNLOCK];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 id = 4 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.Unlock)
  return target;
}

int Unlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UNLOCK];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 id = 4 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Unlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Unlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Unlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Unlock::MergeFrom(const Unlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Unlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Unlock::CopyFrom(const Unlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Unlock::IsInitialized() const {

  return true;
}

void Unlock::Swap(Unlock* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Unlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Unlock_descriptor_;
  metadata.reflection = Unlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPointSync::kCmdFieldNumber;
const int SkillPointSync::kParamFieldNumber;
const int SkillPointSync::kSkillpointFieldNumber;
#endif  // !_MSC_VER

SkillPointSync::SkillPointSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SkillPointSync)
}

void SkillPointSync::InitAsDefaultInstance() {
}

SkillPointSync::SkillPointSync(const SkillPointSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SkillPointSync)
}

void SkillPointSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 7;
  skillpoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPointSync::~SkillPointSync() {
  // @@protoc_insertion_point(destructor:Cmd.SkillPointSync)
  SharedDtor();
}

void SkillPointSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPointSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPointSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPointSync_descriptor_;
}

const SkillPointSync& SkillPointSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

SkillPointSync* SkillPointSync::default_instance_ = NULL;

SkillPointSync* SkillPointSync::New() const {
  return new SkillPointSync;
}

void SkillPointSync::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 7;
    skillpoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPointSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SkillPointSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_SKILLPOINTSYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skillpoint;
        break;
      }

      // optional uint32 skillpoint = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_skillpoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillpoint_)));
          set_has_skillpoint();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SkillPointSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SkillPointSync)
  return false;
#undef DO_
}

void SkillPointSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SkillPointSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_SKILLPOINTSYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 skillpoint = 3 [default = 0];
  if (has_skillpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skillpoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SkillPointSync)
}

::google::protobuf::uint8* SkillPointSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SkillPointSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_SKILLPOINTSYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 skillpoint = 3 [default = 0];
  if (has_skillpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skillpoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SkillPointSync)
  return target;
}

int SkillPointSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_SKILLPOINTSYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 skillpoint = 3 [default = 0];
    if (has_skillpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillpoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPointSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPointSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPointSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPointSync::MergeFrom(const SkillPointSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_skillpoint()) {
      set_skillpoint(from.skillpoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPointSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPointSync::CopyFrom(const SkillPointSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPointSync::IsInitialized() const {

  return true;
}

void SkillPointSync::Swap(SkillPointSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(skillpoint_, other->skillpoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPointSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPointSync_descriptor_;
  metadata.reflection = SkillPointSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LevelSync::kCmdFieldNumber;
const int LevelSync::kParamFieldNumber;
const int LevelSync::kLevelFieldNumber;
#endif  // !_MSC_VER

LevelSync::LevelSync()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LevelSync)
}

void LevelSync::InitAsDefaultInstance() {
}

LevelSync::LevelSync(const LevelSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LevelSync)
}

void LevelSync::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 8;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LevelSync::~LevelSync() {
  // @@protoc_insertion_point(destructor:Cmd.LevelSync)
  SharedDtor();
}

void LevelSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LevelSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LevelSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LevelSync_descriptor_;
}

const LevelSync& LevelSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

LevelSync* LevelSync::default_instance_ = NULL;

LevelSync* LevelSync::New() const {
  return new LevelSync;
}

void LevelSync::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 8;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LevelSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LevelSync)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_LEVELSYNC];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LevelSync)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LevelSync)
  return false;
#undef DO_
}

void LevelSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LevelSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_LEVELSYNC];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LevelSync)
}

::google::protobuf::uint8* LevelSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LevelSync)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_LEVELSYNC];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LevelSync)
  return target;
}

int LevelSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_LEVELSYNC];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LevelSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LevelSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LevelSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LevelSync::MergeFrom(const LevelSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LevelSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LevelSync::CopyFrom(const LevelSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelSync::IsInitialized() const {

  return true;
}

void LevelSync::Swap(LevelSync* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LevelSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LevelSync_descriptor_;
  metadata.reflection = LevelSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetQuestReward::kCmdFieldNumber;
const int GetQuestReward::kParamFieldNumber;
const int GetQuestReward::kAppendidFieldNumber;
#endif  // !_MSC_VER

GetQuestReward::GetQuestReward()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetQuestReward)
}

void GetQuestReward::InitAsDefaultInstance() {
}

GetQuestReward::GetQuestReward(const GetQuestReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetQuestReward)
}

void GetQuestReward::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 9;
  appendid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetQuestReward::~GetQuestReward() {
  // @@protoc_insertion_point(destructor:Cmd.GetQuestReward)
  SharedDtor();
}

void GetQuestReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetQuestReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetQuestReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetQuestReward_descriptor_;
}

const GetQuestReward& GetQuestReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

GetQuestReward* GetQuestReward::default_instance_ = NULL;

GetQuestReward* GetQuestReward::New() const {
  return new GetQuestReward;
}

void GetQuestReward::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 23;
    param_ = 9;
    appendid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetQuestReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetQuestReward)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETQUESTREWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_appendid;
        break;
      }

      // optional uint32 appendid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_appendid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &appendid_)));
          set_has_appendid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetQuestReward)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetQuestReward)
  return false;
#undef DO_
}

void GetQuestReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetQuestReward)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETQUESTREWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 appendid = 3 [default = 0];
  if (has_appendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->appendid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetQuestReward)
}

::google::protobuf::uint8* GetQuestReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetQuestReward)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETQUESTREWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 appendid = 3 [default = 0];
  if (has_appendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->appendid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetQuestReward)
  return target;
}

int GetQuestReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETQUESTREWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 appendid = 3 [default = 0];
    if (has_appendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->appendid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetQuestReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetQuestReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetQuestReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetQuestReward::MergeFrom(const GetQuestReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_appendid()) {
      set_appendid(from.appendid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetQuestReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetQuestReward::CopyFrom(const GetQuestReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetQuestReward::IsInitialized() const {

  return true;
}

void GetQuestReward::Swap(GetQuestReward* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(appendid_, other->appendid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetQuestReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetQuestReward_descriptor_;
  metadata.reflection = GetQuestReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreManualCmd::kCmdFieldNumber;
const int StoreManualCmd::kParamFieldNumber;
const int StoreManualCmd::kTypeFieldNumber;
const int StoreManualCmd::kGuidFieldNumber;
#endif  // !_MSC_VER

StoreManualCmd::StoreManualCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.StoreManualCmd)
}

void StoreManualCmd::InitAsDefaultInstance() {
}

StoreManualCmd::StoreManualCmd(const StoreManualCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.StoreManualCmd)
}

void StoreManualCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 10;
  type_ = 0;
  guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreManualCmd::~StoreManualCmd() {
  // @@protoc_insertion_point(destructor:Cmd.StoreManualCmd)
  SharedDtor();
}

void StoreManualCmd::SharedDtor() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (this != default_instance_) {
  }
}

void StoreManualCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreManualCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreManualCmd_descriptor_;
}

const StoreManualCmd& StoreManualCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

StoreManualCmd* StoreManualCmd::default_instance_ = NULL;

StoreManualCmd* StoreManualCmd::New() const {
  return new StoreManualCmd;
}

void StoreManualCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 23;
    param_ = 10;
    type_ = 0;
    if (has_guid()) {
      if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreManualCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.StoreManualCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_STOREITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_guid;
        break;
      }

      // optional string guid = 4;
      case 4: {
        if (tag == 34) {
         parse_guid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guid().data(), this->guid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.StoreManualCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.StoreManualCmd)
  return false;
#undef DO_
}

void StoreManualCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.StoreManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_STOREITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.StoreManualCmd)
}

::google::protobuf::uint8* StoreManualCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.StoreManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_STOREITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional string guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guid().data(), this->guid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.StoreManualCmd)
  return target;
}

int StoreManualCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_STOREITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreManualCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreManualCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreManualCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreManualCmd::MergeFrom(const StoreManualCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreManualCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreManualCmd::CopyFrom(const StoreManualCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreManualCmd::IsInitialized() const {

  return true;
}

void StoreManualCmd::Swap(StoreManualCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreManualCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreManualCmd_descriptor_;
  metadata.reflection = StoreManualCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetManualCmd::kCmdFieldNumber;
const int GetManualCmd::kParamFieldNumber;
const int GetManualCmd::kTypeFieldNumber;
const int GetManualCmd::kItemidFieldNumber;
#endif  // !_MSC_VER

GetManualCmd::GetManualCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GetManualCmd)
}

void GetManualCmd::InitAsDefaultInstance() {
}

GetManualCmd::GetManualCmd(const GetManualCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GetManualCmd)
}

void GetManualCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 11;
  type_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetManualCmd::~GetManualCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GetManualCmd)
  SharedDtor();
}

void GetManualCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetManualCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetManualCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetManualCmd_descriptor_;
}

const GetManualCmd& GetManualCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

GetManualCmd* GetManualCmd::default_instance_ = NULL;

GetManualCmd* GetManualCmd::New() const {
  return new GetManualCmd;
}

void GetManualCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetManualCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, itemid_);
    cmd_ = 23;
    param_ = 11;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetManualCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GetManualCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EManualType_IsValid(value)) {
            set_type(static_cast< ::Cmd::EManualType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GetManualCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GetManualCmd)
  return false;
#undef DO_
}

void GetManualCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GetManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GetManualCmd)
}

::google::protobuf::uint8* GetManualCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GetManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 itemid = 4 [default = 0];
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GetManualCmd)
  return target;
}

int GetManualCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GETITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EManualType type = 3 [default = EMANUALTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 itemid = 4 [default = 0];
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetManualCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetManualCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetManualCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetManualCmd::MergeFrom(const GetManualCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetManualCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetManualCmd::CopyFrom(const GetManualCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManualCmd::IsInitialized() const {

  return true;
}

void GetManualCmd::Swap(GetManualCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetManualCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetManualCmd_descriptor_;
  metadata.reflection = GetManualCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupActionManualCmd::kCmdFieldNumber;
const int GroupActionManualCmd::kParamFieldNumber;
const int GroupActionManualCmd::kActionFieldNumber;
const int GroupActionManualCmd::kGroupIdFieldNumber;
#endif  // !_MSC_VER

GroupActionManualCmd::GroupActionManualCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GroupActionManualCmd)
}

void GroupActionManualCmd::InitAsDefaultInstance() {
}

GroupActionManualCmd::GroupActionManualCmd(const GroupActionManualCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GroupActionManualCmd)
}

void GroupActionManualCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 12;
  action_ = 0;
  group_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupActionManualCmd::~GroupActionManualCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GroupActionManualCmd)
  SharedDtor();
}

void GroupActionManualCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupActionManualCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupActionManualCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupActionManualCmd_descriptor_;
}

const GroupActionManualCmd& GroupActionManualCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

GroupActionManualCmd* GroupActionManualCmd::default_instance_ = NULL;

GroupActionManualCmd* GroupActionManualCmd::New() const {
  return new GroupActionManualCmd;
}

void GroupActionManualCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GroupActionManualCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(action_, group_id_);
    cmd_ = 23;
    param_ = 12;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupActionManualCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GroupActionManualCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GROUPACTION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // optional .Cmd.EGroupAction action = 3 [default = EGROUPACTION_MIN];
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGroupAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EGroupAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_group_id;
        break;
      }

      // optional uint32 group_id = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GroupActionManualCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GroupActionManualCmd)
  return false;
#undef DO_
}

void GroupActionManualCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GroupActionManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GROUPACTION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.EGroupAction action = 3 [default = EGROUPACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // optional uint32 group_id = 4 [default = 0];
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GroupActionManualCmd)
}

::google::protobuf::uint8* GroupActionManualCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GroupActionManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GROUPACTION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.EGroupAction action = 3 [default = EGROUPACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // optional uint32 group_id = 4 [default = 0];
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GroupActionManualCmd)
  return target;
}

int GroupActionManualCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_GROUPACTION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.EGroupAction action = 3 [default = EGROUPACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint32 group_id = 4 [default = 0];
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupActionManualCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupActionManualCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupActionManualCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupActionManualCmd::MergeFrom(const GroupActionManualCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupActionManualCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupActionManualCmd::CopyFrom(const GroupActionManualCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupActionManualCmd::IsInitialized() const {

  return true;
}

void GroupActionManualCmd::Swap(GroupActionManualCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(action_, other->action_);
    std::swap(group_id_, other->group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupActionManualCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupActionManualCmd_descriptor_;
  metadata.reflection = GroupActionManualCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsolvedPhoto::kIdFieldNumber;
const int UnsolvedPhoto::kTimeFieldNumber;
const int UnsolvedPhoto::kAnglezFieldNumber;
#endif  // !_MSC_VER

UnsolvedPhoto::UnsolvedPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnsolvedPhoto)
}

void UnsolvedPhoto::InitAsDefaultInstance() {
}

UnsolvedPhoto::UnsolvedPhoto(const UnsolvedPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnsolvedPhoto)
}

void UnsolvedPhoto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  time_ = 0u;
  anglez_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsolvedPhoto::~UnsolvedPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.UnsolvedPhoto)
  SharedDtor();
}

void UnsolvedPhoto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnsolvedPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsolvedPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsolvedPhoto_descriptor_;
}

const UnsolvedPhoto& UnsolvedPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

UnsolvedPhoto* UnsolvedPhoto::default_instance_ = NULL;

UnsolvedPhoto* UnsolvedPhoto::New() const {
  return new UnsolvedPhoto;
}

void UnsolvedPhoto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnsolvedPhoto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(id_, anglez_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsolvedPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnsolvedPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_anglez;
        break;
      }

      // optional uint32 anglez = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_anglez:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnsolvedPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnsolvedPhoto)
  return false;
#undef DO_
}

void UnsolvedPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnsolvedPhoto)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  // optional uint32 anglez = 3 [default = 0];
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->anglez(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnsolvedPhoto)
}

::google::protobuf::uint8* UnsolvedPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnsolvedPhoto)
  // optional uint32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  // optional uint32 anglez = 3 [default = 0];
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->anglez(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnsolvedPhoto)
  return target;
}

int UnsolvedPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 anglez = 3 [default = 0];
    if (has_anglez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anglez());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsolvedPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsolvedPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsolvedPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsolvedPhoto::MergeFrom(const UnsolvedPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsolvedPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsolvedPhoto::CopyFrom(const UnsolvedPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsolvedPhoto::IsInitialized() const {

  return true;
}

void UnsolvedPhoto::Swap(UnsolvedPhoto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(anglez_, other->anglez_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsolvedPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsolvedPhoto_descriptor_;
  metadata.reflection = UnsolvedPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnsolvedUserPhoto::kCharidFieldNumber;
const int UnsolvedUserPhoto::kNameFieldNumber;
const int UnsolvedUserPhoto::kPhotosFieldNumber;
#endif  // !_MSC_VER

UnsolvedUserPhoto::UnsolvedUserPhoto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UnsolvedUserPhoto)
}

void UnsolvedUserPhoto::InitAsDefaultInstance() {
}

UnsolvedUserPhoto::UnsolvedUserPhoto(const UnsolvedUserPhoto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UnsolvedUserPhoto)
}

void UnsolvedUserPhoto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnsolvedUserPhoto::~UnsolvedUserPhoto() {
  // @@protoc_insertion_point(destructor:Cmd.UnsolvedUserPhoto)
  SharedDtor();
}

void UnsolvedUserPhoto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UnsolvedUserPhoto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnsolvedUserPhoto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnsolvedUserPhoto_descriptor_;
}

const UnsolvedUserPhoto& UnsolvedUserPhoto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

UnsolvedUserPhoto* UnsolvedUserPhoto::default_instance_ = NULL;

UnsolvedUserPhoto* UnsolvedUserPhoto::New() const {
  return new UnsolvedUserPhoto;
}

void UnsolvedUserPhoto::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnsolvedUserPhoto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UnsolvedUserPhoto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        break;
      }

      // repeated .Cmd.UnsolvedPhoto photos = 3;
      case 3: {
        if (tag == 26) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UnsolvedUserPhoto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UnsolvedUserPhoto)
  return false;
#undef DO_
}

void UnsolvedUserPhoto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UnsolvedUserPhoto)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .Cmd.UnsolvedPhoto photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->photos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UnsolvedUserPhoto)
}

::google::protobuf::uint8* UnsolvedUserPhoto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UnsolvedUserPhoto)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .Cmd.UnsolvedPhoto photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->photos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UnsolvedUserPhoto)
  return target;
}

int UnsolvedUserPhoto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .Cmd.UnsolvedPhoto photos = 3;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnsolvedUserPhoto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnsolvedUserPhoto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnsolvedUserPhoto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnsolvedUserPhoto::MergeFrom(const UnsolvedUserPhoto& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnsolvedUserPhoto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnsolvedUserPhoto::CopyFrom(const UnsolvedUserPhoto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsolvedUserPhoto::IsInitialized() const {

  return true;
}

void UnsolvedUserPhoto::Swap(UnsolvedUserPhoto* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    photos_.Swap(&other->photos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnsolvedUserPhoto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnsolvedUserPhoto_descriptor_;
  metadata.reflection = UnsolvedUserPhoto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryUnsolvedPhotoManualCmd::kCmdFieldNumber;
const int QueryUnsolvedPhotoManualCmd::kParamFieldNumber;
const int QueryUnsolvedPhotoManualCmd::kPhotosFieldNumber;
const int QueryUnsolvedPhotoManualCmd::kTimeFieldNumber;
#endif  // !_MSC_VER

QueryUnsolvedPhotoManualCmd::QueryUnsolvedPhotoManualCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryUnsolvedPhotoManualCmd)
}

void QueryUnsolvedPhotoManualCmd::InitAsDefaultInstance() {
}

QueryUnsolvedPhotoManualCmd::QueryUnsolvedPhotoManualCmd(const QueryUnsolvedPhotoManualCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryUnsolvedPhotoManualCmd)
}

void QueryUnsolvedPhotoManualCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 13;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryUnsolvedPhotoManualCmd::~QueryUnsolvedPhotoManualCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryUnsolvedPhotoManualCmd)
  SharedDtor();
}

void QueryUnsolvedPhotoManualCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryUnsolvedPhotoManualCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryUnsolvedPhotoManualCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryUnsolvedPhotoManualCmd_descriptor_;
}

const QueryUnsolvedPhotoManualCmd& QueryUnsolvedPhotoManualCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

QueryUnsolvedPhotoManualCmd* QueryUnsolvedPhotoManualCmd::default_instance_ = NULL;

QueryUnsolvedPhotoManualCmd* QueryUnsolvedPhotoManualCmd::New() const {
  return new QueryUnsolvedPhotoManualCmd;
}

void QueryUnsolvedPhotoManualCmd::Clear() {
  if (_has_bits_[0 / 32] & 11) {
    cmd_ = 23;
    param_ = 13;
    time_ = 0u;
  }
  photos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryUnsolvedPhotoManualCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryUnsolvedPhotoManualCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERY_UNSOLVED_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        break;
      }

      // repeated .Cmd.UnsolvedUserPhoto photos = 3;
      case 3: {
        if (tag == 26) {
         parse_photos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_photos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_photos;
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint32 time = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryUnsolvedPhotoManualCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryUnsolvedPhotoManualCmd)
  return false;
#undef DO_
}

void QueryUnsolvedPhotoManualCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryUnsolvedPhotoManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERY_UNSOLVED_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.UnsolvedUserPhoto photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->photos(i), output);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryUnsolvedPhotoManualCmd)
}

::google::protobuf::uint8* QueryUnsolvedPhotoManualCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryUnsolvedPhotoManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERY_UNSOLVED_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.UnsolvedUserPhoto photos = 3;
  for (int i = 0; i < this->photos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->photos(i), target);
  }

  // optional uint32 time = 4 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryUnsolvedPhotoManualCmd)
  return target;
}

int QueryUnsolvedPhotoManualCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_QUERY_UNSOLVED_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 time = 4 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  // repeated .Cmd.UnsolvedUserPhoto photos = 3;
  total_size += 1 * this->photos_size();
  for (int i = 0; i < this->photos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->photos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryUnsolvedPhotoManualCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryUnsolvedPhotoManualCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryUnsolvedPhotoManualCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryUnsolvedPhotoManualCmd::MergeFrom(const QueryUnsolvedPhotoManualCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  photos_.MergeFrom(from.photos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryUnsolvedPhotoManualCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryUnsolvedPhotoManualCmd::CopyFrom(const QueryUnsolvedPhotoManualCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryUnsolvedPhotoManualCmd::IsInitialized() const {

  return true;
}

void QueryUnsolvedPhotoManualCmd::Swap(QueryUnsolvedPhotoManualCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    photos_.Swap(&other->photos_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryUnsolvedPhotoManualCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryUnsolvedPhotoManualCmd_descriptor_;
  metadata.reflection = QueryUnsolvedPhotoManualCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateSolvedPhotoManualCmd::kCmdFieldNumber;
const int UpdateSolvedPhotoManualCmd::kParamFieldNumber;
const int UpdateSolvedPhotoManualCmd::kCharidFieldNumber;
const int UpdateSolvedPhotoManualCmd::kSceneryidFieldNumber;
#endif  // !_MSC_VER

UpdateSolvedPhotoManualCmd::UpdateSolvedPhotoManualCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateSolvedPhotoManualCmd)
}

void UpdateSolvedPhotoManualCmd::InitAsDefaultInstance() {
}

UpdateSolvedPhotoManualCmd::UpdateSolvedPhotoManualCmd(const UpdateSolvedPhotoManualCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateSolvedPhotoManualCmd)
}

void UpdateSolvedPhotoManualCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 23;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  sceneryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateSolvedPhotoManualCmd::~UpdateSolvedPhotoManualCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateSolvedPhotoManualCmd)
  SharedDtor();
}

void UpdateSolvedPhotoManualCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateSolvedPhotoManualCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSolvedPhotoManualCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateSolvedPhotoManualCmd_descriptor_;
}

const UpdateSolvedPhotoManualCmd& UpdateSolvedPhotoManualCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SceneManual_2eproto();
  return *default_instance_;
}

UpdateSolvedPhotoManualCmd* UpdateSolvedPhotoManualCmd::default_instance_ = NULL;

UpdateSolvedPhotoManualCmd* UpdateSolvedPhotoManualCmd::New() const {
  return new UpdateSolvedPhotoManualCmd;
}

void UpdateSolvedPhotoManualCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateSolvedPhotoManualCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, sceneryid_);
    cmd_ = 23;
    param_ = 14;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateSolvedPhotoManualCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateSolvedPhotoManualCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE_UNSOLVED_PHOTO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ManualParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ManualParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sceneryid;
        break;
      }

      // optional uint32 sceneryid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_sceneryid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sceneryid_)));
          set_has_sceneryid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateSolvedPhotoManualCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateSolvedPhotoManualCmd)
  return false;
#undef DO_
}

void UpdateSolvedPhotoManualCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateSolvedPhotoManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE_UNSOLVED_PHOTO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 sceneryid = 4 [default = 0];
  if (has_sceneryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sceneryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateSolvedPhotoManualCmd)
}

::google::protobuf::uint8* UpdateSolvedPhotoManualCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateSolvedPhotoManualCmd)
  // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE_UNSOLVED_PHOTO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 sceneryid = 4 [default = 0];
  if (has_sceneryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sceneryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateSolvedPhotoManualCmd)
  return target;
}

int UpdateSolvedPhotoManualCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SCENE_USER_MANUAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ManualParam param = 2 [default = MANUALPARAM_UPDATE_UNSOLVED_PHOTO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 sceneryid = 4 [default = 0];
    if (has_sceneryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sceneryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSolvedPhotoManualCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateSolvedPhotoManualCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateSolvedPhotoManualCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateSolvedPhotoManualCmd::MergeFrom(const UpdateSolvedPhotoManualCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sceneryid()) {
      set_sceneryid(from.sceneryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateSolvedPhotoManualCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSolvedPhotoManualCmd::CopyFrom(const UpdateSolvedPhotoManualCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSolvedPhotoManualCmd::IsInitialized() const {

  return true;
}

void UpdateSolvedPhotoManualCmd::Swap(UpdateSolvedPhotoManualCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(sceneryid_, other->sceneryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateSolvedPhotoManualCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateSolvedPhotoManualCmd_descriptor_;
  metadata.reflection = UpdateSolvedPhotoManualCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
