// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PveCard.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PveCard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* InvitePveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitePveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyPveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterPveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PveCardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PveCardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCardInfoCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCardInfoCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SelectPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SelectPveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncProcessPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncProcessPveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateProcessPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateProcessPveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeginFirePveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeginFirePveCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishPlayCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishPlayCardCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayPveCardCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayPveCardCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPveCardParam_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PveCard_2eproto() {
  protobuf_AddDesc_PveCard_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PveCard.proto");
  GOOGLE_CHECK(file != NULL);
  InvitePveCardCmd_descriptor_ = file->message_type(0);
  static const int InvitePveCardCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, configid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, iscancel_),
  };
  InvitePveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitePveCardCmd_descriptor_,
      InvitePveCardCmd::default_instance_,
      InvitePveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitePveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitePveCardCmd));
  ReplyPveCardCmd_descriptor_ = file->message_type(1);
  static const int ReplyPveCardCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, charid_),
  };
  ReplyPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyPveCardCmd_descriptor_,
      ReplyPveCardCmd::default_instance_,
      ReplyPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyPveCardCmd));
  EnterPveCardCmd_descriptor_ = file->message_type(2);
  static const int EnterPveCardCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPveCardCmd, configid_),
  };
  EnterPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterPveCardCmd_descriptor_,
      EnterPveCardCmd::default_instance_,
      EnterPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterPveCardCmd));
  PveCardInfo_descriptor_ = file->message_type(3);
  static const int PveCardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveCardInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveCardInfo, cardids_),
  };
  PveCardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PveCardInfo_descriptor_,
      PveCardInfo::default_instance_,
      PveCardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveCardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PveCardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PveCardInfo));
  QueryCardInfoCmd_descriptor_ = file->message_type(4);
  static const int QueryCardInfoCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCardInfoCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCardInfoCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCardInfoCmd, cards_),
  };
  QueryCardInfoCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCardInfoCmd_descriptor_,
      QueryCardInfoCmd::default_instance_,
      QueryCardInfoCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCardInfoCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCardInfoCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCardInfoCmd));
  SelectPveCardCmd_descriptor_ = file->message_type(5);
  static const int SelectPveCardCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectPveCardCmd, index_),
  };
  SelectPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SelectPveCardCmd_descriptor_,
      SelectPveCardCmd::default_instance_,
      SelectPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SelectPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SelectPveCardCmd));
  SyncProcessPveCardCmd_descriptor_ = file->message_type(6);
  static const int SyncProcessPveCardCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, card_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, process_),
  };
  SyncProcessPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncProcessPveCardCmd_descriptor_,
      SyncProcessPveCardCmd::default_instance_,
      SyncProcessPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncProcessPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncProcessPveCardCmd));
  UpdateProcessPveCardCmd_descriptor_ = file->message_type(7);
  static const int UpdateProcessPveCardCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProcessPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProcessPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProcessPveCardCmd, process_),
  };
  UpdateProcessPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateProcessPveCardCmd_descriptor_,
      UpdateProcessPveCardCmd::default_instance_,
      UpdateProcessPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProcessPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateProcessPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateProcessPveCardCmd));
  BeginFirePveCardCmd_descriptor_ = file->message_type(8);
  static const int BeginFirePveCardCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginFirePveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginFirePveCardCmd, param_),
  };
  BeginFirePveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeginFirePveCardCmd_descriptor_,
      BeginFirePveCardCmd::default_instance_,
      BeginFirePveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginFirePveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeginFirePveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeginFirePveCardCmd));
  FinishPlayCardCmd_descriptor_ = file->message_type(9);
  static const int FinishPlayCardCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishPlayCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishPlayCardCmd, param_),
  };
  FinishPlayCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishPlayCardCmd_descriptor_,
      FinishPlayCardCmd::default_instance_,
      FinishPlayCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishPlayCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishPlayCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishPlayCardCmd));
  PlayPveCardCmd_descriptor_ = file->message_type(10);
  static const int PlayPveCardCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, npcguid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, cardids_),
  };
  PlayPveCardCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayPveCardCmd_descriptor_,
      PlayPveCardCmd::default_instance_,
      PlayPveCardCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayPveCardCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayPveCardCmd));
  EPveCardParam_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PveCard_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitePveCardCmd_descriptor_, &InvitePveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyPveCardCmd_descriptor_, &ReplyPveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterPveCardCmd_descriptor_, &EnterPveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PveCardInfo_descriptor_, &PveCardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCardInfoCmd_descriptor_, &QueryCardInfoCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SelectPveCardCmd_descriptor_, &SelectPveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncProcessPveCardCmd_descriptor_, &SyncProcessPveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateProcessPveCardCmd_descriptor_, &UpdateProcessPveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeginFirePveCardCmd_descriptor_, &BeginFirePveCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishPlayCardCmd_descriptor_, &FinishPlayCardCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayPveCardCmd_descriptor_, &PlayPveCardCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PveCard_2eproto() {
  delete InvitePveCardCmd::default_instance_;
  delete InvitePveCardCmd_reflection_;
  delete ReplyPveCardCmd::default_instance_;
  delete ReplyPveCardCmd_reflection_;
  delete EnterPveCardCmd::default_instance_;
  delete EnterPveCardCmd_reflection_;
  delete PveCardInfo::default_instance_;
  delete PveCardInfo_reflection_;
  delete QueryCardInfoCmd::default_instance_;
  delete QueryCardInfoCmd_reflection_;
  delete SelectPveCardCmd::default_instance_;
  delete SelectPveCardCmd_reflection_;
  delete SyncProcessPveCardCmd::default_instance_;
  delete SyncProcessPveCardCmd_reflection_;
  delete UpdateProcessPveCardCmd::default_instance_;
  delete UpdateProcessPveCardCmd_reflection_;
  delete BeginFirePveCardCmd::default_instance_;
  delete BeginFirePveCardCmd_reflection_;
  delete FinishPlayCardCmd::default_instance_;
  delete FinishPlayCardCmd_reflection_;
  delete PlayPveCardCmd::default_instance_;
  delete PlayPveCardCmd_reflection_;
}

void protobuf_AddDesc_PveCard_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPveCard.proto\022\003Cmd\032\nxCmd.proto\"\247\001\n\020Inv"
    "itePveCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\021PVE_CARD_PROTOCMD\0227\n\005param\030\002 \001(\0162\022.Cmd"
    ".EPveCardParam:\024EPVE_INVITE_TEAM_CMD\022\023\n\010"
    "configid\030\003 \001(\r:\0010\022\027\n\010iscancel\030\004 \001(\010:\005fal"
    "se\"\240\001\n\017ReplyPveCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cm"
    "d.Command:\021PVE_CARD_PROTOCMD\0226\n\005param\030\002 "
    "\001(\0162\022.Cmd.EPveCardParam:\023EPVE_REPLY_TEAM"
    "_CMD\022\024\n\005agree\030\003 \001(\010:\005false\022\021\n\006charid\030\004 \001"
    "(\004:\0010\"\214\001\n\017EnterPveCardCmd\022,\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\021PVE_CARD_PROTOCMD\0226\n\005param"
    "\030\002 \001(\0162\022.Cmd.EPveCardParam:\023EPVE_ENTER_R"
    "AID_CMD\022\023\n\010configid\030\003 \001(\r:\0010\"0\n\013PveCardI"
    "nfo\022\020\n\005index\030\001 \001(\r:\0010\022\017\n\007cardids\030\002 \003(\r\"\235"
    "\001\n\020QueryCardInfoCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021PVE_CARD_PROTOCMD\022:\n\005param\030\002 \001(\016"
    "2\022.Cmd.EPveCardParam:\027EPVE_QUERY_ALL_CAR"
    "D_CMD\022\037\n\005cards\030\003 \003(\0132\020.Cmd.PveCardInfo\"\210"
    "\001\n\020SelectPveCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021PVE_CARD_PROTOCMD\0227\n\005param\030\002 \001(\016"
    "2\022.Cmd.EPveCardParam:\024EPVE_SELECT_CARD_C"
    "MD\022\r\n\005index\030\003 \002(\r\"\264\001\n\025SyncProcessPveCard"
    "Cmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\021PVE_CARD"
    "_PROTOCMD\0229\n\005param\030\002 \001(\0162\022.Cmd.EPveCardP"
    "aram:\026EPVE_SELECTED_CARD_CMD\022\036\n\004card\030\003 \001"
    "(\0132\020.Cmd.PveCardInfo\022\022\n\007process\030\004 \001(\r:\0010"
    "\"\224\001\n\027UpdateProcessPveCardCmd\022,\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\021PVE_CARD_PROTOCMD\0227\n\005pa"
    "ram\030\002 \001(\0162\022.Cmd.EPveCardParam:\024EPVE_UPDA"
    "TE_CARD_CMD\022\022\n\007process\030\003 \001(\r:\0010\"{\n\023Begin"
    "FirePveCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Comman"
    "d:\021PVE_CARD_PROTOCMD\0226\n\005param\030\002 \001(\0162\022.Cm"
    "d.EPveCardParam:\023EPVE_BEGIN_FIRE_CMD\"z\n\021"
    "FinishPlayCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.Com"
    "mand:\021PVE_CARD_PROTOCMD\0227\n\005param\030\002 \001(\0162\022"
    ".Cmd.EPveCardParam:\024EPVE_FINISH_CARD_CMD"
    "\"\227\001\n\016PlayPveCardCmd\022,\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\021PVE_CARD_PROTOCMD\0225\n\005param\030\002 \001(\016"
    "2\022.Cmd.EPveCardParam:\022EPVE_PLAY_CARD_CMD"
    "\022\017\n\007npcguid\030\003 \002(\004\022\017\n\007cardids\030\004 \003(\r*\223\002\n\rE"
    "PveCardParam\022\030\n\024EPVE_INVITE_TEAM_CMD\020\001\022\027"
    "\n\023EPVE_REPLY_TEAM_CMD\020\002\022\027\n\023EPVE_ENTER_RA"
    "ID_CMD\020\003\022\033\n\027EPVE_QUERY_ALL_CARD_CMD\020\004\022\030\n"
    "\024EPVE_SELECT_CARD_CMD\020\005\022\032\n\026EPVE_SELECTED"
    "_CARD_CMD\020\006\022\030\n\024EPVE_UPDATE_CARD_CMD\020\007\022\027\n"
    "\023EPVE_BEGIN_FIRE_CMD\020\010\022\030\n\024EPVE_FINISH_CA"
    "RD_CMD\020\t\022\026\n\022EPVE_PLAY_CARD_CMD\020\n", 1872);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PveCard.proto", &protobuf_RegisterTypes);
  InvitePveCardCmd::default_instance_ = new InvitePveCardCmd();
  ReplyPveCardCmd::default_instance_ = new ReplyPveCardCmd();
  EnterPveCardCmd::default_instance_ = new EnterPveCardCmd();
  PveCardInfo::default_instance_ = new PveCardInfo();
  QueryCardInfoCmd::default_instance_ = new QueryCardInfoCmd();
  SelectPveCardCmd::default_instance_ = new SelectPveCardCmd();
  SyncProcessPveCardCmd::default_instance_ = new SyncProcessPveCardCmd();
  UpdateProcessPveCardCmd::default_instance_ = new UpdateProcessPveCardCmd();
  BeginFirePveCardCmd::default_instance_ = new BeginFirePveCardCmd();
  FinishPlayCardCmd::default_instance_ = new FinishPlayCardCmd();
  PlayPveCardCmd::default_instance_ = new PlayPveCardCmd();
  InvitePveCardCmd::default_instance_->InitAsDefaultInstance();
  ReplyPveCardCmd::default_instance_->InitAsDefaultInstance();
  EnterPveCardCmd::default_instance_->InitAsDefaultInstance();
  PveCardInfo::default_instance_->InitAsDefaultInstance();
  QueryCardInfoCmd::default_instance_->InitAsDefaultInstance();
  SelectPveCardCmd::default_instance_->InitAsDefaultInstance();
  SyncProcessPveCardCmd::default_instance_->InitAsDefaultInstance();
  UpdateProcessPveCardCmd::default_instance_->InitAsDefaultInstance();
  BeginFirePveCardCmd::default_instance_->InitAsDefaultInstance();
  FinishPlayCardCmd::default_instance_->InitAsDefaultInstance();
  PlayPveCardCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PveCard_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PveCard_2eproto {
  StaticDescriptorInitializer_PveCard_2eproto() {
    protobuf_AddDesc_PveCard_2eproto();
  }
} static_descriptor_initializer_PveCard_2eproto_;
const ::google::protobuf::EnumDescriptor* EPveCardParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPveCardParam_descriptor_;
}
bool EPveCardParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int InvitePveCardCmd::kCmdFieldNumber;
const int InvitePveCardCmd::kParamFieldNumber;
const int InvitePveCardCmd::kConfigidFieldNumber;
const int InvitePveCardCmd::kIscancelFieldNumber;
#endif  // !_MSC_VER

InvitePveCardCmd::InvitePveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.InvitePveCardCmd)
}

void InvitePveCardCmd::InitAsDefaultInstance() {
}

InvitePveCardCmd::InvitePveCardCmd(const InvitePveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.InvitePveCardCmd)
}

void InvitePveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 1;
  configid_ = 0u;
  iscancel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitePveCardCmd::~InvitePveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.InvitePveCardCmd)
  SharedDtor();
}

void InvitePveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InvitePveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitePveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitePveCardCmd_descriptor_;
}

const InvitePveCardCmd& InvitePveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

InvitePveCardCmd* InvitePveCardCmd::default_instance_ = NULL;

InvitePveCardCmd* InvitePveCardCmd::New() const {
  return new InvitePveCardCmd;
}

void InvitePveCardCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InvitePveCardCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(configid_, iscancel_);
    cmd_ = 66;
    param_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitePveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.InvitePveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_iscancel;
        break;
      }

      // optional bool iscancel = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_iscancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscancel_)));
          set_has_iscancel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.InvitePveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.InvitePveCardCmd)
  return false;
#undef DO_
}

void InvitePveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.InvitePveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  // optional bool iscancel = 4 [default = false];
  if (has_iscancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iscancel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.InvitePveCardCmd)
}

::google::protobuf::uint8* InvitePveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.InvitePveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  // optional bool iscancel = 4 [default = false];
  if (has_iscancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iscancel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.InvitePveCardCmd)
  return target;
}

int InvitePveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_INVITE_TEAM_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 configid = 3 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

    // optional bool iscancel = 4 [default = false];
    if (has_iscancel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitePveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitePveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitePveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitePveCardCmd::MergeFrom(const InvitePveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
    if (from.has_iscancel()) {
      set_iscancel(from.iscancel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitePveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitePveCardCmd::CopyFrom(const InvitePveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePveCardCmd::IsInitialized() const {

  return true;
}

void InvitePveCardCmd::Swap(InvitePveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(configid_, other->configid_);
    std::swap(iscancel_, other->iscancel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitePveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitePveCardCmd_descriptor_;
  metadata.reflection = InvitePveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyPveCardCmd::kCmdFieldNumber;
const int ReplyPveCardCmd::kParamFieldNumber;
const int ReplyPveCardCmd::kAgreeFieldNumber;
const int ReplyPveCardCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

ReplyPveCardCmd::ReplyPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ReplyPveCardCmd)
}

void ReplyPveCardCmd::InitAsDefaultInstance() {
}

ReplyPveCardCmd::ReplyPveCardCmd(const ReplyPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ReplyPveCardCmd)
}

void ReplyPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 2;
  agree_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyPveCardCmd::~ReplyPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ReplyPveCardCmd)
  SharedDtor();
}

void ReplyPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyPveCardCmd_descriptor_;
}

const ReplyPveCardCmd& ReplyPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

ReplyPveCardCmd* ReplyPveCardCmd::default_instance_ = NULL;

ReplyPveCardCmd* ReplyPveCardCmd::New() const {
  return new ReplyPveCardCmd;
}

void ReplyPveCardCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ReplyPveCardCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, agree_);
    cmd_ = 66;
    param_ = 2;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ReplyPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_agree;
        break;
      }

      // optional bool agree = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ReplyPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ReplyPveCardCmd)
  return false;
#undef DO_
}

void ReplyPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ReplyPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->agree(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ReplyPveCardCmd)
}

::google::protobuf::uint8* ReplyPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ReplyPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool agree = 3 [default = false];
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->agree(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ReplyPveCardCmd)
  return target;
}

int ReplyPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_REPLY_TEAM_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool agree = 3 [default = false];
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyPveCardCmd::MergeFrom(const ReplyPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyPveCardCmd::CopyFrom(const ReplyPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyPveCardCmd::IsInitialized() const {

  return true;
}

void ReplyPveCardCmd::Swap(ReplyPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyPveCardCmd_descriptor_;
  metadata.reflection = ReplyPveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterPveCardCmd::kCmdFieldNumber;
const int EnterPveCardCmd::kParamFieldNumber;
const int EnterPveCardCmd::kConfigidFieldNumber;
#endif  // !_MSC_VER

EnterPveCardCmd::EnterPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.EnterPveCardCmd)
}

void EnterPveCardCmd::InitAsDefaultInstance() {
}

EnterPveCardCmd::EnterPveCardCmd(const EnterPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.EnterPveCardCmd)
}

void EnterPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 3;
  configid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterPveCardCmd::~EnterPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.EnterPveCardCmd)
  SharedDtor();
}

void EnterPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterPveCardCmd_descriptor_;
}

const EnterPveCardCmd& EnterPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

EnterPveCardCmd* EnterPveCardCmd::default_instance_ = NULL;

EnterPveCardCmd* EnterPveCardCmd::New() const {
  return new EnterPveCardCmd;
}

void EnterPveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 66;
    param_ = 3;
    configid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.EnterPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.EnterPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.EnterPveCardCmd)
  return false;
#undef DO_
}

void EnterPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.EnterPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.EnterPveCardCmd)
}

::google::protobuf::uint8* EnterPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.EnterPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 configid = 3 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.EnterPveCardCmd)
  return target;
}

int EnterPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_ENTER_RAID_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 configid = 3 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterPveCardCmd::MergeFrom(const EnterPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterPveCardCmd::CopyFrom(const EnterPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterPveCardCmd::IsInitialized() const {

  return true;
}

void EnterPveCardCmd::Swap(EnterPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterPveCardCmd_descriptor_;
  metadata.reflection = EnterPveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PveCardInfo::kIndexFieldNumber;
const int PveCardInfo::kCardidsFieldNumber;
#endif  // !_MSC_VER

PveCardInfo::PveCardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PveCardInfo)
}

void PveCardInfo::InitAsDefaultInstance() {
}

PveCardInfo::PveCardInfo(const PveCardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PveCardInfo)
}

void PveCardInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PveCardInfo::~PveCardInfo() {
  // @@protoc_insertion_point(destructor:Cmd.PveCardInfo)
  SharedDtor();
}

void PveCardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PveCardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PveCardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PveCardInfo_descriptor_;
}

const PveCardInfo& PveCardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

PveCardInfo* PveCardInfo::default_instance_ = NULL;

PveCardInfo* PveCardInfo::New() const {
  return new PveCardInfo;
}

void PveCardInfo::Clear() {
  index_ = 0u;
  cardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PveCardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PveCardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cardids;
        break;
      }

      // repeated uint32 cardids = 2;
      case 2: {
        if (tag == 16) {
         parse_cardids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_cardids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cardids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_cardids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PveCardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PveCardInfo)
  return false;
#undef DO_
}

void PveCardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PveCardInfo)
  // optional uint32 index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // repeated uint32 cardids = 2;
  for (int i = 0; i < this->cardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->cardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PveCardInfo)
}

::google::protobuf::uint8* PveCardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PveCardInfo)
  // optional uint32 index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // repeated uint32 cardids = 2;
  for (int i = 0; i < this->cardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->cardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PveCardInfo)
  return target;
}

int PveCardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint32 cardids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cardids(i));
    }
    total_size += 1 * this->cardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PveCardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PveCardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PveCardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PveCardInfo::MergeFrom(const PveCardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardids_.MergeFrom(from.cardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PveCardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PveCardInfo::CopyFrom(const PveCardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PveCardInfo::IsInitialized() const {

  return true;
}

void PveCardInfo::Swap(PveCardInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    cardids_.Swap(&other->cardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PveCardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PveCardInfo_descriptor_;
  metadata.reflection = PveCardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryCardInfoCmd::kCmdFieldNumber;
const int QueryCardInfoCmd::kParamFieldNumber;
const int QueryCardInfoCmd::kCardsFieldNumber;
#endif  // !_MSC_VER

QueryCardInfoCmd::QueryCardInfoCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.QueryCardInfoCmd)
}

void QueryCardInfoCmd::InitAsDefaultInstance() {
}

QueryCardInfoCmd::QueryCardInfoCmd(const QueryCardInfoCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.QueryCardInfoCmd)
}

void QueryCardInfoCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCardInfoCmd::~QueryCardInfoCmd() {
  // @@protoc_insertion_point(destructor:Cmd.QueryCardInfoCmd)
  SharedDtor();
}

void QueryCardInfoCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QueryCardInfoCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCardInfoCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCardInfoCmd_descriptor_;
}

const QueryCardInfoCmd& QueryCardInfoCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

QueryCardInfoCmd* QueryCardInfoCmd::default_instance_ = NULL;

QueryCardInfoCmd* QueryCardInfoCmd::New() const {
  return new QueryCardInfoCmd;
}

void QueryCardInfoCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 66;
    param_ = 4;
  }
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCardInfoCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.QueryCardInfoCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        break;
      }

      // repeated .Cmd.PveCardInfo cards = 3;
      case 3: {
        if (tag == 26) {
         parse_cards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.QueryCardInfoCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.QueryCardInfoCmd)
  return false;
#undef DO_
}

void QueryCardInfoCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.QueryCardInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // repeated .Cmd.PveCardInfo cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.QueryCardInfoCmd)
}

::google::protobuf::uint8* QueryCardInfoCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.QueryCardInfoCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // repeated .Cmd.PveCardInfo cards = 3;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.QueryCardInfoCmd)
  return target;
}

int QueryCardInfoCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_QUERY_ALL_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  // repeated .Cmd.PveCardInfo cards = 3;
  total_size += 1 * this->cards_size();
  for (int i = 0; i < this->cards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCardInfoCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCardInfoCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCardInfoCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCardInfoCmd::MergeFrom(const QueryCardInfoCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCardInfoCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCardInfoCmd::CopyFrom(const QueryCardInfoCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCardInfoCmd::IsInitialized() const {

  return true;
}

void QueryCardInfoCmd::Swap(QueryCardInfoCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCardInfoCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCardInfoCmd_descriptor_;
  metadata.reflection = QueryCardInfoCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SelectPveCardCmd::kCmdFieldNumber;
const int SelectPveCardCmd::kParamFieldNumber;
const int SelectPveCardCmd::kIndexFieldNumber;
#endif  // !_MSC_VER

SelectPveCardCmd::SelectPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SelectPveCardCmd)
}

void SelectPveCardCmd::InitAsDefaultInstance() {
}

SelectPveCardCmd::SelectPveCardCmd(const SelectPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SelectPveCardCmd)
}

void SelectPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 5;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SelectPveCardCmd::~SelectPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SelectPveCardCmd)
  SharedDtor();
}

void SelectPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SelectPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SelectPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SelectPveCardCmd_descriptor_;
}

const SelectPveCardCmd& SelectPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

SelectPveCardCmd* SelectPveCardCmd::default_instance_ = NULL;

SelectPveCardCmd* SelectPveCardCmd::New() const {
  return new SelectPveCardCmd;
}

void SelectPveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 66;
    param_ = 5;
    index_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SelectPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SelectPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // required uint32 index = 3;
      case 3: {
        if (tag == 24) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SelectPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SelectPveCardCmd)
  return false;
#undef DO_
}

void SelectPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SelectPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SelectPveCardCmd)
}

::google::protobuf::uint8* SelectPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SelectPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SelectPveCardCmd)
  return target;
}

int SelectPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECT_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SelectPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SelectPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SelectPveCardCmd::MergeFrom(const SelectPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SelectPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SelectPveCardCmd::CopyFrom(const SelectPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectPveCardCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SelectPveCardCmd::Swap(SelectPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SelectPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SelectPveCardCmd_descriptor_;
  metadata.reflection = SelectPveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncProcessPveCardCmd::kCmdFieldNumber;
const int SyncProcessPveCardCmd::kParamFieldNumber;
const int SyncProcessPveCardCmd::kCardFieldNumber;
const int SyncProcessPveCardCmd::kProcessFieldNumber;
#endif  // !_MSC_VER

SyncProcessPveCardCmd::SyncProcessPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncProcessPveCardCmd)
}

void SyncProcessPveCardCmd::InitAsDefaultInstance() {
  card_ = const_cast< ::Cmd::PveCardInfo*>(&::Cmd::PveCardInfo::default_instance());
}

SyncProcessPveCardCmd::SyncProcessPveCardCmd(const SyncProcessPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncProcessPveCardCmd)
}

void SyncProcessPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 6;
  card_ = NULL;
  process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncProcessPveCardCmd::~SyncProcessPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncProcessPveCardCmd)
  SharedDtor();
}

void SyncProcessPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
    delete card_;
  }
}

void SyncProcessPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncProcessPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncProcessPveCardCmd_descriptor_;
}

const SyncProcessPveCardCmd& SyncProcessPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

SyncProcessPveCardCmd* SyncProcessPveCardCmd::default_instance_ = NULL;

SyncProcessPveCardCmd* SyncProcessPveCardCmd::New() const {
  return new SyncProcessPveCardCmd;
}

void SyncProcessPveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 66;
    param_ = 6;
    if (has_card()) {
      if (card_ != NULL) card_->::Cmd::PveCardInfo::Clear();
    }
    process_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncProcessPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncProcessPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_card;
        break;
      }

      // optional .Cmd.PveCardInfo card = 3;
      case 3: {
        if (tag == 26) {
         parse_card:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_card()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_process;
        break;
      }

      // optional uint32 process = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncProcessPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncProcessPveCardCmd)
  return false;
#undef DO_
}

void SyncProcessPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncProcessPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.PveCardInfo card = 3;
  if (has_card()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->card(), output);
  }

  // optional uint32 process = 4 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncProcessPveCardCmd)
}

::google::protobuf::uint8* SyncProcessPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncProcessPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.PveCardInfo card = 3;
  if (has_card()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->card(), target);
  }

  // optional uint32 process = 4 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncProcessPveCardCmd)
  return target;
}

int SyncProcessPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_SELECTED_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.PveCardInfo card = 3;
    if (has_card()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->card());
    }

    // optional uint32 process = 4 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncProcessPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncProcessPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncProcessPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncProcessPveCardCmd::MergeFrom(const SyncProcessPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_card()) {
      mutable_card()->::Cmd::PveCardInfo::MergeFrom(from.card());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncProcessPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncProcessPveCardCmd::CopyFrom(const SyncProcessPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncProcessPveCardCmd::IsInitialized() const {

  return true;
}

void SyncProcessPveCardCmd::Swap(SyncProcessPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(card_, other->card_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncProcessPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncProcessPveCardCmd_descriptor_;
  metadata.reflection = SyncProcessPveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateProcessPveCardCmd::kCmdFieldNumber;
const int UpdateProcessPveCardCmd::kParamFieldNumber;
const int UpdateProcessPveCardCmd::kProcessFieldNumber;
#endif  // !_MSC_VER

UpdateProcessPveCardCmd::UpdateProcessPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateProcessPveCardCmd)
}

void UpdateProcessPveCardCmd::InitAsDefaultInstance() {
}

UpdateProcessPveCardCmd::UpdateProcessPveCardCmd(const UpdateProcessPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateProcessPveCardCmd)
}

void UpdateProcessPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 7;
  process_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateProcessPveCardCmd::~UpdateProcessPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateProcessPveCardCmd)
  SharedDtor();
}

void UpdateProcessPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateProcessPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateProcessPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateProcessPveCardCmd_descriptor_;
}

const UpdateProcessPveCardCmd& UpdateProcessPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

UpdateProcessPveCardCmd* UpdateProcessPveCardCmd::default_instance_ = NULL;

UpdateProcessPveCardCmd* UpdateProcessPveCardCmd::New() const {
  return new UpdateProcessPveCardCmd;
}

void UpdateProcessPveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 66;
    param_ = 7;
    process_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateProcessPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateProcessPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_process;
        break;
      }

      // optional uint32 process = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_process:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &process_)));
          set_has_process();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateProcessPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateProcessPveCardCmd)
  return false;
#undef DO_
}

void UpdateProcessPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateProcessPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 process = 3 [default = 0];
  if (has_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->process(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateProcessPveCardCmd)
}

::google::protobuf::uint8* UpdateProcessPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateProcessPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 process = 3 [default = 0];
  if (has_process()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->process(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateProcessPveCardCmd)
  return target;
}

int UpdateProcessPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_UPDATE_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 process = 3 [default = 0];
    if (has_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->process());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateProcessPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateProcessPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateProcessPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateProcessPveCardCmd::MergeFrom(const UpdateProcessPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_process()) {
      set_process(from.process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateProcessPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateProcessPveCardCmd::CopyFrom(const UpdateProcessPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProcessPveCardCmd::IsInitialized() const {

  return true;
}

void UpdateProcessPveCardCmd::Swap(UpdateProcessPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(process_, other->process_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateProcessPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateProcessPveCardCmd_descriptor_;
  metadata.reflection = UpdateProcessPveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeginFirePveCardCmd::kCmdFieldNumber;
const int BeginFirePveCardCmd::kParamFieldNumber;
#endif  // !_MSC_VER

BeginFirePveCardCmd::BeginFirePveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.BeginFirePveCardCmd)
}

void BeginFirePveCardCmd::InitAsDefaultInstance() {
}

BeginFirePveCardCmd::BeginFirePveCardCmd(const BeginFirePveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.BeginFirePveCardCmd)
}

void BeginFirePveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeginFirePveCardCmd::~BeginFirePveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.BeginFirePveCardCmd)
  SharedDtor();
}

void BeginFirePveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeginFirePveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginFirePveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeginFirePveCardCmd_descriptor_;
}

const BeginFirePveCardCmd& BeginFirePveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

BeginFirePveCardCmd* BeginFirePveCardCmd::default_instance_ = NULL;

BeginFirePveCardCmd* BeginFirePveCardCmd::New() const {
  return new BeginFirePveCardCmd;
}

void BeginFirePveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 66;
    param_ = 8;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeginFirePveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.BeginFirePveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.BeginFirePveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.BeginFirePveCardCmd)
  return false;
#undef DO_
}

void BeginFirePveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.BeginFirePveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.BeginFirePveCardCmd)
}

::google::protobuf::uint8* BeginFirePveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.BeginFirePveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.BeginFirePveCardCmd)
  return target;
}

int BeginFirePveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_BEGIN_FIRE_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginFirePveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeginFirePveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeginFirePveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeginFirePveCardCmd::MergeFrom(const BeginFirePveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeginFirePveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginFirePveCardCmd::CopyFrom(const BeginFirePveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginFirePveCardCmd::IsInitialized() const {

  return true;
}

void BeginFirePveCardCmd::Swap(BeginFirePveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeginFirePveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeginFirePveCardCmd_descriptor_;
  metadata.reflection = BeginFirePveCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishPlayCardCmd::kCmdFieldNumber;
const int FinishPlayCardCmd::kParamFieldNumber;
#endif  // !_MSC_VER

FinishPlayCardCmd::FinishPlayCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.FinishPlayCardCmd)
}

void FinishPlayCardCmd::InitAsDefaultInstance() {
}

FinishPlayCardCmd::FinishPlayCardCmd(const FinishPlayCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.FinishPlayCardCmd)
}

void FinishPlayCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 9;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishPlayCardCmd::~FinishPlayCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.FinishPlayCardCmd)
  SharedDtor();
}

void FinishPlayCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishPlayCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishPlayCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishPlayCardCmd_descriptor_;
}

const FinishPlayCardCmd& FinishPlayCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

FinishPlayCardCmd* FinishPlayCardCmd::default_instance_ = NULL;

FinishPlayCardCmd* FinishPlayCardCmd::New() const {
  return new FinishPlayCardCmd;
}

void FinishPlayCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 66;
    param_ = 9;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishPlayCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.FinishPlayCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.FinishPlayCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.FinishPlayCardCmd)
  return false;
#undef DO_
}

void FinishPlayCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.FinishPlayCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.FinishPlayCardCmd)
}

::google::protobuf::uint8* FinishPlayCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.FinishPlayCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.FinishPlayCardCmd)
  return target;
}

int FinishPlayCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_FINISH_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishPlayCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishPlayCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishPlayCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishPlayCardCmd::MergeFrom(const FinishPlayCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishPlayCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishPlayCardCmd::CopyFrom(const FinishPlayCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishPlayCardCmd::IsInitialized() const {

  return true;
}

void FinishPlayCardCmd::Swap(FinishPlayCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishPlayCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishPlayCardCmd_descriptor_;
  metadata.reflection = FinishPlayCardCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayPveCardCmd::kCmdFieldNumber;
const int PlayPveCardCmd::kParamFieldNumber;
const int PlayPveCardCmd::kNpcguidFieldNumber;
const int PlayPveCardCmd::kCardidsFieldNumber;
#endif  // !_MSC_VER

PlayPveCardCmd::PlayPveCardCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.PlayPveCardCmd)
}

void PlayPveCardCmd::InitAsDefaultInstance() {
}

PlayPveCardCmd::PlayPveCardCmd(const PlayPveCardCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.PlayPveCardCmd)
}

void PlayPveCardCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 66;
  param_ = 10;
  npcguid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayPveCardCmd::~PlayPveCardCmd() {
  // @@protoc_insertion_point(destructor:Cmd.PlayPveCardCmd)
  SharedDtor();
}

void PlayPveCardCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayPveCardCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayPveCardCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayPveCardCmd_descriptor_;
}

const PlayPveCardCmd& PlayPveCardCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PveCard_2eproto();
  return *default_instance_;
}

PlayPveCardCmd* PlayPveCardCmd::default_instance_ = NULL;

PlayPveCardCmd* PlayPveCardCmd::New() const {
  return new PlayPveCardCmd;
}

void PlayPveCardCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 66;
    param_ = 10;
    npcguid_ = GOOGLE_ULONGLONG(0);
  }
  cardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayPveCardCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.PlayPveCardCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EPveCardParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::EPveCardParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_npcguid;
        break;
      }

      // required uint64 npcguid = 3;
      case 3: {
        if (tag == 24) {
         parse_npcguid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &npcguid_)));
          set_has_npcguid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cardids;
        break;
      }

      // repeated uint32 cardids = 4;
      case 4: {
        if (tag == 32) {
         parse_cardids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_cardids())));
        } else if (tag == 34) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cardids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cardids;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.PlayPveCardCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.PlayPveCardCmd)
  return false;
#undef DO_
}

void PlayPveCardCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.PlayPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->npcguid(), output);
  }

  // repeated uint32 cardids = 4;
  for (int i = 0; i < this->cardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->cardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.PlayPveCardCmd)
}

::google::protobuf::uint8* PlayPveCardCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.PlayPveCardCmd)
  // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required uint64 npcguid = 3;
  if (has_npcguid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->npcguid(), target);
  }

  // repeated uint32 cardids = 4;
  for (int i = 0; i < this->cardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->cardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.PlayPveCardCmd)
  return target;
}

int PlayPveCardCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = PVE_CARD_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.EPveCardParam param = 2 [default = EPVE_PLAY_CARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required uint64 npcguid = 3;
    if (has_npcguid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->npcguid());
    }

  }
  // repeated uint32 cardids = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->cardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cardids(i));
    }
    total_size += 1 * this->cardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayPveCardCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayPveCardCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayPveCardCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayPveCardCmd::MergeFrom(const PlayPveCardCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  cardids_.MergeFrom(from.cardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_npcguid()) {
      set_npcguid(from.npcguid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayPveCardCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayPveCardCmd::CopyFrom(const PlayPveCardCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayPveCardCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void PlayPveCardCmd::Swap(PlayPveCardCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(npcguid_, other->npcguid_);
    cardids_.Swap(&other->cardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayPveCardCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayPveCardCmd_descriptor_;
  metadata.reflection = PlayPveCardCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
