// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ErrorUserCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ErrorUserCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* RegErrUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegErrUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickUserErrorCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickUserErrorCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaintainUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaintainUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrCmdParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RegErrRet_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ErrorUserCmd_2eproto() {
  protobuf_AddDesc_ErrorUserCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ErrorUserCmd.proto");
  GOOGLE_CHECK(file != NULL);
  RegErrUserCmd_descriptor_ = file->message_type(0);
  static const int RegErrUserCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, args_),
  };
  RegErrUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegErrUserCmd_descriptor_,
      RegErrUserCmd::default_instance_,
      RegErrUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegErrUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegErrUserCmd));
  KickUserErrorCmd_descriptor_ = file->message_type(1);
  static const int KickUserErrorCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserErrorCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserErrorCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserErrorCmd, accid_),
  };
  KickUserErrorCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickUserErrorCmd_descriptor_,
      KickUserErrorCmd::default_instance_,
      KickUserErrorCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserErrorCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickUserErrorCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickUserErrorCmd));
  MaintainUserCmd_descriptor_ = file->message_type(2);
  static const int MaintainUserCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, tip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, picture_),
  };
  MaintainUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaintainUserCmd_descriptor_,
      MaintainUserCmd::default_instance_,
      MaintainUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaintainUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaintainUserCmd));
  ErrCmdParam_descriptor_ = file->enum_type(0);
  RegErrRet_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ErrorUserCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegErrUserCmd_descriptor_, &RegErrUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickUserErrorCmd_descriptor_, &KickUserErrorCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaintainUserCmd_descriptor_, &MaintainUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ErrorUserCmd_2eproto() {
  delete RegErrUserCmd::default_instance_;
  delete RegErrUserCmd_reflection_;
  delete KickUserErrorCmd::default_instance_;
  delete KickUserErrorCmd_reflection_;
  delete MaintainUserCmd::default_instance_;
  delete MaintainUserCmd_reflection_;
}

void protobuf_AddDesc_ErrorUserCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022ErrorUserCmd.proto\022\003Cmd\032\nxCmd.proto\"\343\001"
    "\n\rRegErrUserCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\023ERROR_USER_PROTOCMD\0221\n\005param\030\002 \001(\0162\020"
    ".Cmd.ErrCmdParam:\020REG_ERR_USER_CMD\022)\n\003re"
    "t\030\003 \002(\0162\016.Cmd.RegErrRet:\014REG_ERR_SUCC\022\020\n"
    "\005accid\030\004 \001(\004:\0010\022\021\n\006zoneID\030\005 \001(\r:\0010\022\021\n\006ch"
    "arid\030\006 \001(\004:\0010\022\014\n\004args\030\007 \003(\r\"\210\001\n\020KickUser"
    "ErrorCmd\022.\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\023ERR"
    "OR_USER_PROTOCMD\0222\n\005param\030\002 \001(\0162\020.Cmd.Er"
    "rCmdParam:\021REG_KICK_USER_CMD\022\020\n\005accid\030\003 "
    "\001(\004:\0010\"\244\001\n\017MaintainUserCmd\022.\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\023ERROR_USER_PROTOCMD\0222\n\005pa"
    "ram\030\002 \001(\0162\020.Cmd.ErrCmdParam:\021MAINTAIN_US"
    "ER_CMD\022\017\n\007content\030\003 \001(\t\022\013\n\003tip\030\004 \001(\t\022\017\n\007"
    "picture\030\005 \001(\t*Q\n\013ErrCmdParam\022\024\n\020REG_ERR_"
    "USER_CMD\020\001\022\025\n\021REG_KICK_USER_CMD\020\002\022\025\n\021MAI"
    "NTAIN_USER_CMD\020\003*\210\006\n\tRegErrRet\022\020\n\014REG_ER"
    "R_SUCC\020\000\022\027\n\023REG_ERR_SERVER_STOP\020\001\022\035\n\031REG"
    "_ERR_SERVER_STOP_LOGIN\020\002\022\033\n\027REG_ERR_DUPL"
    "ICATE_LOGIN\020\003\022\034\n\030REG_ERR_RELOGIN_OVERTIM"
    "E\020\004\022\027\n\023REG_ERR_NEW_VERSION\020\005\022\035\n\031REG_ERR_"
    "PROFESSION_NOOPEN\020\006\022\030\n\024REG_ERR_NAME_INVA"
    "LID\020\007\022\026\n\022REG_ERR_NAME_EMPTY\020\010\022\033\n\027REG_ERR"
    "_NAME_OVERMAXLEN\020\t\022\032\n\026REG_ERR_NAME_DUPLI"
    "CATE\020\n\022\024\n\020REG_ERR_SEQUENCE\020\020\022\030\n\024REG_ERR_"
    "DELETE_ERROR\020\021\022\037\n\033REG_ERR_DELETE_ERROR_L"
    "OCKED\020\022\022\032\n\026REG_ERR_PASSWD_INVALID\020\024\022\024\n\020R"
    "EG_ERR_OVERTIME\020\025\022\026\n\022REG_ERR_ACC_FORBID\020"
    "\026\022\033\n\027REG_ERR_SERVER_UNOPENED\0203\022\031\n\025REG_ER"
    "R_RELOGIN_SCENE\020d\022 \n\034REG_ERR_SESSION_CRE"
    "ATE_FAILD\020e\022\030\n\024REG_ERR_NOTIFY_SCENE\020f\022\036\n"
    "\032REG_ERR_SCENE_CREATE_FAILD\020g\022\025\n\021REG_ERR"
    "_FIND_GATE\020h\022 \n\034REG_ERR_REQ_DATA_FROM_RE"
    "CORD\020i\022\037\n\033REG_ERR_SET_USER_DATA_SCENE\020j\022"
    "\026\n\022REG_ERR_FORBID_REG\020k\022\027\n\023REG_ERR_ENTER"
    "_SCENE\020l\022\031\n\025REG_ERR_GET_USER_DATA\020m", 1435);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ErrorUserCmd.proto", &protobuf_RegisterTypes);
  RegErrUserCmd::default_instance_ = new RegErrUserCmd();
  KickUserErrorCmd::default_instance_ = new KickUserErrorCmd();
  MaintainUserCmd::default_instance_ = new MaintainUserCmd();
  RegErrUserCmd::default_instance_->InitAsDefaultInstance();
  KickUserErrorCmd::default_instance_->InitAsDefaultInstance();
  MaintainUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ErrorUserCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ErrorUserCmd_2eproto {
  StaticDescriptorInitializer_ErrorUserCmd_2eproto() {
    protobuf_AddDesc_ErrorUserCmd_2eproto();
  }
} static_descriptor_initializer_ErrorUserCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrCmdParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrCmdParam_descriptor_;
}
bool ErrCmdParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RegErrRet_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegErrRet_descriptor_;
}
bool RegErrRet_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 51:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RegErrUserCmd::kCmdFieldNumber;
const int RegErrUserCmd::kParamFieldNumber;
const int RegErrUserCmd::kRetFieldNumber;
const int RegErrUserCmd::kAccidFieldNumber;
const int RegErrUserCmd::kZoneIDFieldNumber;
const int RegErrUserCmd::kCharidFieldNumber;
const int RegErrUserCmd::kArgsFieldNumber;
#endif  // !_MSC_VER

RegErrUserCmd::RegErrUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RegErrUserCmd)
}

void RegErrUserCmd::InitAsDefaultInstance() {
}

RegErrUserCmd::RegErrUserCmd(const RegErrUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RegErrUserCmd)
}

void RegErrUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 2;
  param_ = 1;
  ret_ = 0;
  accid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegErrUserCmd::~RegErrUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RegErrUserCmd)
  SharedDtor();
}

void RegErrUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegErrUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegErrUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegErrUserCmd_descriptor_;
}

const RegErrUserCmd& RegErrUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorUserCmd_2eproto();
  return *default_instance_;
}

RegErrUserCmd* RegErrUserCmd::default_instance_ = NULL;

RegErrUserCmd* RegErrUserCmd::New() const {
  return new RegErrUserCmd;
}

void RegErrUserCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RegErrUserCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(accid_, charid_);
    cmd_ = 2;
    param_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegErrUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RegErrUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ErrCmdParam param = 2 [default = REG_ERR_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ErrCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ErrCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required .Cmd.RegErrRet ret = 3 [default = REG_ERR_SUCC];
      case 3: {
        if (tag == 24) {
         parse_ret:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::RegErrRet_IsValid(value)) {
            set_ret(static_cast< ::Cmd::RegErrRet >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_zoneID;
        break;
      }

      // optional uint32 zoneID = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_zoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_args;
        break;
      }

      // repeated uint32 args = 7;
      case 7: {
        if (tag == 56) {
         parse_args:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_args())));
        } else if (tag == 58) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_args())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RegErrUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RegErrUserCmd)
  return false;
#undef DO_
}

void RegErrUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RegErrUserCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = REG_ERR_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required .Cmd.RegErrRet ret = 3 [default = REG_ERR_SUCC];
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->accid(), output);
  }

  // optional uint32 zoneID = 5 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->charid(), output);
  }

  // repeated uint32 args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RegErrUserCmd)
}

::google::protobuf::uint8* RegErrUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RegErrUserCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = REG_ERR_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required .Cmd.RegErrRet ret = 3 [default = REG_ERR_SUCC];
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  // optional uint64 accid = 4 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->accid(), target);
  }

  // optional uint32 zoneID = 5 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  // optional uint64 charid = 6 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->charid(), target);
  }

  // repeated uint32 args = 7;
  for (int i = 0; i < this->args_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RegErrUserCmd)
  return target;
}

int RegErrUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ErrCmdParam param = 2 [default = REG_ERR_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required .Cmd.RegErrRet ret = 3 [default = REG_ERR_SUCC];
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ret());
    }

    // optional uint64 accid = 4 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 zoneID = 5 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint64 charid = 6 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated uint32 args = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->args_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->args(i));
    }
    total_size += 1 * this->args_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegErrUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegErrUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegErrUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegErrUserCmd::MergeFrom(const RegErrUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegErrUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegErrUserCmd::CopyFrom(const RegErrUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegErrUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void RegErrUserCmd::Swap(RegErrUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ret_, other->ret_);
    std::swap(accid_, other->accid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(charid_, other->charid_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegErrUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegErrUserCmd_descriptor_;
  metadata.reflection = RegErrUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickUserErrorCmd::kCmdFieldNumber;
const int KickUserErrorCmd::kParamFieldNumber;
const int KickUserErrorCmd::kAccidFieldNumber;
#endif  // !_MSC_VER

KickUserErrorCmd::KickUserErrorCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.KickUserErrorCmd)
}

void KickUserErrorCmd::InitAsDefaultInstance() {
}

KickUserErrorCmd::KickUserErrorCmd(const KickUserErrorCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.KickUserErrorCmd)
}

void KickUserErrorCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 2;
  param_ = 2;
  accid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickUserErrorCmd::~KickUserErrorCmd() {
  // @@protoc_insertion_point(destructor:Cmd.KickUserErrorCmd)
  SharedDtor();
}

void KickUserErrorCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KickUserErrorCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickUserErrorCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickUserErrorCmd_descriptor_;
}

const KickUserErrorCmd& KickUserErrorCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorUserCmd_2eproto();
  return *default_instance_;
}

KickUserErrorCmd* KickUserErrorCmd::default_instance_ = NULL;

KickUserErrorCmd* KickUserErrorCmd::New() const {
  return new KickUserErrorCmd;
}

void KickUserErrorCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 2;
    param_ = 2;
    accid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickUserErrorCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.KickUserErrorCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ErrCmdParam param = 2 [default = REG_KICK_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ErrCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ErrCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.KickUserErrorCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.KickUserErrorCmd)
  return false;
#undef DO_
}

void KickUserErrorCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.KickUserErrorCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = REG_KICK_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->accid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.KickUserErrorCmd)
}

::google::protobuf::uint8* KickUserErrorCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.KickUserErrorCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = REG_KICK_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 accid = 3 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->accid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.KickUserErrorCmd)
  return target;
}

int KickUserErrorCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ErrCmdParam param = 2 [default = REG_KICK_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 accid = 3 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickUserErrorCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickUserErrorCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickUserErrorCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickUserErrorCmd::MergeFrom(const KickUserErrorCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickUserErrorCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickUserErrorCmd::CopyFrom(const KickUserErrorCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickUserErrorCmd::IsInitialized() const {

  return true;
}

void KickUserErrorCmd::Swap(KickUserErrorCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(accid_, other->accid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickUserErrorCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickUserErrorCmd_descriptor_;
  metadata.reflection = KickUserErrorCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaintainUserCmd::kCmdFieldNumber;
const int MaintainUserCmd::kParamFieldNumber;
const int MaintainUserCmd::kContentFieldNumber;
const int MaintainUserCmd::kTipFieldNumber;
const int MaintainUserCmd::kPictureFieldNumber;
#endif  // !_MSC_VER

MaintainUserCmd::MaintainUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MaintainUserCmd)
}

void MaintainUserCmd::InitAsDefaultInstance() {
}

MaintainUserCmd::MaintainUserCmd(const MaintainUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MaintainUserCmd)
}

void MaintainUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 2;
  param_ = 3;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  picture_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaintainUserCmd::~MaintainUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MaintainUserCmd)
  SharedDtor();
}

void MaintainUserCmd::SharedDtor() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (tip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tip_;
  }
  if (picture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete picture_;
  }
  if (this != default_instance_) {
  }
}

void MaintainUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaintainUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaintainUserCmd_descriptor_;
}

const MaintainUserCmd& MaintainUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ErrorUserCmd_2eproto();
  return *default_instance_;
}

MaintainUserCmd* MaintainUserCmd::default_instance_ = NULL;

MaintainUserCmd* MaintainUserCmd::New() const {
  return new MaintainUserCmd;
}

void MaintainUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 2;
    param_ = 3;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_tip()) {
      if (tip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tip_->clear();
      }
    }
    if (has_picture()) {
      if (picture_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        picture_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaintainUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MaintainUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.ErrCmdParam param = 2 [default = MAINTAIN_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ErrCmdParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::ErrCmdParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tip;
        break;
      }

      // optional string tip = 4;
      case 4: {
        if (tag == 34) {
         parse_tip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tip().data(), this->tip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_picture;
        break;
      }

      // optional string picture = 5;
      case 5: {
        if (tag == 42) {
         parse_picture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_picture()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->picture().data(), this->picture().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "picture");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MaintainUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MaintainUserCmd)
  return false;
#undef DO_
}

void MaintainUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MaintainUserCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = MAINTAIN_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional string tip = 4;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tip(), output);
  }

  // optional string picture = 5;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->picture(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MaintainUserCmd)
}

::google::protobuf::uint8* MaintainUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MaintainUserCmd)
  // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.ErrCmdParam param = 2 [default = MAINTAIN_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional string tip = 4;
  if (has_tip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tip().data(), this->tip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tip(), target);
  }

  // optional string picture = 5;
  if (has_picture()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->picture().data(), this->picture().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "picture");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->picture(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MaintainUserCmd)
  return target;
}

int MaintainUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = ERROR_USER_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.ErrCmdParam param = 2 [default = MAINTAIN_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional string tip = 4;
    if (has_tip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tip());
    }

    // optional string picture = 5;
    if (has_picture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->picture());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaintainUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaintainUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaintainUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaintainUserCmd::MergeFrom(const MaintainUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_tip()) {
      set_tip(from.tip());
    }
    if (from.has_picture()) {
      set_picture(from.picture());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaintainUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaintainUserCmd::CopyFrom(const MaintainUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaintainUserCmd::IsInitialized() const {

  return true;
}

void MaintainUserCmd::Swap(MaintainUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(content_, other->content_);
    std::swap(tip_, other->tip_);
    std::swap(picture_, other->picture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaintainUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaintainUserCmd_descriptor_;
  metadata.reflection = MaintainUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
