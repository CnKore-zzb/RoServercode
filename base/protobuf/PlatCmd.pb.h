// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlatCmd.proto

#ifndef PROTOBUF_PlatCmd_2eproto__INCLUDED
#define PROTOBUF_PlatCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PlatCmd_2eproto();
void protobuf_AssignDesc_PlatCmd_2eproto();
void protobuf_ShutdownFile_PlatCmd_2eproto();

class Boolean;
class TextCheck;
class TextCheckResult;

enum PCommand {
  BOOLEAN = 0,
  TEXT_CHECK = 1,
  TEXT_CHECK_RESULT = 2
};
bool PCommand_IsValid(int value);
const PCommand PCommand_MIN = BOOLEAN;
const PCommand PCommand_MAX = TEXT_CHECK_RESULT;
const int PCommand_ARRAYSIZE = PCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* PCommand_descriptor();
inline const ::std::string& PCommand_Name(PCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    PCommand_descriptor(), value);
}
inline bool PCommand_Parse(
    const ::std::string& name, PCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PCommand>(
    PCommand_descriptor(), name, value);
}
// ===================================================================

class Boolean : public ::google::protobuf::Message {
 public:
  Boolean();
  virtual ~Boolean();

  Boolean(const Boolean& from);

  inline Boolean& operator=(const Boolean& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Boolean& default_instance();

  void Swap(Boolean* other);

  // implements Message ----------------------------------------------

  Boolean* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Boolean& from);
  void MergeFrom(const Boolean& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.PCommand cmd = 1 [default = BOOLEAN];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::PCommand cmd() const;
  inline void set_cmd(::Cmd::PCommand value);

  // optional uint32 param = 2 [default = 0];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // optional uint32 code = 3 [default = 0];
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 code() const;
  inline void set_code(::google::protobuf::uint32 value);

  // optional string message = 4;
  inline bool has_message() const;
  inline void clear_message();
  static const int kMessageFieldNumber = 4;
  inline const ::std::string& message() const;
  inline void set_message(const ::std::string& value);
  inline void set_message(const char* value);
  inline void set_message(const char* value, size_t size);
  inline ::std::string* mutable_message();
  inline ::std::string* release_message();
  inline void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:Cmd.Boolean)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_message();
  inline void clear_has_message();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  ::google::protobuf::uint32 param_;
  ::std::string* message_;
  ::google::protobuf::uint32 code_;
  friend void  protobuf_AddDesc_PlatCmd_2eproto();
  friend void protobuf_AssignDesc_PlatCmd_2eproto();
  friend void protobuf_ShutdownFile_PlatCmd_2eproto();

  void InitAsDefaultInstance();
  static Boolean* default_instance_;
};
// -------------------------------------------------------------------

class TextCheck : public ::google::protobuf::Message {
 public:
  TextCheck();
  virtual ~TextCheck();

  TextCheck(const TextCheck& from);

  inline TextCheck& operator=(const TextCheck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextCheck& default_instance();

  void Swap(TextCheck* other);

  // implements Message ----------------------------------------------

  TextCheck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextCheck& from);
  void MergeFrom(const TextCheck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.PCommand cmd = 1 [default = TEXT_CHECK];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::PCommand cmd() const;
  inline void set_cmd(::Cmd::PCommand value);

  // optional uint32 param = 2 [default = 0];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // optional string project = 3;
  inline bool has_project() const;
  inline void clear_project();
  static const int kProjectFieldNumber = 3;
  inline const ::std::string& project() const;
  inline void set_project(const ::std::string& value);
  inline void set_project(const char* value);
  inline void set_project(const char* value, size_t size);
  inline ::std::string* mutable_project();
  inline ::std::string* release_project();
  inline void set_allocated_project(::std::string* project);

  // optional string app = 4;
  inline bool has_app() const;
  inline void clear_app();
  static const int kAppFieldNumber = 4;
  inline const ::std::string& app() const;
  inline void set_app(const ::std::string& value);
  inline void set_app(const char* value);
  inline void set_app(const char* value, size_t size);
  inline ::std::string* mutable_app();
  inline ::std::string* release_app();
  inline void set_allocated_app(::std::string* app);

  // optional string uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 group = 7;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 7;
  inline ::google::protobuf::uint32 group() const;
  inline void set_group(::google::protobuf::uint32 value);

  // optional string content = 8;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 8;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string replacement = 9 [default = "*"];
  inline bool has_replacement() const;
  inline void clear_replacement();
  static const int kReplacementFieldNumber = 9;
  inline const ::std::string& replacement() const;
  inline void set_replacement(const ::std::string& value);
  inline void set_replacement(const char* value);
  inline void set_replacement(const char* value, size_t size);
  inline ::std::string* mutable_replacement();
  inline ::std::string* release_replacement();
  inline void set_allocated_replacement(::std::string* replacement);

  // optional uint32 createTime = 10;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // optional string ext = 11;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 11;
  inline const ::std::string& ext() const;
  inline void set_ext(const ::std::string& value);
  inline void set_ext(const char* value);
  inline void set_ext(const char* value, size_t size);
  inline ::std::string* mutable_ext();
  inline ::std::string* release_ext();
  inline void set_allocated_ext(::std::string* ext);

  // @@protoc_insertion_point(class_scope:Cmd.TextCheck)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_project();
  inline void clear_has_project();
  inline void set_has_app();
  inline void clear_has_app();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_replacement();
  inline void clear_has_replacement();
  inline void set_has_createtime();
  inline void clear_has_createtime();
  inline void set_has_ext();
  inline void clear_has_ext();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  ::google::protobuf::uint32 param_;
  ::std::string* project_;
  ::std::string* app_;
  ::std::string* uid_;
  ::std::string* name_;
  ::std::string* content_;
  ::google::protobuf::uint32 group_;
  ::google::protobuf::uint32 createtime_;
  static ::std::string* _default_replacement_;
  ::std::string* replacement_;
  ::std::string* ext_;
  friend void  protobuf_AddDesc_PlatCmd_2eproto();
  friend void protobuf_AssignDesc_PlatCmd_2eproto();
  friend void protobuf_ShutdownFile_PlatCmd_2eproto();

  void InitAsDefaultInstance();
  static TextCheck* default_instance_;
};
// -------------------------------------------------------------------

class TextCheckResult : public ::google::protobuf::Message {
 public:
  TextCheckResult();
  virtual ~TextCheckResult();

  TextCheckResult(const TextCheckResult& from);

  inline TextCheckResult& operator=(const TextCheckResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TextCheckResult& default_instance();

  void Swap(TextCheckResult* other);

  // implements Message ----------------------------------------------

  TextCheckResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TextCheckResult& from);
  void MergeFrom(const TextCheckResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.PCommand cmd = 1 [default = TEXT_CHECK_RESULT];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::PCommand cmd() const;
  inline void set_cmd(::Cmd::PCommand value);

  // optional uint32 param = 2 [default = 0];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::google::protobuf::uint32 param() const;
  inline void set_param(::google::protobuf::uint32 value);

  // optional uint32 type = 3 [default = 1];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:Cmd.TextCheckResult)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  ::google::protobuf::uint32 param_;
  ::std::string* content_;
  ::google::protobuf::uint32 type_;
  friend void  protobuf_AddDesc_PlatCmd_2eproto();
  friend void protobuf_AssignDesc_PlatCmd_2eproto();
  friend void protobuf_ShutdownFile_PlatCmd_2eproto();

  void InitAsDefaultInstance();
  static TextCheckResult* default_instance_;
};
// ===================================================================


// ===================================================================

// Boolean

// optional .Cmd.PCommand cmd = 1 [default = BOOLEAN];
inline bool Boolean::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Boolean::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Boolean::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Boolean::clear_cmd() {
  cmd_ = 0;
  clear_has_cmd();
}
inline ::Cmd::PCommand Boolean::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.Boolean.cmd)
  return static_cast< ::Cmd::PCommand >(cmd_);
}
inline void Boolean::set_cmd(::Cmd::PCommand value) {
  assert(::Cmd::PCommand_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Boolean.cmd)
}

// optional uint32 param = 2 [default = 0];
inline bool Boolean::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Boolean::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Boolean::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Boolean::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 Boolean::param() const {
  // @@protoc_insertion_point(field_get:Cmd.Boolean.param)
  return param_;
}
inline void Boolean::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Boolean.param)
}

// optional uint32 code = 3 [default = 0];
inline bool Boolean::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Boolean::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Boolean::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Boolean::clear_code() {
  code_ = 0u;
  clear_has_code();
}
inline ::google::protobuf::uint32 Boolean::code() const {
  // @@protoc_insertion_point(field_get:Cmd.Boolean.code)
  return code_;
}
inline void Boolean::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Cmd.Boolean.code)
}

// optional string message = 4;
inline bool Boolean::has_message() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Boolean::set_has_message() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Boolean::clear_has_message() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Boolean::clear_message() {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_->clear();
  }
  clear_has_message();
}
inline const ::std::string& Boolean::message() const {
  // @@protoc_insertion_point(field_get:Cmd.Boolean.message)
  return *message_;
}
inline void Boolean::set_message(const ::std::string& value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.Boolean.message)
}
inline void Boolean::set_message(const char* value) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.Boolean.message)
}
inline void Boolean::set_message(const char* value, size_t size) {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  message_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.Boolean.message)
}
inline ::std::string* Boolean::mutable_message() {
  set_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    message_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.Boolean.message)
  return message_;
}
inline ::std::string* Boolean::release_message() {
  clear_has_message();
  if (message_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = message_;
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Boolean::set_allocated_message(::std::string* message) {
  if (message_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete message_;
  }
  if (message) {
    set_has_message();
    message_ = message;
  } else {
    clear_has_message();
    message_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.Boolean.message)
}

// -------------------------------------------------------------------

// TextCheck

// optional .Cmd.PCommand cmd = 1 [default = TEXT_CHECK];
inline bool TextCheck::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextCheck::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextCheck::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextCheck::clear_cmd() {
  cmd_ = 1;
  clear_has_cmd();
}
inline ::Cmd::PCommand TextCheck::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.cmd)
  return static_cast< ::Cmd::PCommand >(cmd_);
}
inline void TextCheck::set_cmd(::Cmd::PCommand value) {
  assert(::Cmd::PCommand_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.cmd)
}

// optional uint32 param = 2 [default = 0];
inline bool TextCheck::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextCheck::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextCheck::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextCheck::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 TextCheck::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.param)
  return param_;
}
inline void TextCheck::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.param)
}

// optional string project = 3;
inline bool TextCheck::has_project() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextCheck::set_has_project() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TextCheck::clear_has_project() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TextCheck::clear_project() {
  if (project_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    project_->clear();
  }
  clear_has_project();
}
inline const ::std::string& TextCheck::project() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.project)
  return *project_;
}
inline void TextCheck::set_project(const ::std::string& value) {
  set_has_project();
  if (project_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    project_ = new ::std::string;
  }
  project_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.project)
}
inline void TextCheck::set_project(const char* value) {
  set_has_project();
  if (project_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    project_ = new ::std::string;
  }
  project_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.project)
}
inline void TextCheck::set_project(const char* value, size_t size) {
  set_has_project();
  if (project_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    project_ = new ::std::string;
  }
  project_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.project)
}
inline ::std::string* TextCheck::mutable_project() {
  set_has_project();
  if (project_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    project_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.project)
  return project_;
}
inline ::std::string* TextCheck::release_project() {
  clear_has_project();
  if (project_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = project_;
    project_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_project(::std::string* project) {
  if (project_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete project_;
  }
  if (project) {
    set_has_project();
    project_ = project;
  } else {
    clear_has_project();
    project_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.project)
}

// optional string app = 4;
inline bool TextCheck::has_app() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TextCheck::set_has_app() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TextCheck::clear_has_app() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TextCheck::clear_app() {
  if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_->clear();
  }
  clear_has_app();
}
inline const ::std::string& TextCheck::app() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.app)
  return *app_;
}
inline void TextCheck::set_app(const ::std::string& value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.app)
}
inline void TextCheck::set_app(const char* value) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.app)
}
inline void TextCheck::set_app(const char* value, size_t size) {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  app_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.app)
}
inline ::std::string* TextCheck::mutable_app() {
  set_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    app_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.app)
  return app_;
}
inline ::std::string* TextCheck::release_app() {
  clear_has_app();
  if (app_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = app_;
    app_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_app(::std::string* app) {
  if (app_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete app_;
  }
  if (app) {
    set_has_app();
    app_ = app;
  } else {
    clear_has_app();
    app_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.app)
}

// optional string uid = 5;
inline bool TextCheck::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TextCheck::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TextCheck::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TextCheck::clear_uid() {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& TextCheck::uid() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.uid)
  return *uid_;
}
inline void TextCheck::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.uid)
}
inline void TextCheck::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.uid)
}
inline void TextCheck::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.uid)
}
inline ::std::string* TextCheck::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.uid)
  return uid_;
}
inline ::std::string* TextCheck::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.uid)
}

// optional string name = 6;
inline bool TextCheck::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TextCheck::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TextCheck::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TextCheck::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TextCheck::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.name)
  return *name_;
}
inline void TextCheck::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.name)
}
inline void TextCheck::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.name)
}
inline void TextCheck::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.name)
}
inline ::std::string* TextCheck::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.name)
  return name_;
}
inline ::std::string* TextCheck::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.name)
}

// optional uint32 group = 7;
inline bool TextCheck::has_group() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TextCheck::set_has_group() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TextCheck::clear_has_group() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TextCheck::clear_group() {
  group_ = 0u;
  clear_has_group();
}
inline ::google::protobuf::uint32 TextCheck::group() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.group)
  return group_;
}
inline void TextCheck::set_group(::google::protobuf::uint32 value) {
  set_has_group();
  group_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.group)
}

// optional string content = 8;
inline bool TextCheck::has_content() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TextCheck::set_has_content() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TextCheck::clear_has_content() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TextCheck::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TextCheck::content() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.content)
  return *content_;
}
inline void TextCheck::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.content)
}
inline void TextCheck::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.content)
}
inline void TextCheck::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.content)
}
inline ::std::string* TextCheck::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.content)
  return content_;
}
inline ::std::string* TextCheck::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.content)
}

// optional string replacement = 9 [default = "*"];
inline bool TextCheck::has_replacement() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TextCheck::set_has_replacement() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TextCheck::clear_has_replacement() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TextCheck::clear_replacement() {
  if (replacement_ != _default_replacement_) {
    replacement_->assign(*_default_replacement_);
  }
  clear_has_replacement();
}
inline const ::std::string& TextCheck::replacement() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.replacement)
  return *replacement_;
}
inline void TextCheck::set_replacement(const ::std::string& value) {
  set_has_replacement();
  if (replacement_ == _default_replacement_) {
    replacement_ = new ::std::string;
  }
  replacement_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.replacement)
}
inline void TextCheck::set_replacement(const char* value) {
  set_has_replacement();
  if (replacement_ == _default_replacement_) {
    replacement_ = new ::std::string;
  }
  replacement_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.replacement)
}
inline void TextCheck::set_replacement(const char* value, size_t size) {
  set_has_replacement();
  if (replacement_ == _default_replacement_) {
    replacement_ = new ::std::string;
  }
  replacement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.replacement)
}
inline ::std::string* TextCheck::mutable_replacement() {
  set_has_replacement();
  if (replacement_ == _default_replacement_) {
    replacement_ = new ::std::string(*_default_replacement_);
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.replacement)
  return replacement_;
}
inline ::std::string* TextCheck::release_replacement() {
  clear_has_replacement();
  if (replacement_ == _default_replacement_) {
    return NULL;
  } else {
    ::std::string* temp = replacement_;
    replacement_ = const_cast< ::std::string*>(_default_replacement_);
    return temp;
  }
}
inline void TextCheck::set_allocated_replacement(::std::string* replacement) {
  if (replacement_ != _default_replacement_) {
    delete replacement_;
  }
  if (replacement) {
    set_has_replacement();
    replacement_ = replacement;
  } else {
    clear_has_replacement();
    replacement_ = const_cast< ::std::string*>(_default_replacement_);
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.replacement)
}

// optional uint32 createTime = 10;
inline bool TextCheck::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TextCheck::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TextCheck::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TextCheck::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 TextCheck::createtime() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.createTime)
  return createtime_;
}
inline void TextCheck::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.createTime)
}

// optional string ext = 11;
inline bool TextCheck::has_ext() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TextCheck::set_has_ext() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TextCheck::clear_has_ext() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TextCheck::clear_ext() {
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_->clear();
  }
  clear_has_ext();
}
inline const ::std::string& TextCheck::ext() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheck.ext)
  return *ext_;
}
inline void TextCheck::set_ext(const ::std::string& value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheck.ext)
}
inline void TextCheck::set_ext(const char* value) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheck.ext)
}
inline void TextCheck::set_ext(const char* value, size_t size) {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  ext_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheck.ext)
}
inline ::std::string* TextCheck::mutable_ext() {
  set_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ext_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheck.ext)
  return ext_;
}
inline ::std::string* TextCheck::release_ext() {
  clear_has_ext();
  if (ext_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ext_;
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheck::set_allocated_ext(::std::string* ext) {
  if (ext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ext_;
  }
  if (ext) {
    set_has_ext();
    ext_ = ext;
  } else {
    clear_has_ext();
    ext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheck.ext)
}

// -------------------------------------------------------------------

// TextCheckResult

// optional .Cmd.PCommand cmd = 1 [default = TEXT_CHECK_RESULT];
inline bool TextCheckResult::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TextCheckResult::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TextCheckResult::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TextCheckResult::clear_cmd() {
  cmd_ = 2;
  clear_has_cmd();
}
inline ::Cmd::PCommand TextCheckResult::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheckResult.cmd)
  return static_cast< ::Cmd::PCommand >(cmd_);
}
inline void TextCheckResult::set_cmd(::Cmd::PCommand value) {
  assert(::Cmd::PCommand_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheckResult.cmd)
}

// optional uint32 param = 2 [default = 0];
inline bool TextCheckResult::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TextCheckResult::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TextCheckResult::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TextCheckResult::clear_param() {
  param_ = 0u;
  clear_has_param();
}
inline ::google::protobuf::uint32 TextCheckResult::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheckResult.param)
  return param_;
}
inline void TextCheckResult::set_param(::google::protobuf::uint32 value) {
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheckResult.param)
}

// optional uint32 type = 3 [default = 1];
inline bool TextCheckResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TextCheckResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TextCheckResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TextCheckResult::clear_type() {
  type_ = 1u;
  clear_has_type();
}
inline ::google::protobuf::uint32 TextCheckResult::type() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheckResult.type)
  return type_;
}
inline void TextCheckResult::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TextCheckResult.type)
}

// optional string content = 4;
inline bool TextCheckResult::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TextCheckResult::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TextCheckResult::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TextCheckResult::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& TextCheckResult::content() const {
  // @@protoc_insertion_point(field_get:Cmd.TextCheckResult.content)
  return *content_;
}
inline void TextCheckResult::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TextCheckResult.content)
}
inline void TextCheckResult::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TextCheckResult.content)
}
inline void TextCheckResult::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TextCheckResult.content)
}
inline ::std::string* TextCheckResult::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TextCheckResult.content)
  return content_;
}
inline ::std::string* TextCheckResult::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TextCheckResult::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TextCheckResult.content)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::PCommand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::PCommand>() {
  return ::Cmd::PCommand_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PlatCmd_2eproto__INCLUDED
