// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Authorize.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Authorize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SetAuthorizeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetAuthorizeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResetAuthorizeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResetAuthorizeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncAuthorizeToSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncAuthorizeToSession_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyAuthorizeUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAuthorizeUserCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRealAuthorizeToSession_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRealAuthorizeToSession_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* AuthorizeParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EUnlockType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Authorize_2eproto() {
  protobuf_AddDesc_Authorize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Authorize.proto");
  GOOGLE_CHECK(file != NULL);
  SetAuthorizeUserCmd_descriptor_ = file->message_type(0);
  static const int SetAuthorizeUserCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, oldpwd_),
  };
  SetAuthorizeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SetAuthorizeUserCmd_descriptor_,
      SetAuthorizeUserCmd::default_instance_,
      SetAuthorizeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetAuthorizeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SetAuthorizeUserCmd));
  ResetAuthorizeUserCmd_descriptor_ = file->message_type(1);
  static const int ResetAuthorizeUserCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAuthorizeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAuthorizeUserCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAuthorizeUserCmd, reset_),
  };
  ResetAuthorizeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResetAuthorizeUserCmd_descriptor_,
      ResetAuthorizeUserCmd::default_instance_,
      ResetAuthorizeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAuthorizeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetAuthorizeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResetAuthorizeUserCmd));
  SyncAuthorizeToSession_descriptor_ = file->message_type(2);
  static const int SyncAuthorizeToSession_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, ignorepwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, resettime_),
  };
  SyncAuthorizeToSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncAuthorizeToSession_descriptor_,
      SyncAuthorizeToSession::default_instance_,
      SyncAuthorizeToSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncAuthorizeToSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncAuthorizeToSession));
  NotifyAuthorizeUserCmd_descriptor_ = file->message_type(3);
  static const int NotifyAuthorizeUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAuthorizeUserCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAuthorizeUserCmd, param_),
  };
  NotifyAuthorizeUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAuthorizeUserCmd_descriptor_,
      NotifyAuthorizeUserCmd::default_instance_,
      NotifyAuthorizeUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAuthorizeUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAuthorizeUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAuthorizeUserCmd));
  SyncRealAuthorizeToSession_descriptor_ = file->message_type(4);
  static const int SyncRealAuthorizeToSession_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRealAuthorizeToSession, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRealAuthorizeToSession, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRealAuthorizeToSession, authorized_),
  };
  SyncRealAuthorizeToSession_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRealAuthorizeToSession_descriptor_,
      SyncRealAuthorizeToSession::default_instance_,
      SyncRealAuthorizeToSession_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRealAuthorizeToSession, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRealAuthorizeToSession, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRealAuthorizeToSession));
  AuthorizeParam_descriptor_ = file->enum_type(0);
  EUnlockType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Authorize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SetAuthorizeUserCmd_descriptor_, &SetAuthorizeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResetAuthorizeUserCmd_descriptor_, &ResetAuthorizeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncAuthorizeToSession_descriptor_, &SyncAuthorizeToSession::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAuthorizeUserCmd_descriptor_, &NotifyAuthorizeUserCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRealAuthorizeToSession_descriptor_, &SyncRealAuthorizeToSession::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Authorize_2eproto() {
  delete SetAuthorizeUserCmd::default_instance_;
  delete SetAuthorizeUserCmd_reflection_;
  delete ResetAuthorizeUserCmd::default_instance_;
  delete ResetAuthorizeUserCmd_reflection_;
  delete SyncAuthorizeToSession::default_instance_;
  delete SyncAuthorizeToSession_reflection_;
  delete NotifyAuthorizeUserCmd::default_instance_;
  delete NotifyAuthorizeUserCmd_reflection_;
  delete SyncRealAuthorizeToSession::default_instance_;
  delete SyncRealAuthorizeToSession_reflection_;
}

void protobuf_AddDesc_Authorize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017Authorize.proto\022\003Cmd\032\nxCmd.proto\"\257\001\n\023S"
    "etAuthorizeUserCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\037SESSION_USER_AUTHORIZE_PROTOCMD\022:"
    "\n\005param\030\002 \001(\0162\023.Cmd.AuthorizeParam:\026SET_"
    "AUTHORIZE_USER_CMD\022\020\n\010password\030\003 \002(\t\022\016\n\006"
    "oldpwd\030\004 \001(\t\"\240\001\n\025ResetAuthorizeUserCmd\022:"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION_USER_"
    "AUTHORIZE_PROTOCMD\022<\n\005param\030\002 \001(\0162\023.Cmd."
    "AuthorizeParam:\030RESET_AUTHORIZE_USER_CMD"
    "\022\r\n\005reset\030\003 \002(\010\"\325\001\n\026SyncAuthorizeToSessi"
    "on\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\037SESSION_U"
    "SER_AUTHORIZE_PROTOCMD\022=\n\005param\030\002 \001(\0162\023."
    "Cmd.AuthorizeParam:\031SYNC_AUTHORIZE_TO_SE"
    "SSION\022\030\n\tignorepwd\030\003 \001(\010:\005false\022\020\n\010passw"
    "ord\030\004 \001(\t\022\024\n\tresettime\030\005 \001(\r:\0010\"\223\001\n\026Noti"
    "fyAuthorizeUserCmd\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\037SESSION_USER_AUTHORIZE_PROTOCMD\022="
    "\n\005param\030\002 \001(\0162\023.Cmd.AuthorizeParam:\031NOTI"
    "FY_AUTHORIZE_USER_CMD\"\267\001\n\032SyncRealAuthor"
    "izeToSession\022:\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\037SESSION_USER_AUTHORIZE_PROTOCMD\022B\n\005para"
    "m\030\002 \001(\0162\023.Cmd.AuthorizeParam:\036SYNC_REAL_"
    "AUTHORIZE_TO_SESSION\022\031\n\nauthorized\030\003 \001(\010"
    ":\005false*\254\001\n\016AuthorizeParam\022\032\n\026SET_AUTHOR"
    "IZE_USER_CMD\020\001\022\034\n\030RESET_AUTHORIZE_USER_C"
    "MD\020\002\022\035\n\031SYNC_AUTHORIZE_TO_SESSION\020\003\022\035\n\031N"
    "OTIFY_AUTHORIZE_USER_CMD\020\004\022\"\n\036SYNC_REAL_"
    "AUTHORIZE_TO_SESSION\020\005*\276\003\n\013EUnlockType\022\023"
    "\n\017EUNLOCKTYPE_MIN\020\000\022\026\n\022EUNLOCKTYPE_REFIN"
    "E\020\001\022\025\n\021EUNLOCKTYPE_TRADE\020\002\022\035\n\031EUNLOCKTYP"
    "E_EQUIP_UPGRADE\020\003\022\032\n\026EUNLOCKTYPE_EQUIP_H"
    "OLE\020\004\022\027\n\023EUNLOCKTYPE_ENCHANT\020\005\022\027\n\023EUNLOC"
    "KTYPE_NPC_BUY\020\006\022\025\n\021EUNLOCKTYPE_GUILD\020\007\022\026"
    "\n\022EUNLOCKTYPE_FRIEND\020\010\022\024\n\020EUNLOCKTYPE_SE"
    "LL\020\t\022\027\n\023EUNLOCKTYPE_USEITEM\020\n\022\032\n\026EUNLOCK"
    "TYPE_TRADE_GIFT\020\013\022\031\n\025EUNLOCKTYPE_DECOMPO"
    "SE\020\014\022\034\n\030EUNLOCKTYPE_AUCTION_SELL\020\r\022\033\n\027EU"
    "NLOCKTYPE_AUCTION_BUY\020\016\022\031\n\025EUNLOCKTYPE_I"
    "TEM_CODE\020\017\022\023\n\017EUNLOCKTYPE_MAX\020\020", 1551);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Authorize.proto", &protobuf_RegisterTypes);
  SetAuthorizeUserCmd::default_instance_ = new SetAuthorizeUserCmd();
  ResetAuthorizeUserCmd::default_instance_ = new ResetAuthorizeUserCmd();
  SyncAuthorizeToSession::default_instance_ = new SyncAuthorizeToSession();
  NotifyAuthorizeUserCmd::default_instance_ = new NotifyAuthorizeUserCmd();
  SyncRealAuthorizeToSession::default_instance_ = new SyncRealAuthorizeToSession();
  SetAuthorizeUserCmd::default_instance_->InitAsDefaultInstance();
  ResetAuthorizeUserCmd::default_instance_->InitAsDefaultInstance();
  SyncAuthorizeToSession::default_instance_->InitAsDefaultInstance();
  NotifyAuthorizeUserCmd::default_instance_->InitAsDefaultInstance();
  SyncRealAuthorizeToSession::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Authorize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Authorize_2eproto {
  StaticDescriptorInitializer_Authorize_2eproto() {
    protobuf_AddDesc_Authorize_2eproto();
  }
} static_descriptor_initializer_Authorize_2eproto_;
const ::google::protobuf::EnumDescriptor* AuthorizeParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizeParam_descriptor_;
}
bool AuthorizeParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUnlockType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EUnlockType_descriptor_;
}
bool EUnlockType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SetAuthorizeUserCmd::kCmdFieldNumber;
const int SetAuthorizeUserCmd::kParamFieldNumber;
const int SetAuthorizeUserCmd::kPasswordFieldNumber;
const int SetAuthorizeUserCmd::kOldpwdFieldNumber;
#endif  // !_MSC_VER

SetAuthorizeUserCmd::SetAuthorizeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SetAuthorizeUserCmd)
}

void SetAuthorizeUserCmd::InitAsDefaultInstance() {
}

SetAuthorizeUserCmd::SetAuthorizeUserCmd(const SetAuthorizeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SetAuthorizeUserCmd)
}

void SetAuthorizeUserCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 62;
  param_ = 1;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oldpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SetAuthorizeUserCmd::~SetAuthorizeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SetAuthorizeUserCmd)
  SharedDtor();
}

void SetAuthorizeUserCmd::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (oldpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete oldpwd_;
  }
  if (this != default_instance_) {
  }
}

void SetAuthorizeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetAuthorizeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetAuthorizeUserCmd_descriptor_;
}

const SetAuthorizeUserCmd& SetAuthorizeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authorize_2eproto();
  return *default_instance_;
}

SetAuthorizeUserCmd* SetAuthorizeUserCmd::default_instance_ = NULL;

SetAuthorizeUserCmd* SetAuthorizeUserCmd::New() const {
  return new SetAuthorizeUserCmd;
}

void SetAuthorizeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 62;
    param_ = 1;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_oldpwd()) {
      if (oldpwd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        oldpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SetAuthorizeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SetAuthorizeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuthorizeParam param = 2 [default = SET_AUTHORIZE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuthorizeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuthorizeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // required string password = 3;
      case 3: {
        if (tag == 26) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_oldpwd;
        break;
      }

      // optional string oldpwd = 4;
      case 4: {
        if (tag == 34) {
         parse_oldpwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oldpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->oldpwd().data(), this->oldpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "oldpwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SetAuthorizeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SetAuthorizeUserCmd)
  return false;
#undef DO_
}

void SetAuthorizeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SetAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SET_AUTHORIZE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->password(), output);
  }

  // optional string oldpwd = 4;
  if (has_oldpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpwd().data(), this->oldpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->oldpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SetAuthorizeUserCmd)
}

::google::protobuf::uint8* SetAuthorizeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SetAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SET_AUTHORIZE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional string oldpwd = 4;
  if (has_oldpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->oldpwd().data(), this->oldpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "oldpwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->oldpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SetAuthorizeUserCmd)
  return target;
}

int SetAuthorizeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuthorizeParam param = 2 [default = SET_AUTHORIZE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string oldpwd = 4;
    if (has_oldpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oldpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetAuthorizeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SetAuthorizeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SetAuthorizeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetAuthorizeUserCmd::MergeFrom(const SetAuthorizeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_oldpwd()) {
      set_oldpwd(from.oldpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SetAuthorizeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetAuthorizeUserCmd::CopyFrom(const SetAuthorizeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetAuthorizeUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void SetAuthorizeUserCmd::Swap(SetAuthorizeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(password_, other->password_);
    std::swap(oldpwd_, other->oldpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SetAuthorizeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetAuthorizeUserCmd_descriptor_;
  metadata.reflection = SetAuthorizeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResetAuthorizeUserCmd::kCmdFieldNumber;
const int ResetAuthorizeUserCmd::kParamFieldNumber;
const int ResetAuthorizeUserCmd::kResetFieldNumber;
#endif  // !_MSC_VER

ResetAuthorizeUserCmd::ResetAuthorizeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ResetAuthorizeUserCmd)
}

void ResetAuthorizeUserCmd::InitAsDefaultInstance() {
}

ResetAuthorizeUserCmd::ResetAuthorizeUserCmd(const ResetAuthorizeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ResetAuthorizeUserCmd)
}

void ResetAuthorizeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 62;
  param_ = 2;
  reset_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResetAuthorizeUserCmd::~ResetAuthorizeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ResetAuthorizeUserCmd)
  SharedDtor();
}

void ResetAuthorizeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResetAuthorizeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetAuthorizeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResetAuthorizeUserCmd_descriptor_;
}

const ResetAuthorizeUserCmd& ResetAuthorizeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authorize_2eproto();
  return *default_instance_;
}

ResetAuthorizeUserCmd* ResetAuthorizeUserCmd::default_instance_ = NULL;

ResetAuthorizeUserCmd* ResetAuthorizeUserCmd::New() const {
  return new ResetAuthorizeUserCmd;
}

void ResetAuthorizeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 62;
    param_ = 2;
    reset_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResetAuthorizeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ResetAuthorizeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuthorizeParam param = 2 [default = RESET_AUTHORIZE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuthorizeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuthorizeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_reset;
        break;
      }

      // required bool reset = 3;
      case 3: {
        if (tag == 24) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ResetAuthorizeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ResetAuthorizeUserCmd)
  return false;
#undef DO_
}

void ResetAuthorizeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ResetAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = RESET_AUTHORIZE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // required bool reset = 3;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ResetAuthorizeUserCmd)
}

::google::protobuf::uint8* ResetAuthorizeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ResetAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = RESET_AUTHORIZE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // required bool reset = 3;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ResetAuthorizeUserCmd)
  return target;
}

int ResetAuthorizeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuthorizeParam param = 2 [default = RESET_AUTHORIZE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // required bool reset = 3;
    if (has_reset()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetAuthorizeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResetAuthorizeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResetAuthorizeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResetAuthorizeUserCmd::MergeFrom(const ResetAuthorizeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResetAuthorizeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetAuthorizeUserCmd::CopyFrom(const ResetAuthorizeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetAuthorizeUserCmd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ResetAuthorizeUserCmd::Swap(ResetAuthorizeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResetAuthorizeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResetAuthorizeUserCmd_descriptor_;
  metadata.reflection = ResetAuthorizeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncAuthorizeToSession::kCmdFieldNumber;
const int SyncAuthorizeToSession::kParamFieldNumber;
const int SyncAuthorizeToSession::kIgnorepwdFieldNumber;
const int SyncAuthorizeToSession::kPasswordFieldNumber;
const int SyncAuthorizeToSession::kResettimeFieldNumber;
#endif  // !_MSC_VER

SyncAuthorizeToSession::SyncAuthorizeToSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncAuthorizeToSession)
}

void SyncAuthorizeToSession::InitAsDefaultInstance() {
}

SyncAuthorizeToSession::SyncAuthorizeToSession(const SyncAuthorizeToSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncAuthorizeToSession)
}

void SyncAuthorizeToSession::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 62;
  param_ = 3;
  ignorepwd_ = false;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resettime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncAuthorizeToSession::~SyncAuthorizeToSession() {
  // @@protoc_insertion_point(destructor:Cmd.SyncAuthorizeToSession)
  SharedDtor();
}

void SyncAuthorizeToSession::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SyncAuthorizeToSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncAuthorizeToSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncAuthorizeToSession_descriptor_;
}

const SyncAuthorizeToSession& SyncAuthorizeToSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authorize_2eproto();
  return *default_instance_;
}

SyncAuthorizeToSession* SyncAuthorizeToSession::default_instance_ = NULL;

SyncAuthorizeToSession* SyncAuthorizeToSession::New() const {
  return new SyncAuthorizeToSession;
}

void SyncAuthorizeToSession::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncAuthorizeToSession*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(ignorepwd_, resettime_);
    cmd_ = 62;
    param_ = 3;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncAuthorizeToSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncAuthorizeToSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_AUTHORIZE_TO_SESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuthorizeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuthorizeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_password;
        break;
      }

      // optional string password = 4;
      case 4: {
        if (tag == 34) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_resettime;
        break;
      }

      // optional uint32 resettime = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_resettime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncAuthorizeToSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncAuthorizeToSession)
  return false;
#undef DO_
}

void SyncAuthorizeToSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncAuthorizeToSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_AUTHORIZE_TO_SESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool ignorepwd = 3 [default = false];
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ignorepwd(), output);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->password(), output);
  }

  // optional uint32 resettime = 5 [default = 0];
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncAuthorizeToSession)
}

::google::protobuf::uint8* SyncAuthorizeToSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncAuthorizeToSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_AUTHORIZE_TO_SESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool ignorepwd = 3 [default = false];
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ignorepwd(), target);
  }

  // optional string password = 4;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->password(), target);
  }

  // optional uint32 resettime = 5 [default = 0];
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncAuthorizeToSession)
  return target;
}

int SyncAuthorizeToSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_AUTHORIZE_TO_SESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool ignorepwd = 3 [default = false];
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

    // optional string password = 4;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional uint32 resettime = 5 [default = 0];
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncAuthorizeToSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncAuthorizeToSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncAuthorizeToSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncAuthorizeToSession::MergeFrom(const SyncAuthorizeToSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncAuthorizeToSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncAuthorizeToSession::CopyFrom(const SyncAuthorizeToSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncAuthorizeToSession::IsInitialized() const {

  return true;
}

void SyncAuthorizeToSession::Swap(SyncAuthorizeToSession* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(password_, other->password_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncAuthorizeToSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncAuthorizeToSession_descriptor_;
  metadata.reflection = SyncAuthorizeToSession_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyAuthorizeUserCmd::kCmdFieldNumber;
const int NotifyAuthorizeUserCmd::kParamFieldNumber;
#endif  // !_MSC_VER

NotifyAuthorizeUserCmd::NotifyAuthorizeUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.NotifyAuthorizeUserCmd)
}

void NotifyAuthorizeUserCmd::InitAsDefaultInstance() {
}

NotifyAuthorizeUserCmd::NotifyAuthorizeUserCmd(const NotifyAuthorizeUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.NotifyAuthorizeUserCmd)
}

void NotifyAuthorizeUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 62;
  param_ = 4;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAuthorizeUserCmd::~NotifyAuthorizeUserCmd() {
  // @@protoc_insertion_point(destructor:Cmd.NotifyAuthorizeUserCmd)
  SharedDtor();
}

void NotifyAuthorizeUserCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAuthorizeUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAuthorizeUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAuthorizeUserCmd_descriptor_;
}

const NotifyAuthorizeUserCmd& NotifyAuthorizeUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authorize_2eproto();
  return *default_instance_;
}

NotifyAuthorizeUserCmd* NotifyAuthorizeUserCmd::default_instance_ = NULL;

NotifyAuthorizeUserCmd* NotifyAuthorizeUserCmd::New() const {
  return new NotifyAuthorizeUserCmd;
}

void NotifyAuthorizeUserCmd::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    cmd_ = 62;
    param_ = 4;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAuthorizeUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.NotifyAuthorizeUserCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuthorizeParam param = 2 [default = NOTIFY_AUTHORIZE_USER_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuthorizeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuthorizeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.NotifyAuthorizeUserCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.NotifyAuthorizeUserCmd)
  return false;
#undef DO_
}

void NotifyAuthorizeUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.NotifyAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = NOTIFY_AUTHORIZE_USER_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.NotifyAuthorizeUserCmd)
}

::google::protobuf::uint8* NotifyAuthorizeUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.NotifyAuthorizeUserCmd)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = NOTIFY_AUTHORIZE_USER_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.NotifyAuthorizeUserCmd)
  return target;
}

int NotifyAuthorizeUserCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuthorizeParam param = 2 [default = NOTIFY_AUTHORIZE_USER_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAuthorizeUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAuthorizeUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAuthorizeUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAuthorizeUserCmd::MergeFrom(const NotifyAuthorizeUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAuthorizeUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAuthorizeUserCmd::CopyFrom(const NotifyAuthorizeUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAuthorizeUserCmd::IsInitialized() const {

  return true;
}

void NotifyAuthorizeUserCmd::Swap(NotifyAuthorizeUserCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAuthorizeUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAuthorizeUserCmd_descriptor_;
  metadata.reflection = NotifyAuthorizeUserCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRealAuthorizeToSession::kCmdFieldNumber;
const int SyncRealAuthorizeToSession::kParamFieldNumber;
const int SyncRealAuthorizeToSession::kAuthorizedFieldNumber;
#endif  // !_MSC_VER

SyncRealAuthorizeToSession::SyncRealAuthorizeToSession()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncRealAuthorizeToSession)
}

void SyncRealAuthorizeToSession::InitAsDefaultInstance() {
}

SyncRealAuthorizeToSession::SyncRealAuthorizeToSession(const SyncRealAuthorizeToSession& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncRealAuthorizeToSession)
}

void SyncRealAuthorizeToSession::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 62;
  param_ = 5;
  authorized_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRealAuthorizeToSession::~SyncRealAuthorizeToSession() {
  // @@protoc_insertion_point(destructor:Cmd.SyncRealAuthorizeToSession)
  SharedDtor();
}

void SyncRealAuthorizeToSession::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRealAuthorizeToSession::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRealAuthorizeToSession::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRealAuthorizeToSession_descriptor_;
}

const SyncRealAuthorizeToSession& SyncRealAuthorizeToSession::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Authorize_2eproto();
  return *default_instance_;
}

SyncRealAuthorizeToSession* SyncRealAuthorizeToSession::default_instance_ = NULL;

SyncRealAuthorizeToSession* SyncRealAuthorizeToSession::New() const {
  return new SyncRealAuthorizeToSession;
}

void SyncRealAuthorizeToSession::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 62;
    param_ = 5;
    authorized_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRealAuthorizeToSession::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncRealAuthorizeToSession)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_REAL_AUTHORIZE_TO_SESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::AuthorizeParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::AuthorizeParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_authorized;
        break;
      }

      // optional bool authorized = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_authorized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &authorized_)));
          set_has_authorized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncRealAuthorizeToSession)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncRealAuthorizeToSession)
  return false;
#undef DO_
}

void SyncRealAuthorizeToSession::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncRealAuthorizeToSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_REAL_AUTHORIZE_TO_SESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool authorized = 3 [default = false];
  if (has_authorized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->authorized(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncRealAuthorizeToSession)
}

::google::protobuf::uint8* SyncRealAuthorizeToSession::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncRealAuthorizeToSession)
  // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_REAL_AUTHORIZE_TO_SESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool authorized = 3 [default = false];
  if (has_authorized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->authorized(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncRealAuthorizeToSession)
  return target;
}

int SyncRealAuthorizeToSession::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SESSION_USER_AUTHORIZE_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.AuthorizeParam param = 2 [default = SYNC_REAL_AUTHORIZE_TO_SESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool authorized = 3 [default = false];
    if (has_authorized()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRealAuthorizeToSession::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRealAuthorizeToSession* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRealAuthorizeToSession*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRealAuthorizeToSession::MergeFrom(const SyncRealAuthorizeToSession& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_authorized()) {
      set_authorized(from.authorized());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRealAuthorizeToSession::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRealAuthorizeToSession::CopyFrom(const SyncRealAuthorizeToSession& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRealAuthorizeToSession::IsInitialized() const {

  return true;
}

void SyncRealAuthorizeToSession::Swap(SyncRealAuthorizeToSession* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(authorized_, other->authorized_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRealAuthorizeToSession::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRealAuthorizeToSession_descriptor_;
  metadata.reflection = SyncRealAuthorizeToSession_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
