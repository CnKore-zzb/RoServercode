// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StatCmd.proto

#ifndef PROTOBUF_StatCmd_2eproto__INCLUDED
#define PROTOBUF_StatCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SceneItem.pb.h"
#include "RecordTrade.pb.h"
#include "RecordCmd.pb.h"
#include "ProtoCommon.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_StatCmd_2eproto();
void protobuf_AssignDesc_StatCmd_2eproto();
void protobuf_ShutdownFile_StatCmd_2eproto();

class TestStatCmd;
class StatCmd;
class TradeToStatLogCmd;
class KillMonsterNumStatCmd;
class DayGetZenyCountCmd;
class StatCurLevel;
class ReqWorldLevelCmd;
class PetWear;
class PetWearUseCountStatCmd;

enum StatParam {
  TEST_STAT_CMD = 1,
  STAT_CMD = 2,
  LOG_TRADE_TO_STAT = 3,
  STAT_KILL_MONSTER = 4,
  STAT_DAY_GET_ZENY_COUNT = 5,
  STAT_CUR_LEVEL = 6,
  REQ_WORLD_LEVEL = 7,
  STAT_PET_WEAR_USECOUNT = 8
};
bool StatParam_IsValid(int value);
const StatParam StatParam_MIN = TEST_STAT_CMD;
const StatParam StatParam_MAX = STAT_PET_WEAR_USECOUNT;
const int StatParam_ARRAYSIZE = StatParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatParam_descriptor();
inline const ::std::string& StatParam_Name(StatParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatParam_descriptor(), value);
}
inline bool StatParam_Parse(
    const ::std::string& name, StatParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatParam>(
    StatParam_descriptor(), name, value);
}
enum ETradeListType {
  ETRADE_ITEM_INFO = 1,
  ETRADE_PENDING_LIST = 2,
  ETRADE_SALED_LIST = 3,
  ETRADE_BUYED_LIST = 4
};
bool ETradeListType_IsValid(int value);
const ETradeListType ETradeListType_MIN = ETRADE_ITEM_INFO;
const ETradeListType ETradeListType_MAX = ETRADE_BUYED_LIST;
const int ETradeListType_ARRAYSIZE = ETradeListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETradeListType_descriptor();
inline const ::std::string& ETradeListType_Name(ETradeListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETradeListType_descriptor(), value);
}
inline bool ETradeListType_Parse(
    const ::std::string& name, ETradeListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETradeListType>(
    ETradeListType_descriptor(), name, value);
}
// ===================================================================

class TestStatCmd : public ::google::protobuf::Message {
 public:
  TestStatCmd();
  virtual ~TestStatCmd();

  TestStatCmd(const TestStatCmd& from);

  inline TestStatCmd& operator=(const TestStatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestStatCmd& default_instance();

  void Swap(TestStatCmd* other);

  // implements Message ----------------------------------------------

  TestStatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestStatCmd& from);
  void MergeFrom(const TestStatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // @@protoc_insertion_point(class_scope:Cmd.TestStatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static TestStatCmd* default_instance_;
};
// -------------------------------------------------------------------

class StatCmd : public ::google::protobuf::Message {
 public:
  StatCmd();
  virtual ~StatCmd();

  StatCmd(const StatCmd& from);

  inline StatCmd& operator=(const StatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatCmd& default_instance();

  void Swap(StatCmd* other);

  // implements Message ----------------------------------------------

  StatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatCmd& from);
  void MergeFrom(const StatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = STAT_CMD];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // optional uint32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint64 key = 4;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 4;
  inline ::google::protobuf::uint64 key() const;
  inline void set_key(::google::protobuf::uint64 value);

  // optional uint64 subkey = 5;
  inline bool has_subkey() const;
  inline void clear_subkey();
  static const int kSubkeyFieldNumber = 5;
  inline ::google::protobuf::uint64 subkey() const;
  inline void set_subkey(::google::protobuf::uint64 value);

  // optional uint64 subkey2 = 6 [default = 0];
  inline bool has_subkey2() const;
  inline void clear_subkey2();
  static const int kSubkey2FieldNumber = 6;
  inline ::google::protobuf::uint64 subkey2() const;
  inline void set_subkey2(::google::protobuf::uint64 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint64 value1 = 8;
  inline bool has_value1() const;
  inline void clear_value1();
  static const int kValue1FieldNumber = 8;
  inline ::google::protobuf::uint64 value1() const;
  inline void set_value1(::google::protobuf::uint64 value);

  // optional uint64 value2 = 9;
  inline bool has_value2() const;
  inline void clear_value2();
  static const int kValue2FieldNumber = 9;
  inline ::google::protobuf::uint64 value2() const;
  inline void set_value2(::google::protobuf::uint64 value);

  // optional bool isfloat = 11 [default = false];
  inline bool has_isfloat() const;
  inline void clear_isfloat();
  static const int kIsfloatFieldNumber = 11;
  inline bool isfloat() const;
  inline void set_isfloat(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.StatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_subkey();
  inline void clear_has_subkey();
  inline void set_has_subkey2();
  inline void clear_has_subkey2();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_value1();
  inline void clear_has_value1();
  inline void set_has_value2();
  inline void clear_has_value2();
  inline void set_has_isfloat();
  inline void clear_has_isfloat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 key_;
  ::google::protobuf::uint64 subkey_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint64 subkey2_;
  ::google::protobuf::uint64 value1_;
  ::google::protobuf::uint64 value2_;
  bool isfloat_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static StatCmd* default_instance_;
};
// -------------------------------------------------------------------

class TradeToStatLogCmd : public ::google::protobuf::Message {
 public:
  TradeToStatLogCmd();
  virtual ~TradeToStatLogCmd();

  TradeToStatLogCmd(const TradeToStatLogCmd& from);

  inline TradeToStatLogCmd& operator=(const TradeToStatLogCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeToStatLogCmd& default_instance();

  void Swap(TradeToStatLogCmd* other);

  // implements Message ----------------------------------------------

  TradeToStatLogCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TradeToStatLogCmd& from);
  void MergeFrom(const TradeToStatLogCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // required .Cmd.EOperType eType = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 3;
  inline ::Cmd::EOperType etype() const;
  inline void set_etype(::Cmd::EOperType value);

  // optional uint32 itemid = 4 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 4;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 price = 5 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 5;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 count = 6 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint64 sellerid = 7 [default = 0];
  inline bool has_sellerid() const;
  inline void clear_sellerid();
  static const int kSelleridFieldNumber = 7;
  inline ::google::protobuf::uint64 sellerid() const;
  inline void set_sellerid(::google::protobuf::uint64 value);

  // optional uint64 buyerid = 8 [default = 0];
  inline bool has_buyerid() const;
  inline void clear_buyerid();
  static const int kBuyeridFieldNumber = 8;
  inline ::google::protobuf::uint64 buyerid() const;
  inline void set_buyerid(::google::protobuf::uint64 value);

  // optional uint32 pendingtime = 9 [default = 0];
  inline bool has_pendingtime() const;
  inline void clear_pendingtime();
  static const int kPendingtimeFieldNumber = 9;
  inline ::google::protobuf::uint32 pendingtime() const;
  inline void set_pendingtime(::google::protobuf::uint32 value);

  // optional uint32 tradetime = 10 [default = 0];
  inline bool has_tradetime() const;
  inline void clear_tradetime();
  static const int kTradetimeFieldNumber = 10;
  inline ::google::protobuf::uint32 tradetime() const;
  inline void set_tradetime(::google::protobuf::uint32 value);

  // optional uint32 refinelv = 11 [default = 0];
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefinelvFieldNumber = 11;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // optional .Cmd.ItemData itemdata = 12;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 12;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional string buyername = 13;
  inline bool has_buyername() const;
  inline void clear_buyername();
  static const int kBuyernameFieldNumber = 13;
  inline const ::std::string& buyername() const;
  inline void set_buyername(const ::std::string& value);
  inline void set_buyername(const char* value);
  inline void set_buyername(const char* value, size_t size);
  inline ::std::string* mutable_buyername();
  inline ::std::string* release_buyername();
  inline void set_allocated_buyername(::std::string* buyername);

  // required .Cmd.ETradeListType elisttype = 14;
  inline bool has_elisttype() const;
  inline void clear_elisttype();
  static const int kElisttypeFieldNumber = 14;
  inline ::Cmd::ETradeListType elisttype() const;
  inline void set_elisttype(::Cmd::ETradeListType value);

  // @@protoc_insertion_point(class_scope:Cmd.TradeToStatLogCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_sellerid();
  inline void clear_has_sellerid();
  inline void set_has_buyerid();
  inline void clear_has_buyerid();
  inline void set_has_pendingtime();
  inline void clear_has_pendingtime();
  inline void set_has_tradetime();
  inline void clear_has_tradetime();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_buyername();
  inline void clear_has_buyername();
  inline void set_has_elisttype();
  inline void clear_has_elisttype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int etype_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 sellerid_;
  ::google::protobuf::uint64 buyerid_;
  ::google::protobuf::uint32 pendingtime_;
  ::google::protobuf::uint32 tradetime_;
  ::Cmd::ItemData* itemdata_;
  ::google::protobuf::uint32 refinelv_;
  int elisttype_;
  ::std::string* buyername_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static TradeToStatLogCmd* default_instance_;
};
// -------------------------------------------------------------------

class KillMonsterNumStatCmd : public ::google::protobuf::Message {
 public:
  KillMonsterNumStatCmd();
  virtual ~KillMonsterNumStatCmd();

  KillMonsterNumStatCmd(const KillMonsterNumStatCmd& from);

  inline KillMonsterNumStatCmd& operator=(const KillMonsterNumStatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillMonsterNumStatCmd& default_instance();

  void Swap(KillMonsterNumStatCmd* other);

  // implements Message ----------------------------------------------

  KillMonsterNumStatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillMonsterNumStatCmd& from);
  void MergeFrom(const KillMonsterNumStatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // repeated .Cmd.StatKillMonster killmonster = 4;
  inline int killmonster_size() const;
  inline void clear_killmonster();
  static const int kKillmonsterFieldNumber = 4;
  inline const ::Cmd::StatKillMonster& killmonster(int index) const;
  inline ::Cmd::StatKillMonster* mutable_killmonster(int index);
  inline ::Cmd::StatKillMonster* add_killmonster();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >&
      killmonster() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >*
      mutable_killmonster();

  // optional uint32 zoneid = 5 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint32 professionid = 6 [default = 0];
  inline bool has_professionid() const;
  inline void clear_professionid();
  static const int kProfessionidFieldNumber = 6;
  inline ::google::protobuf::uint32 professionid() const;
  inline void set_professionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.KillMonsterNumStatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_professionid();
  inline void clear_has_professionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster > killmonster_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 professionid_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static KillMonsterNumStatCmd* default_instance_;
};
// -------------------------------------------------------------------

class DayGetZenyCountCmd : public ::google::protobuf::Message {
 public:
  DayGetZenyCountCmd();
  virtual ~DayGetZenyCountCmd();

  DayGetZenyCountCmd(const DayGetZenyCountCmd& from);

  inline DayGetZenyCountCmd& operator=(const DayGetZenyCountCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DayGetZenyCountCmd& default_instance();

  void Swap(DayGetZenyCountCmd* other);

  // implements Message ----------------------------------------------

  DayGetZenyCountCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DayGetZenyCountCmd& from);
  void MergeFrom(const DayGetZenyCountCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional string username = 4;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 4;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional uint32 baselv = 5;
  inline bool has_baselv() const;
  inline void clear_baselv();
  static const int kBaselvFieldNumber = 5;
  inline ::google::protobuf::uint32 baselv() const;
  inline void set_baselv(::google::protobuf::uint32 value);

  // optional uint32 joblv = 6;
  inline bool has_joblv() const;
  inline void clear_joblv();
  static const int kJoblvFieldNumber = 6;
  inline ::google::protobuf::uint32 joblv() const;
  inline void set_joblv(::google::protobuf::uint32 value);

  // optional uint32 profession = 7;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 7;
  inline ::google::protobuf::uint32 profession() const;
  inline void set_profession(::google::protobuf::uint32 value);

  // optional uint64 normal_zeny = 8;
  inline bool has_normal_zeny() const;
  inline void clear_normal_zeny();
  static const int kNormalZenyFieldNumber = 8;
  inline ::google::protobuf::uint64 normal_zeny() const;
  inline void set_normal_zeny(::google::protobuf::uint64 value);

  // optional uint64 charge_zeny = 9;
  inline bool has_charge_zeny() const;
  inline void clear_charge_zeny();
  static const int kChargeZenyFieldNumber = 9;
  inline ::google::protobuf::uint64 charge_zeny() const;
  inline void set_charge_zeny(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.DayGetZenyCountCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_baselv();
  inline void clear_has_baselv();
  inline void set_has_joblv();
  inline void clear_has_joblv();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_normal_zeny();
  inline void clear_has_normal_zeny();
  inline void set_has_charge_zeny();
  inline void clear_has_charge_zeny();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::std::string* username_;
  ::google::protobuf::uint32 baselv_;
  ::google::protobuf::uint32 joblv_;
  ::google::protobuf::uint64 normal_zeny_;
  ::google::protobuf::uint64 charge_zeny_;
  ::google::protobuf::uint32 profession_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static DayGetZenyCountCmd* default_instance_;
};
// -------------------------------------------------------------------

class StatCurLevel : public ::google::protobuf::Message {
 public:
  StatCurLevel();
  virtual ~StatCurLevel();

  StatCurLevel(const StatCurLevel& from);

  inline StatCurLevel& operator=(const StatCurLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StatCurLevel& default_instance();

  void Swap(StatCurLevel* other);

  // implements Message ----------------------------------------------

  StatCurLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatCurLevel& from);
  void MergeFrom(const StatCurLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // required uint64 userid = 3;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 3;
  inline ::google::protobuf::uint64 userid() const;
  inline void set_userid(::google::protobuf::uint64 value);

  // optional uint32 last_offlinetime = 4;
  inline bool has_last_offlinetime() const;
  inline void clear_last_offlinetime();
  static const int kLastOfflinetimeFieldNumber = 4;
  inline ::google::protobuf::uint32 last_offlinetime() const;
  inline void set_last_offlinetime(::google::protobuf::uint32 value);

  // optional uint32 last_baselv = 5;
  inline bool has_last_baselv() const;
  inline void clear_last_baselv();
  static const int kLastBaselvFieldNumber = 5;
  inline ::google::protobuf::uint32 last_baselv() const;
  inline void set_last_baselv(::google::protobuf::uint32 value);

  // optional uint32 last_joblv = 6;
  inline bool has_last_joblv() const;
  inline void clear_last_joblv();
  static const int kLastJoblvFieldNumber = 6;
  inline ::google::protobuf::uint32 last_joblv() const;
  inline void set_last_joblv(::google::protobuf::uint32 value);

  // optional uint32 cur_time = 7;
  inline bool has_cur_time() const;
  inline void clear_cur_time();
  static const int kCurTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_time() const;
  inline void set_cur_time(::google::protobuf::uint32 value);

  // optional uint32 cur_baselv = 8;
  inline bool has_cur_baselv() const;
  inline void clear_cur_baselv();
  static const int kCurBaselvFieldNumber = 8;
  inline ::google::protobuf::uint32 cur_baselv() const;
  inline void set_cur_baselv(::google::protobuf::uint32 value);

  // optional uint32 cur_joblv = 9;
  inline bool has_cur_joblv() const;
  inline void clear_cur_joblv();
  static const int kCurJoblvFieldNumber = 9;
  inline ::google::protobuf::uint32 cur_joblv() const;
  inline void set_cur_joblv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.StatCurLevel)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_last_offlinetime();
  inline void clear_has_last_offlinetime();
  inline void set_has_last_baselv();
  inline void clear_has_last_baselv();
  inline void set_has_last_joblv();
  inline void clear_has_last_joblv();
  inline void set_has_cur_time();
  inline void clear_has_cur_time();
  inline void set_has_cur_baselv();
  inline void clear_has_cur_baselv();
  inline void set_has_cur_joblv();
  inline void clear_has_cur_joblv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 userid_;
  ::google::protobuf::uint32 last_offlinetime_;
  ::google::protobuf::uint32 last_baselv_;
  ::google::protobuf::uint32 last_joblv_;
  ::google::protobuf::uint32 cur_time_;
  ::google::protobuf::uint32 cur_baselv_;
  ::google::protobuf::uint32 cur_joblv_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static StatCurLevel* default_instance_;
};
// -------------------------------------------------------------------

class ReqWorldLevelCmd : public ::google::protobuf::Message {
 public:
  ReqWorldLevelCmd();
  virtual ~ReqWorldLevelCmd();

  ReqWorldLevelCmd(const ReqWorldLevelCmd& from);

  inline ReqWorldLevelCmd& operator=(const ReqWorldLevelCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqWorldLevelCmd& default_instance();

  void Swap(ReqWorldLevelCmd* other);

  // implements Message ----------------------------------------------

  ReqWorldLevelCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqWorldLevelCmd& from);
  void MergeFrom(const ReqWorldLevelCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ReqWorldLevelCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqWorldLevelCmd* default_instance_;
};
// -------------------------------------------------------------------

class PetWear : public ::google::protobuf::Message {
 public:
  PetWear();
  virtual ~PetWear();

  PetWear(const PetWear& from);

  inline PetWear& operator=(const PetWear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetWear& default_instance();

  void Swap(PetWear* other);

  // implements Message ----------------------------------------------

  PetWear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetWear& from);
  void MergeFrom(const PetWear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // repeated .Cmd.EQualityType types = 2;
  inline int types_size() const;
  inline void clear_types();
  static const int kTypesFieldNumber = 2;
  inline ::Cmd::EQualityType types(int index) const;
  inline void set_types(int index, ::Cmd::EQualityType value);
  inline void add_types(::Cmd::EQualityType value);
  inline const ::google::protobuf::RepeatedField<int>& types() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_types();

  // repeated uint32 counts = 3;
  inline int counts_size() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 3;
  inline ::google::protobuf::uint32 counts(int index) const;
  inline void set_counts(int index, ::google::protobuf::uint32 value);
  inline void add_counts(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      counts() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_counts();

  // @@protoc_insertion_point(class_scope:Cmd.PetWear)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::RepeatedField<int> types_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > counts_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static PetWear* default_instance_;
};
// -------------------------------------------------------------------

class PetWearUseCountStatCmd : public ::google::protobuf::Message {
 public:
  PetWearUseCountStatCmd();
  virtual ~PetWearUseCountStatCmd();

  PetWearUseCountStatCmd(const PetWearUseCountStatCmd& from);

  inline PetWearUseCountStatCmd& operator=(const PetWearUseCountStatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PetWearUseCountStatCmd& default_instance();

  void Swap(PetWearUseCountStatCmd* other);

  // implements Message ----------------------------------------------

  PetWearUseCountStatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PetWearUseCountStatCmd& from);
  void MergeFrom(const PetWearUseCountStatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::StatParam param() const;
  inline void set_param(::Cmd::StatParam value);

  // repeated .Cmd.PetWear wears = 3;
  inline int wears_size() const;
  inline void clear_wears();
  static const int kWearsFieldNumber = 3;
  inline const ::Cmd::PetWear& wears(int index) const;
  inline ::Cmd::PetWear* mutable_wears(int index);
  inline ::Cmd::PetWear* add_wears();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetWear >&
      wears() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetWear >*
      mutable_wears();

  // @@protoc_insertion_point(class_scope:Cmd.PetWearUseCountStatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::PetWear > wears_;
  friend void  protobuf_AddDesc_StatCmd_2eproto();
  friend void protobuf_AssignDesc_StatCmd_2eproto();
  friend void protobuf_ShutdownFile_StatCmd_2eproto();

  void InitAsDefaultInstance();
  static PetWearUseCountStatCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// TestStatCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool TestStatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestStatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestStatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestStatCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command TestStatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TestStatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TestStatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TestStatCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = TEST_STAT_CMD];
inline bool TestStatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TestStatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TestStatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TestStatCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::StatParam TestStatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TestStatCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void TestStatCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TestStatCmd.param)
}

// -------------------------------------------------------------------

// StatCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool StatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command StatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = STAT_CMD];
inline bool StatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::StatParam StatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void StatCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.param)
}

// optional uint32 type = 3;
inline bool StatCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatCmd::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 StatCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.type)
  return type_;
}
inline void StatCmd::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.type)
}

// optional uint64 key = 4;
inline bool StatCmd::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatCmd::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatCmd::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatCmd::clear_key() {
  key_ = GOOGLE_ULONGLONG(0);
  clear_has_key();
}
inline ::google::protobuf::uint64 StatCmd::key() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.key)
  return key_;
}
inline void StatCmd::set_key(::google::protobuf::uint64 value) {
  set_has_key();
  key_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.key)
}

// optional uint64 subkey = 5;
inline bool StatCmd::has_subkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatCmd::set_has_subkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatCmd::clear_has_subkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatCmd::clear_subkey() {
  subkey_ = GOOGLE_ULONGLONG(0);
  clear_has_subkey();
}
inline ::google::protobuf::uint64 StatCmd::subkey() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.subkey)
  return subkey_;
}
inline void StatCmd::set_subkey(::google::protobuf::uint64 value) {
  set_has_subkey();
  subkey_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.subkey)
}

// optional uint64 subkey2 = 6 [default = 0];
inline bool StatCmd::has_subkey2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatCmd::set_has_subkey2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatCmd::clear_has_subkey2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatCmd::clear_subkey2() {
  subkey2_ = GOOGLE_ULONGLONG(0);
  clear_has_subkey2();
}
inline ::google::protobuf::uint64 StatCmd::subkey2() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.subkey2)
  return subkey2_;
}
inline void StatCmd::set_subkey2(::google::protobuf::uint64 value) {
  set_has_subkey2();
  subkey2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.subkey2)
}

// optional uint32 level = 7;
inline bool StatCmd::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatCmd::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatCmd::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatCmd::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 StatCmd::level() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.level)
  return level_;
}
inline void StatCmd::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.level)
}

// optional uint64 value1 = 8;
inline bool StatCmd::has_value1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatCmd::set_has_value1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatCmd::clear_has_value1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatCmd::clear_value1() {
  value1_ = GOOGLE_ULONGLONG(0);
  clear_has_value1();
}
inline ::google::protobuf::uint64 StatCmd::value1() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.value1)
  return value1_;
}
inline void StatCmd::set_value1(::google::protobuf::uint64 value) {
  set_has_value1();
  value1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.value1)
}

// optional uint64 value2 = 9;
inline bool StatCmd::has_value2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StatCmd::set_has_value2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StatCmd::clear_has_value2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StatCmd::clear_value2() {
  value2_ = GOOGLE_ULONGLONG(0);
  clear_has_value2();
}
inline ::google::protobuf::uint64 StatCmd::value2() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.value2)
  return value2_;
}
inline void StatCmd::set_value2(::google::protobuf::uint64 value) {
  set_has_value2();
  value2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.value2)
}

// optional bool isfloat = 11 [default = false];
inline bool StatCmd::has_isfloat() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StatCmd::set_has_isfloat() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StatCmd::clear_has_isfloat() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StatCmd::clear_isfloat() {
  isfloat_ = false;
  clear_has_isfloat();
}
inline bool StatCmd::isfloat() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCmd.isfloat)
  return isfloat_;
}
inline void StatCmd::set_isfloat(bool value) {
  set_has_isfloat();
  isfloat_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCmd.isfloat)
}

// -------------------------------------------------------------------

// TradeToStatLogCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool TradeToStatLogCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TradeToStatLogCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TradeToStatLogCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TradeToStatLogCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command TradeToStatLogCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TradeToStatLogCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = LOG_TRADE_TO_STAT];
inline bool TradeToStatLogCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TradeToStatLogCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TradeToStatLogCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TradeToStatLogCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::StatParam TradeToStatLogCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void TradeToStatLogCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.param)
}

// required .Cmd.EOperType eType = 3;
inline bool TradeToStatLogCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TradeToStatLogCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TradeToStatLogCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TradeToStatLogCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EOperType TradeToStatLogCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.eType)
  return static_cast< ::Cmd::EOperType >(etype_);
}
inline void TradeToStatLogCmd::set_etype(::Cmd::EOperType value) {
  assert(::Cmd::EOperType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.eType)
}

// optional uint32 itemid = 4 [default = 0];
inline bool TradeToStatLogCmd::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TradeToStatLogCmd::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TradeToStatLogCmd::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TradeToStatLogCmd::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.itemid)
  return itemid_;
}
inline void TradeToStatLogCmd::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.itemid)
}

// optional uint32 price = 5 [default = 0];
inline bool TradeToStatLogCmd::has_price() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TradeToStatLogCmd::set_has_price() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TradeToStatLogCmd::clear_has_price() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TradeToStatLogCmd::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::price() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.price)
  return price_;
}
inline void TradeToStatLogCmd::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.price)
}

// optional uint32 count = 6 [default = 0];
inline bool TradeToStatLogCmd::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TradeToStatLogCmd::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TradeToStatLogCmd::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TradeToStatLogCmd::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::count() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.count)
  return count_;
}
inline void TradeToStatLogCmd::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.count)
}

// optional uint64 sellerid = 7 [default = 0];
inline bool TradeToStatLogCmd::has_sellerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TradeToStatLogCmd::set_has_sellerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TradeToStatLogCmd::clear_has_sellerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TradeToStatLogCmd::clear_sellerid() {
  sellerid_ = GOOGLE_ULONGLONG(0);
  clear_has_sellerid();
}
inline ::google::protobuf::uint64 TradeToStatLogCmd::sellerid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.sellerid)
  return sellerid_;
}
inline void TradeToStatLogCmd::set_sellerid(::google::protobuf::uint64 value) {
  set_has_sellerid();
  sellerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.sellerid)
}

// optional uint64 buyerid = 8 [default = 0];
inline bool TradeToStatLogCmd::has_buyerid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TradeToStatLogCmd::set_has_buyerid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TradeToStatLogCmd::clear_has_buyerid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TradeToStatLogCmd::clear_buyerid() {
  buyerid_ = GOOGLE_ULONGLONG(0);
  clear_has_buyerid();
}
inline ::google::protobuf::uint64 TradeToStatLogCmd::buyerid() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.buyerid)
  return buyerid_;
}
inline void TradeToStatLogCmd::set_buyerid(::google::protobuf::uint64 value) {
  set_has_buyerid();
  buyerid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.buyerid)
}

// optional uint32 pendingtime = 9 [default = 0];
inline bool TradeToStatLogCmd::has_pendingtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TradeToStatLogCmd::set_has_pendingtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TradeToStatLogCmd::clear_has_pendingtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TradeToStatLogCmd::clear_pendingtime() {
  pendingtime_ = 0u;
  clear_has_pendingtime();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::pendingtime() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.pendingtime)
  return pendingtime_;
}
inline void TradeToStatLogCmd::set_pendingtime(::google::protobuf::uint32 value) {
  set_has_pendingtime();
  pendingtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.pendingtime)
}

// optional uint32 tradetime = 10 [default = 0];
inline bool TradeToStatLogCmd::has_tradetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TradeToStatLogCmd::set_has_tradetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TradeToStatLogCmd::clear_has_tradetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TradeToStatLogCmd::clear_tradetime() {
  tradetime_ = 0u;
  clear_has_tradetime();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::tradetime() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.tradetime)
  return tradetime_;
}
inline void TradeToStatLogCmd::set_tradetime(::google::protobuf::uint32 value) {
  set_has_tradetime();
  tradetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.tradetime)
}

// optional uint32 refinelv = 11 [default = 0];
inline bool TradeToStatLogCmd::has_refinelv() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TradeToStatLogCmd::set_has_refinelv() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TradeToStatLogCmd::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TradeToStatLogCmd::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 TradeToStatLogCmd::refinelv() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.refinelv)
  return refinelv_;
}
inline void TradeToStatLogCmd::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.refinelv)
}

// optional .Cmd.ItemData itemdata = 12;
inline bool TradeToStatLogCmd::has_itemdata() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TradeToStatLogCmd::set_has_itemdata() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TradeToStatLogCmd::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TradeToStatLogCmd::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& TradeToStatLogCmd::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* TradeToStatLogCmd::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.TradeToStatLogCmd.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* TradeToStatLogCmd::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void TradeToStatLogCmd::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeToStatLogCmd.itemdata)
}

// optional string buyername = 13;
inline bool TradeToStatLogCmd::has_buyername() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TradeToStatLogCmd::set_has_buyername() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TradeToStatLogCmd::clear_has_buyername() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TradeToStatLogCmd::clear_buyername() {
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyername_->clear();
  }
  clear_has_buyername();
}
inline const ::std::string& TradeToStatLogCmd::buyername() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.buyername)
  return *buyername_;
}
inline void TradeToStatLogCmd::set_buyername(const ::std::string& value) {
  set_has_buyername();
  if (buyername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyername_ = new ::std::string;
  }
  buyername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.buyername)
}
inline void TradeToStatLogCmd::set_buyername(const char* value) {
  set_has_buyername();
  if (buyername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyername_ = new ::std::string;
  }
  buyername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TradeToStatLogCmd.buyername)
}
inline void TradeToStatLogCmd::set_buyername(const char* value, size_t size) {
  set_has_buyername();
  if (buyername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyername_ = new ::std::string;
  }
  buyername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TradeToStatLogCmd.buyername)
}
inline ::std::string* TradeToStatLogCmd::mutable_buyername() {
  set_has_buyername();
  if (buyername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    buyername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TradeToStatLogCmd.buyername)
  return buyername_;
}
inline ::std::string* TradeToStatLogCmd::release_buyername() {
  clear_has_buyername();
  if (buyername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = buyername_;
    buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TradeToStatLogCmd::set_allocated_buyername(::std::string* buyername) {
  if (buyername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete buyername_;
  }
  if (buyername) {
    set_has_buyername();
    buyername_ = buyername;
  } else {
    clear_has_buyername();
    buyername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TradeToStatLogCmd.buyername)
}

// required .Cmd.ETradeListType elisttype = 14;
inline bool TradeToStatLogCmd::has_elisttype() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TradeToStatLogCmd::set_has_elisttype() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TradeToStatLogCmd::clear_has_elisttype() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TradeToStatLogCmd::clear_elisttype() {
  elisttype_ = 1;
  clear_has_elisttype();
}
inline ::Cmd::ETradeListType TradeToStatLogCmd::elisttype() const {
  // @@protoc_insertion_point(field_get:Cmd.TradeToStatLogCmd.elisttype)
  return static_cast< ::Cmd::ETradeListType >(elisttype_);
}
inline void TradeToStatLogCmd::set_elisttype(::Cmd::ETradeListType value) {
  assert(::Cmd::ETradeListType_IsValid(value));
  set_has_elisttype();
  elisttype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TradeToStatLogCmd.elisttype)
}

// -------------------------------------------------------------------

// KillMonsterNumStatCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool KillMonsterNumStatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillMonsterNumStatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillMonsterNumStatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillMonsterNumStatCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command KillMonsterNumStatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KillMonsterNumStatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillMonsterNumStatCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = STAT_KILL_MONSTER];
inline bool KillMonsterNumStatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillMonsterNumStatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillMonsterNumStatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillMonsterNumStatCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::StatParam KillMonsterNumStatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void KillMonsterNumStatCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillMonsterNumStatCmd.param)
}

// required uint64 userid = 3;
inline bool KillMonsterNumStatCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillMonsterNumStatCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillMonsterNumStatCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillMonsterNumStatCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 KillMonsterNumStatCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.userid)
  return userid_;
}
inline void KillMonsterNumStatCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillMonsterNumStatCmd.userid)
}

// repeated .Cmd.StatKillMonster killmonster = 4;
inline int KillMonsterNumStatCmd::killmonster_size() const {
  return killmonster_.size();
}
inline void KillMonsterNumStatCmd::clear_killmonster() {
  killmonster_.Clear();
}
inline const ::Cmd::StatKillMonster& KillMonsterNumStatCmd::killmonster(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.killmonster)
  return killmonster_.Get(index);
}
inline ::Cmd::StatKillMonster* KillMonsterNumStatCmd::mutable_killmonster(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.KillMonsterNumStatCmd.killmonster)
  return killmonster_.Mutable(index);
}
inline ::Cmd::StatKillMonster* KillMonsterNumStatCmd::add_killmonster() {
  // @@protoc_insertion_point(field_add:Cmd.KillMonsterNumStatCmd.killmonster)
  return killmonster_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >&
KillMonsterNumStatCmd::killmonster() const {
  // @@protoc_insertion_point(field_list:Cmd.KillMonsterNumStatCmd.killmonster)
  return killmonster_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::StatKillMonster >*
KillMonsterNumStatCmd::mutable_killmonster() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.KillMonsterNumStatCmd.killmonster)
  return &killmonster_;
}

// optional uint32 zoneid = 5 [default = 0];
inline bool KillMonsterNumStatCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KillMonsterNumStatCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KillMonsterNumStatCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KillMonsterNumStatCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 KillMonsterNumStatCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.zoneid)
  return zoneid_;
}
inline void KillMonsterNumStatCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillMonsterNumStatCmd.zoneid)
}

// optional uint32 professionid = 6 [default = 0];
inline bool KillMonsterNumStatCmd::has_professionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KillMonsterNumStatCmd::set_has_professionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KillMonsterNumStatCmd::clear_has_professionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KillMonsterNumStatCmd::clear_professionid() {
  professionid_ = 0u;
  clear_has_professionid();
}
inline ::google::protobuf::uint32 KillMonsterNumStatCmd::professionid() const {
  // @@protoc_insertion_point(field_get:Cmd.KillMonsterNumStatCmd.professionid)
  return professionid_;
}
inline void KillMonsterNumStatCmd::set_professionid(::google::protobuf::uint32 value) {
  set_has_professionid();
  professionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KillMonsterNumStatCmd.professionid)
}

// -------------------------------------------------------------------

// DayGetZenyCountCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool DayGetZenyCountCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DayGetZenyCountCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DayGetZenyCountCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DayGetZenyCountCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command DayGetZenyCountCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void DayGetZenyCountCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = STAT_DAY_GET_ZENY_COUNT];
inline bool DayGetZenyCountCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DayGetZenyCountCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DayGetZenyCountCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DayGetZenyCountCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::StatParam DayGetZenyCountCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void DayGetZenyCountCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.param)
}

// required uint64 userid = 3;
inline bool DayGetZenyCountCmd::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DayGetZenyCountCmd::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DayGetZenyCountCmd::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DayGetZenyCountCmd::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 DayGetZenyCountCmd::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.userid)
  return userid_;
}
inline void DayGetZenyCountCmd::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.userid)
}

// optional string username = 4;
inline bool DayGetZenyCountCmd::has_username() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DayGetZenyCountCmd::set_has_username() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DayGetZenyCountCmd::clear_has_username() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DayGetZenyCountCmd::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& DayGetZenyCountCmd::username() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.username)
  return *username_;
}
inline void DayGetZenyCountCmd::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.username)
}
inline void DayGetZenyCountCmd::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.DayGetZenyCountCmd.username)
}
inline void DayGetZenyCountCmd::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.DayGetZenyCountCmd.username)
}
inline ::std::string* DayGetZenyCountCmd::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.DayGetZenyCountCmd.username)
  return username_;
}
inline ::std::string* DayGetZenyCountCmd::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DayGetZenyCountCmd::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.DayGetZenyCountCmd.username)
}

// optional uint32 baselv = 5;
inline bool DayGetZenyCountCmd::has_baselv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DayGetZenyCountCmd::set_has_baselv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DayGetZenyCountCmd::clear_has_baselv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DayGetZenyCountCmd::clear_baselv() {
  baselv_ = 0u;
  clear_has_baselv();
}
inline ::google::protobuf::uint32 DayGetZenyCountCmd::baselv() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.baselv)
  return baselv_;
}
inline void DayGetZenyCountCmd::set_baselv(::google::protobuf::uint32 value) {
  set_has_baselv();
  baselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.baselv)
}

// optional uint32 joblv = 6;
inline bool DayGetZenyCountCmd::has_joblv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DayGetZenyCountCmd::set_has_joblv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DayGetZenyCountCmd::clear_has_joblv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DayGetZenyCountCmd::clear_joblv() {
  joblv_ = 0u;
  clear_has_joblv();
}
inline ::google::protobuf::uint32 DayGetZenyCountCmd::joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.joblv)
  return joblv_;
}
inline void DayGetZenyCountCmd::set_joblv(::google::protobuf::uint32 value) {
  set_has_joblv();
  joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.joblv)
}

// optional uint32 profession = 7;
inline bool DayGetZenyCountCmd::has_profession() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DayGetZenyCountCmd::set_has_profession() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DayGetZenyCountCmd::clear_has_profession() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DayGetZenyCountCmd::clear_profession() {
  profession_ = 0u;
  clear_has_profession();
}
inline ::google::protobuf::uint32 DayGetZenyCountCmd::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.profession)
  return profession_;
}
inline void DayGetZenyCountCmd::set_profession(::google::protobuf::uint32 value) {
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.profession)
}

// optional uint64 normal_zeny = 8;
inline bool DayGetZenyCountCmd::has_normal_zeny() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DayGetZenyCountCmd::set_has_normal_zeny() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DayGetZenyCountCmd::clear_has_normal_zeny() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DayGetZenyCountCmd::clear_normal_zeny() {
  normal_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_normal_zeny();
}
inline ::google::protobuf::uint64 DayGetZenyCountCmd::normal_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.normal_zeny)
  return normal_zeny_;
}
inline void DayGetZenyCountCmd::set_normal_zeny(::google::protobuf::uint64 value) {
  set_has_normal_zeny();
  normal_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.normal_zeny)
}

// optional uint64 charge_zeny = 9;
inline bool DayGetZenyCountCmd::has_charge_zeny() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DayGetZenyCountCmd::set_has_charge_zeny() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DayGetZenyCountCmd::clear_has_charge_zeny() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DayGetZenyCountCmd::clear_charge_zeny() {
  charge_zeny_ = GOOGLE_ULONGLONG(0);
  clear_has_charge_zeny();
}
inline ::google::protobuf::uint64 DayGetZenyCountCmd::charge_zeny() const {
  // @@protoc_insertion_point(field_get:Cmd.DayGetZenyCountCmd.charge_zeny)
  return charge_zeny_;
}
inline void DayGetZenyCountCmd::set_charge_zeny(::google::protobuf::uint64 value) {
  set_has_charge_zeny();
  charge_zeny_ = value;
  // @@protoc_insertion_point(field_set:Cmd.DayGetZenyCountCmd.charge_zeny)
}

// -------------------------------------------------------------------

// StatCurLevel

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool StatCurLevel::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatCurLevel::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatCurLevel::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatCurLevel::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command StatCurLevel::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void StatCurLevel::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.cmd)
}

// optional .Cmd.StatParam param = 2 [default = STAT_CUR_LEVEL];
inline bool StatCurLevel::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatCurLevel::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatCurLevel::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatCurLevel::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::StatParam StatCurLevel::param() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void StatCurLevel::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.param)
}

// required uint64 userid = 3;
inline bool StatCurLevel::has_userid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatCurLevel::set_has_userid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatCurLevel::clear_has_userid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatCurLevel::clear_userid() {
  userid_ = GOOGLE_ULONGLONG(0);
  clear_has_userid();
}
inline ::google::protobuf::uint64 StatCurLevel::userid() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.userid)
  return userid_;
}
inline void StatCurLevel::set_userid(::google::protobuf::uint64 value) {
  set_has_userid();
  userid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.userid)
}

// optional uint32 last_offlinetime = 4;
inline bool StatCurLevel::has_last_offlinetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatCurLevel::set_has_last_offlinetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatCurLevel::clear_has_last_offlinetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatCurLevel::clear_last_offlinetime() {
  last_offlinetime_ = 0u;
  clear_has_last_offlinetime();
}
inline ::google::protobuf::uint32 StatCurLevel::last_offlinetime() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.last_offlinetime)
  return last_offlinetime_;
}
inline void StatCurLevel::set_last_offlinetime(::google::protobuf::uint32 value) {
  set_has_last_offlinetime();
  last_offlinetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.last_offlinetime)
}

// optional uint32 last_baselv = 5;
inline bool StatCurLevel::has_last_baselv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatCurLevel::set_has_last_baselv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatCurLevel::clear_has_last_baselv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatCurLevel::clear_last_baselv() {
  last_baselv_ = 0u;
  clear_has_last_baselv();
}
inline ::google::protobuf::uint32 StatCurLevel::last_baselv() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.last_baselv)
  return last_baselv_;
}
inline void StatCurLevel::set_last_baselv(::google::protobuf::uint32 value) {
  set_has_last_baselv();
  last_baselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.last_baselv)
}

// optional uint32 last_joblv = 6;
inline bool StatCurLevel::has_last_joblv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatCurLevel::set_has_last_joblv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatCurLevel::clear_has_last_joblv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatCurLevel::clear_last_joblv() {
  last_joblv_ = 0u;
  clear_has_last_joblv();
}
inline ::google::protobuf::uint32 StatCurLevel::last_joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.last_joblv)
  return last_joblv_;
}
inline void StatCurLevel::set_last_joblv(::google::protobuf::uint32 value) {
  set_has_last_joblv();
  last_joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.last_joblv)
}

// optional uint32 cur_time = 7;
inline bool StatCurLevel::has_cur_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatCurLevel::set_has_cur_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatCurLevel::clear_has_cur_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatCurLevel::clear_cur_time() {
  cur_time_ = 0u;
  clear_has_cur_time();
}
inline ::google::protobuf::uint32 StatCurLevel::cur_time() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.cur_time)
  return cur_time_;
}
inline void StatCurLevel::set_cur_time(::google::protobuf::uint32 value) {
  set_has_cur_time();
  cur_time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.cur_time)
}

// optional uint32 cur_baselv = 8;
inline bool StatCurLevel::has_cur_baselv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StatCurLevel::set_has_cur_baselv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StatCurLevel::clear_has_cur_baselv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StatCurLevel::clear_cur_baselv() {
  cur_baselv_ = 0u;
  clear_has_cur_baselv();
}
inline ::google::protobuf::uint32 StatCurLevel::cur_baselv() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.cur_baselv)
  return cur_baselv_;
}
inline void StatCurLevel::set_cur_baselv(::google::protobuf::uint32 value) {
  set_has_cur_baselv();
  cur_baselv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.cur_baselv)
}

// optional uint32 cur_joblv = 9;
inline bool StatCurLevel::has_cur_joblv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StatCurLevel::set_has_cur_joblv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StatCurLevel::clear_has_cur_joblv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StatCurLevel::clear_cur_joblv() {
  cur_joblv_ = 0u;
  clear_has_cur_joblv();
}
inline ::google::protobuf::uint32 StatCurLevel::cur_joblv() const {
  // @@protoc_insertion_point(field_get:Cmd.StatCurLevel.cur_joblv)
  return cur_joblv_;
}
inline void StatCurLevel::set_cur_joblv(::google::protobuf::uint32 value) {
  set_has_cur_joblv();
  cur_joblv_ = value;
  // @@protoc_insertion_point(field_set:Cmd.StatCurLevel.cur_joblv)
}

// -------------------------------------------------------------------

// ReqWorldLevelCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool ReqWorldLevelCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqWorldLevelCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqWorldLevelCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqWorldLevelCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command ReqWorldLevelCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWorldLevelCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqWorldLevelCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWorldLevelCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = REQ_WORLD_LEVEL];
inline bool ReqWorldLevelCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqWorldLevelCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqWorldLevelCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqWorldLevelCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::StatParam ReqWorldLevelCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWorldLevelCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void ReqWorldLevelCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWorldLevelCmd.param)
}

// optional uint32 zoneid = 3;
inline bool ReqWorldLevelCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqWorldLevelCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqWorldLevelCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqWorldLevelCmd::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 ReqWorldLevelCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqWorldLevelCmd.zoneid)
  return zoneid_;
}
inline void ReqWorldLevelCmd::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqWorldLevelCmd.zoneid)
}

// -------------------------------------------------------------------

// PetWear

// optional uint64 charid = 1 [default = 0];
inline bool PetWear::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetWear::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetWear::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetWear::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PetWear::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.PetWear.charid)
  return charid_;
}
inline void PetWear::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetWear.charid)
}

// repeated .Cmd.EQualityType types = 2;
inline int PetWear::types_size() const {
  return types_.size();
}
inline void PetWear::clear_types() {
  types_.Clear();
}
inline ::Cmd::EQualityType PetWear::types(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetWear.types)
  return static_cast< ::Cmd::EQualityType >(types_.Get(index));
}
inline void PetWear::set_types(int index, ::Cmd::EQualityType value) {
  assert(::Cmd::EQualityType_IsValid(value));
  types_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.PetWear.types)
}
inline void PetWear::add_types(::Cmd::EQualityType value) {
  assert(::Cmd::EQualityType_IsValid(value));
  types_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.PetWear.types)
}
inline const ::google::protobuf::RepeatedField<int>&
PetWear::types() const {
  // @@protoc_insertion_point(field_list:Cmd.PetWear.types)
  return types_;
}
inline ::google::protobuf::RepeatedField<int>*
PetWear::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetWear.types)
  return &types_;
}

// repeated uint32 counts = 3;
inline int PetWear::counts_size() const {
  return counts_.size();
}
inline void PetWear::clear_counts() {
  counts_.Clear();
}
inline ::google::protobuf::uint32 PetWear::counts(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetWear.counts)
  return counts_.Get(index);
}
inline void PetWear::set_counts(int index, ::google::protobuf::uint32 value) {
  counts_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.PetWear.counts)
}
inline void PetWear::add_counts(::google::protobuf::uint32 value) {
  counts_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.PetWear.counts)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PetWear::counts() const {
  // @@protoc_insertion_point(field_list:Cmd.PetWear.counts)
  return counts_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PetWear::mutable_counts() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetWear.counts)
  return &counts_;
}

// -------------------------------------------------------------------

// PetWearUseCountStatCmd

// optional .Cmd.Command cmd = 1 [default = STAT_PROTOCMD];
inline bool PetWearUseCountStatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PetWearUseCountStatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PetWearUseCountStatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PetWearUseCountStatCmd::clear_cmd() {
  cmd_ = 207;
  clear_has_cmd();
}
inline ::Cmd::Command PetWearUseCountStatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PetWearUseCountStatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PetWearUseCountStatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetWearUseCountStatCmd.cmd)
}

// optional .Cmd.StatParam param = 2 [default = STAT_PET_WEAR_USECOUNT];
inline bool PetWearUseCountStatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PetWearUseCountStatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PetWearUseCountStatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PetWearUseCountStatCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::StatParam PetWearUseCountStatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PetWearUseCountStatCmd.param)
  return static_cast< ::Cmd::StatParam >(param_);
}
inline void PetWearUseCountStatCmd::set_param(::Cmd::StatParam value) {
  assert(::Cmd::StatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PetWearUseCountStatCmd.param)
}

// repeated .Cmd.PetWear wears = 3;
inline int PetWearUseCountStatCmd::wears_size() const {
  return wears_.size();
}
inline void PetWearUseCountStatCmd::clear_wears() {
  wears_.Clear();
}
inline const ::Cmd::PetWear& PetWearUseCountStatCmd::wears(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PetWearUseCountStatCmd.wears)
  return wears_.Get(index);
}
inline ::Cmd::PetWear* PetWearUseCountStatCmd::mutable_wears(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PetWearUseCountStatCmd.wears)
  return wears_.Mutable(index);
}
inline ::Cmd::PetWear* PetWearUseCountStatCmd::add_wears() {
  // @@protoc_insertion_point(field_add:Cmd.PetWearUseCountStatCmd.wears)
  return wears_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::PetWear >&
PetWearUseCountStatCmd::wears() const {
  // @@protoc_insertion_point(field_list:Cmd.PetWearUseCountStatCmd.wears)
  return wears_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::PetWear >*
PetWearUseCountStatCmd::mutable_wears() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PetWearUseCountStatCmd.wears)
  return &wears_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::StatParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::StatParam>() {
  return ::Cmd::StatParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETradeListType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETradeListType>() {
  return ::Cmd::ETradeListType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_StatCmd_2eproto__INCLUDED
