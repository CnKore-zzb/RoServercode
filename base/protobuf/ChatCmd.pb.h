// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChatCmd.proto

#ifndef PROTOBUF_ChatCmd_2eproto__INCLUDED
#define PROTOBUF_ChatCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "ProtoCommon.pb.h"
#include "SceneItem.pb.h"
#include "SceneUser.pb.h"
#include "SceneUser2.pb.h"
#include "Tutor.pb.h"
#include "WeddingCCmd.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChatCmd_2eproto();
void protobuf_AssignDesc_ChatCmd_2eproto();
void protobuf_ShutdownFile_ChatCmd_2eproto();

class OfflineMsg;
class OffMsgUserAddItem;
class OffMsgUserQuotaData;
class QueryItemData;
class PlayExpressionChatCmd;
class QueryUserInfo;
class QueryUserInfoChatCmd;
class BarrageChatCmd;
class ColorInfo;
class BarrageMsgChatCmd;
class ChatCmd;
class ChatRetCmd;
class QueryVoiceUserCmd;
class GetVoiceIDChatCmd;
class LoveLetterNtf;
class ChatSelfNtf;
class NpcChatNtf;
class QueryRealtimeVoiceIDCmd;

enum ChatParam {
  CHATPARAM_QUERYITEMDATA = 1,
  CHATPARAM_PLAYEXPRESSION = 2,
  CHATPARAM_QUERYUSERINFO = 3,
  CHATPARAM_BARRAGE = 4,
  CHATPARAM_BARRAGEMSG = 5,
  CHATPARAM_CHAT = 6,
  CHATPARAM_CHAT_RET = 7,
  CHATPARAM_QUERY_VOICE = 8,
  CHATPARAM_GET_VOICEID = 10,
  CHATPARAM_LOVE_LETTER = 11,
  CHATPARAM_CHAT_SELF = 12,
  CHATPARAM_NPC_CHAT_NTF = 13,
  CHATPARAM_QUERY_REALTIME_VOICE_ID = 14
};
bool ChatParam_IsValid(int value);
const ChatParam ChatParam_MIN = CHATPARAM_QUERYITEMDATA;
const ChatParam ChatParam_MAX = CHATPARAM_QUERY_REALTIME_VOICE_ID;
const int ChatParam_ARRAYSIZE = ChatParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatParam_descriptor();
inline const ::std::string& ChatParam_Name(ChatParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatParam_descriptor(), value);
}
inline bool ChatParam_Parse(
    const ::std::string& name, ChatParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatParam>(
    ChatParam_descriptor(), name, value);
}
enum EOfflineMsg {
  EOFFLINEMSG_MIN = 0,
  EOFFLINEMSG_USER = 1,
  EOFFLINEMSG_TRADE = 2,
  EOFFLINEMSG_GM = 3,
  EOFFLINEMSG_SYS = 4,
  EOFFLINEMSG_SYS2 = 5,
  EOFFLINEMSG_ADD_RELATION = 6,
  EOFFLINEMSG_REMOVE_RELATION = 7,
  EOFFLINEMSG_ADD_ITEM = 8,
  EOFFLINEMSG_TUTOR_REWARD = 9,
  EOFFLINEMSG_USER_ADD_ITEM = 10,
  EOFFLINEMSG_WEDDING = 11,
  EOFFLINEMSG_USER_QUOTA = 12,
  EOFFLINEMSG_MAX = 13
};
bool EOfflineMsg_IsValid(int value);
const EOfflineMsg EOfflineMsg_MIN = EOFFLINEMSG_MIN;
const EOfflineMsg EOfflineMsg_MAX = EOFFLINEMSG_MAX;
const int EOfflineMsg_ARRAYSIZE = EOfflineMsg_MAX + 1;

const ::google::protobuf::EnumDescriptor* EOfflineMsg_descriptor();
inline const ::std::string& EOfflineMsg_Name(EOfflineMsg value) {
  return ::google::protobuf::internal::NameOfEnum(
    EOfflineMsg_descriptor(), value);
}
inline bool EOfflineMsg_Parse(
    const ::std::string& name, EOfflineMsg* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EOfflineMsg>(
    EOfflineMsg_descriptor(), name, value);
}
enum EUserAddItemType {
  EUSERADDITEMTYPE_MIN = 0,
  EUSERADDITEMTYPE_GUILD_DONATE = 1
};
bool EUserAddItemType_IsValid(int value);
const EUserAddItemType EUserAddItemType_MIN = EUSERADDITEMTYPE_MIN;
const EUserAddItemType EUserAddItemType_MAX = EUSERADDITEMTYPE_GUILD_DONATE;
const int EUserAddItemType_ARRAYSIZE = EUserAddItemType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserAddItemType_descriptor();
inline const ::std::string& EUserAddItemType_Name(EUserAddItemType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserAddItemType_descriptor(), value);
}
inline bool EUserAddItemType_Parse(
    const ::std::string& name, EUserAddItemType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserAddItemType>(
    EUserAddItemType_descriptor(), name, value);
}
enum EUserQuotaOper {
  EUSERQUOTAOPER_MIN = 0,
  EUSERQUOTAOPER_UNLOCK = 1,
  EUSERQUOTAOPER_UNLOCK_SUB = 2,
  EUSERQUOTAOPER_MAX = 3
};
bool EUserQuotaOper_IsValid(int value);
const EUserQuotaOper EUserQuotaOper_MIN = EUSERQUOTAOPER_MIN;
const EUserQuotaOper EUserQuotaOper_MAX = EUSERQUOTAOPER_MAX;
const int EUserQuotaOper_ARRAYSIZE = EUserQuotaOper_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserQuotaOper_descriptor();
inline const ::std::string& EUserQuotaOper_Name(EUserQuotaOper value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserQuotaOper_descriptor(), value);
}
inline bool EUserQuotaOper_Parse(
    const ::std::string& name, EUserQuotaOper* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserQuotaOper>(
    EUserQuotaOper_descriptor(), name, value);
}
enum EUserInfoType {
  EUSERINFOTYPE_CHAT = 0,
  EUSERINFOTYPE_WEDDING = 1
};
bool EUserInfoType_IsValid(int value);
const EUserInfoType EUserInfoType_MIN = EUSERINFOTYPE_CHAT;
const EUserInfoType EUserInfoType_MAX = EUSERINFOTYPE_WEDDING;
const int EUserInfoType_ARRAYSIZE = EUserInfoType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EUserInfoType_descriptor();
inline const ::std::string& EUserInfoType_Name(EUserInfoType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EUserInfoType_descriptor(), value);
}
inline bool EUserInfoType_Parse(
    const ::std::string& name, EUserInfoType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EUserInfoType>(
    EUserInfoType_descriptor(), name, value);
}
enum EBarrageOpt {
  EBARRAGE_OPEN = 1,
  EBARRAGE_CLOSE = 2
};
bool EBarrageOpt_IsValid(int value);
const EBarrageOpt EBarrageOpt_MIN = EBARRAGE_OPEN;
const EBarrageOpt EBarrageOpt_MAX = EBARRAGE_CLOSE;
const int EBarrageOpt_ARRAYSIZE = EBarrageOpt_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBarrageOpt_descriptor();
inline const ::std::string& EBarrageOpt_Name(EBarrageOpt value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBarrageOpt_descriptor(), value);
}
inline bool EBarrageOpt_Parse(
    const ::std::string& name, EBarrageOpt* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBarrageOpt>(
    EBarrageOpt_descriptor(), name, value);
}
enum EGameChatChannel {
  ECHAT_CHANNEL_MIN = 0,
  ECHAT_CHANNEL_ROUND = 1,
  ECHAT_CHANNEL_TEAM = 2,
  ECHAT_CHANNEL_GUILD = 3,
  ECHAT_CHANNEL_FRIEND = 4,
  ECHAT_CHANNEL_WORLD = 5,
  ECHAT_CHANNEL_MAP = 6,
  ECHAT_CHANNEL_SYS = 7,
  ECHAT_CHANNEL_ROOM = 8,
  ECHAT_CHANNEL_BARRAGE = 9,
  ECHAT_CHANNEL_CHAT = 10,
  ECHAT_CHANNEL_MAX = 11
};
bool EGameChatChannel_IsValid(int value);
const EGameChatChannel EGameChatChannel_MIN = ECHAT_CHANNEL_MIN;
const EGameChatChannel EGameChatChannel_MAX = ECHAT_CHANNEL_MAX;
const int EGameChatChannel_ARRAYSIZE = EGameChatChannel_MAX + 1;

const ::google::protobuf::EnumDescriptor* EGameChatChannel_descriptor();
inline const ::std::string& EGameChatChannel_Name(EGameChatChannel value) {
  return ::google::protobuf::internal::NameOfEnum(
    EGameChatChannel_descriptor(), value);
}
inline bool EGameChatChannel_Parse(
    const ::std::string& name, EGameChatChannel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EGameChatChannel>(
    EGameChatChannel_descriptor(), name, value);
}
// ===================================================================

class OfflineMsg : public ::google::protobuf::Message {
 public:
  OfflineMsg();
  virtual ~OfflineMsg();

  OfflineMsg(const OfflineMsg& from);

  inline OfflineMsg& operator=(const OfflineMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineMsg& default_instance();

  void Swap(OfflineMsg* other);

  // implements Message ----------------------------------------------

  OfflineMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OfflineMsg& from);
  void MergeFrom(const OfflineMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 targetid = 1 [default = 0];
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 1;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // optional uint64 senderid = 2 [default = 0];
  inline bool has_senderid() const;
  inline void clear_senderid();
  static const int kSenderidFieldNumber = 2;
  inline ::google::protobuf::uint64 senderid() const;
  inline void set_senderid(::google::protobuf::uint64 value);

  // optional uint32 time = 3 [default = 0];
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::Cmd::EOfflineMsg type() const;
  inline void set_type(::Cmd::EOfflineMsg value);

  // optional string sendername = 5;
  inline bool has_sendername() const;
  inline void clear_sendername();
  static const int kSendernameFieldNumber = 5;
  inline const ::std::string& sendername() const;
  inline void set_sendername(const ::std::string& value);
  inline void set_sendername(const char* value);
  inline void set_sendername(const char* value, size_t size);
  inline ::std::string* mutable_sendername();
  inline ::std::string* release_sendername();
  inline void set_allocated_sendername(::std::string* sendername);

  // optional .Cmd.ChatRetCmd chat = 19;
  inline bool has_chat() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 19;
  inline const ::Cmd::ChatRetCmd& chat() const;
  inline ::Cmd::ChatRetCmd* mutable_chat();
  inline ::Cmd::ChatRetCmd* release_chat();
  inline void set_allocated_chat(::Cmd::ChatRetCmd* chat);

  // optional uint32 itemid = 11 [default = 0];
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 11;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 price = 12 [default = 0];
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 12;
  inline ::google::protobuf::uint32 price() const;
  inline void set_price(::google::protobuf::uint32 value);

  // optional uint32 count = 13 [default = 0];
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 13;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional uint32 givemoney = 14 [default = 0];
  inline bool has_givemoney() const;
  inline void clear_givemoney();
  static const int kGivemoneyFieldNumber = 14;
  inline ::google::protobuf::uint32 givemoney() const;
  inline void set_givemoney(::google::protobuf::uint32 value);

  // optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneytypeFieldNumber = 15;
  inline ::Cmd::EMoneyType moneytype() const;
  inline void set_moneytype(::Cmd::EMoneyType value);

  // optional string sysstr = 20;
  inline bool has_sysstr() const;
  inline void clear_sysstr();
  static const int kSysstrFieldNumber = 20;
  inline const ::std::string& sysstr() const;
  inline void set_sysstr(const ::std::string& value);
  inline void set_sysstr(const char* value);
  inline void set_sysstr(const char* value, size_t size);
  inline ::std::string* mutable_sysstr();
  inline ::std::string* release_sysstr();
  inline void set_allocated_sysstr(::std::string* sysstr);

  // optional string gmcmd = 16;
  inline bool has_gmcmd() const;
  inline void clear_gmcmd();
  static const int kGmcmdFieldNumber = 16;
  inline const ::std::string& gmcmd() const;
  inline void set_gmcmd(const ::std::string& value);
  inline void set_gmcmd(const char* value);
  inline void set_gmcmd(const char* value, size_t size);
  inline ::std::string* mutable_gmcmd();
  inline ::std::string* release_gmcmd();
  inline void set_allocated_gmcmd(::std::string* gmcmd);

  // optional uint64 id = 17 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 17;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string msg = 18;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 18;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional .Cmd.ItemData itemdata = 22;
  inline bool has_itemdata() const;
  inline void clear_itemdata();
  static const int kItemdataFieldNumber = 22;
  inline const ::Cmd::ItemData& itemdata() const;
  inline ::Cmd::ItemData* mutable_itemdata();
  inline ::Cmd::ItemData* release_itemdata();
  inline void set_allocated_itemdata(::Cmd::ItemData* itemdata);

  // optional .Cmd.SysMsg syscmd = 21;
  inline bool has_syscmd() const;
  inline void clear_syscmd();
  static const int kSyscmdFieldNumber = 21;
  inline const ::Cmd::SysMsg& syscmd() const;
  inline ::Cmd::SysMsg* mutable_syscmd();
  inline ::Cmd::SysMsg* release_syscmd();
  inline void set_allocated_syscmd(::Cmd::SysMsg* syscmd);

  // optional .Cmd.TutorReward tutorreward = 23;
  inline bool has_tutorreward() const;
  inline void clear_tutorreward();
  static const int kTutorrewardFieldNumber = 23;
  inline const ::Cmd::TutorReward& tutorreward() const;
  inline ::Cmd::TutorReward* mutable_tutorreward();
  inline ::Cmd::TutorReward* release_tutorreward();
  inline void set_allocated_tutorreward(::Cmd::TutorReward* tutorreward);

  // optional .Cmd.OffMsgUserAddItem useradditem = 24;
  inline bool has_useradditem() const;
  inline void clear_useradditem();
  static const int kUseradditemFieldNumber = 24;
  inline const ::Cmd::OffMsgUserAddItem& useradditem() const;
  inline ::Cmd::OffMsgUserAddItem* mutable_useradditem();
  inline ::Cmd::OffMsgUserAddItem* release_useradditem();
  inline void set_allocated_useradditem(::Cmd::OffMsgUserAddItem* useradditem);

  // optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
  inline bool has_weddingmsg() const;
  inline void clear_weddingmsg();
  static const int kWeddingmsgFieldNumber = 25;
  inline const ::Cmd::WeddingEventMsgCCmd& weddingmsg() const;
  inline ::Cmd::WeddingEventMsgCCmd* mutable_weddingmsg();
  inline ::Cmd::WeddingEventMsgCCmd* release_weddingmsg();
  inline void set_allocated_weddingmsg(::Cmd::WeddingEventMsgCCmd* weddingmsg);

  // optional .Cmd.OffMsgUserQuotaData quotadata = 26;
  inline bool has_quotadata() const;
  inline void clear_quotadata();
  static const int kQuotadataFieldNumber = 26;
  inline const ::Cmd::OffMsgUserQuotaData& quotadata() const;
  inline ::Cmd::OffMsgUserQuotaData* mutable_quotadata();
  inline ::Cmd::OffMsgUserQuotaData* release_quotadata();
  inline void set_allocated_quotadata(::Cmd::OffMsgUserQuotaData* quotadata);

  // @@protoc_insertion_point(class_scope:Cmd.OfflineMsg)
 private:
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_senderid();
  inline void clear_has_senderid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_sendername();
  inline void clear_has_sendername();
  inline void set_has_chat();
  inline void clear_has_chat();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_givemoney();
  inline void clear_has_givemoney();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  inline void set_has_sysstr();
  inline void clear_has_sysstr();
  inline void set_has_gmcmd();
  inline void clear_has_gmcmd();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_itemdata();
  inline void clear_has_itemdata();
  inline void set_has_syscmd();
  inline void clear_has_syscmd();
  inline void set_has_tutorreward();
  inline void clear_has_tutorreward();
  inline void set_has_useradditem();
  inline void clear_has_useradditem();
  inline void set_has_weddingmsg();
  inline void clear_has_weddingmsg();
  inline void set_has_quotadata();
  inline void clear_has_quotadata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint64 senderid_;
  ::google::protobuf::uint32 time_;
  int type_;
  ::std::string* sendername_;
  ::Cmd::ChatRetCmd* chat_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 price_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 givemoney_;
  ::std::string* sysstr_;
  ::std::string* gmcmd_;
  ::google::protobuf::uint64 id_;
  ::std::string* msg_;
  ::Cmd::ItemData* itemdata_;
  ::Cmd::SysMsg* syscmd_;
  ::Cmd::TutorReward* tutorreward_;
  ::Cmd::OffMsgUserAddItem* useradditem_;
  ::Cmd::WeddingEventMsgCCmd* weddingmsg_;
  ::Cmd::OffMsgUserQuotaData* quotadata_;
  int moneytype_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static OfflineMsg* default_instance_;
};
// -------------------------------------------------------------------

class OffMsgUserAddItem : public ::google::protobuf::Message {
 public:
  OffMsgUserAddItem();
  virtual ~OffMsgUserAddItem();

  OffMsgUserAddItem(const OffMsgUserAddItem& from);

  inline OffMsgUserAddItem& operator=(const OffMsgUserAddItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffMsgUserAddItem& default_instance();

  void Swap(OffMsgUserAddItem* other);

  // implements Message ----------------------------------------------

  OffMsgUserAddItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffMsgUserAddItem& from);
  void MergeFrom(const OffMsgUserAddItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EUserAddItemType type() const;
  inline void set_type(::Cmd::EUserAddItemType value);

  // repeated .Cmd.ItemInfo items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::Cmd::ItemInfo& items(int index) const;
  inline ::Cmd::ItemInfo* mutable_items(int index);
  inline ::Cmd::ItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Cmd.OffMsgUserAddItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo > items_;
  int type_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static OffMsgUserAddItem* default_instance_;
};
// -------------------------------------------------------------------

class OffMsgUserQuotaData : public ::google::protobuf::Message {
 public:
  OffMsgUserQuotaData();
  virtual ~OffMsgUserQuotaData();

  OffMsgUserQuotaData(const OffMsgUserQuotaData& from);

  inline OffMsgUserQuotaData& operator=(const OffMsgUserQuotaData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OffMsgUserQuotaData& default_instance();

  void Swap(OffMsgUserQuotaData* other);

  // implements Message ----------------------------------------------

  OffMsgUserQuotaData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OffMsgUserQuotaData& from);
  void MergeFrom(const OffMsgUserQuotaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 quota = 1 [default = 0];
  inline bool has_quota() const;
  inline void clear_quota();
  static const int kQuotaFieldNumber = 1;
  inline ::google::protobuf::uint64 quota() const;
  inline void set_quota(::google::protobuf::uint64 value);

  // optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
  inline bool has_oper() const;
  inline void clear_oper();
  static const int kOperFieldNumber = 2;
  inline ::Cmd::EUserQuotaOper oper() const;
  inline void set_oper(::Cmd::EUserQuotaOper value);

  // optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EQuotaType type() const;
  inline void set_type(::Cmd::EQuotaType value);

  // @@protoc_insertion_point(class_scope:Cmd.OffMsgUserQuotaData)
 private:
  inline void set_has_quota();
  inline void clear_has_quota();
  inline void set_has_oper();
  inline void clear_has_oper();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 quota_;
  int oper_;
  int type_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static OffMsgUserQuotaData* default_instance_;
};
// -------------------------------------------------------------------

class QueryItemData : public ::google::protobuf::Message {
 public:
  QueryItemData();
  virtual ~QueryItemData();

  QueryItemData(const QueryItemData& from);

  inline QueryItemData& operator=(const QueryItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryItemData& default_instance();

  void Swap(QueryItemData* other);

  // implements Message ----------------------------------------------

  QueryItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryItemData& from);
  void MergeFrom(const QueryItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional string guid = 3;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 3;
  inline const ::std::string& guid() const;
  inline void set_guid(const ::std::string& value);
  inline void set_guid(const char* value);
  inline void set_guid(const char* value, size_t size);
  inline ::std::string* mutable_guid();
  inline ::std::string* release_guid();
  inline void set_allocated_guid(::std::string* guid);

  // optional .Cmd.ItemData data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::Cmd::ItemData& data() const;
  inline ::Cmd::ItemData* mutable_data();
  inline ::Cmd::ItemData* release_data();
  inline void set_allocated_data(::Cmd::ItemData* data);

  // @@protoc_insertion_point(class_scope:Cmd.QueryItemData)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_guid();
  inline void clear_has_guid();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* guid_;
  ::Cmd::ItemData* data_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryItemData* default_instance_;
};
// -------------------------------------------------------------------

class PlayExpressionChatCmd : public ::google::protobuf::Message {
 public:
  PlayExpressionChatCmd();
  virtual ~PlayExpressionChatCmd();

  PlayExpressionChatCmd(const PlayExpressionChatCmd& from);

  inline PlayExpressionChatCmd& operator=(const PlayExpressionChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayExpressionChatCmd& default_instance();

  void Swap(PlayExpressionChatCmd* other);

  // implements Message ----------------------------------------------

  PlayExpressionChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayExpressionChatCmd& from);
  void MergeFrom(const PlayExpressionChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 expressionid = 4 [default = 0];
  inline bool has_expressionid() const;
  inline void clear_expressionid();
  static const int kExpressionidFieldNumber = 4;
  inline ::google::protobuf::uint32 expressionid() const;
  inline void set_expressionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PlayExpressionChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_expressionid();
  inline void clear_has_expressionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 expressionid_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static PlayExpressionChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserInfo : public ::google::protobuf::Message {
 public:
  QueryUserInfo();
  virtual ~QueryUserInfo();

  QueryUserInfo(const QueryUserInfo& from);

  inline QueryUserInfo& operator=(const QueryUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserInfo& default_instance();

  void Swap(QueryUserInfo* other);

  // implements Message ----------------------------------------------

  QueryUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserInfo& from);
  void MergeFrom(const QueryUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 guildid = 2 [default = 0];
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 2;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildname = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string guildportrait = 5;
  inline bool has_guildportrait() const;
  inline void clear_guildportrait();
  static const int kGuildportraitFieldNumber = 5;
  inline const ::std::string& guildportrait() const;
  inline void set_guildportrait(const ::std::string& value);
  inline void set_guildportrait(const char* value);
  inline void set_guildportrait(const char* value, size_t size);
  inline ::std::string* mutable_guildportrait();
  inline ::std::string* release_guildportrait();
  inline void set_allocated_guildportrait(::std::string* guildportrait);

  // optional string guildjob = 6;
  inline bool has_guildjob() const;
  inline void clear_guildjob();
  static const int kGuildjobFieldNumber = 6;
  inline const ::std::string& guildjob() const;
  inline void set_guildjob(const ::std::string& value);
  inline void set_guildjob(const char* value);
  inline void set_guildjob(const char* value, size_t size);
  inline ::std::string* mutable_guildjob();
  inline ::std::string* release_guildjob();
  inline void set_allocated_guildjob(::std::string* guildjob);

  // repeated .Cmd.UserData datas = 7;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 7;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated .Cmd.UserAttr attrs = 8;
  inline int attrs_size() const;
  inline void clear_attrs();
  static const int kAttrsFieldNumber = 8;
  inline const ::Cmd::UserAttr& attrs(int index) const;
  inline ::Cmd::UserAttr* mutable_attrs(int index);
  inline ::Cmd::UserAttr* add_attrs();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
      attrs() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
      mutable_attrs();

  // repeated .Cmd.ItemData equip = 9;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 9;
  inline const ::Cmd::ItemData& equip(int index) const;
  inline ::Cmd::ItemData* mutable_equip(int index);
  inline ::Cmd::ItemData* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_equip();

  // repeated .Cmd.ItemData fashion = 12;
  inline int fashion_size() const;
  inline void clear_fashion();
  static const int kFashionFieldNumber = 12;
  inline const ::Cmd::ItemData& fashion(int index) const;
  inline ::Cmd::ItemData* mutable_fashion(int index);
  inline ::Cmd::ItemData* add_fashion();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
      fashion() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
      mutable_fashion();

  // repeated .Cmd.HighRefineData highrefine = 10;
  inline int highrefine_size() const;
  inline void clear_highrefine();
  static const int kHighrefineFieldNumber = 10;
  inline const ::Cmd::HighRefineData& highrefine(int index) const;
  inline ::Cmd::HighRefineData* mutable_highrefine(int index);
  inline ::Cmd::HighRefineData* add_highrefine();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
      highrefine() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
      mutable_highrefine();

  // optional string partner = 11;
  inline bool has_partner() const;
  inline void clear_partner();
  static const int kPartnerFieldNumber = 11;
  inline const ::std::string& partner() const;
  inline void set_partner(const ::std::string& value);
  inline void set_partner(const char* value);
  inline void set_partner(const char* value, size_t size);
  inline ::std::string* mutable_partner();
  inline ::std::string* release_partner();
  inline void set_allocated_partner(::std::string* partner);

  // @@protoc_insertion_point(class_scope:Cmd.QueryUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildportrait();
  inline void clear_has_guildportrait();
  inline void set_has_guildjob();
  inline void clear_has_guildjob();
  inline void set_has_partner();
  inline void clear_has_partner();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 guildid_;
  ::std::string* name_;
  ::std::string* guildname_;
  ::std::string* guildportrait_;
  ::std::string* guildjob_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr > attrs_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > equip_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData > fashion_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData > highrefine_;
  ::std::string* partner_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryUserInfoChatCmd : public ::google::protobuf::Message {
 public:
  QueryUserInfoChatCmd();
  virtual ~QueryUserInfoChatCmd();

  QueryUserInfoChatCmd(const QueryUserInfoChatCmd& from);

  inline QueryUserInfoChatCmd& operator=(const QueryUserInfoChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryUserInfoChatCmd& default_instance();

  void Swap(QueryUserInfoChatCmd* other);

  // implements Message ----------------------------------------------

  QueryUserInfoChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryUserInfoChatCmd& from);
  void MergeFrom(const QueryUserInfoChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 msgid = 4 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 4;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Cmd::EUserInfoType type() const;
  inline void set_type(::Cmd::EUserInfoType value);

  // optional .Cmd.QueryUserInfo info = 5;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::Cmd::QueryUserInfo& info() const;
  inline ::Cmd::QueryUserInfo* mutable_info();
  inline ::Cmd::QueryUserInfo* release_info();
  inline void set_allocated_info(::Cmd::QueryUserInfo* info);

  // @@protoc_insertion_point(class_scope:Cmd.QueryUserInfoChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 msgid_;
  int type_;
  ::Cmd::QueryUserInfo* info_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryUserInfoChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class BarrageChatCmd : public ::google::protobuf::Message {
 public:
  BarrageChatCmd();
  virtual ~BarrageChatCmd();

  BarrageChatCmd(const BarrageChatCmd& from);

  inline BarrageChatCmd& operator=(const BarrageChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BarrageChatCmd& default_instance();

  void Swap(BarrageChatCmd* other);

  // implements Message ----------------------------------------------

  BarrageChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BarrageChatCmd& from);
  void MergeFrom(const BarrageChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 3;
  inline ::Cmd::EBarrageOpt opt() const;
  inline void set_opt(::Cmd::EBarrageOpt value);

  // @@protoc_insertion_point(class_scope:Cmd.BarrageChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_opt();
  inline void clear_has_opt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int opt_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static BarrageChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class ColorInfo : public ::google::protobuf::Message {
 public:
  ColorInfo();
  virtual ~ColorInfo();

  ColorInfo(const ColorInfo& from);

  inline ColorInfo& operator=(const ColorInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColorInfo& default_instance();

  void Swap(ColorInfo* other);

  // implements Message ----------------------------------------------

  ColorInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColorInfo& from);
  void MergeFrom(const ColorInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 r = 1 [default = 255];
  inline bool has_r() const;
  inline void clear_r();
  static const int kRFieldNumber = 1;
  inline ::google::protobuf::uint32 r() const;
  inline void set_r(::google::protobuf::uint32 value);

  // optional uint32 g = 2 [default = 255];
  inline bool has_g() const;
  inline void clear_g();
  static const int kGFieldNumber = 2;
  inline ::google::protobuf::uint32 g() const;
  inline void set_g(::google::protobuf::uint32 value);

  // optional uint32 b = 3 [default = 255];
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 3;
  inline ::google::protobuf::uint32 b() const;
  inline void set_b(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ColorInfo)
 private:
  inline void set_has_r();
  inline void clear_has_r();
  inline void set_has_g();
  inline void clear_has_g();
  inline void set_has_b();
  inline void clear_has_b();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 r_;
  ::google::protobuf::uint32 g_;
  ::google::protobuf::uint32 b_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static ColorInfo* default_instance_;
};
// -------------------------------------------------------------------

class BarrageMsgChatCmd : public ::google::protobuf::Message {
 public:
  BarrageMsgChatCmd();
  virtual ~BarrageMsgChatCmd();

  BarrageMsgChatCmd(const BarrageMsgChatCmd& from);

  inline BarrageMsgChatCmd& operator=(const BarrageMsgChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BarrageMsgChatCmd& default_instance();

  void Swap(BarrageMsgChatCmd* other);

  // implements Message ----------------------------------------------

  BarrageMsgChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BarrageMsgChatCmd& from);
  void MergeFrom(const BarrageMsgChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional string str = 3;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 3;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // optional .Cmd.ScenePos msgpos = 4;
  inline bool has_msgpos() const;
  inline void clear_msgpos();
  static const int kMsgposFieldNumber = 4;
  inline const ::Cmd::ScenePos& msgpos() const;
  inline ::Cmd::ScenePos* mutable_msgpos();
  inline ::Cmd::ScenePos* release_msgpos();
  inline void set_allocated_msgpos(::Cmd::ScenePos* msgpos);

  // optional .Cmd.ColorInfo clr = 5;
  inline bool has_clr() const;
  inline void clear_clr();
  static const int kClrFieldNumber = 5;
  inline const ::Cmd::ColorInfo& clr() const;
  inline ::Cmd::ColorInfo* mutable_clr();
  inline ::Cmd::ColorInfo* release_clr();
  inline void set_allocated_clr(::Cmd::ColorInfo* clr);

  // optional uint32 speed = 6 [default = 0];
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 6;
  inline ::google::protobuf::uint32 speed() const;
  inline void set_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.BarrageMsgChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_msgpos();
  inline void clear_has_msgpos();
  inline void set_has_clr();
  inline void clear_has_clr();
  inline void set_has_speed();
  inline void clear_has_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* str_;
  ::Cmd::ScenePos* msgpos_;
  ::Cmd::ColorInfo* clr_;
  ::google::protobuf::uint32 speed_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static BarrageMsgChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChatCmd : public ::google::protobuf::Message {
 public:
  ChatCmd();
  virtual ~ChatCmd();

  ChatCmd(const ChatCmd& from);

  inline ChatCmd& operator=(const ChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatCmd& default_instance();

  void Swap(ChatCmd* other);

  // implements Message ----------------------------------------------

  ChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatCmd& from);
  void MergeFrom(const ChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::Cmd::EGameChatChannel channel() const;
  inline void set_channel(::Cmd::EGameChatChannel value);

  // required string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // optional uint64 desID = 5;
  inline bool has_desid() const;
  inline void clear_desid();
  static const int kDesIDFieldNumber = 5;
  inline ::google::protobuf::uint64 desid() const;
  inline void set_desid(::google::protobuf::uint64 value);

  // optional bytes voice = 6;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 6;
  inline const ::std::string& voice() const;
  inline void set_voice(const ::std::string& value);
  inline void set_voice(const char* value);
  inline void set_voice(const void* value, size_t size);
  inline ::std::string* mutable_voice();
  inline ::std::string* release_voice();
  inline void set_allocated_voice(::std::string* voice);

  // optional uint32 voicetime = 7 [default = 0];
  inline bool has_voicetime() const;
  inline void clear_voicetime();
  static const int kVoicetimeFieldNumber = 7;
  inline ::google::protobuf::uint32 voicetime() const;
  inline void set_voicetime(::google::protobuf::uint32 value);

  // optional uint32 msgid = 8 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 8;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional bool msgover = 9 [default = false];
  inline bool has_msgover() const;
  inline void clear_msgover();
  static const int kMsgoverFieldNumber = 9;
  inline bool msgover() const;
  inline void set_msgover(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.ChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_desid();
  inline void clear_has_desid();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_voicetime();
  inline void clear_has_voicetime();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgover();
  inline void clear_has_msgover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* str_;
  ::google::protobuf::uint64 desid_;
  int channel_;
  ::google::protobuf::uint32 voicetime_;
  ::std::string* voice_;
  ::google::protobuf::uint32 msgid_;
  bool msgover_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class ChatRetCmd : public ::google::protobuf::Message {
 public:
  ChatRetCmd();
  virtual ~ChatRetCmd();

  ChatRetCmd(const ChatRetCmd& from);

  inline ChatRetCmd& operator=(const ChatRetCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatRetCmd& default_instance();

  void Swap(ChatRetCmd* other);

  // implements Message ----------------------------------------------

  ChatRetCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatRetCmd& from);
  void MergeFrom(const ChatRetCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // required uint64 id = 6;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 6;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 targetid = 13 [default = 0];
  inline bool has_targetid() const;
  inline void clear_targetid();
  static const int kTargetidFieldNumber = 13;
  inline ::google::protobuf::uint64 targetid() const;
  inline void set_targetid(::google::protobuf::uint64 value);

  // required uint32 portrait = 7;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 7;
  inline ::google::protobuf::uint32 portrait() const;
  inline void set_portrait(::google::protobuf::uint32 value);

  // required uint32 frame = 8;
  inline bool has_frame() const;
  inline void clear_frame();
  static const int kFrameFieldNumber = 8;
  inline ::google::protobuf::uint32 frame() const;
  inline void set_frame(::google::protobuf::uint32 value);

  // optional uint32 baselevel = 10 [default = 0];
  inline bool has_baselevel() const;
  inline void clear_baselevel();
  static const int kBaselevelFieldNumber = 10;
  inline ::google::protobuf::uint32 baselevel() const;
  inline void set_baselevel(::google::protobuf::uint32 value);

  // optional uint32 voiceid = 11 [default = 0];
  inline bool has_voiceid() const;
  inline void clear_voiceid();
  static const int kVoiceidFieldNumber = 11;
  inline ::google::protobuf::uint32 voiceid() const;
  inline void set_voiceid(::google::protobuf::uint32 value);

  // optional uint32 voicetime = 12 [default = 0];
  inline bool has_voicetime() const;
  inline void clear_voicetime();
  static const int kVoicetimeFieldNumber = 12;
  inline ::google::protobuf::uint32 voicetime() const;
  inline void set_voicetime(::google::protobuf::uint32 value);

  // optional uint32 hair = 14 [default = 0];
  inline bool has_hair() const;
  inline void clear_hair();
  static const int kHairFieldNumber = 14;
  inline ::google::protobuf::uint32 hair() const;
  inline void set_hair(::google::protobuf::uint32 value);

  // optional uint32 haircolor = 15 [default = 0];
  inline bool has_haircolor() const;
  inline void clear_haircolor();
  static const int kHaircolorFieldNumber = 15;
  inline ::google::protobuf::uint32 haircolor() const;
  inline void set_haircolor(::google::protobuf::uint32 value);

  // optional uint32 body = 16 [default = 0];
  inline bool has_body() const;
  inline void clear_body();
  static const int kBodyFieldNumber = 16;
  inline ::google::protobuf::uint32 body() const;
  inline void set_body(::google::protobuf::uint32 value);

  // optional uint32 appellation = 19 [default = 0];
  inline bool has_appellation() const;
  inline void clear_appellation();
  static const int kAppellationFieldNumber = 19;
  inline ::google::protobuf::uint32 appellation() const;
  inline void set_appellation(::google::protobuf::uint32 value);

  // optional uint32 msgid = 21 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 21;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional uint32 head = 22 [default = 0];
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 22;
  inline ::google::protobuf::uint32 head() const;
  inline void set_head(::google::protobuf::uint32 value);

  // optional uint32 face = 23 [default = 0];
  inline bool has_face() const;
  inline void clear_face();
  static const int kFaceFieldNumber = 23;
  inline ::google::protobuf::uint32 face() const;
  inline void set_face(::google::protobuf::uint32 value);

  // optional uint32 mouth = 24 [default = 0];
  inline bool has_mouth() const;
  inline void clear_mouth();
  static const int kMouthFieldNumber = 24;
  inline ::google::protobuf::uint32 mouth() const;
  inline void set_mouth(::google::protobuf::uint32 value);

  // optional uint32 eye = 25 [default = 0];
  inline bool has_eye() const;
  inline void clear_eye();
  static const int kEyeFieldNumber = 25;
  inline ::google::protobuf::uint32 eye() const;
  inline void set_eye(::google::protobuf::uint32 value);

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::Cmd::EGameChatChannel channel() const;
  inline void set_channel(::Cmd::EGameChatChannel value);

  // optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
  inline bool has_rolejob() const;
  inline void clear_rolejob();
  static const int kRolejobFieldNumber = 9;
  inline ::Cmd::EProfession rolejob() const;
  inline void set_rolejob(::Cmd::EProfession value);

  // optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 17;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional bool blink = 20 [default = false];
  inline bool has_blink() const;
  inline void clear_blink();
  static const int kBlinkFieldNumber = 20;
  inline bool blink() const;
  inline void set_blink(bool value);

  // required string str = 4;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 4;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  inline void set_allocated_str(::std::string* str);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildname = 18;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 18;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 sysmsgid = 26 [default = 0];
  inline bool has_sysmsgid() const;
  inline void clear_sysmsgid();
  static const int kSysmsgidFieldNumber = 26;
  inline ::google::protobuf::uint32 sysmsgid() const;
  inline void set_sysmsgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ChatRetCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_targetid();
  inline void clear_has_targetid();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_frame();
  inline void clear_has_frame();
  inline void set_has_baselevel();
  inline void clear_has_baselevel();
  inline void set_has_voiceid();
  inline void clear_has_voiceid();
  inline void set_has_voicetime();
  inline void clear_has_voicetime();
  inline void set_has_hair();
  inline void clear_has_hair();
  inline void set_has_haircolor();
  inline void clear_has_haircolor();
  inline void set_has_body();
  inline void clear_has_body();
  inline void set_has_appellation();
  inline void clear_has_appellation();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_face();
  inline void clear_has_face();
  inline void set_has_mouth();
  inline void clear_has_mouth();
  inline void set_has_eye();
  inline void clear_has_eye();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_rolejob();
  inline void clear_has_rolejob();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_blink();
  inline void clear_has_blink();
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_sysmsgid();
  inline void clear_has_sysmsgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 targetid_;
  ::google::protobuf::uint32 portrait_;
  ::google::protobuf::uint32 frame_;
  ::google::protobuf::uint32 baselevel_;
  ::google::protobuf::uint32 voiceid_;
  ::google::protobuf::uint32 voicetime_;
  ::google::protobuf::uint32 hair_;
  ::google::protobuf::uint32 haircolor_;
  ::google::protobuf::uint32 body_;
  ::google::protobuf::uint32 appellation_;
  ::google::protobuf::uint32 msgid_;
  ::google::protobuf::uint32 head_;
  ::google::protobuf::uint32 face_;
  ::google::protobuf::uint32 mouth_;
  ::google::protobuf::uint32 eye_;
  int channel_;
  int rolejob_;
  int gender_;
  bool blink_;
  ::std::string* str_;
  ::std::string* name_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 sysmsgid_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatRetCmd* default_instance_;
};
// -------------------------------------------------------------------

class QueryVoiceUserCmd : public ::google::protobuf::Message {
 public:
  QueryVoiceUserCmd();
  virtual ~QueryVoiceUserCmd();

  QueryVoiceUserCmd(const QueryVoiceUserCmd& from);

  inline QueryVoiceUserCmd& operator=(const QueryVoiceUserCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryVoiceUserCmd& default_instance();

  void Swap(QueryVoiceUserCmd* other);

  // implements Message ----------------------------------------------

  QueryVoiceUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryVoiceUserCmd& from);
  void MergeFrom(const QueryVoiceUserCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional uint32 voiceid = 3 [default = 0];
  inline bool has_voiceid() const;
  inline void clear_voiceid();
  static const int kVoiceidFieldNumber = 3;
  inline ::google::protobuf::uint32 voiceid() const;
  inline void set_voiceid(::google::protobuf::uint32 value);

  // optional bytes voice = 4;
  inline bool has_voice() const;
  inline void clear_voice();
  static const int kVoiceFieldNumber = 4;
  inline const ::std::string& voice() const;
  inline void set_voice(const ::std::string& value);
  inline void set_voice(const char* value);
  inline void set_voice(const void* value, size_t size);
  inline ::std::string* mutable_voice();
  inline ::std::string* release_voice();
  inline void set_allocated_voice(::std::string* voice);

  // optional uint32 msgid = 8 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 8;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // optional bool msgover = 9 [default = false];
  inline bool has_msgover() const;
  inline void clear_msgover();
  static const int kMsgoverFieldNumber = 9;
  inline bool msgover() const;
  inline void set_msgover(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryVoiceUserCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_voiceid();
  inline void clear_has_voiceid();
  inline void set_has_voice();
  inline void clear_has_voice();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msgover();
  inline void clear_has_msgover();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* voice_;
  ::google::protobuf::uint32 voiceid_;
  ::google::protobuf::uint32 msgid_;
  bool msgover_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryVoiceUserCmd* default_instance_;
};
// -------------------------------------------------------------------

class GetVoiceIDChatCmd : public ::google::protobuf::Message {
 public:
  GetVoiceIDChatCmd();
  virtual ~GetVoiceIDChatCmd();

  GetVoiceIDChatCmd(const GetVoiceIDChatCmd& from);

  inline GetVoiceIDChatCmd& operator=(const GetVoiceIDChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetVoiceIDChatCmd& default_instance();

  void Swap(GetVoiceIDChatCmd* other);

  // implements Message ----------------------------------------------

  GetVoiceIDChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetVoiceIDChatCmd& from);
  void MergeFrom(const GetVoiceIDChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional uint32 id = 3 [default = 0];
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GetVoiceIDChatCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 id_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static GetVoiceIDChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class LoveLetterNtf : public ::google::protobuf::Message {
 public:
  LoveLetterNtf();
  virtual ~LoveLetterNtf();

  LoveLetterNtf(const LoveLetterNtf& from);

  inline LoveLetterNtf& operator=(const LoveLetterNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoveLetterNtf& default_instance();

  void Swap(LoveLetterNtf* other);

  // implements Message ----------------------------------------------

  LoveLetterNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoveLetterNtf& from);
  void MergeFrom(const LoveLetterNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 type = 5;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional string bg = 6;
  inline bool has_bg() const;
  inline void clear_bg();
  static const int kBgFieldNumber = 6;
  inline const ::std::string& bg() const;
  inline void set_bg(const ::std::string& value);
  inline void set_bg(const char* value);
  inline void set_bg(const char* value, size_t size);
  inline ::std::string* mutable_bg();
  inline ::std::string* release_bg();
  inline void set_allocated_bg(::std::string* bg);

  // optional uint32 letterID = 7 [default = 0];
  inline bool has_letterid() const;
  inline void clear_letterid();
  static const int kLetterIDFieldNumber = 7;
  inline ::google::protobuf::uint32 letterid() const;
  inline void set_letterid(::google::protobuf::uint32 value);

  // optional uint32 configID = 8 [default = 0];
  inline bool has_configid() const;
  inline void clear_configid();
  static const int kConfigIDFieldNumber = 8;
  inline ::google::protobuf::uint32 configid() const;
  inline void set_configid(::google::protobuf::uint32 value);

  // optional string content2 = 9;
  inline bool has_content2() const;
  inline void clear_content2();
  static const int kContent2FieldNumber = 9;
  inline const ::std::string& content2() const;
  inline void set_content2(const ::std::string& value);
  inline void set_content2(const char* value);
  inline void set_content2(const char* value, size_t size);
  inline ::std::string* mutable_content2();
  inline ::std::string* release_content2();
  inline void set_allocated_content2(::std::string* content2);

  // @@protoc_insertion_point(class_scope:Cmd.LoveLetterNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_bg();
  inline void clear_has_bg();
  inline void set_has_letterid();
  inline void clear_has_letterid();
  inline void set_has_configid();
  inline void clear_has_configid();
  inline void set_has_content2();
  inline void clear_has_content2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* name_;
  ::std::string* content_;
  ::std::string* bg_;
  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 letterid_;
  ::std::string* content2_;
  ::google::protobuf::uint32 configid_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static LoveLetterNtf* default_instance_;
};
// -------------------------------------------------------------------

class ChatSelfNtf : public ::google::protobuf::Message {
 public:
  ChatSelfNtf();
  virtual ~ChatSelfNtf();

  ChatSelfNtf(const ChatSelfNtf& from);

  inline ChatSelfNtf& operator=(const ChatSelfNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatSelfNtf& default_instance();

  void Swap(ChatSelfNtf* other);

  // implements Message ----------------------------------------------

  ChatSelfNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChatSelfNtf& from);
  void MergeFrom(const ChatSelfNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional .Cmd.ChatCmd chat = 3;
  inline bool has_chat() const;
  inline void clear_chat();
  static const int kChatFieldNumber = 3;
  inline const ::Cmd::ChatCmd& chat() const;
  inline ::Cmd::ChatCmd* mutable_chat();
  inline ::Cmd::ChatCmd* release_chat();
  inline void set_allocated_chat(::Cmd::ChatCmd* chat);

  // @@protoc_insertion_point(class_scope:Cmd.ChatSelfNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_chat();
  inline void clear_has_chat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::ChatCmd* chat_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static ChatSelfNtf* default_instance_;
};
// -------------------------------------------------------------------

class NpcChatNtf : public ::google::protobuf::Message {
 public:
  NpcChatNtf();
  virtual ~NpcChatNtf();

  NpcChatNtf(const NpcChatNtf& from);

  inline NpcChatNtf& operator=(const NpcChatNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NpcChatNtf& default_instance();

  void Swap(NpcChatNtf* other);

  // implements Message ----------------------------------------------

  NpcChatNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NpcChatNtf& from);
  void MergeFrom(const NpcChatNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::Cmd::EGameChatChannel channel() const;
  inline void set_channel(::Cmd::EGameChatChannel value);

  // optional uint32 npcid = 4 [default = 0];
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcidFieldNumber = 4;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint32 msgid = 5 [default = 0];
  inline bool has_msgid() const;
  inline void clear_msgid();
  static const int kMsgidFieldNumber = 5;
  inline ::google::protobuf::uint32 msgid() const;
  inline void set_msgid(::google::protobuf::uint32 value);

  // repeated .Cmd.MsgParam params = 6;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 6;
  inline const ::Cmd::MsgParam& params(int index) const;
  inline ::Cmd::MsgParam* mutable_params(int index);
  inline ::Cmd::MsgParam* add_params();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
      params() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
      mutable_params();

  // optional string msg = 7;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 7;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional uint64 npcguid = 8 [default = 0];
  inline bool has_npcguid() const;
  inline void clear_npcguid();
  static const int kNpcguidFieldNumber = 8;
  inline ::google::protobuf::uint64 npcguid() const;
  inline void set_npcguid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.NpcChatNtf)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_msgid();
  inline void clear_has_msgid();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_npcguid();
  inline void clear_has_npcguid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int channel_;
  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam > params_;
  ::std::string* msg_;
  ::google::protobuf::uint64 npcguid_;
  ::google::protobuf::uint32 msgid_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static NpcChatNtf* default_instance_;
};
// -------------------------------------------------------------------

class QueryRealtimeVoiceIDCmd : public ::google::protobuf::Message {
 public:
  QueryRealtimeVoiceIDCmd();
  virtual ~QueryRealtimeVoiceIDCmd();

  QueryRealtimeVoiceIDCmd(const QueryRealtimeVoiceIDCmd& from);

  inline QueryRealtimeVoiceIDCmd& operator=(const QueryRealtimeVoiceIDCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRealtimeVoiceIDCmd& default_instance();

  void Swap(QueryRealtimeVoiceIDCmd* other);

  // implements Message ----------------------------------------------

  QueryRealtimeVoiceIDCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryRealtimeVoiceIDCmd& from);
  void MergeFrom(const QueryRealtimeVoiceIDCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::ChatParam param() const;
  inline void set_param(::Cmd::ChatParam value);

  // optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
  inline bool has_channel() const;
  inline void clear_channel();
  static const int kChannelFieldNumber = 3;
  inline ::Cmd::EGameChatChannel channel() const;
  inline void set_channel(::Cmd::EGameChatChannel value);

  // optional string id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:Cmd.QueryRealtimeVoiceIDCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_channel();
  inline void clear_has_channel();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::std::string* id_;
  int channel_;
  friend void  protobuf_AddDesc_ChatCmd_2eproto();
  friend void protobuf_AssignDesc_ChatCmd_2eproto();
  friend void protobuf_ShutdownFile_ChatCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryRealtimeVoiceIDCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// OfflineMsg

// optional uint64 targetid = 1 [default = 0];
inline bool OfflineMsg::has_targetid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineMsg::set_has_targetid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineMsg::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineMsg::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 OfflineMsg::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.targetid)
  return targetid_;
}
inline void OfflineMsg::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.targetid)
}

// optional uint64 senderid = 2 [default = 0];
inline bool OfflineMsg::has_senderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineMsg::set_has_senderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineMsg::clear_has_senderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineMsg::clear_senderid() {
  senderid_ = GOOGLE_ULONGLONG(0);
  clear_has_senderid();
}
inline ::google::protobuf::uint64 OfflineMsg::senderid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.senderid)
  return senderid_;
}
inline void OfflineMsg::set_senderid(::google::protobuf::uint64 value) {
  set_has_senderid();
  senderid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.senderid)
}

// optional uint32 time = 3 [default = 0];
inline bool OfflineMsg::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineMsg::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineMsg::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineMsg::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 OfflineMsg::time() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.time)
  return time_;
}
inline void OfflineMsg::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.time)
}

// optional .Cmd.EOfflineMsg type = 4 [default = EOFFLINEMSG_MIN];
inline bool OfflineMsg::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OfflineMsg::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OfflineMsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OfflineMsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EOfflineMsg OfflineMsg::type() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.type)
  return static_cast< ::Cmd::EOfflineMsg >(type_);
}
inline void OfflineMsg::set_type(::Cmd::EOfflineMsg value) {
  assert(::Cmd::EOfflineMsg_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.type)
}

// optional string sendername = 5;
inline bool OfflineMsg::has_sendername() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OfflineMsg::set_has_sendername() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OfflineMsg::clear_has_sendername() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OfflineMsg::clear_sendername() {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_->clear();
  }
  clear_has_sendername();
}
inline const ::std::string& OfflineMsg::sendername() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.sendername)
  return *sendername_;
}
inline void OfflineMsg::set_sendername(const ::std::string& value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.sendername)
}
inline void OfflineMsg::set_sendername(const char* value) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OfflineMsg.sendername)
}
inline void OfflineMsg::set_sendername(const char* value, size_t size) {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  sendername_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OfflineMsg.sendername)
}
inline ::std::string* OfflineMsg::mutable_sendername() {
  set_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sendername_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.sendername)
  return sendername_;
}
inline ::std::string* OfflineMsg::release_sendername() {
  clear_has_sendername();
  if (sendername_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sendername_;
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OfflineMsg::set_allocated_sendername(::std::string* sendername) {
  if (sendername_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sendername_;
  }
  if (sendername) {
    set_has_sendername();
    sendername_ = sendername;
  } else {
    clear_has_sendername();
    sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.sendername)
}

// optional .Cmd.ChatRetCmd chat = 19;
inline bool OfflineMsg::has_chat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OfflineMsg::set_has_chat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OfflineMsg::clear_has_chat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OfflineMsg::clear_chat() {
  if (chat_ != NULL) chat_->::Cmd::ChatRetCmd::Clear();
  clear_has_chat();
}
inline const ::Cmd::ChatRetCmd& OfflineMsg::chat() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.chat)
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
inline ::Cmd::ChatRetCmd* OfflineMsg::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) chat_ = new ::Cmd::ChatRetCmd;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.chat)
  return chat_;
}
inline ::Cmd::ChatRetCmd* OfflineMsg::release_chat() {
  clear_has_chat();
  ::Cmd::ChatRetCmd* temp = chat_;
  chat_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_chat(::Cmd::ChatRetCmd* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.chat)
}

// optional uint32 itemid = 11 [default = 0];
inline bool OfflineMsg::has_itemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OfflineMsg::set_has_itemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OfflineMsg::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OfflineMsg::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 OfflineMsg::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.itemid)
  return itemid_;
}
inline void OfflineMsg::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.itemid)
}

// optional uint32 price = 12 [default = 0];
inline bool OfflineMsg::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OfflineMsg::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OfflineMsg::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OfflineMsg::clear_price() {
  price_ = 0u;
  clear_has_price();
}
inline ::google::protobuf::uint32 OfflineMsg::price() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.price)
  return price_;
}
inline void OfflineMsg::set_price(::google::protobuf::uint32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.price)
}

// optional uint32 count = 13 [default = 0];
inline bool OfflineMsg::has_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OfflineMsg::set_has_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OfflineMsg::clear_has_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OfflineMsg::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 OfflineMsg::count() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.count)
  return count_;
}
inline void OfflineMsg::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.count)
}

// optional uint32 givemoney = 14 [default = 0];
inline bool OfflineMsg::has_givemoney() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OfflineMsg::set_has_givemoney() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OfflineMsg::clear_has_givemoney() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OfflineMsg::clear_givemoney() {
  givemoney_ = 0u;
  clear_has_givemoney();
}
inline ::google::protobuf::uint32 OfflineMsg::givemoney() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.givemoney)
  return givemoney_;
}
inline void OfflineMsg::set_givemoney(::google::protobuf::uint32 value) {
  set_has_givemoney();
  givemoney_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.givemoney)
}

// optional .Cmd.EMoneyType moneytype = 15 [default = EMONEYTYPE_MIN];
inline bool OfflineMsg::has_moneytype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void OfflineMsg::set_has_moneytype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void OfflineMsg::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void OfflineMsg::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::Cmd::EMoneyType OfflineMsg::moneytype() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.moneytype)
  return static_cast< ::Cmd::EMoneyType >(moneytype_);
}
inline void OfflineMsg::set_moneytype(::Cmd::EMoneyType value) {
  assert(::Cmd::EMoneyType_IsValid(value));
  set_has_moneytype();
  moneytype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.moneytype)
}

// optional string sysstr = 20;
inline bool OfflineMsg::has_sysstr() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OfflineMsg::set_has_sysstr() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OfflineMsg::clear_has_sysstr() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OfflineMsg::clear_sysstr() {
  if (sysstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sysstr_->clear();
  }
  clear_has_sysstr();
}
inline const ::std::string& OfflineMsg::sysstr() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.sysstr)
  return *sysstr_;
}
inline void OfflineMsg::set_sysstr(const ::std::string& value) {
  set_has_sysstr();
  if (sysstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sysstr_ = new ::std::string;
  }
  sysstr_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.sysstr)
}
inline void OfflineMsg::set_sysstr(const char* value) {
  set_has_sysstr();
  if (sysstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sysstr_ = new ::std::string;
  }
  sysstr_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OfflineMsg.sysstr)
}
inline void OfflineMsg::set_sysstr(const char* value, size_t size) {
  set_has_sysstr();
  if (sysstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sysstr_ = new ::std::string;
  }
  sysstr_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OfflineMsg.sysstr)
}
inline ::std::string* OfflineMsg::mutable_sysstr() {
  set_has_sysstr();
  if (sysstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sysstr_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.sysstr)
  return sysstr_;
}
inline ::std::string* OfflineMsg::release_sysstr() {
  clear_has_sysstr();
  if (sysstr_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sysstr_;
    sysstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OfflineMsg::set_allocated_sysstr(::std::string* sysstr) {
  if (sysstr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sysstr_;
  }
  if (sysstr) {
    set_has_sysstr();
    sysstr_ = sysstr;
  } else {
    clear_has_sysstr();
    sysstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.sysstr)
}

// optional string gmcmd = 16;
inline bool OfflineMsg::has_gmcmd() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OfflineMsg::set_has_gmcmd() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OfflineMsg::clear_has_gmcmd() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OfflineMsg::clear_gmcmd() {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_->clear();
  }
  clear_has_gmcmd();
}
inline const ::std::string& OfflineMsg::gmcmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.gmcmd)
  return *gmcmd_;
}
inline void OfflineMsg::set_gmcmd(const ::std::string& value) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.gmcmd)
}
inline void OfflineMsg::set_gmcmd(const char* value) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OfflineMsg.gmcmd)
}
inline void OfflineMsg::set_gmcmd(const char* value, size_t size) {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  gmcmd_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OfflineMsg.gmcmd)
}
inline ::std::string* OfflineMsg::mutable_gmcmd() {
  set_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    gmcmd_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.gmcmd)
  return gmcmd_;
}
inline ::std::string* OfflineMsg::release_gmcmd() {
  clear_has_gmcmd();
  if (gmcmd_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = gmcmd_;
    gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OfflineMsg::set_allocated_gmcmd(::std::string* gmcmd) {
  if (gmcmd_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete gmcmd_;
  }
  if (gmcmd) {
    set_has_gmcmd();
    gmcmd_ = gmcmd;
  } else {
    clear_has_gmcmd();
    gmcmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.gmcmd)
}

// optional uint64 id = 17 [default = 0];
inline bool OfflineMsg::has_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OfflineMsg::set_has_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OfflineMsg::clear_has_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OfflineMsg::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 OfflineMsg::id() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.id)
  return id_;
}
inline void OfflineMsg::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.id)
}

// optional string msg = 18;
inline bool OfflineMsg::has_msg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OfflineMsg::set_has_msg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OfflineMsg::clear_has_msg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OfflineMsg::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& OfflineMsg::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.msg)
  return *msg_;
}
inline void OfflineMsg::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.OfflineMsg.msg)
}
inline void OfflineMsg::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.OfflineMsg.msg)
}
inline void OfflineMsg::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.OfflineMsg.msg)
}
inline ::std::string* OfflineMsg::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.msg)
  return msg_;
}
inline ::std::string* OfflineMsg::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OfflineMsg::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.msg)
}

// optional .Cmd.ItemData itemdata = 22;
inline bool OfflineMsg::has_itemdata() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OfflineMsg::set_has_itemdata() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OfflineMsg::clear_has_itemdata() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OfflineMsg::clear_itemdata() {
  if (itemdata_ != NULL) itemdata_->::Cmd::ItemData::Clear();
  clear_has_itemdata();
}
inline const ::Cmd::ItemData& OfflineMsg::itemdata() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.itemdata)
  return itemdata_ != NULL ? *itemdata_ : *default_instance_->itemdata_;
}
inline ::Cmd::ItemData* OfflineMsg::mutable_itemdata() {
  set_has_itemdata();
  if (itemdata_ == NULL) itemdata_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.itemdata)
  return itemdata_;
}
inline ::Cmd::ItemData* OfflineMsg::release_itemdata() {
  clear_has_itemdata();
  ::Cmd::ItemData* temp = itemdata_;
  itemdata_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_itemdata(::Cmd::ItemData* itemdata) {
  delete itemdata_;
  itemdata_ = itemdata;
  if (itemdata) {
    set_has_itemdata();
  } else {
    clear_has_itemdata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.itemdata)
}

// optional .Cmd.SysMsg syscmd = 21;
inline bool OfflineMsg::has_syscmd() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OfflineMsg::set_has_syscmd() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OfflineMsg::clear_has_syscmd() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OfflineMsg::clear_syscmd() {
  if (syscmd_ != NULL) syscmd_->::Cmd::SysMsg::Clear();
  clear_has_syscmd();
}
inline const ::Cmd::SysMsg& OfflineMsg::syscmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.syscmd)
  return syscmd_ != NULL ? *syscmd_ : *default_instance_->syscmd_;
}
inline ::Cmd::SysMsg* OfflineMsg::mutable_syscmd() {
  set_has_syscmd();
  if (syscmd_ == NULL) syscmd_ = new ::Cmd::SysMsg;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.syscmd)
  return syscmd_;
}
inline ::Cmd::SysMsg* OfflineMsg::release_syscmd() {
  clear_has_syscmd();
  ::Cmd::SysMsg* temp = syscmd_;
  syscmd_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_syscmd(::Cmd::SysMsg* syscmd) {
  delete syscmd_;
  syscmd_ = syscmd;
  if (syscmd) {
    set_has_syscmd();
  } else {
    clear_has_syscmd();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.syscmd)
}

// optional .Cmd.TutorReward tutorreward = 23;
inline bool OfflineMsg::has_tutorreward() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void OfflineMsg::set_has_tutorreward() {
  _has_bits_[0] |= 0x00020000u;
}
inline void OfflineMsg::clear_has_tutorreward() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void OfflineMsg::clear_tutorreward() {
  if (tutorreward_ != NULL) tutorreward_->::Cmd::TutorReward::Clear();
  clear_has_tutorreward();
}
inline const ::Cmd::TutorReward& OfflineMsg::tutorreward() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.tutorreward)
  return tutorreward_ != NULL ? *tutorreward_ : *default_instance_->tutorreward_;
}
inline ::Cmd::TutorReward* OfflineMsg::mutable_tutorreward() {
  set_has_tutorreward();
  if (tutorreward_ == NULL) tutorreward_ = new ::Cmd::TutorReward;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.tutorreward)
  return tutorreward_;
}
inline ::Cmd::TutorReward* OfflineMsg::release_tutorreward() {
  clear_has_tutorreward();
  ::Cmd::TutorReward* temp = tutorreward_;
  tutorreward_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_tutorreward(::Cmd::TutorReward* tutorreward) {
  delete tutorreward_;
  tutorreward_ = tutorreward;
  if (tutorreward) {
    set_has_tutorreward();
  } else {
    clear_has_tutorreward();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.tutorreward)
}

// optional .Cmd.OffMsgUserAddItem useradditem = 24;
inline bool OfflineMsg::has_useradditem() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void OfflineMsg::set_has_useradditem() {
  _has_bits_[0] |= 0x00040000u;
}
inline void OfflineMsg::clear_has_useradditem() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void OfflineMsg::clear_useradditem() {
  if (useradditem_ != NULL) useradditem_->::Cmd::OffMsgUserAddItem::Clear();
  clear_has_useradditem();
}
inline const ::Cmd::OffMsgUserAddItem& OfflineMsg::useradditem() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.useradditem)
  return useradditem_ != NULL ? *useradditem_ : *default_instance_->useradditem_;
}
inline ::Cmd::OffMsgUserAddItem* OfflineMsg::mutable_useradditem() {
  set_has_useradditem();
  if (useradditem_ == NULL) useradditem_ = new ::Cmd::OffMsgUserAddItem;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.useradditem)
  return useradditem_;
}
inline ::Cmd::OffMsgUserAddItem* OfflineMsg::release_useradditem() {
  clear_has_useradditem();
  ::Cmd::OffMsgUserAddItem* temp = useradditem_;
  useradditem_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_useradditem(::Cmd::OffMsgUserAddItem* useradditem) {
  delete useradditem_;
  useradditem_ = useradditem;
  if (useradditem) {
    set_has_useradditem();
  } else {
    clear_has_useradditem();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.useradditem)
}

// optional .Cmd.WeddingEventMsgCCmd weddingmsg = 25;
inline bool OfflineMsg::has_weddingmsg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void OfflineMsg::set_has_weddingmsg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void OfflineMsg::clear_has_weddingmsg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void OfflineMsg::clear_weddingmsg() {
  if (weddingmsg_ != NULL) weddingmsg_->::Cmd::WeddingEventMsgCCmd::Clear();
  clear_has_weddingmsg();
}
inline const ::Cmd::WeddingEventMsgCCmd& OfflineMsg::weddingmsg() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.weddingmsg)
  return weddingmsg_ != NULL ? *weddingmsg_ : *default_instance_->weddingmsg_;
}
inline ::Cmd::WeddingEventMsgCCmd* OfflineMsg::mutable_weddingmsg() {
  set_has_weddingmsg();
  if (weddingmsg_ == NULL) weddingmsg_ = new ::Cmd::WeddingEventMsgCCmd;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.weddingmsg)
  return weddingmsg_;
}
inline ::Cmd::WeddingEventMsgCCmd* OfflineMsg::release_weddingmsg() {
  clear_has_weddingmsg();
  ::Cmd::WeddingEventMsgCCmd* temp = weddingmsg_;
  weddingmsg_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_weddingmsg(::Cmd::WeddingEventMsgCCmd* weddingmsg) {
  delete weddingmsg_;
  weddingmsg_ = weddingmsg;
  if (weddingmsg) {
    set_has_weddingmsg();
  } else {
    clear_has_weddingmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.weddingmsg)
}

// optional .Cmd.OffMsgUserQuotaData quotadata = 26;
inline bool OfflineMsg::has_quotadata() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void OfflineMsg::set_has_quotadata() {
  _has_bits_[0] |= 0x00100000u;
}
inline void OfflineMsg::clear_has_quotadata() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void OfflineMsg::clear_quotadata() {
  if (quotadata_ != NULL) quotadata_->::Cmd::OffMsgUserQuotaData::Clear();
  clear_has_quotadata();
}
inline const ::Cmd::OffMsgUserQuotaData& OfflineMsg::quotadata() const {
  // @@protoc_insertion_point(field_get:Cmd.OfflineMsg.quotadata)
  return quotadata_ != NULL ? *quotadata_ : *default_instance_->quotadata_;
}
inline ::Cmd::OffMsgUserQuotaData* OfflineMsg::mutable_quotadata() {
  set_has_quotadata();
  if (quotadata_ == NULL) quotadata_ = new ::Cmd::OffMsgUserQuotaData;
  // @@protoc_insertion_point(field_mutable:Cmd.OfflineMsg.quotadata)
  return quotadata_;
}
inline ::Cmd::OffMsgUserQuotaData* OfflineMsg::release_quotadata() {
  clear_has_quotadata();
  ::Cmd::OffMsgUserQuotaData* temp = quotadata_;
  quotadata_ = NULL;
  return temp;
}
inline void OfflineMsg::set_allocated_quotadata(::Cmd::OffMsgUserQuotaData* quotadata) {
  delete quotadata_;
  quotadata_ = quotadata;
  if (quotadata) {
    set_has_quotadata();
  } else {
    clear_has_quotadata();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.OfflineMsg.quotadata)
}

// -------------------------------------------------------------------

// OffMsgUserAddItem

// optional .Cmd.EUserAddItemType type = 1 [default = EUSERADDITEMTYPE_MIN];
inline bool OffMsgUserAddItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffMsgUserAddItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffMsgUserAddItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffMsgUserAddItem::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserAddItemType OffMsgUserAddItem::type() const {
  // @@protoc_insertion_point(field_get:Cmd.OffMsgUserAddItem.type)
  return static_cast< ::Cmd::EUserAddItemType >(type_);
}
inline void OffMsgUserAddItem::set_type(::Cmd::EUserAddItemType value) {
  assert(::Cmd::EUserAddItemType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OffMsgUserAddItem.type)
}

// repeated .Cmd.ItemInfo items = 2;
inline int OffMsgUserAddItem::items_size() const {
  return items_.size();
}
inline void OffMsgUserAddItem::clear_items() {
  items_.Clear();
}
inline const ::Cmd::ItemInfo& OffMsgUserAddItem::items(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.OffMsgUserAddItem.items)
  return items_.Get(index);
}
inline ::Cmd::ItemInfo* OffMsgUserAddItem::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.OffMsgUserAddItem.items)
  return items_.Mutable(index);
}
inline ::Cmd::ItemInfo* OffMsgUserAddItem::add_items() {
  // @@protoc_insertion_point(field_add:Cmd.OffMsgUserAddItem.items)
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >&
OffMsgUserAddItem::items() const {
  // @@protoc_insertion_point(field_list:Cmd.OffMsgUserAddItem.items)
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemInfo >*
OffMsgUserAddItem::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.OffMsgUserAddItem.items)
  return &items_;
}

// -------------------------------------------------------------------

// OffMsgUserQuotaData

// optional uint64 quota = 1 [default = 0];
inline bool OffMsgUserQuotaData::has_quota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OffMsgUserQuotaData::set_has_quota() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OffMsgUserQuotaData::clear_has_quota() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OffMsgUserQuotaData::clear_quota() {
  quota_ = GOOGLE_ULONGLONG(0);
  clear_has_quota();
}
inline ::google::protobuf::uint64 OffMsgUserQuotaData::quota() const {
  // @@protoc_insertion_point(field_get:Cmd.OffMsgUserQuotaData.quota)
  return quota_;
}
inline void OffMsgUserQuotaData::set_quota(::google::protobuf::uint64 value) {
  set_has_quota();
  quota_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OffMsgUserQuotaData.quota)
}

// optional .Cmd.EUserQuotaOper oper = 2 [default = EUSERQUOTAOPER_MIN];
inline bool OffMsgUserQuotaData::has_oper() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OffMsgUserQuotaData::set_has_oper() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OffMsgUserQuotaData::clear_has_oper() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OffMsgUserQuotaData::clear_oper() {
  oper_ = 0;
  clear_has_oper();
}
inline ::Cmd::EUserQuotaOper OffMsgUserQuotaData::oper() const {
  // @@protoc_insertion_point(field_get:Cmd.OffMsgUserQuotaData.oper)
  return static_cast< ::Cmd::EUserQuotaOper >(oper_);
}
inline void OffMsgUserQuotaData::set_oper(::Cmd::EUserQuotaOper value) {
  assert(::Cmd::EUserQuotaOper_IsValid(value));
  set_has_oper();
  oper_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OffMsgUserQuotaData.oper)
}

// optional .Cmd.EQuotaType type = 3 [default = EQuotaType_U_Give_Trade];
inline bool OffMsgUserQuotaData::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OffMsgUserQuotaData::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OffMsgUserQuotaData::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OffMsgUserQuotaData::clear_type() {
  type_ = 12;
  clear_has_type();
}
inline ::Cmd::EQuotaType OffMsgUserQuotaData::type() const {
  // @@protoc_insertion_point(field_get:Cmd.OffMsgUserQuotaData.type)
  return static_cast< ::Cmd::EQuotaType >(type_);
}
inline void OffMsgUserQuotaData::set_type(::Cmd::EQuotaType value) {
  assert(::Cmd::EQuotaType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OffMsgUserQuotaData.type)
}

// -------------------------------------------------------------------

// QueryItemData

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool QueryItemData::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryItemData::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryItemData::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryItemData::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command QueryItemData::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemData.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryItemData::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryItemData.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYITEMDATA];
inline bool QueryItemData::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryItemData::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryItemData::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryItemData::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::ChatParam QueryItemData::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemData.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void QueryItemData::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryItemData.param)
}

// optional string guid = 3;
inline bool QueryItemData::has_guid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryItemData::set_has_guid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryItemData::clear_has_guid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryItemData::clear_guid() {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_->clear();
  }
  clear_has_guid();
}
inline const ::std::string& QueryItemData::guid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemData.guid)
  return *guid_;
}
inline void QueryItemData::set_guid(const ::std::string& value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryItemData.guid)
}
inline void QueryItemData::set_guid(const char* value) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryItemData.guid)
}
inline void QueryItemData::set_guid(const char* value, size_t size) {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  guid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryItemData.guid)
}
inline ::std::string* QueryItemData::mutable_guid() {
  set_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryItemData.guid)
  return guid_;
}
inline ::std::string* QueryItemData::release_guid() {
  clear_has_guid();
  if (guid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guid_;
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryItemData::set_allocated_guid(::std::string* guid) {
  if (guid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guid_;
  }
  if (guid) {
    set_has_guid();
    guid_ = guid;
  } else {
    clear_has_guid();
    guid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryItemData.guid)
}

// optional .Cmd.ItemData data = 4;
inline bool QueryItemData::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryItemData::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryItemData::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryItemData::clear_data() {
  if (data_ != NULL) data_->::Cmd::ItemData::Clear();
  clear_has_data();
}
inline const ::Cmd::ItemData& QueryItemData::data() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryItemData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::ItemData* QueryItemData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::ItemData;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryItemData.data)
  return data_;
}
inline ::Cmd::ItemData* QueryItemData::release_data() {
  clear_has_data();
  ::Cmd::ItemData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void QueryItemData::set_allocated_data(::Cmd::ItemData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryItemData.data)
}

// -------------------------------------------------------------------

// PlayExpressionChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool PlayExpressionChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayExpressionChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayExpressionChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayExpressionChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command PlayExpressionChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayExpressionChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PlayExpressionChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayExpressionChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_PLAYEXPRESSION];
inline bool PlayExpressionChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayExpressionChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayExpressionChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayExpressionChatCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::ChatParam PlayExpressionChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayExpressionChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void PlayExpressionChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayExpressionChatCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool PlayExpressionChatCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayExpressionChatCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayExpressionChatCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayExpressionChatCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 PlayExpressionChatCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayExpressionChatCmd.charid)
  return charid_;
}
inline void PlayExpressionChatCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayExpressionChatCmd.charid)
}

// optional uint32 expressionid = 4 [default = 0];
inline bool PlayExpressionChatCmd::has_expressionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayExpressionChatCmd::set_has_expressionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayExpressionChatCmd::clear_has_expressionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayExpressionChatCmd::clear_expressionid() {
  expressionid_ = 0u;
  clear_has_expressionid();
}
inline ::google::protobuf::uint32 PlayExpressionChatCmd::expressionid() const {
  // @@protoc_insertion_point(field_get:Cmd.PlayExpressionChatCmd.expressionid)
  return expressionid_;
}
inline void PlayExpressionChatCmd::set_expressionid(::google::protobuf::uint32 value) {
  set_has_expressionid();
  expressionid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PlayExpressionChatCmd.expressionid)
}

// -------------------------------------------------------------------

// QueryUserInfo

// optional uint64 charid = 1 [default = 0];
inline bool QueryUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryUserInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.charid)
  return charid_;
}
inline void QueryUserInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.charid)
}

// optional uint64 guildid = 2 [default = 0];
inline bool QueryUserInfo::has_guildid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserInfo::set_has_guildid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserInfo::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserInfo::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 QueryUserInfo::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.guildid)
  return guildid_;
}
inline void QueryUserInfo::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.guildid)
}

// optional string name = 3;
inline bool QueryUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUserInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUserInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUserInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& QueryUserInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.name)
  return *name_;
}
inline void QueryUserInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.name)
}
inline void QueryUserInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryUserInfo.name)
}
inline void QueryUserInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryUserInfo.name)
}
inline ::std::string* QueryUserInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.name)
  return name_;
}
inline ::std::string* QueryUserInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfo.name)
}

// optional string guildname = 4;
inline bool QueryUserInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUserInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUserInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUserInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& QueryUserInfo::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.guildname)
  return *guildname_;
}
inline void QueryUserInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.guildname)
}
inline void QueryUserInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryUserInfo.guildname)
}
inline void QueryUserInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryUserInfo.guildname)
}
inline ::std::string* QueryUserInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.guildname)
  return guildname_;
}
inline ::std::string* QueryUserInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfo.guildname)
}

// optional string guildportrait = 5;
inline bool QueryUserInfo::has_guildportrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUserInfo::set_has_guildportrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUserInfo::clear_has_guildportrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUserInfo::clear_guildportrait() {
  if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildportrait_->clear();
  }
  clear_has_guildportrait();
}
inline const ::std::string& QueryUserInfo::guildportrait() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.guildportrait)
  return *guildportrait_;
}
inline void QueryUserInfo::set_guildportrait(const ::std::string& value) {
  set_has_guildportrait();
  if (guildportrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildportrait_ = new ::std::string;
  }
  guildportrait_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.guildportrait)
}
inline void QueryUserInfo::set_guildportrait(const char* value) {
  set_has_guildportrait();
  if (guildportrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildportrait_ = new ::std::string;
  }
  guildportrait_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryUserInfo.guildportrait)
}
inline void QueryUserInfo::set_guildportrait(const char* value, size_t size) {
  set_has_guildportrait();
  if (guildportrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildportrait_ = new ::std::string;
  }
  guildportrait_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryUserInfo.guildportrait)
}
inline ::std::string* QueryUserInfo::mutable_guildportrait() {
  set_has_guildportrait();
  if (guildportrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildportrait_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.guildportrait)
  return guildportrait_;
}
inline ::std::string* QueryUserInfo::release_guildportrait() {
  clear_has_guildportrait();
  if (guildportrait_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildportrait_;
    guildportrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserInfo::set_allocated_guildportrait(::std::string* guildportrait) {
  if (guildportrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildportrait_;
  }
  if (guildportrait) {
    set_has_guildportrait();
    guildportrait_ = guildportrait;
  } else {
    clear_has_guildportrait();
    guildportrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfo.guildportrait)
}

// optional string guildjob = 6;
inline bool QueryUserInfo::has_guildjob() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryUserInfo::set_has_guildjob() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryUserInfo::clear_has_guildjob() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryUserInfo::clear_guildjob() {
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_->clear();
  }
  clear_has_guildjob();
}
inline const ::std::string& QueryUserInfo::guildjob() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.guildjob)
  return *guildjob_;
}
inline void QueryUserInfo::set_guildjob(const ::std::string& value) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.guildjob)
}
inline void QueryUserInfo::set_guildjob(const char* value) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryUserInfo.guildjob)
}
inline void QueryUserInfo::set_guildjob(const char* value, size_t size) {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  guildjob_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryUserInfo.guildjob)
}
inline ::std::string* QueryUserInfo::mutable_guildjob() {
  set_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildjob_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.guildjob)
  return guildjob_;
}
inline ::std::string* QueryUserInfo::release_guildjob() {
  clear_has_guildjob();
  if (guildjob_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildjob_;
    guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserInfo::set_allocated_guildjob(::std::string* guildjob) {
  if (guildjob_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildjob_;
  }
  if (guildjob) {
    set_has_guildjob();
    guildjob_ = guildjob;
  } else {
    clear_has_guildjob();
    guildjob_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfo.guildjob)
}

// repeated .Cmd.UserData datas = 7;
inline int QueryUserInfo::datas_size() const {
  return datas_.size();
}
inline void QueryUserInfo::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& QueryUserInfo::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* QueryUserInfo::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* QueryUserInfo::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserInfo.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
QueryUserInfo::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserInfo.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
QueryUserInfo::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserInfo.datas)
  return &datas_;
}

// repeated .Cmd.UserAttr attrs = 8;
inline int QueryUserInfo::attrs_size() const {
  return attrs_.size();
}
inline void QueryUserInfo::clear_attrs() {
  attrs_.Clear();
}
inline const ::Cmd::UserAttr& QueryUserInfo::attrs(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.attrs)
  return attrs_.Get(index);
}
inline ::Cmd::UserAttr* QueryUserInfo::mutable_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.attrs)
  return attrs_.Mutable(index);
}
inline ::Cmd::UserAttr* QueryUserInfo::add_attrs() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserInfo.attrs)
  return attrs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >&
QueryUserInfo::attrs() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserInfo.attrs)
  return attrs_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserAttr >*
QueryUserInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserInfo.attrs)
  return &attrs_;
}

// repeated .Cmd.ItemData equip = 9;
inline int QueryUserInfo::equip_size() const {
  return equip_.size();
}
inline void QueryUserInfo::clear_equip() {
  equip_.Clear();
}
inline const ::Cmd::ItemData& QueryUserInfo::equip(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.equip)
  return equip_.Get(index);
}
inline ::Cmd::ItemData* QueryUserInfo::mutable_equip(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.equip)
  return equip_.Mutable(index);
}
inline ::Cmd::ItemData* QueryUserInfo::add_equip() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserInfo.equip)
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
QueryUserInfo::equip() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserInfo.equip)
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
QueryUserInfo::mutable_equip() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserInfo.equip)
  return &equip_;
}

// repeated .Cmd.ItemData fashion = 12;
inline int QueryUserInfo::fashion_size() const {
  return fashion_.size();
}
inline void QueryUserInfo::clear_fashion() {
  fashion_.Clear();
}
inline const ::Cmd::ItemData& QueryUserInfo::fashion(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.fashion)
  return fashion_.Get(index);
}
inline ::Cmd::ItemData* QueryUserInfo::mutable_fashion(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.fashion)
  return fashion_.Mutable(index);
}
inline ::Cmd::ItemData* QueryUserInfo::add_fashion() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserInfo.fashion)
  return fashion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >&
QueryUserInfo::fashion() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserInfo.fashion)
  return fashion_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::ItemData >*
QueryUserInfo::mutable_fashion() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserInfo.fashion)
  return &fashion_;
}

// repeated .Cmd.HighRefineData highrefine = 10;
inline int QueryUserInfo::highrefine_size() const {
  return highrefine_.size();
}
inline void QueryUserInfo::clear_highrefine() {
  highrefine_.Clear();
}
inline const ::Cmd::HighRefineData& QueryUserInfo::highrefine(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.highrefine)
  return highrefine_.Get(index);
}
inline ::Cmd::HighRefineData* QueryUserInfo::mutable_highrefine(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.highrefine)
  return highrefine_.Mutable(index);
}
inline ::Cmd::HighRefineData* QueryUserInfo::add_highrefine() {
  // @@protoc_insertion_point(field_add:Cmd.QueryUserInfo.highrefine)
  return highrefine_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >&
QueryUserInfo::highrefine() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryUserInfo.highrefine)
  return highrefine_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::HighRefineData >*
QueryUserInfo::mutable_highrefine() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryUserInfo.highrefine)
  return &highrefine_;
}

// optional string partner = 11;
inline bool QueryUserInfo::has_partner() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void QueryUserInfo::set_has_partner() {
  _has_bits_[0] |= 0x00000800u;
}
inline void QueryUserInfo::clear_has_partner() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void QueryUserInfo::clear_partner() {
  if (partner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partner_->clear();
  }
  clear_has_partner();
}
inline const ::std::string& QueryUserInfo::partner() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfo.partner)
  return *partner_;
}
inline void QueryUserInfo::set_partner(const ::std::string& value) {
  set_has_partner();
  if (partner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partner_ = new ::std::string;
  }
  partner_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfo.partner)
}
inline void QueryUserInfo::set_partner(const char* value) {
  set_has_partner();
  if (partner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partner_ = new ::std::string;
  }
  partner_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryUserInfo.partner)
}
inline void QueryUserInfo::set_partner(const char* value, size_t size) {
  set_has_partner();
  if (partner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partner_ = new ::std::string;
  }
  partner_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryUserInfo.partner)
}
inline ::std::string* QueryUserInfo::mutable_partner() {
  set_has_partner();
  if (partner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    partner_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfo.partner)
  return partner_;
}
inline ::std::string* QueryUserInfo::release_partner() {
  clear_has_partner();
  if (partner_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = partner_;
    partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryUserInfo::set_allocated_partner(::std::string* partner) {
  if (partner_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete partner_;
  }
  if (partner) {
    set_has_partner();
    partner_ = partner;
  } else {
    clear_has_partner();
    partner_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfo.partner)
}

// -------------------------------------------------------------------

// QueryUserInfoChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool QueryUserInfoChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryUserInfoChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryUserInfoChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command QueryUserInfoChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryUserInfoChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERYUSERINFO];
inline bool QueryUserInfoChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryUserInfoChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryUserInfoChatCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::ChatParam QueryUserInfoChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void QueryUserInfoChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoChatCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool QueryUserInfoChatCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryUserInfoChatCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryUserInfoChatCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 QueryUserInfoChatCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.charid)
  return charid_;
}
inline void QueryUserInfoChatCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoChatCmd.charid)
}

// optional uint32 msgid = 4 [default = 0];
inline bool QueryUserInfoChatCmd::has_msgid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_msgid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryUserInfoChatCmd::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryUserInfoChatCmd::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 QueryUserInfoChatCmd::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.msgid)
  return msgid_;
}
inline void QueryUserInfoChatCmd::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoChatCmd.msgid)
}

// optional .Cmd.EUserInfoType type = 6 [default = EUSERINFOTYPE_CHAT];
inline bool QueryUserInfoChatCmd::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryUserInfoChatCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryUserInfoChatCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EUserInfoType QueryUserInfoChatCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.type)
  return static_cast< ::Cmd::EUserInfoType >(type_);
}
inline void QueryUserInfoChatCmd::set_type(::Cmd::EUserInfoType value) {
  assert(::Cmd::EUserInfoType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryUserInfoChatCmd.type)
}

// optional .Cmd.QueryUserInfo info = 5;
inline bool QueryUserInfoChatCmd::has_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryUserInfoChatCmd::set_has_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryUserInfoChatCmd::clear_has_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryUserInfoChatCmd::clear_info() {
  if (info_ != NULL) info_->::Cmd::QueryUserInfo::Clear();
  clear_has_info();
}
inline const ::Cmd::QueryUserInfo& QueryUserInfoChatCmd::info() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryUserInfoChatCmd.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::Cmd::QueryUserInfo* QueryUserInfoChatCmd::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::Cmd::QueryUserInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.QueryUserInfoChatCmd.info)
  return info_;
}
inline ::Cmd::QueryUserInfo* QueryUserInfoChatCmd::release_info() {
  clear_has_info();
  ::Cmd::QueryUserInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void QueryUserInfoChatCmd::set_allocated_info(::Cmd::QueryUserInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryUserInfoChatCmd.info)
}

// -------------------------------------------------------------------

// BarrageChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool BarrageChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BarrageChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BarrageChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BarrageChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command BarrageChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BarrageChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGE];
inline bool BarrageChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BarrageChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BarrageChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BarrageChatCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::ChatParam BarrageChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void BarrageChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageChatCmd.param)
}

// optional .Cmd.EBarrageOpt opt = 3 [default = EBARRAGE_CLOSE];
inline bool BarrageChatCmd::has_opt() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BarrageChatCmd::set_has_opt() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BarrageChatCmd::clear_has_opt() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BarrageChatCmd::clear_opt() {
  opt_ = 2;
  clear_has_opt();
}
inline ::Cmd::EBarrageOpt BarrageChatCmd::opt() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageChatCmd.opt)
  return static_cast< ::Cmd::EBarrageOpt >(opt_);
}
inline void BarrageChatCmd::set_opt(::Cmd::EBarrageOpt value) {
  assert(::Cmd::EBarrageOpt_IsValid(value));
  set_has_opt();
  opt_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageChatCmd.opt)
}

// -------------------------------------------------------------------

// ColorInfo

// optional uint32 r = 1 [default = 255];
inline bool ColorInfo::has_r() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColorInfo::set_has_r() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColorInfo::clear_has_r() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColorInfo::clear_r() {
  r_ = 255u;
  clear_has_r();
}
inline ::google::protobuf::uint32 ColorInfo::r() const {
  // @@protoc_insertion_point(field_get:Cmd.ColorInfo.r)
  return r_;
}
inline void ColorInfo::set_r(::google::protobuf::uint32 value) {
  set_has_r();
  r_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ColorInfo.r)
}

// optional uint32 g = 2 [default = 255];
inline bool ColorInfo::has_g() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColorInfo::set_has_g() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColorInfo::clear_has_g() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColorInfo::clear_g() {
  g_ = 255u;
  clear_has_g();
}
inline ::google::protobuf::uint32 ColorInfo::g() const {
  // @@protoc_insertion_point(field_get:Cmd.ColorInfo.g)
  return g_;
}
inline void ColorInfo::set_g(::google::protobuf::uint32 value) {
  set_has_g();
  g_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ColorInfo.g)
}

// optional uint32 b = 3 [default = 255];
inline bool ColorInfo::has_b() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColorInfo::set_has_b() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColorInfo::clear_has_b() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColorInfo::clear_b() {
  b_ = 255u;
  clear_has_b();
}
inline ::google::protobuf::uint32 ColorInfo::b() const {
  // @@protoc_insertion_point(field_get:Cmd.ColorInfo.b)
  return b_;
}
inline void ColorInfo::set_b(::google::protobuf::uint32 value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ColorInfo.b)
}

// -------------------------------------------------------------------

// BarrageMsgChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool BarrageMsgChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BarrageMsgChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BarrageMsgChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BarrageMsgChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command BarrageMsgChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void BarrageMsgChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageMsgChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_BARRAGEMSG];
inline bool BarrageMsgChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BarrageMsgChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BarrageMsgChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BarrageMsgChatCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::ChatParam BarrageMsgChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void BarrageMsgChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageMsgChatCmd.param)
}

// optional string str = 3;
inline bool BarrageMsgChatCmd::has_str() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BarrageMsgChatCmd::set_has_str() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BarrageMsgChatCmd::clear_has_str() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BarrageMsgChatCmd::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& BarrageMsgChatCmd::str() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.str)
  return *str_;
}
inline void BarrageMsgChatCmd::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.BarrageMsgChatCmd.str)
}
inline void BarrageMsgChatCmd::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.BarrageMsgChatCmd.str)
}
inline void BarrageMsgChatCmd::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.BarrageMsgChatCmd.str)
}
inline ::std::string* BarrageMsgChatCmd::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.BarrageMsgChatCmd.str)
  return str_;
}
inline ::std::string* BarrageMsgChatCmd::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BarrageMsgChatCmd::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BarrageMsgChatCmd.str)
}

// optional .Cmd.ScenePos msgpos = 4;
inline bool BarrageMsgChatCmd::has_msgpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BarrageMsgChatCmd::set_has_msgpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BarrageMsgChatCmd::clear_has_msgpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BarrageMsgChatCmd::clear_msgpos() {
  if (msgpos_ != NULL) msgpos_->::Cmd::ScenePos::Clear();
  clear_has_msgpos();
}
inline const ::Cmd::ScenePos& BarrageMsgChatCmd::msgpos() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.msgpos)
  return msgpos_ != NULL ? *msgpos_ : *default_instance_->msgpos_;
}
inline ::Cmd::ScenePos* BarrageMsgChatCmd::mutable_msgpos() {
  set_has_msgpos();
  if (msgpos_ == NULL) msgpos_ = new ::Cmd::ScenePos;
  // @@protoc_insertion_point(field_mutable:Cmd.BarrageMsgChatCmd.msgpos)
  return msgpos_;
}
inline ::Cmd::ScenePos* BarrageMsgChatCmd::release_msgpos() {
  clear_has_msgpos();
  ::Cmd::ScenePos* temp = msgpos_;
  msgpos_ = NULL;
  return temp;
}
inline void BarrageMsgChatCmd::set_allocated_msgpos(::Cmd::ScenePos* msgpos) {
  delete msgpos_;
  msgpos_ = msgpos;
  if (msgpos) {
    set_has_msgpos();
  } else {
    clear_has_msgpos();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BarrageMsgChatCmd.msgpos)
}

// optional .Cmd.ColorInfo clr = 5;
inline bool BarrageMsgChatCmd::has_clr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BarrageMsgChatCmd::set_has_clr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BarrageMsgChatCmd::clear_has_clr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BarrageMsgChatCmd::clear_clr() {
  if (clr_ != NULL) clr_->::Cmd::ColorInfo::Clear();
  clear_has_clr();
}
inline const ::Cmd::ColorInfo& BarrageMsgChatCmd::clr() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.clr)
  return clr_ != NULL ? *clr_ : *default_instance_->clr_;
}
inline ::Cmd::ColorInfo* BarrageMsgChatCmd::mutable_clr() {
  set_has_clr();
  if (clr_ == NULL) clr_ = new ::Cmd::ColorInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.BarrageMsgChatCmd.clr)
  return clr_;
}
inline ::Cmd::ColorInfo* BarrageMsgChatCmd::release_clr() {
  clear_has_clr();
  ::Cmd::ColorInfo* temp = clr_;
  clr_ = NULL;
  return temp;
}
inline void BarrageMsgChatCmd::set_allocated_clr(::Cmd::ColorInfo* clr) {
  delete clr_;
  clr_ = clr;
  if (clr) {
    set_has_clr();
  } else {
    clear_has_clr();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.BarrageMsgChatCmd.clr)
}

// optional uint32 speed = 6 [default = 0];
inline bool BarrageMsgChatCmd::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BarrageMsgChatCmd::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BarrageMsgChatCmd::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BarrageMsgChatCmd::clear_speed() {
  speed_ = 0u;
  clear_has_speed();
}
inline ::google::protobuf::uint32 BarrageMsgChatCmd::speed() const {
  // @@protoc_insertion_point(field_get:Cmd.BarrageMsgChatCmd.speed)
  return speed_;
}
inline void BarrageMsgChatCmd::set_speed(::google::protobuf::uint32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:Cmd.BarrageMsgChatCmd.speed)
}

// -------------------------------------------------------------------

// ChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool ChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command ChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT];
inline bool ChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatCmd::clear_param() {
  param_ = 6;
  clear_has_param();
}
inline ::Cmd::ChatParam ChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void ChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.param)
}

// optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
inline bool ChatCmd::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatCmd::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatCmd::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatCmd::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::Cmd::EGameChatChannel ChatCmd::channel() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.channel)
  return static_cast< ::Cmd::EGameChatChannel >(channel_);
}
inline void ChatCmd::set_channel(::Cmd::EGameChatChannel value) {
  assert(::Cmd::EGameChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.channel)
}

// required string str = 4;
inline bool ChatCmd::has_str() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatCmd::set_has_str() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatCmd::clear_has_str() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatCmd::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& ChatCmd::str() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.str)
  return *str_;
}
inline void ChatCmd::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.str)
}
inline void ChatCmd::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatCmd.str)
}
inline void ChatCmd::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatCmd.str)
}
inline ::std::string* ChatCmd::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatCmd.str)
  return str_;
}
inline ::std::string* ChatCmd::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatCmd::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatCmd.str)
}

// optional uint64 desID = 5;
inline bool ChatCmd::has_desid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatCmd::set_has_desid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatCmd::clear_has_desid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatCmd::clear_desid() {
  desid_ = GOOGLE_ULONGLONG(0);
  clear_has_desid();
}
inline ::google::protobuf::uint64 ChatCmd::desid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.desID)
  return desid_;
}
inline void ChatCmd::set_desid(::google::protobuf::uint64 value) {
  set_has_desid();
  desid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.desID)
}

// optional bytes voice = 6;
inline bool ChatCmd::has_voice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatCmd::set_has_voice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatCmd::clear_has_voice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatCmd::clear_voice() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_->clear();
  }
  clear_has_voice();
}
inline const ::std::string& ChatCmd::voice() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.voice)
  return *voice_;
}
inline void ChatCmd::set_voice(const ::std::string& value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.voice)
}
inline void ChatCmd::set_voice(const char* value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatCmd.voice)
}
inline void ChatCmd::set_voice(const void* value, size_t size) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatCmd.voice)
}
inline ::std::string* ChatCmd::mutable_voice() {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatCmd.voice)
  return voice_;
}
inline ::std::string* ChatCmd::release_voice() {
  clear_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_;
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatCmd::set_allocated_voice(::std::string* voice) {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (voice) {
    set_has_voice();
    voice_ = voice;
  } else {
    clear_has_voice();
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatCmd.voice)
}

// optional uint32 voicetime = 7 [default = 0];
inline bool ChatCmd::has_voicetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatCmd::set_has_voicetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatCmd::clear_has_voicetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatCmd::clear_voicetime() {
  voicetime_ = 0u;
  clear_has_voicetime();
}
inline ::google::protobuf::uint32 ChatCmd::voicetime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.voicetime)
  return voicetime_;
}
inline void ChatCmd::set_voicetime(::google::protobuf::uint32 value) {
  set_has_voicetime();
  voicetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.voicetime)
}

// optional uint32 msgid = 8 [default = 0];
inline bool ChatCmd::has_msgid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatCmd::set_has_msgid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatCmd::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatCmd::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 ChatCmd::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.msgid)
  return msgid_;
}
inline void ChatCmd::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.msgid)
}

// optional bool msgover = 9 [default = false];
inline bool ChatCmd::has_msgover() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatCmd::set_has_msgover() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatCmd::clear_has_msgover() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatCmd::clear_msgover() {
  msgover_ = false;
  clear_has_msgover();
}
inline bool ChatCmd::msgover() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatCmd.msgover)
  return msgover_;
}
inline void ChatCmd::set_msgover(bool value) {
  set_has_msgover();
  msgover_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatCmd.msgover)
}

// -------------------------------------------------------------------

// ChatRetCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool ChatRetCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatRetCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatRetCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatRetCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command ChatRetCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatRetCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_RET];
inline bool ChatRetCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatRetCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatRetCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatRetCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::ChatParam ChatRetCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void ChatRetCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.param)
}

// required uint64 id = 6;
inline bool ChatRetCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatRetCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatRetCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatRetCmd::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 ChatRetCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.id)
  return id_;
}
inline void ChatRetCmd::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.id)
}

// optional uint64 targetid = 13 [default = 0];
inline bool ChatRetCmd::has_targetid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChatRetCmd::set_has_targetid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChatRetCmd::clear_has_targetid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChatRetCmd::clear_targetid() {
  targetid_ = GOOGLE_ULONGLONG(0);
  clear_has_targetid();
}
inline ::google::protobuf::uint64 ChatRetCmd::targetid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.targetid)
  return targetid_;
}
inline void ChatRetCmd::set_targetid(::google::protobuf::uint64 value) {
  set_has_targetid();
  targetid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.targetid)
}

// required uint32 portrait = 7;
inline bool ChatRetCmd::has_portrait() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChatRetCmd::set_has_portrait() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChatRetCmd::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChatRetCmd::clear_portrait() {
  portrait_ = 0u;
  clear_has_portrait();
}
inline ::google::protobuf::uint32 ChatRetCmd::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.portrait)
  return portrait_;
}
inline void ChatRetCmd::set_portrait(::google::protobuf::uint32 value) {
  set_has_portrait();
  portrait_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.portrait)
}

// required uint32 frame = 8;
inline bool ChatRetCmd::has_frame() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChatRetCmd::set_has_frame() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChatRetCmd::clear_has_frame() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChatRetCmd::clear_frame() {
  frame_ = 0u;
  clear_has_frame();
}
inline ::google::protobuf::uint32 ChatRetCmd::frame() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.frame)
  return frame_;
}
inline void ChatRetCmd::set_frame(::google::protobuf::uint32 value) {
  set_has_frame();
  frame_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.frame)
}

// optional uint32 baselevel = 10 [default = 0];
inline bool ChatRetCmd::has_baselevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChatRetCmd::set_has_baselevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChatRetCmd::clear_has_baselevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChatRetCmd::clear_baselevel() {
  baselevel_ = 0u;
  clear_has_baselevel();
}
inline ::google::protobuf::uint32 ChatRetCmd::baselevel() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.baselevel)
  return baselevel_;
}
inline void ChatRetCmd::set_baselevel(::google::protobuf::uint32 value) {
  set_has_baselevel();
  baselevel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.baselevel)
}

// optional uint32 voiceid = 11 [default = 0];
inline bool ChatRetCmd::has_voiceid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChatRetCmd::set_has_voiceid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChatRetCmd::clear_has_voiceid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChatRetCmd::clear_voiceid() {
  voiceid_ = 0u;
  clear_has_voiceid();
}
inline ::google::protobuf::uint32 ChatRetCmd::voiceid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.voiceid)
  return voiceid_;
}
inline void ChatRetCmd::set_voiceid(::google::protobuf::uint32 value) {
  set_has_voiceid();
  voiceid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.voiceid)
}

// optional uint32 voicetime = 12 [default = 0];
inline bool ChatRetCmd::has_voicetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ChatRetCmd::set_has_voicetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ChatRetCmd::clear_has_voicetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ChatRetCmd::clear_voicetime() {
  voicetime_ = 0u;
  clear_has_voicetime();
}
inline ::google::protobuf::uint32 ChatRetCmd::voicetime() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.voicetime)
  return voicetime_;
}
inline void ChatRetCmd::set_voicetime(::google::protobuf::uint32 value) {
  set_has_voicetime();
  voicetime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.voicetime)
}

// optional uint32 hair = 14 [default = 0];
inline bool ChatRetCmd::has_hair() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ChatRetCmd::set_has_hair() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ChatRetCmd::clear_has_hair() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ChatRetCmd::clear_hair() {
  hair_ = 0u;
  clear_has_hair();
}
inline ::google::protobuf::uint32 ChatRetCmd::hair() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.hair)
  return hair_;
}
inline void ChatRetCmd::set_hair(::google::protobuf::uint32 value) {
  set_has_hair();
  hair_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.hair)
}

// optional uint32 haircolor = 15 [default = 0];
inline bool ChatRetCmd::has_haircolor() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ChatRetCmd::set_has_haircolor() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ChatRetCmd::clear_has_haircolor() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ChatRetCmd::clear_haircolor() {
  haircolor_ = 0u;
  clear_has_haircolor();
}
inline ::google::protobuf::uint32 ChatRetCmd::haircolor() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.haircolor)
  return haircolor_;
}
inline void ChatRetCmd::set_haircolor(::google::protobuf::uint32 value) {
  set_has_haircolor();
  haircolor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.haircolor)
}

// optional uint32 body = 16 [default = 0];
inline bool ChatRetCmd::has_body() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ChatRetCmd::set_has_body() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ChatRetCmd::clear_has_body() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ChatRetCmd::clear_body() {
  body_ = 0u;
  clear_has_body();
}
inline ::google::protobuf::uint32 ChatRetCmd::body() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.body)
  return body_;
}
inline void ChatRetCmd::set_body(::google::protobuf::uint32 value) {
  set_has_body();
  body_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.body)
}

// optional uint32 appellation = 19 [default = 0];
inline bool ChatRetCmd::has_appellation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ChatRetCmd::set_has_appellation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ChatRetCmd::clear_has_appellation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ChatRetCmd::clear_appellation() {
  appellation_ = 0u;
  clear_has_appellation();
}
inline ::google::protobuf::uint32 ChatRetCmd::appellation() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.appellation)
  return appellation_;
}
inline void ChatRetCmd::set_appellation(::google::protobuf::uint32 value) {
  set_has_appellation();
  appellation_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.appellation)
}

// optional uint32 msgid = 21 [default = 0];
inline bool ChatRetCmd::has_msgid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ChatRetCmd::set_has_msgid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ChatRetCmd::clear_has_msgid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ChatRetCmd::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 ChatRetCmd::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.msgid)
  return msgid_;
}
inline void ChatRetCmd::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.msgid)
}

// optional uint32 head = 22 [default = 0];
inline bool ChatRetCmd::has_head() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ChatRetCmd::set_has_head() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ChatRetCmd::clear_has_head() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ChatRetCmd::clear_head() {
  head_ = 0u;
  clear_has_head();
}
inline ::google::protobuf::uint32 ChatRetCmd::head() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.head)
  return head_;
}
inline void ChatRetCmd::set_head(::google::protobuf::uint32 value) {
  set_has_head();
  head_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.head)
}

// optional uint32 face = 23 [default = 0];
inline bool ChatRetCmd::has_face() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ChatRetCmd::set_has_face() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ChatRetCmd::clear_has_face() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ChatRetCmd::clear_face() {
  face_ = 0u;
  clear_has_face();
}
inline ::google::protobuf::uint32 ChatRetCmd::face() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.face)
  return face_;
}
inline void ChatRetCmd::set_face(::google::protobuf::uint32 value) {
  set_has_face();
  face_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.face)
}

// optional uint32 mouth = 24 [default = 0];
inline bool ChatRetCmd::has_mouth() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ChatRetCmd::set_has_mouth() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ChatRetCmd::clear_has_mouth() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ChatRetCmd::clear_mouth() {
  mouth_ = 0u;
  clear_has_mouth();
}
inline ::google::protobuf::uint32 ChatRetCmd::mouth() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.mouth)
  return mouth_;
}
inline void ChatRetCmd::set_mouth(::google::protobuf::uint32 value) {
  set_has_mouth();
  mouth_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.mouth)
}

// optional uint32 eye = 25 [default = 0];
inline bool ChatRetCmd::has_eye() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ChatRetCmd::set_has_eye() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ChatRetCmd::clear_has_eye() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ChatRetCmd::clear_eye() {
  eye_ = 0u;
  clear_has_eye();
}
inline ::google::protobuf::uint32 ChatRetCmd::eye() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.eye)
  return eye_;
}
inline void ChatRetCmd::set_eye(::google::protobuf::uint32 value) {
  set_has_eye();
  eye_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.eye)
}

// optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_ROUND];
inline bool ChatRetCmd::has_channel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ChatRetCmd::set_has_channel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ChatRetCmd::clear_has_channel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ChatRetCmd::clear_channel() {
  channel_ = 1;
  clear_has_channel();
}
inline ::Cmd::EGameChatChannel ChatRetCmd::channel() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.channel)
  return static_cast< ::Cmd::EGameChatChannel >(channel_);
}
inline void ChatRetCmd::set_channel(::Cmd::EGameChatChannel value) {
  assert(::Cmd::EGameChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.channel)
}

// optional .Cmd.EProfession rolejob = 9 [default = EPROFESSION_MIN];
inline bool ChatRetCmd::has_rolejob() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ChatRetCmd::set_has_rolejob() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ChatRetCmd::clear_has_rolejob() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ChatRetCmd::clear_rolejob() {
  rolejob_ = 0;
  clear_has_rolejob();
}
inline ::Cmd::EProfession ChatRetCmd::rolejob() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.rolejob)
  return static_cast< ::Cmd::EProfession >(rolejob_);
}
inline void ChatRetCmd::set_rolejob(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_rolejob();
  rolejob_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.rolejob)
}

// optional .Cmd.EGender gender = 17 [default = EGENDER_MIN];
inline bool ChatRetCmd::has_gender() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ChatRetCmd::set_has_gender() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ChatRetCmd::clear_has_gender() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ChatRetCmd::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender ChatRetCmd::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void ChatRetCmd::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.gender)
}

// optional bool blink = 20 [default = false];
inline bool ChatRetCmd::has_blink() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ChatRetCmd::set_has_blink() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ChatRetCmd::clear_has_blink() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ChatRetCmd::clear_blink() {
  blink_ = false;
  clear_has_blink();
}
inline bool ChatRetCmd::blink() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.blink)
  return blink_;
}
inline void ChatRetCmd::set_blink(bool value) {
  set_has_blink();
  blink_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.blink)
}

// required string str = 4;
inline bool ChatRetCmd::has_str() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ChatRetCmd::set_has_str() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ChatRetCmd::clear_has_str() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ChatRetCmd::clear_str() {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& ChatRetCmd::str() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.str)
  return *str_;
}
inline void ChatRetCmd::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.str)
}
inline void ChatRetCmd::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRetCmd.str)
}
inline void ChatRetCmd::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRetCmd.str)
}
inline ::std::string* ChatRetCmd::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    str_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRetCmd.str)
  return str_;
}
inline ::std::string* ChatRetCmd::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRetCmd::set_allocated_str(::std::string* str) {
  if (str_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete str_;
  }
  if (str) {
    set_has_str();
    str_ = str;
  } else {
    clear_has_str();
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRetCmd.str)
}

// required string name = 5;
inline bool ChatRetCmd::has_name() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ChatRetCmd::set_has_name() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ChatRetCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ChatRetCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ChatRetCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.name)
  return *name_;
}
inline void ChatRetCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.name)
}
inline void ChatRetCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRetCmd.name)
}
inline void ChatRetCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRetCmd.name)
}
inline ::std::string* ChatRetCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRetCmd.name)
  return name_;
}
inline ::std::string* ChatRetCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRetCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRetCmd.name)
}

// optional string guildname = 18;
inline bool ChatRetCmd::has_guildname() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ChatRetCmd::set_has_guildname() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ChatRetCmd::clear_has_guildname() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ChatRetCmd::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& ChatRetCmd::guildname() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.guildname)
  return *guildname_;
}
inline void ChatRetCmd::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.guildname)
}
inline void ChatRetCmd::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.ChatRetCmd.guildname)
}
inline void ChatRetCmd::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.ChatRetCmd.guildname)
}
inline ::std::string* ChatRetCmd::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    guildname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.ChatRetCmd.guildname)
  return guildname_;
}
inline ::std::string* ChatRetCmd::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ChatRetCmd::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatRetCmd.guildname)
}

// optional uint32 sysmsgid = 26 [default = 0];
inline bool ChatRetCmd::has_sysmsgid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ChatRetCmd::set_has_sysmsgid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ChatRetCmd::clear_has_sysmsgid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ChatRetCmd::clear_sysmsgid() {
  sysmsgid_ = 0u;
  clear_has_sysmsgid();
}
inline ::google::protobuf::uint32 ChatRetCmd::sysmsgid() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatRetCmd.sysmsgid)
  return sysmsgid_;
}
inline void ChatRetCmd::set_sysmsgid(::google::protobuf::uint32 value) {
  set_has_sysmsgid();
  sysmsgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatRetCmd.sysmsgid)
}

// -------------------------------------------------------------------

// QueryVoiceUserCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool QueryVoiceUserCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryVoiceUserCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryVoiceUserCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryVoiceUserCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command QueryVoiceUserCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryVoiceUserCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_VOICE];
inline bool QueryVoiceUserCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryVoiceUserCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryVoiceUserCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryVoiceUserCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::ChatParam QueryVoiceUserCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void QueryVoiceUserCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.param)
}

// optional uint32 voiceid = 3 [default = 0];
inline bool QueryVoiceUserCmd::has_voiceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryVoiceUserCmd::set_has_voiceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryVoiceUserCmd::clear_has_voiceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryVoiceUserCmd::clear_voiceid() {
  voiceid_ = 0u;
  clear_has_voiceid();
}
inline ::google::protobuf::uint32 QueryVoiceUserCmd::voiceid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.voiceid)
  return voiceid_;
}
inline void QueryVoiceUserCmd::set_voiceid(::google::protobuf::uint32 value) {
  set_has_voiceid();
  voiceid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.voiceid)
}

// optional bytes voice = 4;
inline bool QueryVoiceUserCmd::has_voice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryVoiceUserCmd::set_has_voice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryVoiceUserCmd::clear_has_voice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryVoiceUserCmd::clear_voice() {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_->clear();
  }
  clear_has_voice();
}
inline const ::std::string& QueryVoiceUserCmd::voice() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.voice)
  return *voice_;
}
inline void QueryVoiceUserCmd::set_voice(const ::std::string& value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.voice)
}
inline void QueryVoiceUserCmd::set_voice(const char* value) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryVoiceUserCmd.voice)
}
inline void QueryVoiceUserCmd::set_voice(const void* value, size_t size) {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  voice_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryVoiceUserCmd.voice)
}
inline ::std::string* QueryVoiceUserCmd::mutable_voice() {
  set_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    voice_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryVoiceUserCmd.voice)
  return voice_;
}
inline ::std::string* QueryVoiceUserCmd::release_voice() {
  clear_has_voice();
  if (voice_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = voice_;
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryVoiceUserCmd::set_allocated_voice(::std::string* voice) {
  if (voice_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete voice_;
  }
  if (voice) {
    set_has_voice();
    voice_ = voice;
  } else {
    clear_has_voice();
    voice_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryVoiceUserCmd.voice)
}

// optional uint32 msgid = 8 [default = 0];
inline bool QueryVoiceUserCmd::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryVoiceUserCmd::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryVoiceUserCmd::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryVoiceUserCmd::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 QueryVoiceUserCmd::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.msgid)
  return msgid_;
}
inline void QueryVoiceUserCmd::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.msgid)
}

// optional bool msgover = 9 [default = false];
inline bool QueryVoiceUserCmd::has_msgover() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryVoiceUserCmd::set_has_msgover() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryVoiceUserCmd::clear_has_msgover() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryVoiceUserCmd::clear_msgover() {
  msgover_ = false;
  clear_has_msgover();
}
inline bool QueryVoiceUserCmd::msgover() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryVoiceUserCmd.msgover)
  return msgover_;
}
inline void QueryVoiceUserCmd::set_msgover(bool value) {
  set_has_msgover();
  msgover_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryVoiceUserCmd.msgover)
}

// -------------------------------------------------------------------

// GetVoiceIDChatCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool GetVoiceIDChatCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetVoiceIDChatCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetVoiceIDChatCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetVoiceIDChatCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command GetVoiceIDChatCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GetVoiceIDChatCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GetVoiceIDChatCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetVoiceIDChatCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_GET_VOICEID];
inline bool GetVoiceIDChatCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetVoiceIDChatCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetVoiceIDChatCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetVoiceIDChatCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::ChatParam GetVoiceIDChatCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GetVoiceIDChatCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void GetVoiceIDChatCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetVoiceIDChatCmd.param)
}

// optional uint32 id = 3 [default = 0];
inline bool GetVoiceIDChatCmd::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetVoiceIDChatCmd::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetVoiceIDChatCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetVoiceIDChatCmd::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GetVoiceIDChatCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.GetVoiceIDChatCmd.id)
  return id_;
}
inline void GetVoiceIDChatCmd::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GetVoiceIDChatCmd.id)
}

// -------------------------------------------------------------------

// LoveLetterNtf

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool LoveLetterNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoveLetterNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoveLetterNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoveLetterNtf::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command LoveLetterNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LoveLetterNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_LOVE_LETTER];
inline bool LoveLetterNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoveLetterNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoveLetterNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoveLetterNtf::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::ChatParam LoveLetterNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void LoveLetterNtf::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.param)
}

// optional string name = 3;
inline bool LoveLetterNtf::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoveLetterNtf::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoveLetterNtf::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoveLetterNtf::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LoveLetterNtf::name() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.name)
  return *name_;
}
inline void LoveLetterNtf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.name)
}
inline void LoveLetterNtf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterNtf.name)
}
inline void LoveLetterNtf::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterNtf.name)
}
inline ::std::string* LoveLetterNtf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterNtf.name)
  return name_;
}
inline ::std::string* LoveLetterNtf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterNtf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterNtf.name)
}

// optional string content = 4;
inline bool LoveLetterNtf::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoveLetterNtf::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoveLetterNtf::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoveLetterNtf::clear_content() {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& LoveLetterNtf::content() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.content)
  return *content_;
}
inline void LoveLetterNtf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.content)
}
inline void LoveLetterNtf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterNtf.content)
}
inline void LoveLetterNtf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterNtf.content)
}
inline ::std::string* LoveLetterNtf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterNtf.content)
  return content_;
}
inline ::std::string* LoveLetterNtf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterNtf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterNtf.content)
}

// optional uint32 type = 5;
inline bool LoveLetterNtf::has_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoveLetterNtf::set_has_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoveLetterNtf::clear_has_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LoveLetterNtf::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 LoveLetterNtf::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.type)
  return type_;
}
inline void LoveLetterNtf::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.type)
}

// optional string bg = 6;
inline bool LoveLetterNtf::has_bg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoveLetterNtf::set_has_bg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoveLetterNtf::clear_has_bg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoveLetterNtf::clear_bg() {
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_->clear();
  }
  clear_has_bg();
}
inline const ::std::string& LoveLetterNtf::bg() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.bg)
  return *bg_;
}
inline void LoveLetterNtf::set_bg(const ::std::string& value) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.bg)
}
inline void LoveLetterNtf::set_bg(const char* value) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterNtf.bg)
}
inline void LoveLetterNtf::set_bg(const char* value, size_t size) {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  bg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterNtf.bg)
}
inline ::std::string* LoveLetterNtf::mutable_bg() {
  set_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    bg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterNtf.bg)
  return bg_;
}
inline ::std::string* LoveLetterNtf::release_bg() {
  clear_has_bg();
  if (bg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = bg_;
    bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterNtf::set_allocated_bg(::std::string* bg) {
  if (bg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bg_;
  }
  if (bg) {
    set_has_bg();
    bg_ = bg;
  } else {
    clear_has_bg();
    bg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterNtf.bg)
}

// optional uint32 letterID = 7 [default = 0];
inline bool LoveLetterNtf::has_letterid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LoveLetterNtf::set_has_letterid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LoveLetterNtf::clear_has_letterid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LoveLetterNtf::clear_letterid() {
  letterid_ = 0u;
  clear_has_letterid();
}
inline ::google::protobuf::uint32 LoveLetterNtf::letterid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.letterID)
  return letterid_;
}
inline void LoveLetterNtf::set_letterid(::google::protobuf::uint32 value) {
  set_has_letterid();
  letterid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.letterID)
}

// optional uint32 configID = 8 [default = 0];
inline bool LoveLetterNtf::has_configid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LoveLetterNtf::set_has_configid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LoveLetterNtf::clear_has_configid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LoveLetterNtf::clear_configid() {
  configid_ = 0u;
  clear_has_configid();
}
inline ::google::protobuf::uint32 LoveLetterNtf::configid() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.configID)
  return configid_;
}
inline void LoveLetterNtf::set_configid(::google::protobuf::uint32 value) {
  set_has_configid();
  configid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.configID)
}

// optional string content2 = 9;
inline bool LoveLetterNtf::has_content2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LoveLetterNtf::set_has_content2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LoveLetterNtf::clear_has_content2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LoveLetterNtf::clear_content2() {
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_->clear();
  }
  clear_has_content2();
}
inline const ::std::string& LoveLetterNtf::content2() const {
  // @@protoc_insertion_point(field_get:Cmd.LoveLetterNtf.content2)
  return *content2_;
}
inline void LoveLetterNtf::set_content2(const ::std::string& value) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.LoveLetterNtf.content2)
}
inline void LoveLetterNtf::set_content2(const char* value) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.LoveLetterNtf.content2)
}
inline void LoveLetterNtf::set_content2(const char* value, size_t size) {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  content2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.LoveLetterNtf.content2)
}
inline ::std::string* LoveLetterNtf::mutable_content2() {
  set_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.LoveLetterNtf.content2)
  return content2_;
}
inline ::std::string* LoveLetterNtf::release_content2() {
  clear_has_content2();
  if (content2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content2_;
    content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void LoveLetterNtf::set_allocated_content2(::std::string* content2) {
  if (content2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content2_;
  }
  if (content2) {
    set_has_content2();
    content2_ = content2;
  } else {
    clear_has_content2();
    content2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.LoveLetterNtf.content2)
}

// -------------------------------------------------------------------

// ChatSelfNtf

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool ChatSelfNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChatSelfNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChatSelfNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChatSelfNtf::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command ChatSelfNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSelfNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ChatSelfNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSelfNtf.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_CHAT_SELF];
inline bool ChatSelfNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChatSelfNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChatSelfNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChatSelfNtf::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::ChatParam ChatSelfNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSelfNtf.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void ChatSelfNtf::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ChatSelfNtf.param)
}

// optional .Cmd.ChatCmd chat = 3;
inline bool ChatSelfNtf::has_chat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChatSelfNtf::set_has_chat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChatSelfNtf::clear_has_chat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChatSelfNtf::clear_chat() {
  if (chat_ != NULL) chat_->::Cmd::ChatCmd::Clear();
  clear_has_chat();
}
inline const ::Cmd::ChatCmd& ChatSelfNtf::chat() const {
  // @@protoc_insertion_point(field_get:Cmd.ChatSelfNtf.chat)
  return chat_ != NULL ? *chat_ : *default_instance_->chat_;
}
inline ::Cmd::ChatCmd* ChatSelfNtf::mutable_chat() {
  set_has_chat();
  if (chat_ == NULL) chat_ = new ::Cmd::ChatCmd;
  // @@protoc_insertion_point(field_mutable:Cmd.ChatSelfNtf.chat)
  return chat_;
}
inline ::Cmd::ChatCmd* ChatSelfNtf::release_chat() {
  clear_has_chat();
  ::Cmd::ChatCmd* temp = chat_;
  chat_ = NULL;
  return temp;
}
inline void ChatSelfNtf::set_allocated_chat(::Cmd::ChatCmd* chat) {
  delete chat_;
  chat_ = chat;
  if (chat) {
    set_has_chat();
  } else {
    clear_has_chat();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ChatSelfNtf.chat)
}

// -------------------------------------------------------------------

// NpcChatNtf

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool NpcChatNtf::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NpcChatNtf::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NpcChatNtf::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NpcChatNtf::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command NpcChatNtf::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NpcChatNtf::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_NPC_CHAT_NTF];
inline bool NpcChatNtf::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NpcChatNtf::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NpcChatNtf::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NpcChatNtf::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::ChatParam NpcChatNtf::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void NpcChatNtf::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.param)
}

// optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
inline bool NpcChatNtf::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NpcChatNtf::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NpcChatNtf::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NpcChatNtf::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::Cmd::EGameChatChannel NpcChatNtf::channel() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.channel)
  return static_cast< ::Cmd::EGameChatChannel >(channel_);
}
inline void NpcChatNtf::set_channel(::Cmd::EGameChatChannel value) {
  assert(::Cmd::EGameChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.channel)
}

// optional uint32 npcid = 4 [default = 0];
inline bool NpcChatNtf::has_npcid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NpcChatNtf::set_has_npcid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NpcChatNtf::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NpcChatNtf::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 NpcChatNtf::npcid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.npcid)
  return npcid_;
}
inline void NpcChatNtf::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.npcid)
}

// optional uint32 msgid = 5 [default = 0];
inline bool NpcChatNtf::has_msgid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NpcChatNtf::set_has_msgid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NpcChatNtf::clear_has_msgid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NpcChatNtf::clear_msgid() {
  msgid_ = 0u;
  clear_has_msgid();
}
inline ::google::protobuf::uint32 NpcChatNtf::msgid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.msgid)
  return msgid_;
}
inline void NpcChatNtf::set_msgid(::google::protobuf::uint32 value) {
  set_has_msgid();
  msgid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.msgid)
}

// repeated .Cmd.MsgParam params = 6;
inline int NpcChatNtf::params_size() const {
  return params_.size();
}
inline void NpcChatNtf::clear_params() {
  params_.Clear();
}
inline const ::Cmd::MsgParam& NpcChatNtf::params(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.params)
  return params_.Get(index);
}
inline ::Cmd::MsgParam* NpcChatNtf::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NpcChatNtf.params)
  return params_.Mutable(index);
}
inline ::Cmd::MsgParam* NpcChatNtf::add_params() {
  // @@protoc_insertion_point(field_add:Cmd.NpcChatNtf.params)
  return params_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >&
NpcChatNtf::params() const {
  // @@protoc_insertion_point(field_list:Cmd.NpcChatNtf.params)
  return params_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MsgParam >*
NpcChatNtf::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NpcChatNtf.params)
  return &params_;
}

// optional string msg = 7;
inline bool NpcChatNtf::has_msg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NpcChatNtf::set_has_msg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NpcChatNtf::clear_has_msg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NpcChatNtf::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& NpcChatNtf::msg() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.msg)
  return *msg_;
}
inline void NpcChatNtf::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.msg)
}
inline void NpcChatNtf::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.NpcChatNtf.msg)
}
inline void NpcChatNtf::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.NpcChatNtf.msg)
}
inline ::std::string* NpcChatNtf::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.NpcChatNtf.msg)
  return msg_;
}
inline ::std::string* NpcChatNtf::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void NpcChatNtf::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.NpcChatNtf.msg)
}

// optional uint64 npcguid = 8 [default = 0];
inline bool NpcChatNtf::has_npcguid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NpcChatNtf::set_has_npcguid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NpcChatNtf::clear_has_npcguid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NpcChatNtf::clear_npcguid() {
  npcguid_ = GOOGLE_ULONGLONG(0);
  clear_has_npcguid();
}
inline ::google::protobuf::uint64 NpcChatNtf::npcguid() const {
  // @@protoc_insertion_point(field_get:Cmd.NpcChatNtf.npcguid)
  return npcguid_;
}
inline void NpcChatNtf::set_npcguid(::google::protobuf::uint64 value) {
  set_has_npcguid();
  npcguid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NpcChatNtf.npcguid)
}

// -------------------------------------------------------------------

// QueryRealtimeVoiceIDCmd

// optional .Cmd.Command cmd = 1 [default = CHAT_PROTOCMD];
inline bool QueryRealtimeVoiceIDCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRealtimeVoiceIDCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRealtimeVoiceIDCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRealtimeVoiceIDCmd::clear_cmd() {
  cmd_ = 59;
  clear_has_cmd();
}
inline ::Cmd::Command QueryRealtimeVoiceIDCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryRealtimeVoiceIDCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryRealtimeVoiceIDCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryRealtimeVoiceIDCmd.cmd)
}

// optional .Cmd.ChatParam param = 2 [default = CHATPARAM_QUERY_REALTIME_VOICE_ID];
inline bool QueryRealtimeVoiceIDCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryRealtimeVoiceIDCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryRealtimeVoiceIDCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryRealtimeVoiceIDCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::ChatParam QueryRealtimeVoiceIDCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryRealtimeVoiceIDCmd.param)
  return static_cast< ::Cmd::ChatParam >(param_);
}
inline void QueryRealtimeVoiceIDCmd::set_param(::Cmd::ChatParam value) {
  assert(::Cmd::ChatParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryRealtimeVoiceIDCmd.param)
}

// optional .Cmd.EGameChatChannel channel = 3 [default = ECHAT_CHANNEL_MIN];
inline bool QueryRealtimeVoiceIDCmd::has_channel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryRealtimeVoiceIDCmd::set_has_channel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryRealtimeVoiceIDCmd::clear_has_channel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryRealtimeVoiceIDCmd::clear_channel() {
  channel_ = 0;
  clear_has_channel();
}
inline ::Cmd::EGameChatChannel QueryRealtimeVoiceIDCmd::channel() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryRealtimeVoiceIDCmd.channel)
  return static_cast< ::Cmd::EGameChatChannel >(channel_);
}
inline void QueryRealtimeVoiceIDCmd::set_channel(::Cmd::EGameChatChannel value) {
  assert(::Cmd::EGameChatChannel_IsValid(value));
  set_has_channel();
  channel_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryRealtimeVoiceIDCmd.channel)
}

// optional string id = 4;
inline bool QueryRealtimeVoiceIDCmd::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryRealtimeVoiceIDCmd::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryRealtimeVoiceIDCmd::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryRealtimeVoiceIDCmd::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& QueryRealtimeVoiceIDCmd::id() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryRealtimeVoiceIDCmd.id)
  return *id_;
}
inline void QueryRealtimeVoiceIDCmd::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.QueryRealtimeVoiceIDCmd.id)
}
inline void QueryRealtimeVoiceIDCmd::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.QueryRealtimeVoiceIDCmd.id)
}
inline void QueryRealtimeVoiceIDCmd::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.QueryRealtimeVoiceIDCmd.id)
}
inline ::std::string* QueryRealtimeVoiceIDCmd::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.QueryRealtimeVoiceIDCmd.id)
  return id_;
}
inline ::std::string* QueryRealtimeVoiceIDCmd::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryRealtimeVoiceIDCmd::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.QueryRealtimeVoiceIDCmd.id)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::ChatParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ChatParam>() {
  return ::Cmd::ChatParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EOfflineMsg> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EOfflineMsg>() {
  return ::Cmd::EOfflineMsg_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EUserAddItemType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EUserAddItemType>() {
  return ::Cmd::EUserAddItemType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EUserQuotaOper> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EUserQuotaOper>() {
  return ::Cmd::EUserQuotaOper_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EUserInfoType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EUserInfoType>() {
  return ::Cmd::EUserInfoType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EBarrageOpt> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EBarrageOpt>() {
  return ::Cmd::EBarrageOpt_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EGameChatChannel> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EGameChatChannel>() {
  return ::Cmd::EGameChatChannel_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChatCmd_2eproto__INCLUDED
