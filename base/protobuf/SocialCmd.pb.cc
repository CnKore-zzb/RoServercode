// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SocialCmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SocialCmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Cmd {

namespace {

const ::google::protobuf::Descriptor* SocialUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* SessionForwardSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SessionForwardSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardToUserSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardToUserSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardToUserSceneSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardToUserSceneSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardToSceneUserSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardToSceneUserSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardToSessionUserSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardToSessionUserSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineStatusSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineStatusSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddOfflineMsgSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddOfflineMsgSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserAddItemSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserAddItemSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserDelSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserDelSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserGuildInfoSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserGuildInfoSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatWorldMsgSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatWorldMsgSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChatSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateGuildSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateGuildSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildDonateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildDonateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildApplySocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildApplySocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildProcessInviteSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildProcessInviteSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildExchangeZoneSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildExchangeZoneSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamCreateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamCreateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInviteSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInviteSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamProcessInviteSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamProcessInviteSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplySocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplySocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamQuickEnterSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamQuickEnterSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoStateNtfSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoStateNtfSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DojoCreateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DojoCreateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerLeaderInfoSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerLeaderInfoSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerSceneCreateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerSceneCreateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerSceneSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerSceneSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TowerLayerSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TowerLayerSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaderSealFinishSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaderSealFinishSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoTeamRaidSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoTeamRaidSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelTeamRaidSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelTeamRaidSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendMailSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendMailSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardToAllSessionSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardToAllSessionSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuildLevelUpSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuildLevelUpSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoveGuildZoneSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoveGuildZoneSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialDataUpdateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialDataUpdateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddRelationSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddRelationSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveRelationSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveRelationSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemoveSocialitySocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemoveSocialitySocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncSocialListSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncSocialListSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialListUpdateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialListUpdateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRelationTimeSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRelationTimeSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamerQuestUpdateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamerQuestUpdateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalForwardCmdSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalForwardCmdSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* AuthorizeInfoSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthorizeInfoSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncRedTipSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncRedTipSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendTutorRewardSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendTutorRewardSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncTutorRewardSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncTutorRewardSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalForwardCmdSocialCmd2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalForwardCmdSocialCmd2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardSceneCreateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardSceneCreateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CardSceneSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CardSceneSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModifyDepositSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModifyDepositSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRaidSceneCreateSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidSceneCreateSocialCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRaidSceneSyncSocialCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRaidSceneSyncSocialCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SocialParam_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECmdType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDOJOSTATE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDir_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_SocialCmd_2eproto() {
  protobuf_AddDesc_SocialCmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SocialCmd.proto");
  GOOGLE_CHECK(file != NULL);
  SocialUser_descriptor_ = file->message_type(0);
  static const int SocialUser_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, baselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, name_),
  };
  SocialUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialUser_descriptor_,
      SocialUser::default_instance_,
      SocialUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialUser));
  SessionForwardSocialCmd_descriptor_ = file->message_type(1);
  static const int SessionForwardSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, len_),
  };
  SessionForwardSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SessionForwardSocialCmd_descriptor_,
      SessionForwardSocialCmd::default_instance_,
      SessionForwardSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SessionForwardSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SessionForwardSocialCmd));
  ForwardToUserSocialCmd_descriptor_ = file->message_type(2);
  static const int ForwardToUserSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, len_),
  };
  ForwardToUserSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardToUserSocialCmd_descriptor_,
      ForwardToUserSocialCmd::default_instance_,
      ForwardToUserSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardToUserSocialCmd));
  ForwardToUserSceneSocialCmd_descriptor_ = file->message_type(3);
  static const int ForwardToUserSceneSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, len_),
  };
  ForwardToUserSceneSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardToUserSceneSocialCmd_descriptor_,
      ForwardToUserSceneSocialCmd::default_instance_,
      ForwardToUserSceneSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToUserSceneSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardToUserSceneSocialCmd));
  ForwardToSceneUserSocialCmd_descriptor_ = file->message_type(4);
  static const int ForwardToSceneUserSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, len_),
  };
  ForwardToSceneUserSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardToSceneUserSocialCmd_descriptor_,
      ForwardToSceneUserSocialCmd::default_instance_,
      ForwardToSceneUserSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSceneUserSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardToSceneUserSocialCmd));
  ForwardToSessionUserSocialCmd_descriptor_ = file->message_type(5);
  static const int ForwardToSessionUserSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, len_),
  };
  ForwardToSessionUserSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardToSessionUserSocialCmd_descriptor_,
      ForwardToSessionUserSocialCmd::default_instance_,
      ForwardToSessionUserSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToSessionUserSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardToSessionUserSocialCmd));
  OnlineStatusSocialCmd_descriptor_ = file->message_type(6);
  static const int OnlineStatusSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, online_),
  };
  OnlineStatusSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineStatusSocialCmd_descriptor_,
      OnlineStatusSocialCmd::default_instance_,
      OnlineStatusSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineStatusSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineStatusSocialCmd));
  AddOfflineMsgSocialCmd_descriptor_ = file->message_type(7);
  static const int AddOfflineMsgSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineMsgSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineMsgSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineMsgSocialCmd, msg_),
  };
  AddOfflineMsgSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddOfflineMsgSocialCmd_descriptor_,
      AddOfflineMsgSocialCmd::default_instance_,
      AddOfflineMsgSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineMsgSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddOfflineMsgSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddOfflineMsgSocialCmd));
  UserInfo_descriptor_ = file->message_type(8);
  static const int UserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, attrs_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  UserInfoSyncSocialCmd_descriptor_ = file->message_type(9);
  static const int UserInfoSyncSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoSyncSocialCmd, info_),
  };
  UserInfoSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoSyncSocialCmd_descriptor_,
      UserInfoSyncSocialCmd::default_instance_,
      UserInfoSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoSyncSocialCmd));
  UserAddItemSocialCmd_descriptor_ = file->message_type(10);
  static const int UserAddItemSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, doublereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, operatereward_),
  };
  UserAddItemSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserAddItemSocialCmd_descriptor_,
      UserAddItemSocialCmd::default_instance_,
      UserAddItemSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserAddItemSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserAddItemSocialCmd));
  UserDelSocialCmd_descriptor_ = file->message_type(11);
  static const int UserDelSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDelSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDelSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDelSocialCmd, charid_),
  };
  UserDelSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserDelSocialCmd_descriptor_,
      UserDelSocialCmd::default_instance_,
      UserDelSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDelSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserDelSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserDelSocialCmd));
  UserGuildInfoSocialCmd_descriptor_ = file->message_type(12);
  static const int UserGuildInfoSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, portrait_),
  };
  UserGuildInfoSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserGuildInfoSocialCmd_descriptor_,
      UserGuildInfoSocialCmd::default_instance_,
      UserGuildInfoSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserGuildInfoSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserGuildInfoSocialCmd));
  ChatWorldMsgSocialCmd_descriptor_ = file->message_type(13);
  static const int ChatWorldMsgSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldMsgSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldMsgSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldMsgSocialCmd, msg_),
  };
  ChatWorldMsgSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatWorldMsgSocialCmd_descriptor_,
      ChatWorldMsgSocialCmd::default_instance_,
      ChatWorldMsgSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldMsgSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatWorldMsgSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatWorldMsgSocialCmd));
  ChatUser_descriptor_ = file->message_type(14);
  static const int ChatUser_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, zoneid_),
  };
  ChatUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatUser_descriptor_,
      ChatUser::default_instance_,
      ChatUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatUser));
  ChatSocialCmd_descriptor_ = file->message_type(15);
  static const int ChatSocialCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, targets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, accid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, platformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, to_global_),
  };
  ChatSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatSocialCmd_descriptor_,
      ChatSocialCmd::default_instance_,
      ChatSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatSocialCmd));
  CreateGuildSocialCmd_descriptor_ = file->message_type(16);
  static const int CreateGuildSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, msgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, name_),
  };
  CreateGuildSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateGuildSocialCmd_descriptor_,
      CreateGuildSocialCmd::default_instance_,
      CreateGuildSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateGuildSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateGuildSocialCmd));
  GuildDonateSocialCmd_descriptor_ = file->message_type(17);
  static const int GuildDonateSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, msgid_),
  };
  GuildDonateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildDonateSocialCmd_descriptor_,
      GuildDonateSocialCmd::default_instance_,
      GuildDonateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildDonateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildDonateSocialCmd));
  GuildApplySocialCmd_descriptor_ = file->message_type(18);
  static const int GuildApplySocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, guildid_),
  };
  GuildApplySocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildApplySocialCmd_descriptor_,
      GuildApplySocialCmd::default_instance_,
      GuildApplySocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildApplySocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildApplySocialCmd));
  GuildProcessInviteSocialCmd_descriptor_ = file->message_type(19);
  static const int GuildProcessInviteSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, guildid_),
  };
  GuildProcessInviteSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildProcessInviteSocialCmd_descriptor_,
      GuildProcessInviteSocialCmd::default_instance_,
      GuildProcessInviteSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildProcessInviteSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildProcessInviteSocialCmd));
  GuildExchangeZoneSocialCmd_descriptor_ = file->message_type(20);
  static const int GuildExchangeZoneSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, zoneid_),
  };
  GuildExchangeZoneSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildExchangeZoneSocialCmd_descriptor_,
      GuildExchangeZoneSocialCmd::default_instance_,
      GuildExchangeZoneSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildExchangeZoneSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildExchangeZoneSocialCmd));
  TeamCreateSocialCmd_descriptor_ = file->message_type(21);
  static const int TeamCreateSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, team_),
  };
  TeamCreateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamCreateSocialCmd_descriptor_,
      TeamCreateSocialCmd::default_instance_,
      TeamCreateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamCreateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamCreateSocialCmd));
  TeamInviteSocialCmd_descriptor_ = file->message_type(22);
  static const int TeamInviteSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, invite_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, beinvite_),
  };
  TeamInviteSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInviteSocialCmd_descriptor_,
      TeamInviteSocialCmd::default_instance_,
      TeamInviteSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInviteSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInviteSocialCmd));
  TeamProcessInviteSocialCmd_descriptor_ = file->message_type(23);
  static const int TeamProcessInviteSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, leaderid_),
  };
  TeamProcessInviteSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamProcessInviteSocialCmd_descriptor_,
      TeamProcessInviteSocialCmd::default_instance_,
      TeamProcessInviteSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProcessInviteSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamProcessInviteSocialCmd));
  TeamApplySocialCmd_descriptor_ = file->message_type(24);
  static const int TeamApplySocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, teamid_),
  };
  TeamApplySocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplySocialCmd_descriptor_,
      TeamApplySocialCmd::default_instance_,
      TeamApplySocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplySocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplySocialCmd));
  TeamQuickEnterSocialCmd_descriptor_ = file->message_type(25);
  static const int TeamQuickEnterSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, set_),
  };
  TeamQuickEnterSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamQuickEnterSocialCmd_descriptor_,
      TeamQuickEnterSocialCmd::default_instance_,
      TeamQuickEnterSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuickEnterSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamQuickEnterSocialCmd));
  DojoStateNtfSocialCmd_descriptor_ = file->message_type(26);
  static const int DojoStateNtfSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, state_),
  };
  DojoStateNtfSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoStateNtfSocialCmd_descriptor_,
      DojoStateNtfSocialCmd::default_instance_,
      DojoStateNtfSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoStateNtfSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoStateNtfSocialCmd));
  DojoCreateSocialCmd_descriptor_ = file->message_type(27);
  static const int DojoCreateSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, dojoid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, guildid_),
  };
  DojoCreateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DojoCreateSocialCmd_descriptor_,
      DojoCreateSocialCmd::default_instance_,
      DojoCreateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DojoCreateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DojoCreateSocialCmd));
  TowerLeaderInfoSyncSocialCmd_descriptor_ = file->message_type(28);
  static const int TowerLeaderInfoSyncSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, info_),
  };
  TowerLeaderInfoSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerLeaderInfoSyncSocialCmd_descriptor_,
      TowerLeaderInfoSyncSocialCmd::default_instance_,
      TowerLeaderInfoSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLeaderInfoSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerLeaderInfoSyncSocialCmd));
  TowerSceneCreateSocialCmd_descriptor_ = file->message_type(29);
  static const int TowerSceneCreateSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, layer_),
  };
  TowerSceneCreateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerSceneCreateSocialCmd_descriptor_,
      TowerSceneCreateSocialCmd::default_instance_,
      TowerSceneCreateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneCreateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerSceneCreateSocialCmd));
  TowerSceneSyncSocialCmd_descriptor_ = file->message_type(30);
  static const int TowerSceneSyncSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, raidid_),
  };
  TowerSceneSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerSceneSyncSocialCmd_descriptor_,
      TowerSceneSyncSocialCmd::default_instance_,
      TowerSceneSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerSceneSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerSceneSyncSocialCmd));
  TowerLayerSyncSocialCmd_descriptor_ = file->message_type(31);
  static const int TowerLayerSyncSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, layer_),
  };
  TowerLayerSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TowerLayerSyncSocialCmd_descriptor_,
      TowerLayerSyncSocialCmd::default_instance_,
      TowerLayerSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TowerLayerSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TowerLayerSyncSocialCmd));
  LeaderSealFinishSocialCmd_descriptor_ = file->message_type(32);
  static const int LeaderSealFinishSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderSealFinishSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderSealFinishSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderSealFinishSocialCmd, teamid_),
  };
  LeaderSealFinishSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaderSealFinishSocialCmd_descriptor_,
      LeaderSealFinishSocialCmd::default_instance_,
      LeaderSealFinishSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderSealFinishSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaderSealFinishSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaderSealFinishSocialCmd));
  GoTeamRaidSocialCmd_descriptor_ = file->message_type(33);
  static const int GoTeamRaidSocialCmd_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, myzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, raidzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, raidid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, gomaptype_),
  };
  GoTeamRaidSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoTeamRaidSocialCmd_descriptor_,
      GoTeamRaidSocialCmd::default_instance_,
      GoTeamRaidSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoTeamRaidSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoTeamRaidSocialCmd));
  DelTeamRaidSocialCmd_descriptor_ = file->message_type(34);
  static const int DelTeamRaidSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, raidid_),
  };
  DelTeamRaidSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelTeamRaidSocialCmd_descriptor_,
      DelTeamRaidSocialCmd::default_instance_,
      DelTeamRaidSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelTeamRaidSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelTeamRaidSocialCmd));
  SendMailSocialCmd_descriptor_ = file->message_type(35);
  static const int SendMailSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, len_),
  };
  SendMailSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendMailSocialCmd_descriptor_,
      SendMailSocialCmd::default_instance_,
      SendMailSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendMailSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendMailSocialCmd));
  ForwardToAllSessionSocialCmd_descriptor_ = file->message_type(36);
  static const int ForwardToAllSessionSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, except_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, len_),
  };
  ForwardToAllSessionSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardToAllSessionSocialCmd_descriptor_,
      ForwardToAllSessionSocialCmd::default_instance_,
      ForwardToAllSessionSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardToAllSessionSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardToAllSessionSocialCmd));
  GuildLevelUpSocialCmd_descriptor_ = file->message_type(37);
  static const int GuildLevelUpSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, addlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, guildname_),
  };
  GuildLevelUpSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuildLevelUpSocialCmd_descriptor_,
      GuildLevelUpSocialCmd::default_instance_,
      GuildLevelUpSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuildLevelUpSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuildLevelUpSocialCmd));
  MoveGuildZoneSocialCmd_descriptor_ = file->message_type(38);
  static const int MoveGuildZoneSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, orizone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, newzone_),
  };
  MoveGuildZoneSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoveGuildZoneSocialCmd_descriptor_,
      MoveGuildZoneSocialCmd::default_instance_,
      MoveGuildZoneSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveGuildZoneSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoveGuildZoneSocialCmd));
  SocialDataUpdateSocialCmd_descriptor_ = file->message_type(39);
  static const int SocialDataUpdateSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, update_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, to_global_),
  };
  SocialDataUpdateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialDataUpdateSocialCmd_descriptor_,
      SocialDataUpdateSocialCmd::default_instance_,
      SocialDataUpdateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialDataUpdateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialDataUpdateSocialCmd));
  AddRelationSocialCmd_descriptor_ = file->message_type(40);
  static const int AddRelationSocialCmd_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, to_global_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, check_),
  };
  AddRelationSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddRelationSocialCmd_descriptor_,
      AddRelationSocialCmd::default_instance_,
      AddRelationSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddRelationSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddRelationSocialCmd));
  RemoveRelationSocialCmd_descriptor_ = file->message_type(41);
  static const int RemoveRelationSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, to_global_),
  };
  RemoveRelationSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveRelationSocialCmd_descriptor_,
      RemoveRelationSocialCmd::default_instance_,
      RemoveRelationSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveRelationSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveRelationSocialCmd));
  RemoveSocialitySocialCmd_descriptor_ = file->message_type(42);
  static const int RemoveSocialitySocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, destid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, to_global_),
  };
  RemoveSocialitySocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemoveSocialitySocialCmd_descriptor_,
      RemoveSocialitySocialCmd::default_instance_,
      RemoveSocialitySocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveSocialitySocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveSocialitySocialCmd));
  SocialItem_descriptor_ = file->message_type(43);
  static const int SocialItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialItem, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialItem, createtime_),
  };
  SocialItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialItem_descriptor_,
      SocialItem::default_instance_,
      SocialItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialItem));
  SyncSocialListSocialCmd_descriptor_ = file->message_type(44);
  static const int SyncSocialListSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, items_),
  };
  SyncSocialListSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncSocialListSocialCmd_descriptor_,
      SyncSocialListSocialCmd::default_instance_,
      SyncSocialListSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncSocialListSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncSocialListSocialCmd));
  SocialListUpdateSocialCmd_descriptor_ = file->message_type(45);
  static const int SocialListUpdateSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, dels_),
  };
  SocialListUpdateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialListUpdateSocialCmd_descriptor_,
      SocialListUpdateSocialCmd::default_instance_,
      SocialListUpdateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialListUpdateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialListUpdateSocialCmd));
  UpdateRelationTimeSocialCmd_descriptor_ = file->message_type(46);
  static const int UpdateRelationTimeSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, relation_),
  };
  UpdateRelationTimeSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRelationTimeSocialCmd_descriptor_,
      UpdateRelationTimeSocialCmd::default_instance_,
      UpdateRelationTimeSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRelationTimeSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRelationTimeSocialCmd));
  TeamerQuestUpdateSocialCmd_descriptor_ = file->message_type(47);
  static const int TeamerQuestUpdateSocialCmd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamerQuestUpdateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamerQuestUpdateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamerQuestUpdateSocialCmd, quest_),
  };
  TeamerQuestUpdateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamerQuestUpdateSocialCmd_descriptor_,
      TeamerQuestUpdateSocialCmd::default_instance_,
      TeamerQuestUpdateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamerQuestUpdateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamerQuestUpdateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamerQuestUpdateSocialCmd));
  GlobalForwardCmdSocialCmd_descriptor_ = file->message_type(48);
  static const int GlobalForwardCmdSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, dir_),
  };
  GlobalForwardCmdSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalForwardCmdSocialCmd_descriptor_,
      GlobalForwardCmdSocialCmd::default_instance_,
      GlobalForwardCmdSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalForwardCmdSocialCmd));
  AuthorizeInfoSyncSocialCmd_descriptor_ = file->message_type(49);
  static const int AuthorizeInfoSyncSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, ignorepwd_),
  };
  AuthorizeInfoSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthorizeInfoSyncSocialCmd_descriptor_,
      AuthorizeInfoSyncSocialCmd::default_instance_,
      AuthorizeInfoSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthorizeInfoSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthorizeInfoSyncSocialCmd));
  SyncRedTipSocialCmd_descriptor_ = file->message_type(50);
  static const int SyncRedTipSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, dwid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, add_),
  };
  SyncRedTipSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncRedTipSocialCmd_descriptor_,
      SyncRedTipSocialCmd::default_instance_,
      SyncRedTipSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncRedTipSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncRedTipSocialCmd));
  SendTutorRewardSocialCmd_descriptor_ = file->message_type(51);
  static const int SendTutorRewardSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, rewards_),
  };
  SendTutorRewardSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendTutorRewardSocialCmd_descriptor_,
      SendTutorRewardSocialCmd::default_instance_,
      SendTutorRewardSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendTutorRewardSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendTutorRewardSocialCmd));
  SyncTutorRewardSocialCmd_descriptor_ = file->message_type(52);
  static const int SyncTutorRewardSocialCmd_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, searchuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, redpointtip_),
  };
  SyncTutorRewardSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncTutorRewardSocialCmd_descriptor_,
      SyncTutorRewardSocialCmd::default_instance_,
      SyncTutorRewardSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncTutorRewardSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncTutorRewardSocialCmd));
  GlobalForwardCmdSocialCmd2_descriptor_ = file->message_type(53);
  static const int GlobalForwardCmdSocialCmd2_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, len_),
  };
  GlobalForwardCmdSocialCmd2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalForwardCmdSocialCmd2_descriptor_,
      GlobalForwardCmdSocialCmd2::default_instance_,
      GlobalForwardCmdSocialCmd2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalForwardCmdSocialCmd2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalForwardCmdSocialCmd2));
  CardSceneCreateSocialCmd_descriptor_ = file->message_type(54);
  static const int CardSceneCreateSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, configid_),
  };
  CardSceneCreateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardSceneCreateSocialCmd_descriptor_,
      CardSceneCreateSocialCmd::default_instance_,
      CardSceneCreateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneCreateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardSceneCreateSocialCmd));
  CardSceneSyncSocialCmd_descriptor_ = file->message_type(55);
  static const int CardSceneSyncSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, open_),
  };
  CardSceneSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CardSceneSyncSocialCmd_descriptor_,
      CardSceneSyncSocialCmd::default_instance_,
      CardSceneSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CardSceneSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CardSceneSyncSocialCmd));
  ModifyDepositSocialCmd_descriptor_ = file->message_type(56);
  static const int ModifyDepositSocialCmd_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, command_),
  };
  ModifyDepositSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModifyDepositSocialCmd_descriptor_,
      ModifyDepositSocialCmd::default_instance_,
      ModifyDepositSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModifyDepositSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModifyDepositSocialCmd));
  TeamRaidSceneCreateSocialCmd_descriptor_ = file->message_type(57);
  static const int TeamRaidSceneCreateSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, raid_type_),
  };
  TeamRaidSceneCreateSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidSceneCreateSocialCmd_descriptor_,
      TeamRaidSceneCreateSocialCmd::default_instance_,
      TeamRaidSceneCreateSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneCreateSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidSceneCreateSocialCmd));
  TeamRaidSceneSyncSocialCmd_descriptor_ = file->message_type(58);
  static const int TeamRaidSceneSyncSocialCmd_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, raid_type_),
  };
  TeamRaidSceneSyncSocialCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRaidSceneSyncSocialCmd_descriptor_,
      TeamRaidSceneSyncSocialCmd::default_instance_,
      TeamRaidSceneSyncSocialCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRaidSceneSyncSocialCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRaidSceneSyncSocialCmd));
  SocialParam_descriptor_ = file->enum_type(0);
  ECmdType_descriptor_ = file->enum_type(1);
  EDOJOSTATE_descriptor_ = file->enum_type(2);
  EDir_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SocialCmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialUser_descriptor_, &SocialUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SessionForwardSocialCmd_descriptor_, &SessionForwardSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardToUserSocialCmd_descriptor_, &ForwardToUserSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardToUserSceneSocialCmd_descriptor_, &ForwardToUserSceneSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardToSceneUserSocialCmd_descriptor_, &ForwardToSceneUserSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardToSessionUserSocialCmd_descriptor_, &ForwardToSessionUserSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineStatusSocialCmd_descriptor_, &OnlineStatusSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddOfflineMsgSocialCmd_descriptor_, &AddOfflineMsgSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoSyncSocialCmd_descriptor_, &UserInfoSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserAddItemSocialCmd_descriptor_, &UserAddItemSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserDelSocialCmd_descriptor_, &UserDelSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserGuildInfoSocialCmd_descriptor_, &UserGuildInfoSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatWorldMsgSocialCmd_descriptor_, &ChatWorldMsgSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatUser_descriptor_, &ChatUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatSocialCmd_descriptor_, &ChatSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateGuildSocialCmd_descriptor_, &CreateGuildSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildDonateSocialCmd_descriptor_, &GuildDonateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildApplySocialCmd_descriptor_, &GuildApplySocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildProcessInviteSocialCmd_descriptor_, &GuildProcessInviteSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildExchangeZoneSocialCmd_descriptor_, &GuildExchangeZoneSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamCreateSocialCmd_descriptor_, &TeamCreateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInviteSocialCmd_descriptor_, &TeamInviteSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamProcessInviteSocialCmd_descriptor_, &TeamProcessInviteSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplySocialCmd_descriptor_, &TeamApplySocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamQuickEnterSocialCmd_descriptor_, &TeamQuickEnterSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoStateNtfSocialCmd_descriptor_, &DojoStateNtfSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DojoCreateSocialCmd_descriptor_, &DojoCreateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerLeaderInfoSyncSocialCmd_descriptor_, &TowerLeaderInfoSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerSceneCreateSocialCmd_descriptor_, &TowerSceneCreateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerSceneSyncSocialCmd_descriptor_, &TowerSceneSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TowerLayerSyncSocialCmd_descriptor_, &TowerLayerSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaderSealFinishSocialCmd_descriptor_, &LeaderSealFinishSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoTeamRaidSocialCmd_descriptor_, &GoTeamRaidSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelTeamRaidSocialCmd_descriptor_, &DelTeamRaidSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendMailSocialCmd_descriptor_, &SendMailSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardToAllSessionSocialCmd_descriptor_, &ForwardToAllSessionSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuildLevelUpSocialCmd_descriptor_, &GuildLevelUpSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoveGuildZoneSocialCmd_descriptor_, &MoveGuildZoneSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialDataUpdateSocialCmd_descriptor_, &SocialDataUpdateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddRelationSocialCmd_descriptor_, &AddRelationSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveRelationSocialCmd_descriptor_, &RemoveRelationSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveSocialitySocialCmd_descriptor_, &RemoveSocialitySocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialItem_descriptor_, &SocialItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncSocialListSocialCmd_descriptor_, &SyncSocialListSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialListUpdateSocialCmd_descriptor_, &SocialListUpdateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRelationTimeSocialCmd_descriptor_, &UpdateRelationTimeSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamerQuestUpdateSocialCmd_descriptor_, &TeamerQuestUpdateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalForwardCmdSocialCmd_descriptor_, &GlobalForwardCmdSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthorizeInfoSyncSocialCmd_descriptor_, &AuthorizeInfoSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncRedTipSocialCmd_descriptor_, &SyncRedTipSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendTutorRewardSocialCmd_descriptor_, &SendTutorRewardSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncTutorRewardSocialCmd_descriptor_, &SyncTutorRewardSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalForwardCmdSocialCmd2_descriptor_, &GlobalForwardCmdSocialCmd2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardSceneCreateSocialCmd_descriptor_, &CardSceneCreateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CardSceneSyncSocialCmd_descriptor_, &CardSceneSyncSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModifyDepositSocialCmd_descriptor_, &ModifyDepositSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidSceneCreateSocialCmd_descriptor_, &TeamRaidSceneCreateSocialCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRaidSceneSyncSocialCmd_descriptor_, &TeamRaidSceneSyncSocialCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SocialCmd_2eproto() {
  delete SocialUser::default_instance_;
  delete SocialUser_reflection_;
  delete SessionForwardSocialCmd::default_instance_;
  delete SessionForwardSocialCmd_reflection_;
  delete ForwardToUserSocialCmd::default_instance_;
  delete ForwardToUserSocialCmd_reflection_;
  delete ForwardToUserSceneSocialCmd::default_instance_;
  delete ForwardToUserSceneSocialCmd_reflection_;
  delete ForwardToSceneUserSocialCmd::default_instance_;
  delete ForwardToSceneUserSocialCmd_reflection_;
  delete ForwardToSessionUserSocialCmd::default_instance_;
  delete ForwardToSessionUserSocialCmd_reflection_;
  delete OnlineStatusSocialCmd::default_instance_;
  delete OnlineStatusSocialCmd_reflection_;
  delete AddOfflineMsgSocialCmd::default_instance_;
  delete AddOfflineMsgSocialCmd_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete UserInfoSyncSocialCmd::default_instance_;
  delete UserInfoSyncSocialCmd_reflection_;
  delete UserAddItemSocialCmd::default_instance_;
  delete UserAddItemSocialCmd_reflection_;
  delete UserDelSocialCmd::default_instance_;
  delete UserDelSocialCmd_reflection_;
  delete UserGuildInfoSocialCmd::default_instance_;
  delete UserGuildInfoSocialCmd_reflection_;
  delete ChatWorldMsgSocialCmd::default_instance_;
  delete ChatWorldMsgSocialCmd_reflection_;
  delete ChatUser::default_instance_;
  delete ChatUser_reflection_;
  delete ChatSocialCmd::default_instance_;
  delete ChatSocialCmd_reflection_;
  delete CreateGuildSocialCmd::default_instance_;
  delete CreateGuildSocialCmd_reflection_;
  delete GuildDonateSocialCmd::default_instance_;
  delete GuildDonateSocialCmd_reflection_;
  delete GuildApplySocialCmd::default_instance_;
  delete GuildApplySocialCmd_reflection_;
  delete GuildProcessInviteSocialCmd::default_instance_;
  delete GuildProcessInviteSocialCmd_reflection_;
  delete GuildExchangeZoneSocialCmd::default_instance_;
  delete GuildExchangeZoneSocialCmd_reflection_;
  delete TeamCreateSocialCmd::default_instance_;
  delete TeamCreateSocialCmd_reflection_;
  delete TeamInviteSocialCmd::default_instance_;
  delete TeamInviteSocialCmd_reflection_;
  delete TeamProcessInviteSocialCmd::default_instance_;
  delete TeamProcessInviteSocialCmd_reflection_;
  delete TeamApplySocialCmd::default_instance_;
  delete TeamApplySocialCmd_reflection_;
  delete TeamQuickEnterSocialCmd::default_instance_;
  delete TeamQuickEnterSocialCmd_reflection_;
  delete DojoStateNtfSocialCmd::default_instance_;
  delete DojoStateNtfSocialCmd_reflection_;
  delete DojoCreateSocialCmd::default_instance_;
  delete DojoCreateSocialCmd_reflection_;
  delete TowerLeaderInfoSyncSocialCmd::default_instance_;
  delete TowerLeaderInfoSyncSocialCmd_reflection_;
  delete TowerSceneCreateSocialCmd::default_instance_;
  delete TowerSceneCreateSocialCmd_reflection_;
  delete TowerSceneSyncSocialCmd::default_instance_;
  delete TowerSceneSyncSocialCmd_reflection_;
  delete TowerLayerSyncSocialCmd::default_instance_;
  delete TowerLayerSyncSocialCmd_reflection_;
  delete LeaderSealFinishSocialCmd::default_instance_;
  delete LeaderSealFinishSocialCmd_reflection_;
  delete GoTeamRaidSocialCmd::default_instance_;
  delete GoTeamRaidSocialCmd_reflection_;
  delete DelTeamRaidSocialCmd::default_instance_;
  delete DelTeamRaidSocialCmd_reflection_;
  delete SendMailSocialCmd::default_instance_;
  delete SendMailSocialCmd_reflection_;
  delete ForwardToAllSessionSocialCmd::default_instance_;
  delete ForwardToAllSessionSocialCmd_reflection_;
  delete GuildLevelUpSocialCmd::default_instance_;
  delete GuildLevelUpSocialCmd_reflection_;
  delete MoveGuildZoneSocialCmd::default_instance_;
  delete MoveGuildZoneSocialCmd_reflection_;
  delete SocialDataUpdateSocialCmd::default_instance_;
  delete SocialDataUpdateSocialCmd_reflection_;
  delete AddRelationSocialCmd::default_instance_;
  delete AddRelationSocialCmd_reflection_;
  delete RemoveRelationSocialCmd::default_instance_;
  delete RemoveRelationSocialCmd_reflection_;
  delete RemoveSocialitySocialCmd::default_instance_;
  delete RemoveSocialitySocialCmd_reflection_;
  delete SocialItem::default_instance_;
  delete SocialItem_reflection_;
  delete SyncSocialListSocialCmd::default_instance_;
  delete SyncSocialListSocialCmd_reflection_;
  delete SocialListUpdateSocialCmd::default_instance_;
  delete SocialListUpdateSocialCmd_reflection_;
  delete UpdateRelationTimeSocialCmd::default_instance_;
  delete UpdateRelationTimeSocialCmd_reflection_;
  delete TeamerQuestUpdateSocialCmd::default_instance_;
  delete TeamerQuestUpdateSocialCmd_reflection_;
  delete GlobalForwardCmdSocialCmd::default_instance_;
  delete GlobalForwardCmdSocialCmd_reflection_;
  delete AuthorizeInfoSyncSocialCmd::default_instance_;
  delete AuthorizeInfoSyncSocialCmd_reflection_;
  delete SyncRedTipSocialCmd::default_instance_;
  delete SyncRedTipSocialCmd_reflection_;
  delete SendTutorRewardSocialCmd::default_instance_;
  delete SendTutorRewardSocialCmd_reflection_;
  delete SyncTutorRewardSocialCmd::default_instance_;
  delete SyncTutorRewardSocialCmd_reflection_;
  delete GlobalForwardCmdSocialCmd2::default_instance_;
  delete GlobalForwardCmdSocialCmd2_reflection_;
  delete CardSceneCreateSocialCmd::default_instance_;
  delete CardSceneCreateSocialCmd_reflection_;
  delete CardSceneSyncSocialCmd::default_instance_;
  delete CardSceneSyncSocialCmd_reflection_;
  delete ModifyDepositSocialCmd::default_instance_;
  delete ModifyDepositSocialCmd_reflection_;
  delete TeamRaidSceneCreateSocialCmd::default_instance_;
  delete TeamRaidSceneCreateSocialCmd_reflection_;
  delete TeamRaidSceneSyncSocialCmd::default_instance_;
  delete TeamRaidSceneSyncSocialCmd_reflection_;
}

void protobuf_AddDesc_SocialCmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Cmd::protobuf_AddDesc_xCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ChatCmd_2eproto();
  ::Cmd::protobuf_AddDesc_ProtoCommon_2eproto();
  ::Cmd::protobuf_AddDesc_GuildCmd_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser_2eproto();
  ::Cmd::protobuf_AddDesc_SceneUser2_2eproto();
  ::Cmd::protobuf_AddDesc_SceneItem_2eproto();
  ::Cmd::protobuf_AddDesc_SessionTeam_2eproto();
  ::Cmd::protobuf_AddDesc_InfiniteTower_2eproto();
  ::Cmd::protobuf_AddDesc_SessionSociality_2eproto();
  ::Cmd::protobuf_AddDesc_SceneTip_2eproto();
  ::Cmd::protobuf_AddDesc_Tutor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017SocialCmd.proto\022\003Cmd\032\nxCmd.proto\032\rChat"
    "Cmd.proto\032\021ProtoCommon.proto\032\016GuildCmd.p"
    "roto\032\017SceneUser.proto\032\020SceneUser2.proto\032"
    "\017SceneItem.proto\032\021SessionTeam.proto\032\023Inf"
    "initeTower.proto\032\026SessionSociality.proto"
    "\032\016SceneTip.proto\032\013Tutor.proto\"\256\001\n\nSocial"
    "User\022\020\n\005accid\030\001 \001(\004:\0010\022\021\n\006charid\030\002 \001(\004:\001"
    "0\022\021\n\006zoneid\030\003 \001(\r:\0010\022\020\n\005mapid\030\004 \001(\r:\0010\022\021"
    "\n\006baselv\030\005 \001(\r:\0010\0225\n\nprofession\030\006 \001(\0162\020."
    "Cmd.EProfession:\017EPROFESSION_MIN\022\014\n\004name"
    "\030\007 \001(\t\"\366\001\n\027SessionForwardSocialCmd\022*\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022G"
    "\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:&SOCIALP"
    "ARAM_SESSION_FORWARD_SOCIAL_CMD\022)\n\004type\030"
    "\003 \001(\0162\r.Cmd.ECmdType:\014ECMDTYPE_MIN\022\035\n\004us"
    "er\030\004 \001(\0132\017.Cmd.SocialUser\022\014\n\004data\030\005 \001(\014\022"
    "\016\n\003len\030\006 \001(\r:\0010\"\260\001\n\026ForwardToUserSocialC"
    "md\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PR"
    "OTOCMD\022<\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:"
    "\033SOCIALPARAM_FORWARD_TO_USER\022\021\n\006charid\030\003"
    " \001(\004:\0010\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\"\270\001\n\033F"
    "orwardToUserSceneSocialCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017SOCIAL_PROTOCMD\022B\n\005param\030"
    "\002 \001(\0162\020.Cmd.SocialParam:!SOCIALPARAM_FOR"
    "WARD_TO_USER_SCENE\022\016\n\006charid\030\003 \001(\004\022\014\n\004da"
    "ta\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\"\270\001\n\033ForwardToScene"
    "UserSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\017SOCIAL_PROTOCMD\022B\n\005param\030\002 \001(\0162\020.Cmd.S"
    "ocialParam:!SOCIALPARAM_FORWARD_TO_SCENE"
    "_USER\022\016\n\006charid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003l"
    "en\030\005 \001(\r\"\302\001\n\035ForwardToSessionUserSocialC"
    "md\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PR"
    "OTOCMD\022D\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:"
    "#SOCIALPARAM_FORWARD_TO_SESSION_USER\022\021\n\006"
    "charid\030\003 \001(\004:\0010\022\014\n\004data\030\004 \001(\014\022\016\n\003len\030\005 \001"
    "(\r:\0010\"\264\001\n\025OnlineStatusSocialCmd\022*\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\0229\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.SocialParam:\030SOCIALPARA"
    "M_ONLINESTATUS\022\035\n\004user\030\003 \001(\0132\017.Cmd.Socia"
    "lUser\022\025\n\006online\030\004 \001(\010:\005false\"\237\001\n\026AddOffl"
    "ineMsgSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\017SOCIAL_PROTOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd"
    ".SocialParam:\032SOCIALPARAM_ADD_OFFLINEMSG"
    "\022\034\n\003msg\030\003 \001(\0132\017.Cmd.OfflineMsg\"e\n\010UserIn"
    "fo\022\035\n\004user\030\001 \001(\0132\017.Cmd.SocialUser\022\034\n\005dat"
    "as\030\002 \003(\0132\r.Cmd.UserData\022\034\n\005attrs\030\003 \003(\0132\r"
    ".Cmd.UserAttr\"\235\001\n\025UserInfoSyncSocialCmd\022"
    "*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTO"
    "CMD\022;\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\032SO"
    "CIALPARAM_USER_SYNC_INFO\022\033\n\004info\030\004 \001(\0132\r"
    ".Cmd.UserInfo\"\356\001\n\024UserAddItemSocialCmd\022*"
    "\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOC"
    "MD\022:\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\031SOC"
    "IALPARAM_USER_ADD_ITEM\022\035\n\004user\030\003 \001(\0132\017.C"
    "md.SocialUser\022\034\n\005items\030\004 \003(\0132\r.Cmd.ItemI"
    "nfo\022\027\n\014doublereward\030\005 \001(\r:\0010\022\030\n\roperater"
    "eward\030\006 \001(\r:\0010\"\215\001\n\020UserDelSocialCmd\022*\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022"
    ":\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\031SOCIAL"
    "PARAM_USER_DEL_CHAR\022\021\n\006charid\030\003 \001(\004:\0010\"\262"
    "\001\n\026UserGuildInfoSocialCmd\022*\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\017SOCIAL_PROTOCMD\022<\n\005param\030\002"
    " \001(\0162\020.Cmd.SocialParam:\033SOCIALPARAM_USER"
    "_GUILD_INFO\022\016\n\006charid\030\003 \001(\004\022\014\n\004name\030\004 \001("
    "\t\022\020\n\010portrait\030\005 \001(\t\"\231\001\n\025ChatWorldMsgSoci"
    "alCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL"
    "_PROTOCMD\022:\n\005param\030\002 \001(\0162\020.Cmd.SocialPar"
    "am:\031SOCIALPARAM_CHAT_WORLDMSG\022\030\n\003msg\030\003 \001"
    "(\0132\013.Cmd.SysMsg\"0\n\010ChatUser\022\021\n\006charid\030\001 "
    "\001(\004:\0010\022\021\n\006zoneid\030\002 \001(\r:\0010\"\363\001\n\rChatSocial"
    "Cmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_P"
    "ROTOCMD\0225\n\005param\030\002 \001(\0162\020.Cmd.SocialParam"
    ":\024SOCIALPARAM_CHAT_MSG\022\034\n\003ret\030\003 \001(\0132\017.Cm"
    "d.ChatRetCmd\022\036\n\007targets\030\004 \003(\0132\r.Cmd.Chat"
    "User\022\020\n\005accid\030\005 \001(\004:\0010\022\025\n\nplatformid\030\006 \001"
    "(\r:\0010\022\030\n\tto_global\030\007 \001(\010:\005false\"\271\001\n\024Crea"
    "teGuildSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\017SOCIAL_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cm"
    "d.SocialParam:\027SOCIALPARAM_CREATEGUILD\022\033"
    "\n\004user\030\003 \001(\0132\r.Cmd.UserInfo\022\020\n\005msgid\030\004 \001"
    "(\r:\0010\022\014\n\004name\030\005 \001(\t\"\314\001\n\024GuildDonateSocia"
    "lCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_"
    "PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.SocialPara"
    "m:\027SOCIALPARAM_GUILDDONATE\022\035\n\004user\030\003 \001(\013"
    "2\017.Cmd.SocialUser\022\035\n\004item\030\004 \001(\0132\017.Cmd.Do"
    "nateItem\022\020\n\005msgid\030\005 \001(\r:\0010\"\254\001\n\023GuildAppl"
    "ySocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017S"
    "OCIAL_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.Soci"
    "alParam:\027SOCIALPARAM_GUILD_APPLY\022\033\n\004user"
    "\030\003 \001(\0132\r.Cmd.UserInfo\022\022\n\007guildid\030\004 \001(\004:\001"
    "0\"\361\001\n\033GuildProcessInviteSocialCmd\022*\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022@\n"
    "\005param\030\002 \001(\0162\020.Cmd.SocialParam:\037SOCIALPA"
    "RAM_GUILD_PROCESSINVITE\022\033\n\004user\030\003 \001(\0132\r."
    "Cmd.UserInfo\0223\n\006action\030\004 \001(\0162\021.Cmd.EGuil"
    "dAction:\020EGUILDACTION_MIN\022\022\n\007guildid\030\005 \001"
    "(\004:\0010\"\273\001\n\032GuildExchangeZoneSocialCmd\022*\n\003"
    "cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD"
    "\022\?\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\036SOCIA"
    "LPARAM_GUILD_EXCHANGEZONE\022\035\n\004user\030\003 \001(\0132"
    "\017.Cmd.SocialUser\022\021\n\006zoneid\030\004 \001(\r:\0010\"\267\001\n\023"
    "TeamCreateSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\017SOCIAL_PROTOCMD\0228\n\005param\030\002 \001(\0162\020"
    ".Cmd.SocialParam:\027SOCIALPARAM_TEAM_CREAT"
    "E\022\033\n\004user\030\003 \001(\0132\r.Cmd.UserInfo\022\035\n\004team\030\004"
    " \001(\0132\017.Cmd.CreateTeam\"\275\001\n\023TeamInviteSoci"
    "alCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL"
    "_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.SocialPar"
    "am:\027SOCIALPARAM_TEAM_INVITE\022\035\n\006invite\030\003 "
    "\001(\0132\r.Cmd.UserInfo\022!\n\010beinvite\030\004 \001(\0132\017.C"
    "md.SocialUser\"\364\001\n\032TeamProcessInviteSocia"
    "lCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_"
    "PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.SocialPara"
    "m:\036SOCIALPARAM_TEAM_PROCESSINVITE\0227\n\004typ"
    "e\030\003 \001(\0162\024.Cmd.ETeamInviteType:\023ETEAMINVI"
    "TETYPE_MIN\022\033\n\004user\030\004 \001(\0132\r.Cmd.UserInfo\022"
    "\023\n\010leaderid\030\005 \001(\004:\0010\"\252\001\n\022TeamApplySocial"
    "Cmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_P"
    "ROTOCMD\0227\n\005param\030\002 \001(\0162\020.Cmd.SocialParam"
    ":\026SOCIALPARAM_TEAM_APPLY\022\034\n\005apply\030\003 \001(\0132"
    "\r.Cmd.UserInfo\022\021\n\006teamid\030\004 \001(\004:\0010\"\305\001\n\027Te"
    "amQuickEnterSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd"
    ".Command:\017SOCIAL_PROTOCMD\022<\n\005param\030\002 \001(\016"
    "2\020.Cmd.SocialParam:\033SOCIALPARAM_TEAM_QUI"
    "CKENTER\022\033\n\004user\030\003 \001(\0132\r.Cmd.UserInfo\022\017\n\004"
    "type\030\004 \001(\r:\0010\022\022\n\003set\030\005 \001(\010:\005false\"\301\001\n\025Do"
    "joStateNtfSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.C"
    "ommand:\017SOCIAL_PROTOCMD\022;\n\005param\030\002 \001(\0162\020"
    ".Cmd.SocialParam:\032SOCIALPARAM_DOJO_STATE"
    "_NTF\022\016\n\006teamid\030\003 \001(\004\022\017\n\007guildid\030\004 \001(\004\022\036\n"
    "\005state\030\005 \001(\0162\017.Cmd.EDOJOSTATE\"\274\001\n\023DojoCr"
    "eateSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\017SOCIAL_PROTOCMD\0228\n\005param\030\002 \001(\0162\020.Cmd.S"
    "ocialParam:\027SOCIALPARAM_DOJO_CREATE\022\016\n\006c"
    "harid\030\003 \001(\004\022\016\n\006dojoid\030\004 \001(\r\022\016\n\006teamid\030\005 "
    "\001(\004\022\017\n\007guildid\030\006 \001(\004\"\317\001\n\034TowerLeaderInfo"
    "SyncSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command"
    ":\017SOCIAL_PROTOCMD\022B\n\005param\030\002 \001(\0162\020.Cmd.S"
    "ocialParam:!SOCIALPARAM_TOWER_SYNC_LEADE"
    "RINFO\022\035\n\004user\030\003 \001(\0132\017.Cmd.SocialUser\022 \n\004"
    "info\030\004 \001(\0132\022.Cmd.UserTowerInfo\"\314\001\n\031Tower"
    "SceneCreateSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd."
    "Command:\017SOCIAL_PROTOCMD\022\?\n\005param\030\002 \001(\0162"
    "\020.Cmd.SocialParam:\036SOCIALPARAM_TOWER_SCE"
    "NE_CREATE\022\035\n\004user\030\003 \001(\0132\017.Cmd.SocialUser"
    "\022\021\n\006teamid\030\004 \001(\004:\0010\022\020\n\005layer\030\005 \001(\r:\0010\"\340\001"
    "\n\027TowerSceneSyncSocialCmd\022*\n\003cmd\030\001 \001(\0162\014"
    ".Cmd.Command:\017SOCIAL_PROTOCMD\022A\n\005param\030\002"
    " \001(\0162\020.Cmd.SocialParam: SOCIALPARAM_TOWE"
    "R_SYNC_SCENEINFO\022\021\n\006teamid\030\003 \001(\004:\0010\0220\n\005s"
    "tate\030\004 \001(\0162\017.Cmd.EDOJOSTATE:\020EDOJOSTATE_"
    "CLOSE\022\021\n\006raidid\030\005 \001(\r:\0010\"\251\001\n\027TowerLayerS"
    "yncSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017SOCIAL_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cmd.So"
    "cialParam:\034SOCIALPARAM_TOWER_SYNC_LAYER\022"
    "\021\n\006teamid\030\003 \001(\004:\0010\022\020\n\005layer\030\004 \001(\r:\0010\"\231\001\n"
    "\031LeaderSealFinishSocialCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017SOCIAL_PROTOCMD\022=\n\005param\030"
    "\002 \001(\0162\020.Cmd.SocialParam:\034SOCIALPARAM_TEA"
    "M_SEAL_FIHISH\022\021\n\006teamid\030\003 \001(\004:\0010\"\367\001\n\023GoT"
    "eamRaidSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comm"
    "and:\017SOCIAL_PROTOCMD\0229\n\005param\030\002 \001(\0162\020.Cm"
    "d.SocialParam:\030SOCIALPARAM_GO_TEAM_RAID\022"
    "\021\n\006teamid\030\003 \001(\004:\0010\022\021\n\006charid\030\004 \001(\004:\0010\022\023\n"
    "\010myzoneid\030\005 \001(\r:\0010\022\025\n\nraidzoneid\030\006 \001(\r:\001"
    "0\022\021\n\006raidid\030\007 \001(\r:\0010\022\024\n\tgomaptype\030\010 \001(\r:"
    "\0010\"\244\001\n\024DelTeamRaidSocialCmd\022*\n\003cmd\030\001 \001(\016"
    "2\014.Cmd.Command:\017SOCIAL_PROTOCMD\022:\n\005param"
    "\030\002 \001(\0162\020.Cmd.SocialParam:\031SOCIALPARAM_DE"
    "L_TEAM_RAID\022\021\n\006teamid\030\003 \001(\004:\0010\022\021\n\006raidid"
    "\030\004 \001(\r:\0010\"\245\001\n\021SendMailSocialCmd\022*\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\0226\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.SocialParam:\025SOCIALPARA"
    "M_SEND_MAIL\022\016\n\006zoneid\030\003 \001(\r\022\014\n\004data\030\004 \001("
    "\014\022\016\n\003len\030\005 \001(\r:\0010\"\275\001\n\034ForwardToAllSessio"
    "nSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017S"
    "OCIAL_PROTOCMD\022C\n\005param\030\002 \001(\0162\020.Cmd.Soci"
    "alParam:\"SOCIALPARAM_FORWARD_TO_ALL_SESS"
    "ION\022\016\n\006except\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\022\016\n\003len"
    "\030\005 \001(\r:\0010\"\316\001\n\025GuildLevelUpSocialCmd\022*\n\003c"
    "md\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022"
    ":\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\031SOCIAL"
    "PARAM_GUILD_LEVELUP\022\021\n\006charid\030\003 \001(\004:\0010\022\022"
    "\n\007guildid\030\004 \001(\004:\0010\022\023\n\010addlevel\030\005 \001(\r:\0010\022"
    "\021\n\tguildname\030\006 \001(\t\"\255\001\n\026MoveGuildZoneSoci"
    "alCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL"
    "_PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.SocialPar"
    "am:\036SOCIALPARAM_GM_MOVE_GUILD_ZONE\022\022\n\007or"
    "izone\030\003 \001(\r:\0010\022\022\n\007newzone\030\004 \001(\r:\0010\"\361\001\n\031S"
    "ocialDataUpdateSocialCmd\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017SOCIAL_PROTOCMD\022\?\n\005param\030\002 "
    "\001(\0162\020.Cmd.SocialParam:\036SOCIALPARAM_SOCIA"
    "L_DATA_UPDATE\022\021\n\006charid\030\003 \001(\004:\0010\022\023\n\010targ"
    "etid\030\004 \001(\004:\0010\022%\n\006update\030\005 \001(\0132\025.Cmd.Soci"
    "alDataUpdate\022\030\n\tto_global\030\006 \001(\010:\005false\"\242"
    "\002\n\024AddRelationSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.C"
    "md.Command:\017SOCIAL_PROTOCMD\022\?\n\005param\030\002 \001"
    "(\0162\020.Cmd.SocialParam:\036SOCIALPARAM_SOCIAL"
    "_ADDRELATION\022\035\n\004user\030\003 \001(\0132\017.Cmd.SocialU"
    "ser\022\021\n\006destid\030\004 \001(\004:\0010\022;\n\010relation\030\005 \001(\016"
    "2\024.Cmd.ESocialRelation:\023ESOCIALRELATION_"
    "MIN\022\030\n\tto_global\030\006 \001(\010:\005false\022\024\n\005check\030\007"
    " \001(\010:\005false\"\222\002\n\027RemoveRelationSocialCmd\022"
    "*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTO"
    "CMD\022B\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:!SO"
    "CIALPARAM_SOCIAL_REMOVERELATION\022\035\n\004user\030"
    "\003 \001(\0132\017.Cmd.SocialUser\022\021\n\006destid\030\004 \001(\004:\001"
    "0\022;\n\010relation\030\005 \001(\0162\024.Cmd.ESocialRelatio"
    "n:\023ESOCIALRELATION_MIN\022\030\n\tto_global\030\006 \001("
    "\010:\005false\"\324\001\n\030RemoveSocialitySocialCmd\022*\n"
    "\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCM"
    "D\022@\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\037SOCI"
    "ALPARAM_SOCIAL_REMOVESOCIAL\022\035\n\004user\030\003 \001("
    "\0132\017.Cmd.SocialUser\022\021\n\006destid\030\004 \001(\004:\0010\022\030\n"
    "\tto_global\030\005 \001(\010:\005false\"H\n\nSocialItem\022\021\n"
    "\006charid\030\001 \001(\004:\0010\022\023\n\010relation\030\002 \001(\r:\0010\022\022\n"
    "\ncreatetime\030\003 \001(\t\"\267\001\n\027SyncSocialListSoci"
    "alCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL"
    "_PROTOCMD\022=\n\005param\030\002 \001(\0162\020.Cmd.SocialPar"
    "am:\034SOCIALPARAM_SOCIAL_SYNC_LIST\022\021\n\006char"
    "id\030\003 \001(\004:\0010\022\036\n\005items\030\004 \003(\0132\017.Cmd.SocialI"
    "tem\"\313\001\n\031SocialListUpdateSocialCmd\022*\n\003cmd"
    "\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022\?\n"
    "\005param\030\002 \001(\0162\020.Cmd.SocialParam:\036SOCIALPA"
    "RAM_SOCIAL_LIST_UPDATE\022\021\n\006charid\030\003 \001(\004:\001"
    "0\022 \n\007updates\030\004 \003(\0132\017.Cmd.SocialItem\022\014\n\004d"
    "els\030\005 \003(\004\"\211\002\n\033UpdateRelationTimeSocialCm"
    "d\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PRO"
    "TOCMD\022G\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:&"
    "SOCIALPARAM_SOCIAL_UPDATE_RELATIONTIME\022\021"
    "\n\006charid\030\003 \001(\004:\0010\022\023\n\010targetid\030\004 \001(\004:\0010\022\017"
    "\n\004time\030\005 \001(\r:\0010\022<\n\010relation\030\006 \001(\0162\024.Cmd."
    "ESocialRelation:\024ESOCIALRELATION_CHAT\"\257\001"
    "\n\032TeamerQuestUpdateSocialCmd\022*\n\003cmd\030\001 \001("
    "\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022>\n\005para"
    "m\030\002 \001(\0162\020.Cmd.SocialParam:\035SOCIALPARAM_T"
    "EAM_QUEST_UPDATE\022%\n\005quest\030\003 \001(\0132\026.Cmd.Me"
    "mberWantedQuest\"\313\001\n\031GlobalForwardCmdSoci"
    "alCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL"
    "_PROTOCMD\022\?\n\005param\030\002 \001(\0162\020.Cmd.SocialPar"
    "am:\036SOCIALPARAM_GLOBAL_FORWARD_CMD\022\016\n\006ch"
    "arid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030\005 \001(\r\022\026\n"
    "\003dir\030\006 \001(\0162\t.Cmd.EDir\"\267\001\n\032AuthorizeInfoS"
    "yncSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017SOCIAL_PROTOCMD\022@\n\005param\030\002 \001(\0162\020.Cmd.So"
    "cialParam:\037SOCIALPARAM_AUTHORIZE_SYNC_IN"
    "FO\022\021\n\006charid\030\003 \001(\004:\0010\022\030\n\tignorepwd\030\004 \001(\010"
    ":\005false\"\333\001\n\023SyncRedTipSocialCmd\022*\n\003cmd\030\001"
    " \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\0228\n\005p"
    "aram\030\002 \001(\0162\020.Cmd.SocialParam:\027SOCIALPARA"
    "M_SYNC_REDTIP\022\017\n\004dwid\030\003 \001(\004:\0010\022\021\n\006charid"
    "\030\004 \001(\004:\0010\022&\n\003red\030\005 \001(\0162\014.Cmd.ERedSys:\013ER"
    "EDSYS_MIN\022\022\n\003add\030\006 \001(\010:\005false\"\274\001\n\030SendTu"
    "torRewardSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Co"
    "mmand:\017SOCIAL_PROTOCMD\022>\n\005param\030\002 \001(\0162\020."
    "Cmd.SocialParam:\035SOCIALPARAM_SEND_TUTOR_"
    "REWARD\022\021\n\006charid\030\003 \001(\004:\0010\022!\n\007rewards\030\004 \003"
    "(\0132\020.Cmd.TutorReward\"\356\001\n\030SyncTutorReward"
    "SocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SO"
    "CIAL_PROTOCMD\022>\n\005param\030\002 \001(\0162\020.Cmd.Socia"
    "lParam:\035SOCIALPARAM_SYNC_TUTOR_REWARD\022\031\n"
    "\nsearchuser\030\003 \001(\010:\005false\022\021\n\006charid\030\004 \001(\004"
    ":\0010\022 \n\006reward\030\005 \001(\0132\020.Cmd.TutorReward\022\026\n"
    "\013redpointtip\030\006 \001(\004:\0010\"\265\001\n\032GlobalForwardC"
    "mdSocialCmd2\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:"
    "\017SOCIAL_PROTOCMD\022@\n\005param\030\002 \001(\0162\020.Cmd.So"
    "cialParam:\037SOCIALPARAM_GLOBAL_FORWARD_CM"
    "D2\022\016\n\006charid\030\003 \001(\004\022\014\n\004data\030\004 \001(\014\022\013\n\003len\030"
    "\005 \001(\r\"\277\001\n\030CardSceneCreateSocialCmd\022*\n\003cm"
    "d\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PROTOCMD\022\?"
    "\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\036SOCIALP"
    "ARAM_CREATE_PVECARDRAID\022\016\n\006userid\030\003 \001(\004\022"
    "\021\n\006teamid\030\004 \001(\004:\0010\022\023\n\010configid\030\005 \001(\r:\0010\""
    "\254\001\n\026CardSceneSyncSocialCmd\022*\n\003cmd\030\001 \001(\0162"
    "\014.Cmd.Command:\017SOCIAL_PROTOCMD\022>\n\005param\030"
    "\002 \001(\0162\020.Cmd.SocialParam:\035SOCIALPARAM_PVE"
    "CARD_SCENEINFO\022\021\n\006teamid\030\003 \001(\004:\0010\022\023\n\004ope"
    "n\030\004 \001(\010:\005false\"\245\001\n\026ModifyDepositSocialCm"
    "d\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Command:\017SOCIAL_PRO"
    "TOCMD\022;\n\005param\030\002 \001(\0162\020.Cmd.SocialParam:\032"
    "SOCIALPARAM_MODIFY_DEPOSIT\022\021\n\006charid\030\003 \001"
    "(\004:\0010\022\017\n\007command\030\004 \001(\t\"\320\001\n\034TeamRaidScene"
    "CreateSocialCmd\022*\n\003cmd\030\001 \001(\0162\014.Cmd.Comma"
    "nd:\017SOCIAL_PROTOCMD\022<\n\005param\030\002 \001(\0162\020.Cmd"
    ".SocialParam:\033SOCIALPARAM_CREATE_TEAMRAI"
    "D\022\035\n\004user\030\003 \001(\0132\017.Cmd.SocialUser\022\021\n\006team"
    "id\030\004 \001(\004:\0010\022\024\n\traid_type\030\005 \001(\r:\0010\"\302\001\n\032Te"
    "amRaidSceneSyncSocialCmd\022*\n\003cmd\030\001 \001(\0162\014."
    "Cmd.Command:\017SOCIAL_PROTOCMD\022:\n\005param\030\002 "
    "\001(\0162\020.Cmd.SocialParam:\031SOCIALPARAM_SYNC_"
    "TEAMRAID\022\021\n\006teamid\030\003 \001(\004:\0010\022\023\n\004open\030\004 \001("
    "\010:\005false\022\024\n\traid_type\030\005 \001(\r:\0010*\330\016\n\013Socia"
    "lParam\022*\n&SOCIALPARAM_SESSION_FORWARD_SO"
    "CIAL_CMD\020\001\022\037\n\033SOCIALPARAM_FORWARD_TO_USE"
    "R\020\002\022%\n!SOCIALPARAM_FORWARD_TO_USER_SCENE"
    "\020\003\022%\n!SOCIALPARAM_FORWARD_TO_SCENE_USER\020"
    "\004\022\'\n#SOCIALPARAM_FORWARD_TO_SESSION_USER"
    "\020D\022\034\n\030SOCIALPARAM_ONLINESTATUS\020\005\022\036\n\032SOCI"
    "ALPARAM_ADD_OFFLINEMSG\020\006\022\036\n\032SOCIALPARAM_"
    "USER_SYNC_INFO\020\n\022\035\n\031SOCIALPARAM_USER_ADD"
    "_ITEM\020\013\022\035\n\031SOCIALPARAM_USER_DEL_CHAR\020\014\022\037"
    "\n\033SOCIALPARAM_USER_GUILD_INFO\020\016\022\035\n\031SOCIA"
    "LPARAM_CHAT_WORLDMSG\020\025\022\030\n\024SOCIALPARAM_CH"
    "AT_MSG\020\026\022\033\n\027SOCIALPARAM_CREATEGUILD\020\037\022\033\n"
    "\027SOCIALPARAM_GUILDDONATE\020 \022\033\n\027SOCIALPARA"
    "M_GUILD_APPLY\020%\022#\n\037SOCIALPARAM_GUILD_PRO"
    "CESSINVITE\020&\022\"\n\036SOCIALPARAM_GUILD_EXCHAN"
    "GEZONE\020*\022\035\n\031SOCIALPARAM_GUILD_LEVELUP\020,\022"
    "\033\n\027SOCIALPARAM_TEAM_CREATE\0203\022\033\n\027SOCIALPA"
    "RAM_TEAM_INVITE\0204\022\"\n\036SOCIALPARAM_TEAM_PR"
    "OCESSINVITE\0205\022\032\n\026SOCIALPARAM_TEAM_APPLY\020"
    "6\022\037\n\033SOCIALPARAM_TEAM_QUICKENTER\0207\022\033\n\027SO"
    "CIALPARAM_DOJO_CREATE\0208\022\036\n\032SOCIALPARAM_D"
    "OJO_STATE_NTF\0209\022%\n!SOCIALPARAM_TOWER_SYN"
    "C_LEADERINFO\020:\022\"\n\036SOCIALPARAM_TOWER_SCEN"
    "E_CREATE\020;\022$\n SOCIALPARAM_TOWER_SYNC_SCE"
    "NEINFO\020<\022 \n\034SOCIALPARAM_TOWER_SYNC_LAYER"
    "\020=\022\034\n\030SOCIALPARAM_GO_TEAM_RAID\020>\022\035\n\031SOCI"
    "ALPARAM_DEL_TEAM_RAID\020\?\022\031\n\025SOCIALPARAM_S"
    "END_MAIL\020@\022\"\n\036SOCIALPARAM_CREATE_PVECARD"
    "RAID\020A\022!\n\035SOCIALPARAM_PVECARD_SCENEINFO\020"
    "B\022&\n\"SOCIALPARAM_FORWARD_TO_ALL_SESSION\020"
    "C\022\"\n\036SOCIALPARAM_GM_MOVE_GUILD_ZONE\020F\022 \n"
    "\034SOCIALPARAM_TEAM_SEAL_FIHISH\020G\022\"\n\036SOCIA"
    "LPARAM_SOCIAL_DATA_UPDATE\020P\022\"\n\036SOCIALPAR"
    "AM_SOCIAL_ADDRELATION\020Q\022%\n!SOCIALPARAM_S"
    "OCIAL_REMOVERELATION\020R\022#\n\037SOCIALPARAM_SO"
    "CIAL_REMOVESOCIAL\020T\022 \n\034SOCIALPARAM_SOCIA"
    "L_SYNC_LIST\020U\022\"\n\036SOCIALPARAM_SOCIAL_LIST"
    "_UPDATE\020V\022*\n&SOCIALPARAM_SOCIAL_UPDATE_R"
    "ELATIONTIME\020[\022!\n\035SOCIALPARAM_TEAM_QUEST_"
    "UPDATE\020W\022\"\n\036SOCIALPARAM_GLOBAL_FORWARD_C"
    "MD\020X\022#\n\037SOCIALPARAM_AUTHORIZE_SYNC_INFO\020"
    "Z\022\033\n\027SOCIALPARAM_SYNC_REDTIP\020\\\022!\n\035SOCIAL"
    "PARAM_SEND_TUTOR_REWARD\020]\022!\n\035SOCIALPARAM"
    "_SYNC_TUTOR_REWARD\020^\022#\n\037SOCIALPARAM_GLOB"
    "AL_FORWARD_CMD2\020_\022\037\n\033SOCIALPARAM_CREATE_"
    "TEAMRAID\020`\022\035\n\031SOCIALPARAM_SYNC_TEAMRAID\020"
    "a\022\036\n\032SOCIALPARAM_MODIFY_DEPOSIT\020b*\355\001\n\010EC"
    "mdType\022\020\n\014ECMDTYPE_MIN\020\000\022\026\n\022ECMDTYPE_SOC"
    "IALITY\020\001\022\021\n\rECMDTYPE_CHAT\020\002\022\022\n\016ECMDTYPE_"
    "GUILD\020\003\022\021\n\rECMDTYPE_TEAM\020\004\022\021\n\rECMDTYPE_D"
    "OJO\020\005\022\022\n\016ECMDTYPE_TOWER\020\006\022\027\n\023ECMDTYPE_DO"
    "JO_GUILD\020\007\022\024\n\020ECMDTYPE_PVECARD\020\010\022\025\n\021ECMD"
    "TYPE_TEAMRAID\020\t\022\020\n\014ECMDTYPE_MAX\020\n*7\n\nEDO"
    "JOSTATE\022\023\n\017EDOJOSTATE_OPEN\020\001\022\024\n\020EDOJOSTA"
    "TE_CLOSE\020\002*+\n\004EDir\022\021\n\rEDir_ToClient\020\000\022\020\n"
    "\014EDir_ToScene\020\001", 13895);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SocialCmd.proto", &protobuf_RegisterTypes);
  SocialUser::default_instance_ = new SocialUser();
  SessionForwardSocialCmd::default_instance_ = new SessionForwardSocialCmd();
  ForwardToUserSocialCmd::default_instance_ = new ForwardToUserSocialCmd();
  ForwardToUserSceneSocialCmd::default_instance_ = new ForwardToUserSceneSocialCmd();
  ForwardToSceneUserSocialCmd::default_instance_ = new ForwardToSceneUserSocialCmd();
  ForwardToSessionUserSocialCmd::default_instance_ = new ForwardToSessionUserSocialCmd();
  OnlineStatusSocialCmd::default_instance_ = new OnlineStatusSocialCmd();
  AddOfflineMsgSocialCmd::default_instance_ = new AddOfflineMsgSocialCmd();
  UserInfo::default_instance_ = new UserInfo();
  UserInfoSyncSocialCmd::default_instance_ = new UserInfoSyncSocialCmd();
  UserAddItemSocialCmd::default_instance_ = new UserAddItemSocialCmd();
  UserDelSocialCmd::default_instance_ = new UserDelSocialCmd();
  UserGuildInfoSocialCmd::default_instance_ = new UserGuildInfoSocialCmd();
  ChatWorldMsgSocialCmd::default_instance_ = new ChatWorldMsgSocialCmd();
  ChatUser::default_instance_ = new ChatUser();
  ChatSocialCmd::default_instance_ = new ChatSocialCmd();
  CreateGuildSocialCmd::default_instance_ = new CreateGuildSocialCmd();
  GuildDonateSocialCmd::default_instance_ = new GuildDonateSocialCmd();
  GuildApplySocialCmd::default_instance_ = new GuildApplySocialCmd();
  GuildProcessInviteSocialCmd::default_instance_ = new GuildProcessInviteSocialCmd();
  GuildExchangeZoneSocialCmd::default_instance_ = new GuildExchangeZoneSocialCmd();
  TeamCreateSocialCmd::default_instance_ = new TeamCreateSocialCmd();
  TeamInviteSocialCmd::default_instance_ = new TeamInviteSocialCmd();
  TeamProcessInviteSocialCmd::default_instance_ = new TeamProcessInviteSocialCmd();
  TeamApplySocialCmd::default_instance_ = new TeamApplySocialCmd();
  TeamQuickEnterSocialCmd::default_instance_ = new TeamQuickEnterSocialCmd();
  DojoStateNtfSocialCmd::default_instance_ = new DojoStateNtfSocialCmd();
  DojoCreateSocialCmd::default_instance_ = new DojoCreateSocialCmd();
  TowerLeaderInfoSyncSocialCmd::default_instance_ = new TowerLeaderInfoSyncSocialCmd();
  TowerSceneCreateSocialCmd::default_instance_ = new TowerSceneCreateSocialCmd();
  TowerSceneSyncSocialCmd::default_instance_ = new TowerSceneSyncSocialCmd();
  TowerLayerSyncSocialCmd::default_instance_ = new TowerLayerSyncSocialCmd();
  LeaderSealFinishSocialCmd::default_instance_ = new LeaderSealFinishSocialCmd();
  GoTeamRaidSocialCmd::default_instance_ = new GoTeamRaidSocialCmd();
  DelTeamRaidSocialCmd::default_instance_ = new DelTeamRaidSocialCmd();
  SendMailSocialCmd::default_instance_ = new SendMailSocialCmd();
  ForwardToAllSessionSocialCmd::default_instance_ = new ForwardToAllSessionSocialCmd();
  GuildLevelUpSocialCmd::default_instance_ = new GuildLevelUpSocialCmd();
  MoveGuildZoneSocialCmd::default_instance_ = new MoveGuildZoneSocialCmd();
  SocialDataUpdateSocialCmd::default_instance_ = new SocialDataUpdateSocialCmd();
  AddRelationSocialCmd::default_instance_ = new AddRelationSocialCmd();
  RemoveRelationSocialCmd::default_instance_ = new RemoveRelationSocialCmd();
  RemoveSocialitySocialCmd::default_instance_ = new RemoveSocialitySocialCmd();
  SocialItem::default_instance_ = new SocialItem();
  SyncSocialListSocialCmd::default_instance_ = new SyncSocialListSocialCmd();
  SocialListUpdateSocialCmd::default_instance_ = new SocialListUpdateSocialCmd();
  UpdateRelationTimeSocialCmd::default_instance_ = new UpdateRelationTimeSocialCmd();
  TeamerQuestUpdateSocialCmd::default_instance_ = new TeamerQuestUpdateSocialCmd();
  GlobalForwardCmdSocialCmd::default_instance_ = new GlobalForwardCmdSocialCmd();
  AuthorizeInfoSyncSocialCmd::default_instance_ = new AuthorizeInfoSyncSocialCmd();
  SyncRedTipSocialCmd::default_instance_ = new SyncRedTipSocialCmd();
  SendTutorRewardSocialCmd::default_instance_ = new SendTutorRewardSocialCmd();
  SyncTutorRewardSocialCmd::default_instance_ = new SyncTutorRewardSocialCmd();
  GlobalForwardCmdSocialCmd2::default_instance_ = new GlobalForwardCmdSocialCmd2();
  CardSceneCreateSocialCmd::default_instance_ = new CardSceneCreateSocialCmd();
  CardSceneSyncSocialCmd::default_instance_ = new CardSceneSyncSocialCmd();
  ModifyDepositSocialCmd::default_instance_ = new ModifyDepositSocialCmd();
  TeamRaidSceneCreateSocialCmd::default_instance_ = new TeamRaidSceneCreateSocialCmd();
  TeamRaidSceneSyncSocialCmd::default_instance_ = new TeamRaidSceneSyncSocialCmd();
  SocialUser::default_instance_->InitAsDefaultInstance();
  SessionForwardSocialCmd::default_instance_->InitAsDefaultInstance();
  ForwardToUserSocialCmd::default_instance_->InitAsDefaultInstance();
  ForwardToUserSceneSocialCmd::default_instance_->InitAsDefaultInstance();
  ForwardToSceneUserSocialCmd::default_instance_->InitAsDefaultInstance();
  ForwardToSessionUserSocialCmd::default_instance_->InitAsDefaultInstance();
  OnlineStatusSocialCmd::default_instance_->InitAsDefaultInstance();
  AddOfflineMsgSocialCmd::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  UserInfoSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  UserAddItemSocialCmd::default_instance_->InitAsDefaultInstance();
  UserDelSocialCmd::default_instance_->InitAsDefaultInstance();
  UserGuildInfoSocialCmd::default_instance_->InitAsDefaultInstance();
  ChatWorldMsgSocialCmd::default_instance_->InitAsDefaultInstance();
  ChatUser::default_instance_->InitAsDefaultInstance();
  ChatSocialCmd::default_instance_->InitAsDefaultInstance();
  CreateGuildSocialCmd::default_instance_->InitAsDefaultInstance();
  GuildDonateSocialCmd::default_instance_->InitAsDefaultInstance();
  GuildApplySocialCmd::default_instance_->InitAsDefaultInstance();
  GuildProcessInviteSocialCmd::default_instance_->InitAsDefaultInstance();
  GuildExchangeZoneSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamCreateSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamInviteSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamProcessInviteSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamApplySocialCmd::default_instance_->InitAsDefaultInstance();
  TeamQuickEnterSocialCmd::default_instance_->InitAsDefaultInstance();
  DojoStateNtfSocialCmd::default_instance_->InitAsDefaultInstance();
  DojoCreateSocialCmd::default_instance_->InitAsDefaultInstance();
  TowerLeaderInfoSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  TowerSceneCreateSocialCmd::default_instance_->InitAsDefaultInstance();
  TowerSceneSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  TowerLayerSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  LeaderSealFinishSocialCmd::default_instance_->InitAsDefaultInstance();
  GoTeamRaidSocialCmd::default_instance_->InitAsDefaultInstance();
  DelTeamRaidSocialCmd::default_instance_->InitAsDefaultInstance();
  SendMailSocialCmd::default_instance_->InitAsDefaultInstance();
  ForwardToAllSessionSocialCmd::default_instance_->InitAsDefaultInstance();
  GuildLevelUpSocialCmd::default_instance_->InitAsDefaultInstance();
  MoveGuildZoneSocialCmd::default_instance_->InitAsDefaultInstance();
  SocialDataUpdateSocialCmd::default_instance_->InitAsDefaultInstance();
  AddRelationSocialCmd::default_instance_->InitAsDefaultInstance();
  RemoveRelationSocialCmd::default_instance_->InitAsDefaultInstance();
  RemoveSocialitySocialCmd::default_instance_->InitAsDefaultInstance();
  SocialItem::default_instance_->InitAsDefaultInstance();
  SyncSocialListSocialCmd::default_instance_->InitAsDefaultInstance();
  SocialListUpdateSocialCmd::default_instance_->InitAsDefaultInstance();
  UpdateRelationTimeSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamerQuestUpdateSocialCmd::default_instance_->InitAsDefaultInstance();
  GlobalForwardCmdSocialCmd::default_instance_->InitAsDefaultInstance();
  AuthorizeInfoSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  SyncRedTipSocialCmd::default_instance_->InitAsDefaultInstance();
  SendTutorRewardSocialCmd::default_instance_->InitAsDefaultInstance();
  SyncTutorRewardSocialCmd::default_instance_->InitAsDefaultInstance();
  GlobalForwardCmdSocialCmd2::default_instance_->InitAsDefaultInstance();
  CardSceneCreateSocialCmd::default_instance_->InitAsDefaultInstance();
  CardSceneSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  ModifyDepositSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamRaidSceneCreateSocialCmd::default_instance_->InitAsDefaultInstance();
  TeamRaidSceneSyncSocialCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SocialCmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SocialCmd_2eproto {
  StaticDescriptorInitializer_SocialCmd_2eproto() {
    protobuf_AddDesc_SocialCmd_2eproto();
  }
} static_descriptor_initializer_SocialCmd_2eproto_;
const ::google::protobuf::EnumDescriptor* SocialParam_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialParam_descriptor_;
}
bool SocialParam_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 10:
    case 11:
    case 12:
    case 14:
    case 21:
    case 22:
    case 31:
    case 32:
    case 37:
    case 38:
    case 42:
    case 44:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 80:
    case 81:
    case 82:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECmdType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECmdType_descriptor_;
}
bool ECmdType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDOJOSTATE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDOJOSTATE_descriptor_;
}
bool EDOJOSTATE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDir_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDir_descriptor_;
}
bool EDir_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SocialUser::kAccidFieldNumber;
const int SocialUser::kCharidFieldNumber;
const int SocialUser::kZoneidFieldNumber;
const int SocialUser::kMapidFieldNumber;
const int SocialUser::kBaselvFieldNumber;
const int SocialUser::kProfessionFieldNumber;
const int SocialUser::kNameFieldNumber;
#endif  // !_MSC_VER

SocialUser::SocialUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialUser)
}

void SocialUser::InitAsDefaultInstance() {
}

SocialUser::SocialUser(const SocialUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialUser)
}

void SocialUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  accid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  mapid_ = 0u;
  baselv_ = 0u;
  profession_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialUser::~SocialUser() {
  // @@protoc_insertion_point(destructor:Cmd.SocialUser)
  SharedDtor();
}

void SocialUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SocialUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialUser_descriptor_;
}

const SocialUser& SocialUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SocialUser* SocialUser::default_instance_ = NULL;

SocialUser* SocialUser::New() const {
  return new SocialUser;
}

void SocialUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SocialUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(accid_, profession_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 accid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint32 mapid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_baselv;
        break;
      }

      // optional uint32 baselv = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_baselv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &baselv_)));
          set_has_baselv();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional .Cmd.EProfession profession = 6 [default = EPROFESSION_MIN];
      case 6: {
        if (tag == 48) {
         parse_profession:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EProfession_IsValid(value)) {
            set_profession(static_cast< ::Cmd::EProfession >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (tag == 58) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialUser)
  return false;
#undef DO_
}

void SocialUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialUser)
  // optional uint64 accid = 1 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->accid(), output);
  }

  // optional uint64 charid = 2 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mapid(), output);
  }

  // optional uint32 baselv = 5 [default = 0];
  if (has_baselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->baselv(), output);
  }

  // optional .Cmd.EProfession profession = 6 [default = EPROFESSION_MIN];
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->profession(), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialUser)
}

::google::protobuf::uint8* SocialUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialUser)
  // optional uint64 accid = 1 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->accid(), target);
  }

  // optional uint64 charid = 2 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 zoneid = 3 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional uint32 mapid = 4 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mapid(), target);
  }

  // optional uint32 baselv = 5 [default = 0];
  if (has_baselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->baselv(), target);
  }

  // optional .Cmd.EProfession profession = 6 [default = EPROFESSION_MIN];
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->profession(), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialUser)
  return target;
}

int SocialUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 accid = 1 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint64 charid = 2 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 3 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional uint32 mapid = 4 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 baselv = 5 [default = 0];
    if (has_baselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->baselv());
    }

    // optional .Cmd.EProfession profession = 6 [default = EPROFESSION_MIN];
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->profession());
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialUser::MergeFrom(const SocialUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_baselv()) {
      set_baselv(from.baselv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialUser::CopyFrom(const SocialUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialUser::IsInitialized() const {

  return true;
}

void SocialUser::Swap(SocialUser* other) {
  if (other != this) {
    std::swap(accid_, other->accid_);
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(baselv_, other->baselv_);
    std::swap(profession_, other->profession_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialUser_descriptor_;
  metadata.reflection = SocialUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SessionForwardSocialCmd::kCmdFieldNumber;
const int SessionForwardSocialCmd::kParamFieldNumber;
const int SessionForwardSocialCmd::kTypeFieldNumber;
const int SessionForwardSocialCmd::kUserFieldNumber;
const int SessionForwardSocialCmd::kDataFieldNumber;
const int SessionForwardSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

SessionForwardSocialCmd::SessionForwardSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SessionForwardSocialCmd)
}

void SessionForwardSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

SessionForwardSocialCmd::SessionForwardSocialCmd(const SessionForwardSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SessionForwardSocialCmd)
}

void SessionForwardSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 1;
  type_ = 0;
  user_ = NULL;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SessionForwardSocialCmd::~SessionForwardSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SessionForwardSocialCmd)
  SharedDtor();
}

void SessionForwardSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
    delete user_;
  }
}

void SessionForwardSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SessionForwardSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SessionForwardSocialCmd_descriptor_;
}

const SessionForwardSocialCmd& SessionForwardSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SessionForwardSocialCmd* SessionForwardSocialCmd::default_instance_ = NULL;

SessionForwardSocialCmd* SessionForwardSocialCmd::New() const {
  return new SessionForwardSocialCmd;
}

void SessionForwardSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SessionForwardSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(type_, len_);
    cmd_ = 208;
    param_ = 1;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SessionForwardSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SessionForwardSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SESSION_FORWARD_SOCIAL_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ECmdType type = 3 [default = ECMDTYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ECmdType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ECmdType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_len;
        break;
      }

      // optional uint32 len = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SessionForwardSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SessionForwardSocialCmd)
  return false;
#undef DO_
}

void SessionForwardSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SessionForwardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SESSION_FORWARD_SOCIAL_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ECmdType type = 3 [default = ECMDTYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.SocialUser user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional uint32 len = 6 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SessionForwardSocialCmd)
}

::google::protobuf::uint8* SessionForwardSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SessionForwardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SESSION_FORWARD_SOCIAL_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ECmdType type = 3 [default = ECMDTYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.SocialUser user = 4;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional uint32 len = 6 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SessionForwardSocialCmd)
  return target;
}

int SessionForwardSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SESSION_FORWARD_SOCIAL_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ECmdType type = 3 [default = ECMDTYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.SocialUser user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 6 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionForwardSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SessionForwardSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SessionForwardSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SessionForwardSocialCmd::MergeFrom(const SessionForwardSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SessionForwardSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SessionForwardSocialCmd::CopyFrom(const SessionForwardSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionForwardSocialCmd::IsInitialized() const {

  return true;
}

void SessionForwardSocialCmd::Swap(SessionForwardSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(user_, other->user_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SessionForwardSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SessionForwardSocialCmd_descriptor_;
  metadata.reflection = SessionForwardSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardToUserSocialCmd::kCmdFieldNumber;
const int ForwardToUserSocialCmd::kParamFieldNumber;
const int ForwardToUserSocialCmd::kCharidFieldNumber;
const int ForwardToUserSocialCmd::kDataFieldNumber;
const int ForwardToUserSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardToUserSocialCmd::ForwardToUserSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardToUserSocialCmd)
}

void ForwardToUserSocialCmd::InitAsDefaultInstance() {
}

ForwardToUserSocialCmd::ForwardToUserSocialCmd(const ForwardToUserSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardToUserSocialCmd)
}

void ForwardToUserSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 2;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardToUserSocialCmd::~ForwardToUserSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardToUserSocialCmd)
  SharedDtor();
}

void ForwardToUserSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardToUserSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToUserSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardToUserSocialCmd_descriptor_;
}

const ForwardToUserSocialCmd& ForwardToUserSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ForwardToUserSocialCmd* ForwardToUserSocialCmd::default_instance_ = NULL;

ForwardToUserSocialCmd* ForwardToUserSocialCmd::New() const {
  return new ForwardToUserSocialCmd;
}

void ForwardToUserSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 2;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardToUserSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardToUserSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardToUserSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardToUserSocialCmd)
  return false;
#undef DO_
}

void ForwardToUserSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardToUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardToUserSocialCmd)
}

::google::protobuf::uint8* ForwardToUserSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardToUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardToUserSocialCmd)
  return target;
}

int ForwardToUserSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToUserSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardToUserSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardToUserSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardToUserSocialCmd::MergeFrom(const ForwardToUserSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardToUserSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToUserSocialCmd::CopyFrom(const ForwardToUserSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToUserSocialCmd::IsInitialized() const {

  return true;
}

void ForwardToUserSocialCmd::Swap(ForwardToUserSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardToUserSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardToUserSocialCmd_descriptor_;
  metadata.reflection = ForwardToUserSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardToUserSceneSocialCmd::kCmdFieldNumber;
const int ForwardToUserSceneSocialCmd::kParamFieldNumber;
const int ForwardToUserSceneSocialCmd::kCharidFieldNumber;
const int ForwardToUserSceneSocialCmd::kDataFieldNumber;
const int ForwardToUserSceneSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardToUserSceneSocialCmd::ForwardToUserSceneSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardToUserSceneSocialCmd)
}

void ForwardToUserSceneSocialCmd::InitAsDefaultInstance() {
}

ForwardToUserSceneSocialCmd::ForwardToUserSceneSocialCmd(const ForwardToUserSceneSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardToUserSceneSocialCmd)
}

void ForwardToUserSceneSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 3;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardToUserSceneSocialCmd::~ForwardToUserSceneSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardToUserSceneSocialCmd)
  SharedDtor();
}

void ForwardToUserSceneSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardToUserSceneSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToUserSceneSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardToUserSceneSocialCmd_descriptor_;
}

const ForwardToUserSceneSocialCmd& ForwardToUserSceneSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ForwardToUserSceneSocialCmd* ForwardToUserSceneSocialCmd::default_instance_ = NULL;

ForwardToUserSceneSocialCmd* ForwardToUserSceneSocialCmd::New() const {
  return new ForwardToUserSceneSocialCmd;
}

void ForwardToUserSceneSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 3;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardToUserSceneSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardToUserSceneSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER_SCENE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardToUserSceneSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardToUserSceneSocialCmd)
  return false;
#undef DO_
}

void ForwardToUserSceneSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardToUserSceneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER_SCENE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardToUserSceneSocialCmd)
}

::google::protobuf::uint8* ForwardToUserSceneSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardToUserSceneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER_SCENE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardToUserSceneSocialCmd)
  return target;
}

int ForwardToUserSceneSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_USER_SCENE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToUserSceneSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardToUserSceneSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardToUserSceneSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardToUserSceneSocialCmd::MergeFrom(const ForwardToUserSceneSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardToUserSceneSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToUserSceneSocialCmd::CopyFrom(const ForwardToUserSceneSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToUserSceneSocialCmd::IsInitialized() const {

  return true;
}

void ForwardToUserSceneSocialCmd::Swap(ForwardToUserSceneSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardToUserSceneSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardToUserSceneSocialCmd_descriptor_;
  metadata.reflection = ForwardToUserSceneSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardToSceneUserSocialCmd::kCmdFieldNumber;
const int ForwardToSceneUserSocialCmd::kParamFieldNumber;
const int ForwardToSceneUserSocialCmd::kCharidFieldNumber;
const int ForwardToSceneUserSocialCmd::kDataFieldNumber;
const int ForwardToSceneUserSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardToSceneUserSocialCmd::ForwardToSceneUserSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardToSceneUserSocialCmd)
}

void ForwardToSceneUserSocialCmd::InitAsDefaultInstance() {
}

ForwardToSceneUserSocialCmd::ForwardToSceneUserSocialCmd(const ForwardToSceneUserSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardToSceneUserSocialCmd)
}

void ForwardToSceneUserSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 4;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardToSceneUserSocialCmd::~ForwardToSceneUserSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardToSceneUserSocialCmd)
  SharedDtor();
}

void ForwardToSceneUserSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardToSceneUserSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToSceneUserSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardToSceneUserSocialCmd_descriptor_;
}

const ForwardToSceneUserSocialCmd& ForwardToSceneUserSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ForwardToSceneUserSocialCmd* ForwardToSceneUserSocialCmd::default_instance_ = NULL;

ForwardToSceneUserSocialCmd* ForwardToSceneUserSocialCmd::New() const {
  return new ForwardToSceneUserSocialCmd;
}

void ForwardToSceneUserSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 4;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardToSceneUserSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardToSceneUserSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SCENE_USER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardToSceneUserSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardToSceneUserSocialCmd)
  return false;
#undef DO_
}

void ForwardToSceneUserSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardToSceneUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SCENE_USER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardToSceneUserSocialCmd)
}

::google::protobuf::uint8* ForwardToSceneUserSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardToSceneUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SCENE_USER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardToSceneUserSocialCmd)
  return target;
}

int ForwardToSceneUserSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SCENE_USER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToSceneUserSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardToSceneUserSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardToSceneUserSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardToSceneUserSocialCmd::MergeFrom(const ForwardToSceneUserSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardToSceneUserSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToSceneUserSocialCmd::CopyFrom(const ForwardToSceneUserSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToSceneUserSocialCmd::IsInitialized() const {

  return true;
}

void ForwardToSceneUserSocialCmd::Swap(ForwardToSceneUserSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardToSceneUserSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardToSceneUserSocialCmd_descriptor_;
  metadata.reflection = ForwardToSceneUserSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardToSessionUserSocialCmd::kCmdFieldNumber;
const int ForwardToSessionUserSocialCmd::kParamFieldNumber;
const int ForwardToSessionUserSocialCmd::kCharidFieldNumber;
const int ForwardToSessionUserSocialCmd::kDataFieldNumber;
const int ForwardToSessionUserSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardToSessionUserSocialCmd::ForwardToSessionUserSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardToSessionUserSocialCmd)
}

void ForwardToSessionUserSocialCmd::InitAsDefaultInstance() {
}

ForwardToSessionUserSocialCmd::ForwardToSessionUserSocialCmd(const ForwardToSessionUserSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardToSessionUserSocialCmd)
}

void ForwardToSessionUserSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 68;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardToSessionUserSocialCmd::~ForwardToSessionUserSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardToSessionUserSocialCmd)
  SharedDtor();
}

void ForwardToSessionUserSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardToSessionUserSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToSessionUserSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardToSessionUserSocialCmd_descriptor_;
}

const ForwardToSessionUserSocialCmd& ForwardToSessionUserSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ForwardToSessionUserSocialCmd* ForwardToSessionUserSocialCmd::default_instance_ = NULL;

ForwardToSessionUserSocialCmd* ForwardToSessionUserSocialCmd::New() const {
  return new ForwardToSessionUserSocialCmd;
}

void ForwardToSessionUserSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 68;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardToSessionUserSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardToSessionUserSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SESSION_USER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardToSessionUserSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardToSessionUserSocialCmd)
  return false;
#undef DO_
}

void ForwardToSessionUserSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardToSessionUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SESSION_USER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardToSessionUserSocialCmd)
}

::google::protobuf::uint8* ForwardToSessionUserSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardToSessionUserSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SESSION_USER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardToSessionUserSocialCmd)
  return target;
}

int ForwardToSessionUserSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_SESSION_USER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToSessionUserSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardToSessionUserSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardToSessionUserSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardToSessionUserSocialCmd::MergeFrom(const ForwardToSessionUserSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardToSessionUserSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToSessionUserSocialCmd::CopyFrom(const ForwardToSessionUserSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToSessionUserSocialCmd::IsInitialized() const {

  return true;
}

void ForwardToSessionUserSocialCmd::Swap(ForwardToSessionUserSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardToSessionUserSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardToSessionUserSocialCmd_descriptor_;
  metadata.reflection = ForwardToSessionUserSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineStatusSocialCmd::kCmdFieldNumber;
const int OnlineStatusSocialCmd::kParamFieldNumber;
const int OnlineStatusSocialCmd::kUserFieldNumber;
const int OnlineStatusSocialCmd::kOnlineFieldNumber;
#endif  // !_MSC_VER

OnlineStatusSocialCmd::OnlineStatusSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.OnlineStatusSocialCmd)
}

void OnlineStatusSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

OnlineStatusSocialCmd::OnlineStatusSocialCmd(const OnlineStatusSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.OnlineStatusSocialCmd)
}

void OnlineStatusSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 5;
  user_ = NULL;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineStatusSocialCmd::~OnlineStatusSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.OnlineStatusSocialCmd)
  SharedDtor();
}

void OnlineStatusSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void OnlineStatusSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineStatusSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineStatusSocialCmd_descriptor_;
}

const OnlineStatusSocialCmd& OnlineStatusSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

OnlineStatusSocialCmd* OnlineStatusSocialCmd::default_instance_ = NULL;

OnlineStatusSocialCmd* OnlineStatusSocialCmd::New() const {
  return new OnlineStatusSocialCmd;
}

void OnlineStatusSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 5;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineStatusSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.OnlineStatusSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ONLINESTATUS];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_online;
        break;
      }

      // optional bool online = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.OnlineStatusSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.OnlineStatusSocialCmd)
  return false;
#undef DO_
}

void OnlineStatusSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.OnlineStatusSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ONLINESTATUS];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional bool online = 4 [default = false];
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.OnlineStatusSocialCmd)
}

::google::protobuf::uint8* OnlineStatusSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.OnlineStatusSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ONLINESTATUS];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional bool online = 4 [default = false];
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.OnlineStatusSocialCmd)
  return target;
}

int OnlineStatusSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ONLINESTATUS];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional bool online = 4 [default = false];
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineStatusSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineStatusSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineStatusSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineStatusSocialCmd::MergeFrom(const OnlineStatusSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineStatusSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineStatusSocialCmd::CopyFrom(const OnlineStatusSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineStatusSocialCmd::IsInitialized() const {

  return true;
}

void OnlineStatusSocialCmd::Swap(OnlineStatusSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineStatusSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineStatusSocialCmd_descriptor_;
  metadata.reflection = OnlineStatusSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddOfflineMsgSocialCmd::kCmdFieldNumber;
const int AddOfflineMsgSocialCmd::kParamFieldNumber;
const int AddOfflineMsgSocialCmd::kMsgFieldNumber;
#endif  // !_MSC_VER

AddOfflineMsgSocialCmd::AddOfflineMsgSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddOfflineMsgSocialCmd)
}

void AddOfflineMsgSocialCmd::InitAsDefaultInstance() {
  msg_ = const_cast< ::Cmd::OfflineMsg*>(&::Cmd::OfflineMsg::default_instance());
}

AddOfflineMsgSocialCmd::AddOfflineMsgSocialCmd(const AddOfflineMsgSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddOfflineMsgSocialCmd)
}

void AddOfflineMsgSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 6;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddOfflineMsgSocialCmd::~AddOfflineMsgSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddOfflineMsgSocialCmd)
  SharedDtor();
}

void AddOfflineMsgSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void AddOfflineMsgSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddOfflineMsgSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddOfflineMsgSocialCmd_descriptor_;
}

const AddOfflineMsgSocialCmd& AddOfflineMsgSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

AddOfflineMsgSocialCmd* AddOfflineMsgSocialCmd::default_instance_ = NULL;

AddOfflineMsgSocialCmd* AddOfflineMsgSocialCmd::New() const {
  return new AddOfflineMsgSocialCmd;
}

void AddOfflineMsgSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 6;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Cmd::OfflineMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddOfflineMsgSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddOfflineMsgSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ADD_OFFLINEMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional .Cmd.OfflineMsg msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddOfflineMsgSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddOfflineMsgSocialCmd)
  return false;
#undef DO_
}

void AddOfflineMsgSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddOfflineMsgSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ADD_OFFLINEMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.OfflineMsg msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddOfflineMsgSocialCmd)
}

::google::protobuf::uint8* AddOfflineMsgSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddOfflineMsgSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ADD_OFFLINEMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.OfflineMsg msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddOfflineMsgSocialCmd)
  return target;
}

int AddOfflineMsgSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_ADD_OFFLINEMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.OfflineMsg msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddOfflineMsgSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddOfflineMsgSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddOfflineMsgSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddOfflineMsgSocialCmd::MergeFrom(const AddOfflineMsgSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_msg()) {
      mutable_msg()->::Cmd::OfflineMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddOfflineMsgSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddOfflineMsgSocialCmd::CopyFrom(const AddOfflineMsgSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddOfflineMsgSocialCmd::IsInitialized() const {

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void AddOfflineMsgSocialCmd::Swap(AddOfflineMsgSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddOfflineMsgSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddOfflineMsgSocialCmd_descriptor_;
  metadata.reflection = AddOfflineMsgSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kUserFieldNumber;
const int UserInfo::kDatasFieldNumber;
const int UserInfo::kAttrsFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserInfo)
}

void UserInfo::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserInfo)
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:Cmd.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (has_user()) {
    if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
  }
  datas_.Clear();
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.SocialUser user = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .Cmd.UserData datas = 2;
      case 2: {
        if (tag == 18) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // repeated .Cmd.UserAttr attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserInfo)
  // optional .Cmd.SocialUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  // repeated .Cmd.UserData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  // repeated .Cmd.UserAttr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserInfo)
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserInfo)
  // optional .Cmd.SocialUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  // repeated .Cmd.UserData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  // repeated .Cmd.UserAttr attrs = 3;
  for (int i = 0; i < this->attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserInfo)
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.SocialUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  // repeated .Cmd.UserData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  // repeated .Cmd.UserAttr attrs = 3;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  attrs_.MergeFrom(from.attrs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->datas())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->attrs())) return false;
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    datas_.Swap(&other->datas_);
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoSyncSocialCmd::kCmdFieldNumber;
const int UserInfoSyncSocialCmd::kParamFieldNumber;
const int UserInfoSyncSocialCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

UserInfoSyncSocialCmd::UserInfoSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserInfoSyncSocialCmd)
}

void UserInfoSyncSocialCmd::InitAsDefaultInstance() {
  info_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

UserInfoSyncSocialCmd::UserInfoSyncSocialCmd(const UserInfoSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserInfoSyncSocialCmd)
}

void UserInfoSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 10;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoSyncSocialCmd::~UserInfoSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserInfoSyncSocialCmd)
  SharedDtor();
}

void UserInfoSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void UserInfoSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoSyncSocialCmd_descriptor_;
}

const UserInfoSyncSocialCmd& UserInfoSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UserInfoSyncSocialCmd* UserInfoSyncSocialCmd::default_instance_ = NULL;

UserInfoSyncSocialCmd* UserInfoSyncSocialCmd::New() const {
  return new UserInfoSyncSocialCmd;
}

void UserInfoSyncSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 10;
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::UserInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserInfoSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_SYNC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.UserInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserInfoSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserInfoSyncSocialCmd)
  return false;
#undef DO_
}

void UserInfoSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_SYNC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserInfoSyncSocialCmd)
}

::google::protobuf::uint8* UserInfoSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_SYNC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserInfoSyncSocialCmd)
  return target;
}

int UserInfoSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_SYNC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoSyncSocialCmd::MergeFrom(const UserInfoSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::UserInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoSyncSocialCmd::CopyFrom(const UserInfoSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoSyncSocialCmd::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void UserInfoSyncSocialCmd::Swap(UserInfoSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoSyncSocialCmd_descriptor_;
  metadata.reflection = UserInfoSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserAddItemSocialCmd::kCmdFieldNumber;
const int UserAddItemSocialCmd::kParamFieldNumber;
const int UserAddItemSocialCmd::kUserFieldNumber;
const int UserAddItemSocialCmd::kItemsFieldNumber;
const int UserAddItemSocialCmd::kDoublerewardFieldNumber;
const int UserAddItemSocialCmd::kOperaterewardFieldNumber;
#endif  // !_MSC_VER

UserAddItemSocialCmd::UserAddItemSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserAddItemSocialCmd)
}

void UserAddItemSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

UserAddItemSocialCmd::UserAddItemSocialCmd(const UserAddItemSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserAddItemSocialCmd)
}

void UserAddItemSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 11;
  user_ = NULL;
  doublereward_ = 0u;
  operatereward_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserAddItemSocialCmd::~UserAddItemSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserAddItemSocialCmd)
  SharedDtor();
}

void UserAddItemSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void UserAddItemSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserAddItemSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserAddItemSocialCmd_descriptor_;
}

const UserAddItemSocialCmd& UserAddItemSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UserAddItemSocialCmd* UserAddItemSocialCmd::default_instance_ = NULL;

UserAddItemSocialCmd* UserAddItemSocialCmd::New() const {
  return new UserAddItemSocialCmd;
}

void UserAddItemSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UserAddItemSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 55) {
    ZR_(doublereward_, operatereward_);
    cmd_ = 208;
    param_ = 11;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserAddItemSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserAddItemSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_ADD_ITEM];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.ItemInfo items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectTag(40)) goto parse_doublereward;
        break;
      }

      // optional uint32 doublereward = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_doublereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &doublereward_)));
          set_has_doublereward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_operatereward;
        break;
      }

      // optional uint32 operatereward = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_operatereward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operatereward_)));
          set_has_operatereward();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserAddItemSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserAddItemSocialCmd)
  return false;
#undef DO_
}

void UserAddItemSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserAddItemSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_ADD_ITEM];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // repeated .Cmd.ItemInfo items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  // optional uint32 doublereward = 5 [default = 0];
  if (has_doublereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->doublereward(), output);
  }

  // optional uint32 operatereward = 6 [default = 0];
  if (has_operatereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->operatereward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserAddItemSocialCmd)
}

::google::protobuf::uint8* UserAddItemSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserAddItemSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_ADD_ITEM];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // repeated .Cmd.ItemInfo items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  // optional uint32 doublereward = 5 [default = 0];
  if (has_doublereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->doublereward(), target);
  }

  // optional uint32 operatereward = 6 [default = 0];
  if (has_operatereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->operatereward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserAddItemSocialCmd)
  return target;
}

int UserAddItemSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_ADD_ITEM];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint32 doublereward = 5 [default = 0];
    if (has_doublereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->doublereward());
    }

    // optional uint32 operatereward = 6 [default = 0];
    if (has_operatereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operatereward());
    }

  }
  // repeated .Cmd.ItemInfo items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserAddItemSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserAddItemSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserAddItemSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserAddItemSocialCmd::MergeFrom(const UserAddItemSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_doublereward()) {
      set_doublereward(from.doublereward());
    }
    if (from.has_operatereward()) {
      set_operatereward(from.operatereward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserAddItemSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserAddItemSocialCmd::CopyFrom(const UserAddItemSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserAddItemSocialCmd::IsInitialized() const {

  return true;
}

void UserAddItemSocialCmd::Swap(UserAddItemSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    items_.Swap(&other->items_);
    std::swap(doublereward_, other->doublereward_);
    std::swap(operatereward_, other->operatereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserAddItemSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserAddItemSocialCmd_descriptor_;
  metadata.reflection = UserAddItemSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserDelSocialCmd::kCmdFieldNumber;
const int UserDelSocialCmd::kParamFieldNumber;
const int UserDelSocialCmd::kCharidFieldNumber;
#endif  // !_MSC_VER

UserDelSocialCmd::UserDelSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserDelSocialCmd)
}

void UserDelSocialCmd::InitAsDefaultInstance() {
}

UserDelSocialCmd::UserDelSocialCmd(const UserDelSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserDelSocialCmd)
}

void UserDelSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 12;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserDelSocialCmd::~UserDelSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserDelSocialCmd)
  SharedDtor();
}

void UserDelSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserDelSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserDelSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserDelSocialCmd_descriptor_;
}

const UserDelSocialCmd& UserDelSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UserDelSocialCmd* UserDelSocialCmd::default_instance_ = NULL;

UserDelSocialCmd* UserDelSocialCmd::New() const {
  return new UserDelSocialCmd;
}

void UserDelSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 12;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserDelSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserDelSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_DEL_CHAR];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserDelSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserDelSocialCmd)
  return false;
#undef DO_
}

void UserDelSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserDelSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_DEL_CHAR];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserDelSocialCmd)
}

::google::protobuf::uint8* UserDelSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserDelSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_DEL_CHAR];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserDelSocialCmd)
  return target;
}

int UserDelSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_DEL_CHAR];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserDelSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserDelSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserDelSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserDelSocialCmd::MergeFrom(const UserDelSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserDelSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserDelSocialCmd::CopyFrom(const UserDelSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserDelSocialCmd::IsInitialized() const {

  return true;
}

void UserDelSocialCmd::Swap(UserDelSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserDelSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserDelSocialCmd_descriptor_;
  metadata.reflection = UserDelSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserGuildInfoSocialCmd::kCmdFieldNumber;
const int UserGuildInfoSocialCmd::kParamFieldNumber;
const int UserGuildInfoSocialCmd::kCharidFieldNumber;
const int UserGuildInfoSocialCmd::kNameFieldNumber;
const int UserGuildInfoSocialCmd::kPortraitFieldNumber;
#endif  // !_MSC_VER

UserGuildInfoSocialCmd::UserGuildInfoSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UserGuildInfoSocialCmd)
}

void UserGuildInfoSocialCmd::InitAsDefaultInstance() {
}

UserGuildInfoSocialCmd::UserGuildInfoSocialCmd(const UserGuildInfoSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UserGuildInfoSocialCmd)
}

void UserGuildInfoSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 14;
  charid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  portrait_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserGuildInfoSocialCmd::~UserGuildInfoSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UserGuildInfoSocialCmd)
  SharedDtor();
}

void UserGuildInfoSocialCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete portrait_;
  }
  if (this != default_instance_) {
  }
}

void UserGuildInfoSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserGuildInfoSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserGuildInfoSocialCmd_descriptor_;
}

const UserGuildInfoSocialCmd& UserGuildInfoSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UserGuildInfoSocialCmd* UserGuildInfoSocialCmd::default_instance_ = NULL;

UserGuildInfoSocialCmd* UserGuildInfoSocialCmd::New() const {
  return new UserGuildInfoSocialCmd;
}

void UserGuildInfoSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 14;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_portrait()) {
      if (portrait_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        portrait_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserGuildInfoSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UserGuildInfoSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_GUILD_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_portrait;
        break;
      }

      // optional string portrait = 5;
      case 5: {
        if (tag == 42) {
         parse_portrait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portrait()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->portrait().data(), this->portrait().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "portrait");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UserGuildInfoSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UserGuildInfoSocialCmd)
  return false;
#undef DO_
}

void UserGuildInfoSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UserGuildInfoSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_GUILD_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->portrait(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UserGuildInfoSocialCmd)
}

::google::protobuf::uint8* UserGuildInfoSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UserGuildInfoSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_GUILD_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional string portrait = 5;
  if (has_portrait()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->portrait().data(), this->portrait().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "portrait");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->portrait(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UserGuildInfoSocialCmd)
  return target;
}

int UserGuildInfoSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_USER_GUILD_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string portrait = 5;
    if (has_portrait()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portrait());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserGuildInfoSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserGuildInfoSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserGuildInfoSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserGuildInfoSocialCmd::MergeFrom(const UserGuildInfoSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_portrait()) {
      set_portrait(from.portrait());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserGuildInfoSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserGuildInfoSocialCmd::CopyFrom(const UserGuildInfoSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserGuildInfoSocialCmd::IsInitialized() const {

  return true;
}

void UserGuildInfoSocialCmd::Swap(UserGuildInfoSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(portrait_, other->portrait_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserGuildInfoSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserGuildInfoSocialCmd_descriptor_;
  metadata.reflection = UserGuildInfoSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatWorldMsgSocialCmd::kCmdFieldNumber;
const int ChatWorldMsgSocialCmd::kParamFieldNumber;
const int ChatWorldMsgSocialCmd::kMsgFieldNumber;
#endif  // !_MSC_VER

ChatWorldMsgSocialCmd::ChatWorldMsgSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatWorldMsgSocialCmd)
}

void ChatWorldMsgSocialCmd::InitAsDefaultInstance() {
  msg_ = const_cast< ::Cmd::SysMsg*>(&::Cmd::SysMsg::default_instance());
}

ChatWorldMsgSocialCmd::ChatWorldMsgSocialCmd(const ChatWorldMsgSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatWorldMsgSocialCmd)
}

void ChatWorldMsgSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 21;
  msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatWorldMsgSocialCmd::~ChatWorldMsgSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatWorldMsgSocialCmd)
  SharedDtor();
}

void ChatWorldMsgSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void ChatWorldMsgSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatWorldMsgSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatWorldMsgSocialCmd_descriptor_;
}

const ChatWorldMsgSocialCmd& ChatWorldMsgSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ChatWorldMsgSocialCmd* ChatWorldMsgSocialCmd::default_instance_ = NULL;

ChatWorldMsgSocialCmd* ChatWorldMsgSocialCmd::New() const {
  return new ChatWorldMsgSocialCmd;
}

void ChatWorldMsgSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 21;
    if (has_msg()) {
      if (msg_ != NULL) msg_->::Cmd::SysMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatWorldMsgSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatWorldMsgSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_WORLDMSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional .Cmd.SysMsg msg = 3;
      case 3: {
        if (tag == 26) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatWorldMsgSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatWorldMsgSocialCmd)
  return false;
#undef DO_
}

void ChatWorldMsgSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatWorldMsgSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_WORLDMSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SysMsg msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatWorldMsgSocialCmd)
}

::google::protobuf::uint8* ChatWorldMsgSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatWorldMsgSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_WORLDMSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SysMsg msg = 3;
  if (has_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatWorldMsgSocialCmd)
  return target;
}

int ChatWorldMsgSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_WORLDMSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SysMsg msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatWorldMsgSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatWorldMsgSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatWorldMsgSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatWorldMsgSocialCmd::MergeFrom(const ChatWorldMsgSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_msg()) {
      mutable_msg()->::Cmd::SysMsg::MergeFrom(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatWorldMsgSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatWorldMsgSocialCmd::CopyFrom(const ChatWorldMsgSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatWorldMsgSocialCmd::IsInitialized() const {

  return true;
}

void ChatWorldMsgSocialCmd::Swap(ChatWorldMsgSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatWorldMsgSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatWorldMsgSocialCmd_descriptor_;
  metadata.reflection = ChatWorldMsgSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatUser::kCharidFieldNumber;
const int ChatUser::kZoneidFieldNumber;
#endif  // !_MSC_VER

ChatUser::ChatUser()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatUser)
}

void ChatUser::InitAsDefaultInstance() {
}

ChatUser::ChatUser(const ChatUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatUser)
}

void ChatUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatUser::~ChatUser() {
  // @@protoc_insertion_point(destructor:Cmd.ChatUser)
  SharedDtor();
}

void ChatUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChatUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatUser_descriptor_;
}

const ChatUser& ChatUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ChatUser* ChatUser::default_instance_ = NULL;

ChatUser* ChatUser::New() const {
  return new ChatUser;
}

void ChatUser::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatUser*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(charid_, zoneid_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatUser)
  return false;
#undef DO_
}

void ChatUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatUser)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatUser)
}

::google::protobuf::uint8* ChatUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatUser)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 zoneid = 2 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatUser)
  return target;
}

int ChatUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneid = 2 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatUser::MergeFrom(const ChatUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatUser::CopyFrom(const ChatUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatUser::IsInitialized() const {

  return true;
}

void ChatUser::Swap(ChatUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatUser_descriptor_;
  metadata.reflection = ChatUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChatSocialCmd::kCmdFieldNumber;
const int ChatSocialCmd::kParamFieldNumber;
const int ChatSocialCmd::kRetFieldNumber;
const int ChatSocialCmd::kTargetsFieldNumber;
const int ChatSocialCmd::kAccidFieldNumber;
const int ChatSocialCmd::kPlatformidFieldNumber;
const int ChatSocialCmd::kToGlobalFieldNumber;
#endif  // !_MSC_VER

ChatSocialCmd::ChatSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ChatSocialCmd)
}

void ChatSocialCmd::InitAsDefaultInstance() {
  ret_ = const_cast< ::Cmd::ChatRetCmd*>(&::Cmd::ChatRetCmd::default_instance());
}

ChatSocialCmd::ChatSocialCmd(const ChatSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ChatSocialCmd)
}

void ChatSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 22;
  ret_ = NULL;
  accid_ = GOOGLE_ULONGLONG(0);
  platformid_ = 0u;
  to_global_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatSocialCmd::~ChatSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ChatSocialCmd)
  SharedDtor();
}

void ChatSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete ret_;
  }
}

void ChatSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatSocialCmd_descriptor_;
}

const ChatSocialCmd& ChatSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ChatSocialCmd* ChatSocialCmd::default_instance_ = NULL;

ChatSocialCmd* ChatSocialCmd::New() const {
  return new ChatSocialCmd;
}

void ChatSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ChatSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(accid_, to_global_);
    cmd_ = 208;
    param_ = 22;
    if (has_ret()) {
      if (ret_ != NULL) ret_->::Cmd::ChatRetCmd::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  targets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ChatSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_MSG];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ret;
        break;
      }

      // optional .Cmd.ChatRetCmd ret = 3;
      case 3: {
        if (tag == 26) {
         parse_ret:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        break;
      }

      // repeated .Cmd.ChatUser targets = 4;
      case 4: {
        if (tag == 34) {
         parse_targets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_targets()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_targets;
        if (input->ExpectTag(40)) goto parse_accid;
        break;
      }

      // optional uint64 accid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_accid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &accid_)));
          set_has_accid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_platformid;
        break;
      }

      // optional uint32 platformid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_platformid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &platformid_)));
          set_has_platformid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_to_global;
        break;
      }

      // optional bool to_global = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_to_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_global_)));
          set_has_to_global();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ChatSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ChatSocialCmd)
  return false;
#undef DO_
}

void ChatSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ChatSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_MSG];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ChatRetCmd ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ret(), output);
  }

  // repeated .Cmd.ChatUser targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->targets(i), output);
  }

  // optional uint64 accid = 5 [default = 0];
  if (has_accid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->accid(), output);
  }

  // optional uint32 platformid = 6 [default = 0];
  if (has_platformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->platformid(), output);
  }

  // optional bool to_global = 7 [default = false];
  if (has_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->to_global(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ChatSocialCmd)
}

::google::protobuf::uint8* ChatSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ChatSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_MSG];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ChatRetCmd ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ret(), target);
  }

  // repeated .Cmd.ChatUser targets = 4;
  for (int i = 0; i < this->targets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->targets(i), target);
  }

  // optional uint64 accid = 5 [default = 0];
  if (has_accid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->accid(), target);
  }

  // optional uint32 platformid = 6 [default = 0];
  if (has_platformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->platformid(), target);
  }

  // optional bool to_global = 7 [default = false];
  if (has_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->to_global(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ChatSocialCmd)
  return target;
}

int ChatSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CHAT_MSG];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ChatRetCmd ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ret());
    }

    // optional uint64 accid = 5 [default = 0];
    if (has_accid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->accid());
    }

    // optional uint32 platformid = 6 [default = 0];
    if (has_platformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->platformid());
    }

    // optional bool to_global = 7 [default = false];
    if (has_to_global()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Cmd.ChatUser targets = 4;
  total_size += 1 * this->targets_size();
  for (int i = 0; i < this->targets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->targets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatSocialCmd::MergeFrom(const ChatSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  targets_.MergeFrom(from.targets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_ret()) {
      mutable_ret()->::Cmd::ChatRetCmd::MergeFrom(from.ret());
    }
    if (from.has_accid()) {
      set_accid(from.accid());
    }
    if (from.has_platformid()) {
      set_platformid(from.platformid());
    }
    if (from.has_to_global()) {
      set_to_global(from.to_global());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatSocialCmd::CopyFrom(const ChatSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatSocialCmd::IsInitialized() const {

  if (has_ret()) {
    if (!this->ret().IsInitialized()) return false;
  }
  return true;
}

void ChatSocialCmd::Swap(ChatSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(ret_, other->ret_);
    targets_.Swap(&other->targets_);
    std::swap(accid_, other->accid_);
    std::swap(platformid_, other->platformid_);
    std::swap(to_global_, other->to_global_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatSocialCmd_descriptor_;
  metadata.reflection = ChatSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateGuildSocialCmd::kCmdFieldNumber;
const int CreateGuildSocialCmd::kParamFieldNumber;
const int CreateGuildSocialCmd::kUserFieldNumber;
const int CreateGuildSocialCmd::kMsgidFieldNumber;
const int CreateGuildSocialCmd::kNameFieldNumber;
#endif  // !_MSC_VER

CreateGuildSocialCmd::CreateGuildSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CreateGuildSocialCmd)
}

void CreateGuildSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

CreateGuildSocialCmd::CreateGuildSocialCmd(const CreateGuildSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CreateGuildSocialCmd)
}

void CreateGuildSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 31;
  user_ = NULL;
  msgid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateGuildSocialCmd::~CreateGuildSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CreateGuildSocialCmd)
  SharedDtor();
}

void CreateGuildSocialCmd::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete user_;
  }
}

void CreateGuildSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateGuildSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateGuildSocialCmd_descriptor_;
}

const CreateGuildSocialCmd& CreateGuildSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

CreateGuildSocialCmd* CreateGuildSocialCmd::default_instance_ = NULL;

CreateGuildSocialCmd* CreateGuildSocialCmd::New() const {
  return new CreateGuildSocialCmd;
}

void CreateGuildSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 31;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
    msgid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateGuildSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CreateGuildSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATEGUILD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CreateGuildSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CreateGuildSocialCmd)
  return false;
#undef DO_
}

void CreateGuildSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CreateGuildSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATEGUILD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->msgid(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CreateGuildSocialCmd)
}

::google::protobuf::uint8* CreateGuildSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CreateGuildSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATEGUILD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint32 msgid = 4 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->msgid(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CreateGuildSocialCmd)
  return target;
}

int CreateGuildSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATEGUILD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint32 msgid = 4 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateGuildSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateGuildSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateGuildSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateGuildSocialCmd::MergeFrom(const CreateGuildSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateGuildSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateGuildSocialCmd::CopyFrom(const CreateGuildSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateGuildSocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void CreateGuildSocialCmd::Swap(CreateGuildSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(msgid_, other->msgid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateGuildSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateGuildSocialCmd_descriptor_;
  metadata.reflection = CreateGuildSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildDonateSocialCmd::kCmdFieldNumber;
const int GuildDonateSocialCmd::kParamFieldNumber;
const int GuildDonateSocialCmd::kUserFieldNumber;
const int GuildDonateSocialCmd::kItemFieldNumber;
const int GuildDonateSocialCmd::kMsgidFieldNumber;
#endif  // !_MSC_VER

GuildDonateSocialCmd::GuildDonateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildDonateSocialCmd)
}

void GuildDonateSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
  item_ = const_cast< ::Cmd::DonateItem*>(&::Cmd::DonateItem::default_instance());
}

GuildDonateSocialCmd::GuildDonateSocialCmd(const GuildDonateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildDonateSocialCmd)
}

void GuildDonateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 32;
  user_ = NULL;
  item_ = NULL;
  msgid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildDonateSocialCmd::~GuildDonateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildDonateSocialCmd)
  SharedDtor();
}

void GuildDonateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete item_;
  }
}

void GuildDonateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildDonateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildDonateSocialCmd_descriptor_;
}

const GuildDonateSocialCmd& GuildDonateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GuildDonateSocialCmd* GuildDonateSocialCmd::default_instance_ = NULL;

GuildDonateSocialCmd* GuildDonateSocialCmd::New() const {
  return new GuildDonateSocialCmd;
}

void GuildDonateSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 32;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    if (has_item()) {
      if (item_ != NULL) item_->::Cmd::DonateItem::Clear();
    }
    msgid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildDonateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildDonateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILDDONATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // optional .Cmd.DonateItem item = 4;
      case 4: {
        if (tag == 34) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_msgid;
        break;
      }

      // optional uint32 msgid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_msgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgid_)));
          set_has_msgid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildDonateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildDonateSocialCmd)
  return false;
#undef DO_
}

void GuildDonateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildDonateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILDDONATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .Cmd.DonateItem item = 4;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(), output);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->msgid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildDonateSocialCmd)
}

::google::protobuf::uint8* GuildDonateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildDonateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILDDONATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .Cmd.DonateItem item = 4;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(), target);
  }

  // optional uint32 msgid = 5 [default = 0];
  if (has_msgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->msgid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildDonateSocialCmd)
  return target;
}

int GuildDonateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILDDONATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.DonateItem item = 4;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional uint32 msgid = 5 [default = 0];
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildDonateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildDonateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildDonateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildDonateSocialCmd::MergeFrom(const GuildDonateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_item()) {
      mutable_item()->::Cmd::DonateItem::MergeFrom(from.item());
    }
    if (from.has_msgid()) {
      set_msgid(from.msgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildDonateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildDonateSocialCmd::CopyFrom(const GuildDonateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildDonateSocialCmd::IsInitialized() const {

  return true;
}

void GuildDonateSocialCmd::Swap(GuildDonateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(item_, other->item_);
    std::swap(msgid_, other->msgid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildDonateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildDonateSocialCmd_descriptor_;
  metadata.reflection = GuildDonateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildApplySocialCmd::kCmdFieldNumber;
const int GuildApplySocialCmd::kParamFieldNumber;
const int GuildApplySocialCmd::kUserFieldNumber;
const int GuildApplySocialCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildApplySocialCmd::GuildApplySocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildApplySocialCmd)
}

void GuildApplySocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

GuildApplySocialCmd::GuildApplySocialCmd(const GuildApplySocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildApplySocialCmd)
}

void GuildApplySocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 37;
  user_ = NULL;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildApplySocialCmd::~GuildApplySocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildApplySocialCmd)
  SharedDtor();
}

void GuildApplySocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void GuildApplySocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildApplySocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildApplySocialCmd_descriptor_;
}

const GuildApplySocialCmd& GuildApplySocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GuildApplySocialCmd* GuildApplySocialCmd::default_instance_ = NULL;

GuildApplySocialCmd* GuildApplySocialCmd::New() const {
  return new GuildApplySocialCmd;
}

void GuildApplySocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 37;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
    guildid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildApplySocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildApplySocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_APPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildApplySocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildApplySocialCmd)
  return false;
#undef DO_
}

void GuildApplySocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildApplySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_APPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildApplySocialCmd)
}

::google::protobuf::uint8* GuildApplySocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildApplySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_APPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildApplySocialCmd)
  return target;
}

int GuildApplySocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_APPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildApplySocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildApplySocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildApplySocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildApplySocialCmd::MergeFrom(const GuildApplySocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildApplySocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildApplySocialCmd::CopyFrom(const GuildApplySocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildApplySocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void GuildApplySocialCmd::Swap(GuildApplySocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildApplySocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildApplySocialCmd_descriptor_;
  metadata.reflection = GuildApplySocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildProcessInviteSocialCmd::kCmdFieldNumber;
const int GuildProcessInviteSocialCmd::kParamFieldNumber;
const int GuildProcessInviteSocialCmd::kUserFieldNumber;
const int GuildProcessInviteSocialCmd::kActionFieldNumber;
const int GuildProcessInviteSocialCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

GuildProcessInviteSocialCmd::GuildProcessInviteSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildProcessInviteSocialCmd)
}

void GuildProcessInviteSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

GuildProcessInviteSocialCmd::GuildProcessInviteSocialCmd(const GuildProcessInviteSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildProcessInviteSocialCmd)
}

void GuildProcessInviteSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 38;
  user_ = NULL;
  action_ = 0;
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildProcessInviteSocialCmd::~GuildProcessInviteSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildProcessInviteSocialCmd)
  SharedDtor();
}

void GuildProcessInviteSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void GuildProcessInviteSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildProcessInviteSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildProcessInviteSocialCmd_descriptor_;
}

const GuildProcessInviteSocialCmd& GuildProcessInviteSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GuildProcessInviteSocialCmd* GuildProcessInviteSocialCmd::default_instance_ = NULL;

GuildProcessInviteSocialCmd* GuildProcessInviteSocialCmd::New() const {
  return new GuildProcessInviteSocialCmd;
}

void GuildProcessInviteSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildProcessInviteSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(guildid_, action_);
    cmd_ = 208;
    param_ = 38;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildProcessInviteSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildProcessInviteSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_PROCESSINVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_action;
        break;
      }

      // optional .Cmd.EGuildAction action = 4 [default = EGUILDACTION_MIN];
      case 4: {
        if (tag == 32) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EGuildAction_IsValid(value)) {
            set_action(static_cast< ::Cmd::EGuildAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildProcessInviteSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildProcessInviteSocialCmd)
  return false;
#undef DO_
}

void GuildProcessInviteSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildProcessInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_PROCESSINVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .Cmd.EGuildAction action = 4 [default = EGUILDACTION_MIN];
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildProcessInviteSocialCmd)
}

::google::protobuf::uint8* GuildProcessInviteSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildProcessInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_PROCESSINVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .Cmd.EGuildAction action = 4 [default = EGUILDACTION_MIN];
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // optional uint64 guildid = 5 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildProcessInviteSocialCmd)
  return target;
}

int GuildProcessInviteSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_PROCESSINVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.EGuildAction action = 4 [default = EGUILDACTION_MIN];
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional uint64 guildid = 5 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildProcessInviteSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildProcessInviteSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildProcessInviteSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildProcessInviteSocialCmd::MergeFrom(const GuildProcessInviteSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildProcessInviteSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildProcessInviteSocialCmd::CopyFrom(const GuildProcessInviteSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildProcessInviteSocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void GuildProcessInviteSocialCmd::Swap(GuildProcessInviteSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(action_, other->action_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildProcessInviteSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildProcessInviteSocialCmd_descriptor_;
  metadata.reflection = GuildProcessInviteSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildExchangeZoneSocialCmd::kCmdFieldNumber;
const int GuildExchangeZoneSocialCmd::kParamFieldNumber;
const int GuildExchangeZoneSocialCmd::kUserFieldNumber;
const int GuildExchangeZoneSocialCmd::kZoneidFieldNumber;
#endif  // !_MSC_VER

GuildExchangeZoneSocialCmd::GuildExchangeZoneSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildExchangeZoneSocialCmd)
}

void GuildExchangeZoneSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

GuildExchangeZoneSocialCmd::GuildExchangeZoneSocialCmd(const GuildExchangeZoneSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildExchangeZoneSocialCmd)
}

void GuildExchangeZoneSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 42;
  user_ = NULL;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildExchangeZoneSocialCmd::~GuildExchangeZoneSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildExchangeZoneSocialCmd)
  SharedDtor();
}

void GuildExchangeZoneSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void GuildExchangeZoneSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildExchangeZoneSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildExchangeZoneSocialCmd_descriptor_;
}

const GuildExchangeZoneSocialCmd& GuildExchangeZoneSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GuildExchangeZoneSocialCmd* GuildExchangeZoneSocialCmd::default_instance_ = NULL;

GuildExchangeZoneSocialCmd* GuildExchangeZoneSocialCmd::New() const {
  return new GuildExchangeZoneSocialCmd;
}

void GuildExchangeZoneSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 42;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildExchangeZoneSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildExchangeZoneSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_EXCHANGEZONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildExchangeZoneSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildExchangeZoneSocialCmd)
  return false;
#undef DO_
}

void GuildExchangeZoneSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildExchangeZoneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_EXCHANGEZONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildExchangeZoneSocialCmd)
}

::google::protobuf::uint8* GuildExchangeZoneSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildExchangeZoneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_EXCHANGEZONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint32 zoneid = 4 [default = 0];
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildExchangeZoneSocialCmd)
  return target;
}

int GuildExchangeZoneSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_EXCHANGEZONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint32 zoneid = 4 [default = 0];
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildExchangeZoneSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildExchangeZoneSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildExchangeZoneSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildExchangeZoneSocialCmd::MergeFrom(const GuildExchangeZoneSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildExchangeZoneSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildExchangeZoneSocialCmd::CopyFrom(const GuildExchangeZoneSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildExchangeZoneSocialCmd::IsInitialized() const {

  return true;
}

void GuildExchangeZoneSocialCmd::Swap(GuildExchangeZoneSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildExchangeZoneSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildExchangeZoneSocialCmd_descriptor_;
  metadata.reflection = GuildExchangeZoneSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamCreateSocialCmd::kCmdFieldNumber;
const int TeamCreateSocialCmd::kParamFieldNumber;
const int TeamCreateSocialCmd::kUserFieldNumber;
const int TeamCreateSocialCmd::kTeamFieldNumber;
#endif  // !_MSC_VER

TeamCreateSocialCmd::TeamCreateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamCreateSocialCmd)
}

void TeamCreateSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
  team_ = const_cast< ::Cmd::CreateTeam*>(&::Cmd::CreateTeam::default_instance());
}

TeamCreateSocialCmd::TeamCreateSocialCmd(const TeamCreateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamCreateSocialCmd)
}

void TeamCreateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 51;
  user_ = NULL;
  team_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamCreateSocialCmd::~TeamCreateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamCreateSocialCmd)
  SharedDtor();
}

void TeamCreateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete team_;
  }
}

void TeamCreateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamCreateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamCreateSocialCmd_descriptor_;
}

const TeamCreateSocialCmd& TeamCreateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamCreateSocialCmd* TeamCreateSocialCmd::default_instance_ = NULL;

TeamCreateSocialCmd* TeamCreateSocialCmd::New() const {
  return new TeamCreateSocialCmd;
}

void TeamCreateSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 51;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
    if (has_team()) {
      if (team_ != NULL) team_->::Cmd::CreateTeam::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamCreateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamCreateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_CREATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_team;
        break;
      }

      // optional .Cmd.CreateTeam team = 4;
      case 4: {
        if (tag == 34) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_team()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamCreateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamCreateSocialCmd)
  return false;
#undef DO_
}

void TeamCreateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_CREATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .Cmd.CreateTeam team = 4;
  if (has_team()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamCreateSocialCmd)
}

::google::protobuf::uint8* TeamCreateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_CREATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .Cmd.CreateTeam team = 4;
  if (has_team()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamCreateSocialCmd)
  return target;
}

int TeamCreateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_CREATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.CreateTeam team = 4;
    if (has_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamCreateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamCreateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamCreateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamCreateSocialCmd::MergeFrom(const TeamCreateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_team()) {
      mutable_team()->::Cmd::CreateTeam::MergeFrom(from.team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamCreateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamCreateSocialCmd::CopyFrom(const TeamCreateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamCreateSocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void TeamCreateSocialCmd::Swap(TeamCreateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(team_, other->team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamCreateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamCreateSocialCmd_descriptor_;
  metadata.reflection = TeamCreateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInviteSocialCmd::kCmdFieldNumber;
const int TeamInviteSocialCmd::kParamFieldNumber;
const int TeamInviteSocialCmd::kInviteFieldNumber;
const int TeamInviteSocialCmd::kBeinviteFieldNumber;
#endif  // !_MSC_VER

TeamInviteSocialCmd::TeamInviteSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamInviteSocialCmd)
}

void TeamInviteSocialCmd::InitAsDefaultInstance() {
  invite_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
  beinvite_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

TeamInviteSocialCmd::TeamInviteSocialCmd(const TeamInviteSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamInviteSocialCmd)
}

void TeamInviteSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 52;
  invite_ = NULL;
  beinvite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInviteSocialCmd::~TeamInviteSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamInviteSocialCmd)
  SharedDtor();
}

void TeamInviteSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete invite_;
    delete beinvite_;
  }
}

void TeamInviteSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInviteSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInviteSocialCmd_descriptor_;
}

const TeamInviteSocialCmd& TeamInviteSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamInviteSocialCmd* TeamInviteSocialCmd::default_instance_ = NULL;

TeamInviteSocialCmd* TeamInviteSocialCmd::New() const {
  return new TeamInviteSocialCmd;
}

void TeamInviteSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 52;
    if (has_invite()) {
      if (invite_ != NULL) invite_->::Cmd::UserInfo::Clear();
    }
    if (has_beinvite()) {
      if (beinvite_ != NULL) beinvite_->::Cmd::SocialUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInviteSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamInviteSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_INVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_invite;
        break;
      }

      // optional .Cmd.UserInfo invite = 3;
      case 3: {
        if (tag == 26) {
         parse_invite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_beinvite;
        break;
      }

      // optional .Cmd.SocialUser beinvite = 4;
      case 4: {
        if (tag == 34) {
         parse_beinvite:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beinvite()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamInviteSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamInviteSocialCmd)
  return false;
#undef DO_
}

void TeamInviteSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_INVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo invite = 3;
  if (has_invite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->invite(), output);
  }

  // optional .Cmd.SocialUser beinvite = 4;
  if (has_beinvite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->beinvite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamInviteSocialCmd)
}

::google::protobuf::uint8* TeamInviteSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_INVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo invite = 3;
  if (has_invite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->invite(), target);
  }

  // optional .Cmd.SocialUser beinvite = 4;
  if (has_beinvite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->beinvite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamInviteSocialCmd)
  return target;
}

int TeamInviteSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_INVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo invite = 3;
    if (has_invite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invite());
    }

    // optional .Cmd.SocialUser beinvite = 4;
    if (has_beinvite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beinvite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInviteSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInviteSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInviteSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInviteSocialCmd::MergeFrom(const TeamInviteSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_invite()) {
      mutable_invite()->::Cmd::UserInfo::MergeFrom(from.invite());
    }
    if (from.has_beinvite()) {
      mutable_beinvite()->::Cmd::SocialUser::MergeFrom(from.beinvite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInviteSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInviteSocialCmd::CopyFrom(const TeamInviteSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInviteSocialCmd::IsInitialized() const {

  if (has_invite()) {
    if (!this->invite().IsInitialized()) return false;
  }
  return true;
}

void TeamInviteSocialCmd::Swap(TeamInviteSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(invite_, other->invite_);
    std::swap(beinvite_, other->beinvite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInviteSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInviteSocialCmd_descriptor_;
  metadata.reflection = TeamInviteSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamProcessInviteSocialCmd::kCmdFieldNumber;
const int TeamProcessInviteSocialCmd::kParamFieldNumber;
const int TeamProcessInviteSocialCmd::kTypeFieldNumber;
const int TeamProcessInviteSocialCmd::kUserFieldNumber;
const int TeamProcessInviteSocialCmd::kLeaderidFieldNumber;
#endif  // !_MSC_VER

TeamProcessInviteSocialCmd::TeamProcessInviteSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamProcessInviteSocialCmd)
}

void TeamProcessInviteSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

TeamProcessInviteSocialCmd::TeamProcessInviteSocialCmd(const TeamProcessInviteSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamProcessInviteSocialCmd)
}

void TeamProcessInviteSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 53;
  type_ = 0;
  user_ = NULL;
  leaderid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamProcessInviteSocialCmd::~TeamProcessInviteSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamProcessInviteSocialCmd)
  SharedDtor();
}

void TeamProcessInviteSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void TeamProcessInviteSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamProcessInviteSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamProcessInviteSocialCmd_descriptor_;
}

const TeamProcessInviteSocialCmd& TeamProcessInviteSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamProcessInviteSocialCmd* TeamProcessInviteSocialCmd::default_instance_ = NULL;

TeamProcessInviteSocialCmd* TeamProcessInviteSocialCmd::New() const {
  return new TeamProcessInviteSocialCmd;
}

void TeamProcessInviteSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamProcessInviteSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(leaderid_, type_);
    cmd_ = 208;
    param_ = 53;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamProcessInviteSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamProcessInviteSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_PROCESSINVITE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
      case 3: {
        if (tag == 24) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ETeamInviteType_IsValid(value)) {
            set_type(static_cast< ::Cmd::ETeamInviteType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 4;
      case 4: {
        if (tag == 34) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_leaderid;
        break;
      }

      // optional uint64 leaderid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_leaderid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamProcessInviteSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamProcessInviteSocialCmd)
  return false;
#undef DO_
}

void TeamProcessInviteSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamProcessInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_PROCESSINVITE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional .Cmd.UserInfo user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->user(), output);
  }

  // optional uint64 leaderid = 5 [default = 0];
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->leaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamProcessInviteSocialCmd)
}

::google::protobuf::uint8* TeamProcessInviteSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamProcessInviteSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_PROCESSINVITE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional .Cmd.UserInfo user = 4;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->user(), target);
  }

  // optional uint64 leaderid = 5 [default = 0];
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->leaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamProcessInviteSocialCmd)
  return target;
}

int TeamProcessInviteSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_PROCESSINVITE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.ETeamInviteType type = 3 [default = ETEAMINVITETYPE_MIN];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Cmd.UserInfo user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 leaderid = 5 [default = 0];
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamProcessInviteSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamProcessInviteSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamProcessInviteSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamProcessInviteSocialCmd::MergeFrom(const TeamProcessInviteSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamProcessInviteSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamProcessInviteSocialCmd::CopyFrom(const TeamProcessInviteSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamProcessInviteSocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void TeamProcessInviteSocialCmd::Swap(TeamProcessInviteSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(type_, other->type_);
    std::swap(user_, other->user_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamProcessInviteSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamProcessInviteSocialCmd_descriptor_;
  metadata.reflection = TeamProcessInviteSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApplySocialCmd::kCmdFieldNumber;
const int TeamApplySocialCmd::kParamFieldNumber;
const int TeamApplySocialCmd::kApplyFieldNumber;
const int TeamApplySocialCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

TeamApplySocialCmd::TeamApplySocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamApplySocialCmd)
}

void TeamApplySocialCmd::InitAsDefaultInstance() {
  apply_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

TeamApplySocialCmd::TeamApplySocialCmd(const TeamApplySocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamApplySocialCmd)
}

void TeamApplySocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 54;
  apply_ = NULL;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplySocialCmd::~TeamApplySocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamApplySocialCmd)
  SharedDtor();
}

void TeamApplySocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete apply_;
  }
}

void TeamApplySocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplySocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplySocialCmd_descriptor_;
}

const TeamApplySocialCmd& TeamApplySocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamApplySocialCmd* TeamApplySocialCmd::default_instance_ = NULL;

TeamApplySocialCmd* TeamApplySocialCmd::New() const {
  return new TeamApplySocialCmd;
}

void TeamApplySocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 54;
    if (has_apply()) {
      if (apply_ != NULL) apply_->::Cmd::UserInfo::Clear();
    }
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApplySocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamApplySocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_APPLY];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_apply;
        break;
      }

      // optional .Cmd.UserInfo apply = 3;
      case 3: {
        if (tag == 26) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamApplySocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamApplySocialCmd)
  return false;
#undef DO_
}

void TeamApplySocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamApplySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_APPLY];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo apply = 3;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->apply(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamApplySocialCmd)
}

::google::protobuf::uint8* TeamApplySocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamApplySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_APPLY];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo apply = 3;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->apply(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamApplySocialCmd)
  return target;
}

int TeamApplySocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_APPLY];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo apply = 3;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplySocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplySocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplySocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApplySocialCmd::MergeFrom(const TeamApplySocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_apply()) {
      mutable_apply()->::Cmd::UserInfo::MergeFrom(from.apply());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApplySocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplySocialCmd::CopyFrom(const TeamApplySocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplySocialCmd::IsInitialized() const {

  if (has_apply()) {
    if (!this->apply().IsInitialized()) return false;
  }
  return true;
}

void TeamApplySocialCmd::Swap(TeamApplySocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(apply_, other->apply_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApplySocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplySocialCmd_descriptor_;
  metadata.reflection = TeamApplySocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamQuickEnterSocialCmd::kCmdFieldNumber;
const int TeamQuickEnterSocialCmd::kParamFieldNumber;
const int TeamQuickEnterSocialCmd::kUserFieldNumber;
const int TeamQuickEnterSocialCmd::kTypeFieldNumber;
const int TeamQuickEnterSocialCmd::kSetFieldNumber;
#endif  // !_MSC_VER

TeamQuickEnterSocialCmd::TeamQuickEnterSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamQuickEnterSocialCmd)
}

void TeamQuickEnterSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::UserInfo*>(&::Cmd::UserInfo::default_instance());
}

TeamQuickEnterSocialCmd::TeamQuickEnterSocialCmd(const TeamQuickEnterSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamQuickEnterSocialCmd)
}

void TeamQuickEnterSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 55;
  user_ = NULL;
  type_ = 0u;
  set_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamQuickEnterSocialCmd::~TeamQuickEnterSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamQuickEnterSocialCmd)
  SharedDtor();
}

void TeamQuickEnterSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void TeamQuickEnterSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamQuickEnterSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamQuickEnterSocialCmd_descriptor_;
}

const TeamQuickEnterSocialCmd& TeamQuickEnterSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamQuickEnterSocialCmd* TeamQuickEnterSocialCmd::default_instance_ = NULL;

TeamQuickEnterSocialCmd* TeamQuickEnterSocialCmd::New() const {
  return new TeamQuickEnterSocialCmd;
}

void TeamQuickEnterSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamQuickEnterSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, set_);
    cmd_ = 208;
    param_ = 55;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::UserInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamQuickEnterSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamQuickEnterSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUICKENTER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.UserInfo user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional uint32 type = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_set;
        break;
      }

      // optional bool set = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_set:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_)));
          set_has_set();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamQuickEnterSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamQuickEnterSocialCmd)
  return false;
#undef DO_
}

void TeamQuickEnterSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamQuickEnterSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUICKENTER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint32 type = 4 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->type(), output);
  }

  // optional bool set = 5 [default = false];
  if (has_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->set(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamQuickEnterSocialCmd)
}

::google::protobuf::uint8* TeamQuickEnterSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamQuickEnterSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUICKENTER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.UserInfo user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint32 type = 4 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->type(), target);
  }

  // optional bool set = 5 [default = false];
  if (has_set()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->set(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamQuickEnterSocialCmd)
  return target;
}

int TeamQuickEnterSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUICKENTER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.UserInfo user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint32 type = 4 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional bool set = 5 [default = false];
    if (has_set()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamQuickEnterSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamQuickEnterSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamQuickEnterSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamQuickEnterSocialCmd::MergeFrom(const TeamQuickEnterSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::UserInfo::MergeFrom(from.user());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_set()) {
      set_set(from.set());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamQuickEnterSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamQuickEnterSocialCmd::CopyFrom(const TeamQuickEnterSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamQuickEnterSocialCmd::IsInitialized() const {

  if (has_user()) {
    if (!this->user().IsInitialized()) return false;
  }
  return true;
}

void TeamQuickEnterSocialCmd::Swap(TeamQuickEnterSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(type_, other->type_);
    std::swap(set_, other->set_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamQuickEnterSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamQuickEnterSocialCmd_descriptor_;
  metadata.reflection = TeamQuickEnterSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoStateNtfSocialCmd::kCmdFieldNumber;
const int DojoStateNtfSocialCmd::kParamFieldNumber;
const int DojoStateNtfSocialCmd::kTeamidFieldNumber;
const int DojoStateNtfSocialCmd::kGuildidFieldNumber;
const int DojoStateNtfSocialCmd::kStateFieldNumber;
#endif  // !_MSC_VER

DojoStateNtfSocialCmd::DojoStateNtfSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoStateNtfSocialCmd)
}

void DojoStateNtfSocialCmd::InitAsDefaultInstance() {
}

DojoStateNtfSocialCmd::DojoStateNtfSocialCmd(const DojoStateNtfSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoStateNtfSocialCmd)
}

void DojoStateNtfSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 57;
  teamid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  state_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoStateNtfSocialCmd::~DojoStateNtfSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoStateNtfSocialCmd)
  SharedDtor();
}

void DojoStateNtfSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoStateNtfSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoStateNtfSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoStateNtfSocialCmd_descriptor_;
}

const DojoStateNtfSocialCmd& DojoStateNtfSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

DojoStateNtfSocialCmd* DojoStateNtfSocialCmd::default_instance_ = NULL;

DojoStateNtfSocialCmd* DojoStateNtfSocialCmd::New() const {
  return new DojoStateNtfSocialCmd;
}

void DojoStateNtfSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DojoStateNtfSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, guildid_);
    cmd_ = 208;
    param_ = 57;
    state_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoStateNtfSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoStateNtfSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_STATE_NTF];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3;
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4;
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional .Cmd.EDOJOSTATE state = 5;
      case 5: {
        if (tag == 40) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDOJOSTATE_IsValid(value)) {
            set_state(static_cast< ::Cmd::EDOJOSTATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoStateNtfSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoStateNtfSocialCmd)
  return false;
#undef DO_
}

void DojoStateNtfSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoStateNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_STATE_NTF];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional .Cmd.EDOJOSTATE state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoStateNtfSocialCmd)
}

::google::protobuf::uint8* DojoStateNtfSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoStateNtfSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_STATE_NTF];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 guildid = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional .Cmd.EDOJOSTATE state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoStateNtfSocialCmd)
  return target;
}

int DojoStateNtfSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_STATE_NTF];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 guildid = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional .Cmd.EDOJOSTATE state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoStateNtfSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoStateNtfSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoStateNtfSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoStateNtfSocialCmd::MergeFrom(const DojoStateNtfSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoStateNtfSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoStateNtfSocialCmd::CopyFrom(const DojoStateNtfSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoStateNtfSocialCmd::IsInitialized() const {

  return true;
}

void DojoStateNtfSocialCmd::Swap(DojoStateNtfSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(guildid_, other->guildid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoStateNtfSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoStateNtfSocialCmd_descriptor_;
  metadata.reflection = DojoStateNtfSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DojoCreateSocialCmd::kCmdFieldNumber;
const int DojoCreateSocialCmd::kParamFieldNumber;
const int DojoCreateSocialCmd::kCharidFieldNumber;
const int DojoCreateSocialCmd::kDojoidFieldNumber;
const int DojoCreateSocialCmd::kTeamidFieldNumber;
const int DojoCreateSocialCmd::kGuildidFieldNumber;
#endif  // !_MSC_VER

DojoCreateSocialCmd::DojoCreateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DojoCreateSocialCmd)
}

void DojoCreateSocialCmd::InitAsDefaultInstance() {
}

DojoCreateSocialCmd::DojoCreateSocialCmd(const DojoCreateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DojoCreateSocialCmd)
}

void DojoCreateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 56;
  charid_ = GOOGLE_ULONGLONG(0);
  dojoid_ = 0u;
  teamid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DojoCreateSocialCmd::~DojoCreateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DojoCreateSocialCmd)
  SharedDtor();
}

void DojoCreateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DojoCreateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DojoCreateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DojoCreateSocialCmd_descriptor_;
}

const DojoCreateSocialCmd& DojoCreateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

DojoCreateSocialCmd* DojoCreateSocialCmd::default_instance_ = NULL;

DojoCreateSocialCmd* DojoCreateSocialCmd::New() const {
  return new DojoCreateSocialCmd;
}

void DojoCreateSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DojoCreateSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, dojoid_);
    cmd_ = 208;
    param_ = 56;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DojoCreateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DojoCreateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_CREATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dojoid;
        break;
      }

      // optional uint32 dojoid = 4;
      case 4: {
        if (tag == 32) {
         parse_dojoid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dojoid_)));
          set_has_dojoid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 5;
      case 5: {
        if (tag == 40) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 6;
      case 6: {
        if (tag == 48) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DojoCreateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DojoCreateSocialCmd)
  return false;
#undef DO_
}

void DojoCreateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DojoCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_CREATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dojoid(), output);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->teamid(), output);
  }

  // optional uint64 guildid = 6;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DojoCreateSocialCmd)
}

::google::protobuf::uint8* DojoCreateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DojoCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_CREATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint32 dojoid = 4;
  if (has_dojoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dojoid(), target);
  }

  // optional uint64 teamid = 5;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->teamid(), target);
  }

  // optional uint64 guildid = 6;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DojoCreateSocialCmd)
  return target;
}

int DojoCreateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DOJO_CREATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 dojoid = 4;
    if (has_dojoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dojoid());
    }

    // optional uint64 teamid = 5;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 guildid = 6;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DojoCreateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DojoCreateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DojoCreateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DojoCreateSocialCmd::MergeFrom(const DojoCreateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dojoid()) {
      set_dojoid(from.dojoid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DojoCreateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DojoCreateSocialCmd::CopyFrom(const DojoCreateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DojoCreateSocialCmd::IsInitialized() const {

  return true;
}

void DojoCreateSocialCmd::Swap(DojoCreateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(dojoid_, other->dojoid_);
    std::swap(teamid_, other->teamid_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DojoCreateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DojoCreateSocialCmd_descriptor_;
  metadata.reflection = DojoCreateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerLeaderInfoSyncSocialCmd::kCmdFieldNumber;
const int TowerLeaderInfoSyncSocialCmd::kParamFieldNumber;
const int TowerLeaderInfoSyncSocialCmd::kUserFieldNumber;
const int TowerLeaderInfoSyncSocialCmd::kInfoFieldNumber;
#endif  // !_MSC_VER

TowerLeaderInfoSyncSocialCmd::TowerLeaderInfoSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerLeaderInfoSyncSocialCmd)
}

void TowerLeaderInfoSyncSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
  info_ = const_cast< ::Cmd::UserTowerInfo*>(&::Cmd::UserTowerInfo::default_instance());
}

TowerLeaderInfoSyncSocialCmd::TowerLeaderInfoSyncSocialCmd(const TowerLeaderInfoSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerLeaderInfoSyncSocialCmd)
}

void TowerLeaderInfoSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 58;
  user_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerLeaderInfoSyncSocialCmd::~TowerLeaderInfoSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerLeaderInfoSyncSocialCmd)
  SharedDtor();
}

void TowerLeaderInfoSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
    delete info_;
  }
}

void TowerLeaderInfoSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerLeaderInfoSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerLeaderInfoSyncSocialCmd_descriptor_;
}

const TowerLeaderInfoSyncSocialCmd& TowerLeaderInfoSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TowerLeaderInfoSyncSocialCmd* TowerLeaderInfoSyncSocialCmd::default_instance_ = NULL;

TowerLeaderInfoSyncSocialCmd* TowerLeaderInfoSyncSocialCmd::New() const {
  return new TowerLeaderInfoSyncSocialCmd;
}

void TowerLeaderInfoSyncSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 58;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::Cmd::UserTowerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerLeaderInfoSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerLeaderInfoSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LEADERINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Cmd.UserTowerInfo info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerLeaderInfoSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerLeaderInfoSyncSocialCmd)
  return false;
#undef DO_
}

void TowerLeaderInfoSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerLeaderInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LEADERINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional .Cmd.UserTowerInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerLeaderInfoSyncSocialCmd)
}

::google::protobuf::uint8* TowerLeaderInfoSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerLeaderInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LEADERINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional .Cmd.UserTowerInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerLeaderInfoSyncSocialCmd)
  return target;
}

int TowerLeaderInfoSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LEADERINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional .Cmd.UserTowerInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerLeaderInfoSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerLeaderInfoSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerLeaderInfoSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerLeaderInfoSyncSocialCmd::MergeFrom(const TowerLeaderInfoSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_info()) {
      mutable_info()->::Cmd::UserTowerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerLeaderInfoSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerLeaderInfoSyncSocialCmd::CopyFrom(const TowerLeaderInfoSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerLeaderInfoSyncSocialCmd::IsInitialized() const {

  return true;
}

void TowerLeaderInfoSyncSocialCmd::Swap(TowerLeaderInfoSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerLeaderInfoSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerLeaderInfoSyncSocialCmd_descriptor_;
  metadata.reflection = TowerLeaderInfoSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerSceneCreateSocialCmd::kCmdFieldNumber;
const int TowerSceneCreateSocialCmd::kParamFieldNumber;
const int TowerSceneCreateSocialCmd::kUserFieldNumber;
const int TowerSceneCreateSocialCmd::kTeamidFieldNumber;
const int TowerSceneCreateSocialCmd::kLayerFieldNumber;
#endif  // !_MSC_VER

TowerSceneCreateSocialCmd::TowerSceneCreateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerSceneCreateSocialCmd)
}

void TowerSceneCreateSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

TowerSceneCreateSocialCmd::TowerSceneCreateSocialCmd(const TowerSceneCreateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerSceneCreateSocialCmd)
}

void TowerSceneCreateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 59;
  user_ = NULL;
  teamid_ = GOOGLE_ULONGLONG(0);
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerSceneCreateSocialCmd::~TowerSceneCreateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerSceneCreateSocialCmd)
  SharedDtor();
}

void TowerSceneCreateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void TowerSceneCreateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerSceneCreateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerSceneCreateSocialCmd_descriptor_;
}

const TowerSceneCreateSocialCmd& TowerSceneCreateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TowerSceneCreateSocialCmd* TowerSceneCreateSocialCmd::default_instance_ = NULL;

TowerSceneCreateSocialCmd* TowerSceneCreateSocialCmd::New() const {
  return new TowerSceneCreateSocialCmd;
}

void TowerSceneCreateSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerSceneCreateSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, layer_);
    cmd_ = 208;
    param_ = 59;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerSceneCreateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerSceneCreateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SCENE_CREATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerSceneCreateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerSceneCreateSocialCmd)
  return false;
#undef DO_
}

void TowerSceneCreateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SCENE_CREATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 layer = 5 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerSceneCreateSocialCmd)
}

::google::protobuf::uint8* TowerSceneCreateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SCENE_CREATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 layer = 5 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerSceneCreateSocialCmd)
  return target;
}

int TowerSceneCreateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SCENE_CREATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 layer = 5 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerSceneCreateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerSceneCreateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerSceneCreateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerSceneCreateSocialCmd::MergeFrom(const TowerSceneCreateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerSceneCreateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerSceneCreateSocialCmd::CopyFrom(const TowerSceneCreateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerSceneCreateSocialCmd::IsInitialized() const {

  return true;
}

void TowerSceneCreateSocialCmd::Swap(TowerSceneCreateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(teamid_, other->teamid_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerSceneCreateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerSceneCreateSocialCmd_descriptor_;
  metadata.reflection = TowerSceneCreateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerSceneSyncSocialCmd::kCmdFieldNumber;
const int TowerSceneSyncSocialCmd::kParamFieldNumber;
const int TowerSceneSyncSocialCmd::kTeamidFieldNumber;
const int TowerSceneSyncSocialCmd::kStateFieldNumber;
const int TowerSceneSyncSocialCmd::kRaididFieldNumber;
#endif  // !_MSC_VER

TowerSceneSyncSocialCmd::TowerSceneSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerSceneSyncSocialCmd)
}

void TowerSceneSyncSocialCmd::InitAsDefaultInstance() {
}

TowerSceneSyncSocialCmd::TowerSceneSyncSocialCmd(const TowerSceneSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerSceneSyncSocialCmd)
}

void TowerSceneSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 60;
  teamid_ = GOOGLE_ULONGLONG(0);
  state_ = 2;
  raidid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerSceneSyncSocialCmd::~TowerSceneSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerSceneSyncSocialCmd)
  SharedDtor();
}

void TowerSceneSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerSceneSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerSceneSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerSceneSyncSocialCmd_descriptor_;
}

const TowerSceneSyncSocialCmd& TowerSceneSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TowerSceneSyncSocialCmd* TowerSceneSyncSocialCmd::default_instance_ = NULL;

TowerSceneSyncSocialCmd* TowerSceneSyncSocialCmd::New() const {
  return new TowerSceneSyncSocialCmd;
}

void TowerSceneSyncSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 60;
    teamid_ = GOOGLE_ULONGLONG(0);
    state_ = 2;
    raidid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerSceneSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerSceneSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_SCENEINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional .Cmd.EDOJOSTATE state = 4 [default = EDOJOSTATE_CLOSE];
      case 4: {
        if (tag == 32) {
         parse_state:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDOJOSTATE_IsValid(value)) {
            set_state(static_cast< ::Cmd::EDOJOSTATE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerSceneSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerSceneSyncSocialCmd)
  return false;
#undef DO_
}

void TowerSceneSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_SCENEINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional .Cmd.EDOJOSTATE state = 4 [default = EDOJOSTATE_CLOSE];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->state(), output);
  }

  // optional uint32 raidid = 5 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerSceneSyncSocialCmd)
}

::google::protobuf::uint8* TowerSceneSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_SCENEINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional .Cmd.EDOJOSTATE state = 4 [default = EDOJOSTATE_CLOSE];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->state(), target);
  }

  // optional uint32 raidid = 5 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerSceneSyncSocialCmd)
  return target;
}

int TowerSceneSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_SCENEINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional .Cmd.EDOJOSTATE state = 4 [default = EDOJOSTATE_CLOSE];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 raidid = 5 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerSceneSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerSceneSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerSceneSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerSceneSyncSocialCmd::MergeFrom(const TowerSceneSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerSceneSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerSceneSyncSocialCmd::CopyFrom(const TowerSceneSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerSceneSyncSocialCmd::IsInitialized() const {

  return true;
}

void TowerSceneSyncSocialCmd::Swap(TowerSceneSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(state_, other->state_);
    std::swap(raidid_, other->raidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerSceneSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerSceneSyncSocialCmd_descriptor_;
  metadata.reflection = TowerSceneSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TowerLayerSyncSocialCmd::kCmdFieldNumber;
const int TowerLayerSyncSocialCmd::kParamFieldNumber;
const int TowerLayerSyncSocialCmd::kTeamidFieldNumber;
const int TowerLayerSyncSocialCmd::kLayerFieldNumber;
#endif  // !_MSC_VER

TowerLayerSyncSocialCmd::TowerLayerSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TowerLayerSyncSocialCmd)
}

void TowerLayerSyncSocialCmd::InitAsDefaultInstance() {
}

TowerLayerSyncSocialCmd::TowerLayerSyncSocialCmd(const TowerLayerSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TowerLayerSyncSocialCmd)
}

void TowerLayerSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 61;
  teamid_ = GOOGLE_ULONGLONG(0);
  layer_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TowerLayerSyncSocialCmd::~TowerLayerSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TowerLayerSyncSocialCmd)
  SharedDtor();
}

void TowerLayerSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TowerLayerSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TowerLayerSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TowerLayerSyncSocialCmd_descriptor_;
}

const TowerLayerSyncSocialCmd& TowerLayerSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TowerLayerSyncSocialCmd* TowerLayerSyncSocialCmd::default_instance_ = NULL;

TowerLayerSyncSocialCmd* TowerLayerSyncSocialCmd::New() const {
  return new TowerLayerSyncSocialCmd;
}

void TowerLayerSyncSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TowerLayerSyncSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, layer_);
    cmd_ = 208;
    param_ = 61;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TowerLayerSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TowerLayerSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LAYER];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_layer;
        break;
      }

      // optional uint32 layer = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TowerLayerSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TowerLayerSyncSocialCmd)
  return false;
#undef DO_
}

void TowerLayerSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TowerLayerSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LAYER];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint32 layer = 4 [default = 0];
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TowerLayerSyncSocialCmd)
}

::google::protobuf::uint8* TowerLayerSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TowerLayerSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LAYER];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint32 layer = 4 [default = 0];
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TowerLayerSyncSocialCmd)
  return target;
}

int TowerLayerSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TOWER_SYNC_LAYER];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 layer = 4 [default = 0];
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TowerLayerSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TowerLayerSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TowerLayerSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TowerLayerSyncSocialCmd::MergeFrom(const TowerLayerSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TowerLayerSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TowerLayerSyncSocialCmd::CopyFrom(const TowerLayerSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TowerLayerSyncSocialCmd::IsInitialized() const {

  return true;
}

void TowerLayerSyncSocialCmd::Swap(TowerLayerSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TowerLayerSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TowerLayerSyncSocialCmd_descriptor_;
  metadata.reflection = TowerLayerSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaderSealFinishSocialCmd::kCmdFieldNumber;
const int LeaderSealFinishSocialCmd::kParamFieldNumber;
const int LeaderSealFinishSocialCmd::kTeamidFieldNumber;
#endif  // !_MSC_VER

LeaderSealFinishSocialCmd::LeaderSealFinishSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.LeaderSealFinishSocialCmd)
}

void LeaderSealFinishSocialCmd::InitAsDefaultInstance() {
}

LeaderSealFinishSocialCmd::LeaderSealFinishSocialCmd(const LeaderSealFinishSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.LeaderSealFinishSocialCmd)
}

void LeaderSealFinishSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 71;
  teamid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaderSealFinishSocialCmd::~LeaderSealFinishSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.LeaderSealFinishSocialCmd)
  SharedDtor();
}

void LeaderSealFinishSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaderSealFinishSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaderSealFinishSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaderSealFinishSocialCmd_descriptor_;
}

const LeaderSealFinishSocialCmd& LeaderSealFinishSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

LeaderSealFinishSocialCmd* LeaderSealFinishSocialCmd::default_instance_ = NULL;

LeaderSealFinishSocialCmd* LeaderSealFinishSocialCmd::New() const {
  return new LeaderSealFinishSocialCmd;
}

void LeaderSealFinishSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 71;
    teamid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaderSealFinishSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.LeaderSealFinishSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_SEAL_FIHISH];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.LeaderSealFinishSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.LeaderSealFinishSocialCmd)
  return false;
#undef DO_
}

void LeaderSealFinishSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.LeaderSealFinishSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_SEAL_FIHISH];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.LeaderSealFinishSocialCmd)
}

::google::protobuf::uint8* LeaderSealFinishSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.LeaderSealFinishSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_SEAL_FIHISH];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.LeaderSealFinishSocialCmd)
  return target;
}

int LeaderSealFinishSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_SEAL_FIHISH];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaderSealFinishSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaderSealFinishSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaderSealFinishSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaderSealFinishSocialCmd::MergeFrom(const LeaderSealFinishSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaderSealFinishSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaderSealFinishSocialCmd::CopyFrom(const LeaderSealFinishSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaderSealFinishSocialCmd::IsInitialized() const {

  return true;
}

void LeaderSealFinishSocialCmd::Swap(LeaderSealFinishSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaderSealFinishSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaderSealFinishSocialCmd_descriptor_;
  metadata.reflection = LeaderSealFinishSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoTeamRaidSocialCmd::kCmdFieldNumber;
const int GoTeamRaidSocialCmd::kParamFieldNumber;
const int GoTeamRaidSocialCmd::kTeamidFieldNumber;
const int GoTeamRaidSocialCmd::kCharidFieldNumber;
const int GoTeamRaidSocialCmd::kMyzoneidFieldNumber;
const int GoTeamRaidSocialCmd::kRaidzoneidFieldNumber;
const int GoTeamRaidSocialCmd::kRaididFieldNumber;
const int GoTeamRaidSocialCmd::kGomaptypeFieldNumber;
#endif  // !_MSC_VER

GoTeamRaidSocialCmd::GoTeamRaidSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GoTeamRaidSocialCmd)
}

void GoTeamRaidSocialCmd::InitAsDefaultInstance() {
}

GoTeamRaidSocialCmd::GoTeamRaidSocialCmd(const GoTeamRaidSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GoTeamRaidSocialCmd)
}

void GoTeamRaidSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 62;
  teamid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  myzoneid_ = 0u;
  raidzoneid_ = 0u;
  raidid_ = 0u;
  gomaptype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoTeamRaidSocialCmd::~GoTeamRaidSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GoTeamRaidSocialCmd)
  SharedDtor();
}

void GoTeamRaidSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GoTeamRaidSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoTeamRaidSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoTeamRaidSocialCmd_descriptor_;
}

const GoTeamRaidSocialCmd& GoTeamRaidSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GoTeamRaidSocialCmd* GoTeamRaidSocialCmd::default_instance_ = NULL;

GoTeamRaidSocialCmd* GoTeamRaidSocialCmd::New() const {
  return new GoTeamRaidSocialCmd;
}

void GoTeamRaidSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GoTeamRaidSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(teamid_, gomaptype_);
    cmd_ = 208;
    param_ = 62;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoTeamRaidSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GoTeamRaidSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GO_TEAM_RAID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_myzoneid;
        break;
      }

      // optional uint32 myzoneid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_myzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myzoneid_)));
          set_has_myzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_raidzoneid;
        break;
      }

      // optional uint32 raidzoneid = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_raidzoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidzoneid_)));
          set_has_raidzoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gomaptype;
        break;
      }

      // optional uint32 gomaptype = 8 [default = 0];
      case 8: {
        if (tag == 64) {
         parse_gomaptype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gomaptype_)));
          set_has_gomaptype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GoTeamRaidSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GoTeamRaidSocialCmd)
  return false;
#undef DO_
}

void GoTeamRaidSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GoTeamRaidSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GO_TEAM_RAID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional uint32 myzoneid = 5 [default = 0];
  if (has_myzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->myzoneid(), output);
  }

  // optional uint32 raidzoneid = 6 [default = 0];
  if (has_raidzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->raidzoneid(), output);
  }

  // optional uint32 raidid = 7 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->raidid(), output);
  }

  // optional uint32 gomaptype = 8 [default = 0];
  if (has_gomaptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gomaptype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GoTeamRaidSocialCmd)
}

::google::protobuf::uint8* GoTeamRaidSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GoTeamRaidSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GO_TEAM_RAID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional uint32 myzoneid = 5 [default = 0];
  if (has_myzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->myzoneid(), target);
  }

  // optional uint32 raidzoneid = 6 [default = 0];
  if (has_raidzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->raidzoneid(), target);
  }

  // optional uint32 raidid = 7 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->raidid(), target);
  }

  // optional uint32 gomaptype = 8 [default = 0];
  if (has_gomaptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gomaptype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GoTeamRaidSocialCmd)
  return target;
}

int GoTeamRaidSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GO_TEAM_RAID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 myzoneid = 5 [default = 0];
    if (has_myzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myzoneid());
    }

    // optional uint32 raidzoneid = 6 [default = 0];
    if (has_raidzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidzoneid());
    }

    // optional uint32 raidid = 7 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

    // optional uint32 gomaptype = 8 [default = 0];
    if (has_gomaptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gomaptype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoTeamRaidSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoTeamRaidSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoTeamRaidSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoTeamRaidSocialCmd::MergeFrom(const GoTeamRaidSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_myzoneid()) {
      set_myzoneid(from.myzoneid());
    }
    if (from.has_raidzoneid()) {
      set_raidzoneid(from.raidzoneid());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
    if (from.has_gomaptype()) {
      set_gomaptype(from.gomaptype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoTeamRaidSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoTeamRaidSocialCmd::CopyFrom(const GoTeamRaidSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoTeamRaidSocialCmd::IsInitialized() const {

  return true;
}

void GoTeamRaidSocialCmd::Swap(GoTeamRaidSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(myzoneid_, other->myzoneid_);
    std::swap(raidzoneid_, other->raidzoneid_);
    std::swap(raidid_, other->raidid_);
    std::swap(gomaptype_, other->gomaptype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoTeamRaidSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoTeamRaidSocialCmd_descriptor_;
  metadata.reflection = GoTeamRaidSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelTeamRaidSocialCmd::kCmdFieldNumber;
const int DelTeamRaidSocialCmd::kParamFieldNumber;
const int DelTeamRaidSocialCmd::kTeamidFieldNumber;
const int DelTeamRaidSocialCmd::kRaididFieldNumber;
#endif  // !_MSC_VER

DelTeamRaidSocialCmd::DelTeamRaidSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.DelTeamRaidSocialCmd)
}

void DelTeamRaidSocialCmd::InitAsDefaultInstance() {
}

DelTeamRaidSocialCmd::DelTeamRaidSocialCmd(const DelTeamRaidSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.DelTeamRaidSocialCmd)
}

void DelTeamRaidSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 63;
  teamid_ = GOOGLE_ULONGLONG(0);
  raidid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelTeamRaidSocialCmd::~DelTeamRaidSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.DelTeamRaidSocialCmd)
  SharedDtor();
}

void DelTeamRaidSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelTeamRaidSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelTeamRaidSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelTeamRaidSocialCmd_descriptor_;
}

const DelTeamRaidSocialCmd& DelTeamRaidSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

DelTeamRaidSocialCmd* DelTeamRaidSocialCmd::default_instance_ = NULL;

DelTeamRaidSocialCmd* DelTeamRaidSocialCmd::New() const {
  return new DelTeamRaidSocialCmd;
}

void DelTeamRaidSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DelTeamRaidSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, raidid_);
    cmd_ = 208;
    param_ = 63;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelTeamRaidSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.DelTeamRaidSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DEL_TEAM_RAID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_raidid;
        break;
      }

      // optional uint32 raidid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_raidid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raidid_)));
          set_has_raidid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.DelTeamRaidSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.DelTeamRaidSocialCmd)
  return false;
#undef DO_
}

void DelTeamRaidSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.DelTeamRaidSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DEL_TEAM_RAID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional uint32 raidid = 4 [default = 0];
  if (has_raidid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->raidid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.DelTeamRaidSocialCmd)
}

::google::protobuf::uint8* DelTeamRaidSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.DelTeamRaidSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DEL_TEAM_RAID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional uint32 raidid = 4 [default = 0];
  if (has_raidid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->raidid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.DelTeamRaidSocialCmd)
  return target;
}

int DelTeamRaidSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_DEL_TEAM_RAID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 raidid = 4 [default = 0];
    if (has_raidid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raidid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelTeamRaidSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelTeamRaidSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelTeamRaidSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelTeamRaidSocialCmd::MergeFrom(const DelTeamRaidSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_raidid()) {
      set_raidid(from.raidid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelTeamRaidSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelTeamRaidSocialCmd::CopyFrom(const DelTeamRaidSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelTeamRaidSocialCmd::IsInitialized() const {

  return true;
}

void DelTeamRaidSocialCmd::Swap(DelTeamRaidSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(raidid_, other->raidid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelTeamRaidSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelTeamRaidSocialCmd_descriptor_;
  metadata.reflection = DelTeamRaidSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendMailSocialCmd::kCmdFieldNumber;
const int SendMailSocialCmd::kParamFieldNumber;
const int SendMailSocialCmd::kZoneidFieldNumber;
const int SendMailSocialCmd::kDataFieldNumber;
const int SendMailSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

SendMailSocialCmd::SendMailSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendMailSocialCmd)
}

void SendMailSocialCmd::InitAsDefaultInstance() {
}

SendMailSocialCmd::SendMailSocialCmd(const SendMailSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendMailSocialCmd)
}

void SendMailSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 64;
  zoneid_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendMailSocialCmd::~SendMailSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SendMailSocialCmd)
  SharedDtor();
}

void SendMailSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void SendMailSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendMailSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendMailSocialCmd_descriptor_;
}

const SendMailSocialCmd& SendMailSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SendMailSocialCmd* SendMailSocialCmd::default_instance_ = NULL;

SendMailSocialCmd* SendMailSocialCmd::New() const {
  return new SendMailSocialCmd;
}

void SendMailSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendMailSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(zoneid_, len_);
    cmd_ = 208;
    param_ = 64;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendMailSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendMailSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_MAIL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_zoneid;
        break;
      }

      // optional uint32 zoneid = 3;
      case 3: {
        if (tag == 24) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendMailSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendMailSocialCmd)
  return false;
#undef DO_
}

void SendMailSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendMailSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_MAIL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zoneid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendMailSocialCmd)
}

::google::protobuf::uint8* SendMailSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendMailSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_MAIL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 zoneid = 3;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zoneid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendMailSocialCmd)
  return target;
}

int SendMailSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_MAIL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendMailSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendMailSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendMailSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendMailSocialCmd::MergeFrom(const SendMailSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendMailSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMailSocialCmd::CopyFrom(const SendMailSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMailSocialCmd::IsInitialized() const {

  return true;
}

void SendMailSocialCmd::Swap(SendMailSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendMailSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendMailSocialCmd_descriptor_;
  metadata.reflection = SendMailSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardToAllSessionSocialCmd::kCmdFieldNumber;
const int ForwardToAllSessionSocialCmd::kParamFieldNumber;
const int ForwardToAllSessionSocialCmd::kExceptFieldNumber;
const int ForwardToAllSessionSocialCmd::kDataFieldNumber;
const int ForwardToAllSessionSocialCmd::kLenFieldNumber;
#endif  // !_MSC_VER

ForwardToAllSessionSocialCmd::ForwardToAllSessionSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ForwardToAllSessionSocialCmd)
}

void ForwardToAllSessionSocialCmd::InitAsDefaultInstance() {
}

ForwardToAllSessionSocialCmd::ForwardToAllSessionSocialCmd(const ForwardToAllSessionSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ForwardToAllSessionSocialCmd)
}

void ForwardToAllSessionSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 67;
  except_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardToAllSessionSocialCmd::~ForwardToAllSessionSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ForwardToAllSessionSocialCmd)
  SharedDtor();
}

void ForwardToAllSessionSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ForwardToAllSessionSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardToAllSessionSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardToAllSessionSocialCmd_descriptor_;
}

const ForwardToAllSessionSocialCmd& ForwardToAllSessionSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ForwardToAllSessionSocialCmd* ForwardToAllSessionSocialCmd::default_instance_ = NULL;

ForwardToAllSessionSocialCmd* ForwardToAllSessionSocialCmd::New() const {
  return new ForwardToAllSessionSocialCmd;
}

void ForwardToAllSessionSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ForwardToAllSessionSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(except_, len_);
    cmd_ = 208;
    param_ = 67;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardToAllSessionSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ForwardToAllSessionSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_ALL_SESSION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_except;
        break;
      }

      // optional uint32 except = 3;
      case 3: {
        if (tag == 24) {
         parse_except:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &except_)));
          set_has_except();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ForwardToAllSessionSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ForwardToAllSessionSocialCmd)
  return false;
#undef DO_
}

void ForwardToAllSessionSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ForwardToAllSessionSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_ALL_SESSION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 except = 3;
  if (has_except()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->except(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ForwardToAllSessionSocialCmd)
}

::google::protobuf::uint8* ForwardToAllSessionSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ForwardToAllSessionSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_ALL_SESSION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 except = 3;
  if (has_except()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->except(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ForwardToAllSessionSocialCmd)
  return target;
}

int ForwardToAllSessionSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_FORWARD_TO_ALL_SESSION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 except = 3;
    if (has_except()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->except());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardToAllSessionSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardToAllSessionSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardToAllSessionSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardToAllSessionSocialCmd::MergeFrom(const ForwardToAllSessionSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_except()) {
      set_except(from.except());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardToAllSessionSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardToAllSessionSocialCmd::CopyFrom(const ForwardToAllSessionSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardToAllSessionSocialCmd::IsInitialized() const {

  return true;
}

void ForwardToAllSessionSocialCmd::Swap(ForwardToAllSessionSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(except_, other->except_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardToAllSessionSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardToAllSessionSocialCmd_descriptor_;
  metadata.reflection = ForwardToAllSessionSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuildLevelUpSocialCmd::kCmdFieldNumber;
const int GuildLevelUpSocialCmd::kParamFieldNumber;
const int GuildLevelUpSocialCmd::kCharidFieldNumber;
const int GuildLevelUpSocialCmd::kGuildidFieldNumber;
const int GuildLevelUpSocialCmd::kAddlevelFieldNumber;
const int GuildLevelUpSocialCmd::kGuildnameFieldNumber;
#endif  // !_MSC_VER

GuildLevelUpSocialCmd::GuildLevelUpSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GuildLevelUpSocialCmd)
}

void GuildLevelUpSocialCmd::InitAsDefaultInstance() {
}

GuildLevelUpSocialCmd::GuildLevelUpSocialCmd(const GuildLevelUpSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GuildLevelUpSocialCmd)
}

void GuildLevelUpSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 44;
  charid_ = GOOGLE_ULONGLONG(0);
  guildid_ = GOOGLE_ULONGLONG(0);
  addlevel_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuildLevelUpSocialCmd::~GuildLevelUpSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GuildLevelUpSocialCmd)
  SharedDtor();
}

void GuildLevelUpSocialCmd::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void GuildLevelUpSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuildLevelUpSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuildLevelUpSocialCmd_descriptor_;
}

const GuildLevelUpSocialCmd& GuildLevelUpSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GuildLevelUpSocialCmd* GuildLevelUpSocialCmd::default_instance_ = NULL;

GuildLevelUpSocialCmd* GuildLevelUpSocialCmd::New() const {
  return new GuildLevelUpSocialCmd;
}

void GuildLevelUpSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GuildLevelUpSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, guildid_);
    cmd_ = 208;
    param_ = 44;
    addlevel_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        guildname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuildLevelUpSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GuildLevelUpSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_LEVELUP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_guildid;
        break;
      }

      // optional uint64 guildid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_guildid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_addlevel;
        break;
      }

      // optional uint32 addlevel = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_addlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addlevel_)));
          set_has_addlevel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_guildname;
        break;
      }

      // optional string guildname = 6;
      case 6: {
        if (tag == 50) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "guildname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GuildLevelUpSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GuildLevelUpSocialCmd)
  return false;
#undef DO_
}

void GuildLevelUpSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GuildLevelUpSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_LEVELUP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guildid(), output);
  }

  // optional uint32 addlevel = 5 [default = 0];
  if (has_addlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addlevel(), output);
  }

  // optional string guildname = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GuildLevelUpSocialCmd)
}

::google::protobuf::uint8* GuildLevelUpSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GuildLevelUpSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_LEVELUP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 guildid = 4 [default = 0];
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guildid(), target);
  }

  // optional uint32 addlevel = 5 [default = 0];
  if (has_addlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addlevel(), target);
  }

  // optional string guildname = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "guildname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GuildLevelUpSocialCmd)
  return target;
}

int GuildLevelUpSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GUILD_LEVELUP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 guildid = 4 [default = 0];
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guildid());
    }

    // optional uint32 addlevel = 5 [default = 0];
    if (has_addlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addlevel());
    }

    // optional string guildname = 6;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuildLevelUpSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuildLevelUpSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuildLevelUpSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuildLevelUpSocialCmd::MergeFrom(const GuildLevelUpSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_addlevel()) {
      set_addlevel(from.addlevel());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuildLevelUpSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuildLevelUpSocialCmd::CopyFrom(const GuildLevelUpSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuildLevelUpSocialCmd::IsInitialized() const {

  return true;
}

void GuildLevelUpSocialCmd::Swap(GuildLevelUpSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(addlevel_, other->addlevel_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuildLevelUpSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuildLevelUpSocialCmd_descriptor_;
  metadata.reflection = GuildLevelUpSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoveGuildZoneSocialCmd::kCmdFieldNumber;
const int MoveGuildZoneSocialCmd::kParamFieldNumber;
const int MoveGuildZoneSocialCmd::kOrizoneFieldNumber;
const int MoveGuildZoneSocialCmd::kNewzoneFieldNumber;
#endif  // !_MSC_VER

MoveGuildZoneSocialCmd::MoveGuildZoneSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.MoveGuildZoneSocialCmd)
}

void MoveGuildZoneSocialCmd::InitAsDefaultInstance() {
}

MoveGuildZoneSocialCmd::MoveGuildZoneSocialCmd(const MoveGuildZoneSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.MoveGuildZoneSocialCmd)
}

void MoveGuildZoneSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 70;
  orizone_ = 0u;
  newzone_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoveGuildZoneSocialCmd::~MoveGuildZoneSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.MoveGuildZoneSocialCmd)
  SharedDtor();
}

void MoveGuildZoneSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoveGuildZoneSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveGuildZoneSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoveGuildZoneSocialCmd_descriptor_;
}

const MoveGuildZoneSocialCmd& MoveGuildZoneSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

MoveGuildZoneSocialCmd* MoveGuildZoneSocialCmd::default_instance_ = NULL;

MoveGuildZoneSocialCmd* MoveGuildZoneSocialCmd::New() const {
  return new MoveGuildZoneSocialCmd;
}

void MoveGuildZoneSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MoveGuildZoneSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(orizone_, newzone_);
    cmd_ = 208;
    param_ = 70;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoveGuildZoneSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.MoveGuildZoneSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GM_MOVE_GUILD_ZONE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_orizone;
        break;
      }

      // optional uint32 orizone = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_orizone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orizone_)));
          set_has_orizone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_newzone;
        break;
      }

      // optional uint32 newzone = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_newzone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newzone_)));
          set_has_newzone();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.MoveGuildZoneSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.MoveGuildZoneSocialCmd)
  return false;
#undef DO_
}

void MoveGuildZoneSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.MoveGuildZoneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GM_MOVE_GUILD_ZONE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint32 orizone = 3 [default = 0];
  if (has_orizone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->orizone(), output);
  }

  // optional uint32 newzone = 4 [default = 0];
  if (has_newzone()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newzone(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.MoveGuildZoneSocialCmd)
}

::google::protobuf::uint8* MoveGuildZoneSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.MoveGuildZoneSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GM_MOVE_GUILD_ZONE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint32 orizone = 3 [default = 0];
  if (has_orizone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->orizone(), target);
  }

  // optional uint32 newzone = 4 [default = 0];
  if (has_newzone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newzone(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.MoveGuildZoneSocialCmd)
  return target;
}

int MoveGuildZoneSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GM_MOVE_GUILD_ZONE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint32 orizone = 3 [default = 0];
    if (has_orizone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orizone());
    }

    // optional uint32 newzone = 4 [default = 0];
    if (has_newzone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newzone());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveGuildZoneSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoveGuildZoneSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoveGuildZoneSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoveGuildZoneSocialCmd::MergeFrom(const MoveGuildZoneSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_orizone()) {
      set_orizone(from.orizone());
    }
    if (from.has_newzone()) {
      set_newzone(from.newzone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoveGuildZoneSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveGuildZoneSocialCmd::CopyFrom(const MoveGuildZoneSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveGuildZoneSocialCmd::IsInitialized() const {

  return true;
}

void MoveGuildZoneSocialCmd::Swap(MoveGuildZoneSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(orizone_, other->orizone_);
    std::swap(newzone_, other->newzone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoveGuildZoneSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoveGuildZoneSocialCmd_descriptor_;
  metadata.reflection = MoveGuildZoneSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialDataUpdateSocialCmd::kCmdFieldNumber;
const int SocialDataUpdateSocialCmd::kParamFieldNumber;
const int SocialDataUpdateSocialCmd::kCharidFieldNumber;
const int SocialDataUpdateSocialCmd::kTargetidFieldNumber;
const int SocialDataUpdateSocialCmd::kUpdateFieldNumber;
const int SocialDataUpdateSocialCmd::kToGlobalFieldNumber;
#endif  // !_MSC_VER

SocialDataUpdateSocialCmd::SocialDataUpdateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialDataUpdateSocialCmd)
}

void SocialDataUpdateSocialCmd::InitAsDefaultInstance() {
  update_ = const_cast< ::Cmd::SocialDataUpdate*>(&::Cmd::SocialDataUpdate::default_instance());
}

SocialDataUpdateSocialCmd::SocialDataUpdateSocialCmd(const SocialDataUpdateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialDataUpdateSocialCmd)
}

void SocialDataUpdateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 80;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  update_ = NULL;
  to_global_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialDataUpdateSocialCmd::~SocialDataUpdateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SocialDataUpdateSocialCmd)
  SharedDtor();
}

void SocialDataUpdateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete update_;
  }
}

void SocialDataUpdateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialDataUpdateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialDataUpdateSocialCmd_descriptor_;
}

const SocialDataUpdateSocialCmd& SocialDataUpdateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SocialDataUpdateSocialCmd* SocialDataUpdateSocialCmd::default_instance_ = NULL;

SocialDataUpdateSocialCmd* SocialDataUpdateSocialCmd::New() const {
  return new SocialDataUpdateSocialCmd;
}

void SocialDataUpdateSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SocialDataUpdateSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, targetid_);
    cmd_ = 208;
    param_ = 80;
    if (has_update()) {
      if (update_ != NULL) update_->::Cmd::SocialDataUpdate::Clear();
    }
    to_global_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialDataUpdateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialDataUpdateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_DATA_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_update;
        break;
      }

      // optional .Cmd.SocialDataUpdate update = 5;
      case 5: {
        if (tag == 42) {
         parse_update:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_global;
        break;
      }

      // optional bool to_global = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_to_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_global_)));
          set_has_to_global();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialDataUpdateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialDataUpdateSocialCmd)
  return false;
#undef DO_
}

void SocialDataUpdateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialDataUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_DATA_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional .Cmd.SocialDataUpdate update = 5;
  if (has_update()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->update(), output);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->to_global(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialDataUpdateSocialCmd)
}

::google::protobuf::uint8* SocialDataUpdateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialDataUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_DATA_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional .Cmd.SocialDataUpdate update = 5;
  if (has_update()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->update(), target);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->to_global(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialDataUpdateSocialCmd)
  return target;
}

int SocialDataUpdateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_DATA_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional .Cmd.SocialDataUpdate update = 5;
    if (has_update()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update());
    }

    // optional bool to_global = 6 [default = false];
    if (has_to_global()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialDataUpdateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialDataUpdateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialDataUpdateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialDataUpdateSocialCmd::MergeFrom(const SocialDataUpdateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_update()) {
      mutable_update()->::Cmd::SocialDataUpdate::MergeFrom(from.update());
    }
    if (from.has_to_global()) {
      set_to_global(from.to_global());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialDataUpdateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialDataUpdateSocialCmd::CopyFrom(const SocialDataUpdateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialDataUpdateSocialCmd::IsInitialized() const {

  return true;
}

void SocialDataUpdateSocialCmd::Swap(SocialDataUpdateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(update_, other->update_);
    std::swap(to_global_, other->to_global_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialDataUpdateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialDataUpdateSocialCmd_descriptor_;
  metadata.reflection = SocialDataUpdateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddRelationSocialCmd::kCmdFieldNumber;
const int AddRelationSocialCmd::kParamFieldNumber;
const int AddRelationSocialCmd::kUserFieldNumber;
const int AddRelationSocialCmd::kDestidFieldNumber;
const int AddRelationSocialCmd::kRelationFieldNumber;
const int AddRelationSocialCmd::kToGlobalFieldNumber;
const int AddRelationSocialCmd::kCheckFieldNumber;
#endif  // !_MSC_VER

AddRelationSocialCmd::AddRelationSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AddRelationSocialCmd)
}

void AddRelationSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

AddRelationSocialCmd::AddRelationSocialCmd(const AddRelationSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AddRelationSocialCmd)
}

void AddRelationSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 81;
  user_ = NULL;
  destid_ = GOOGLE_ULONGLONG(0);
  relation_ = 1;
  to_global_ = false;
  check_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddRelationSocialCmd::~AddRelationSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AddRelationSocialCmd)
  SharedDtor();
}

void AddRelationSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void AddRelationSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddRelationSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddRelationSocialCmd_descriptor_;
}

const AddRelationSocialCmd& AddRelationSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

AddRelationSocialCmd* AddRelationSocialCmd::default_instance_ = NULL;

AddRelationSocialCmd* AddRelationSocialCmd::New() const {
  return new AddRelationSocialCmd;
}

void AddRelationSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AddRelationSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(to_global_, check_);
    cmd_ = 208;
    param_ = 81;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    destid_ = GOOGLE_ULONGLONG(0);
    relation_ = 1;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddRelationSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AddRelationSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_ADDRELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destid;
        break;
      }

      // optional uint64 destid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_destid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
      case 5: {
        if (tag == 40) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_global;
        break;
      }

      // optional bool to_global = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_to_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_global_)));
          set_has_to_global();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_check;
        break;
      }

      // optional bool check = 7 [default = false];
      case 7: {
        if (tag == 56) {
         parse_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_)));
          set_has_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AddRelationSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AddRelationSocialCmd)
  return false;
#undef DO_
}

void AddRelationSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AddRelationSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_ADDRELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destid(), output);
  }

  // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->relation(), output);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->to_global(), output);
  }

  // optional bool check = 7 [default = false];
  if (has_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->check(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AddRelationSocialCmd)
}

::google::protobuf::uint8* AddRelationSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AddRelationSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_ADDRELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destid(), target);
  }

  // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->relation(), target);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->to_global(), target);
  }

  // optional bool check = 7 [default = false];
  if (has_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->check(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AddRelationSocialCmd)
  return target;
}

int AddRelationSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_ADDRELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 destid = 4 [default = 0];
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destid());
    }

    // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

    // optional bool to_global = 6 [default = false];
    if (has_to_global()) {
      total_size += 1 + 1;
    }

    // optional bool check = 7 [default = false];
    if (has_check()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddRelationSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddRelationSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddRelationSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddRelationSocialCmd::MergeFrom(const AddRelationSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_to_global()) {
      set_to_global(from.to_global());
    }
    if (from.has_check()) {
      set_check(from.check());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddRelationSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddRelationSocialCmd::CopyFrom(const AddRelationSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRelationSocialCmd::IsInitialized() const {

  return true;
}

void AddRelationSocialCmd::Swap(AddRelationSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(destid_, other->destid_);
    std::swap(relation_, other->relation_);
    std::swap(to_global_, other->to_global_);
    std::swap(check_, other->check_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddRelationSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddRelationSocialCmd_descriptor_;
  metadata.reflection = AddRelationSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveRelationSocialCmd::kCmdFieldNumber;
const int RemoveRelationSocialCmd::kParamFieldNumber;
const int RemoveRelationSocialCmd::kUserFieldNumber;
const int RemoveRelationSocialCmd::kDestidFieldNumber;
const int RemoveRelationSocialCmd::kRelationFieldNumber;
const int RemoveRelationSocialCmd::kToGlobalFieldNumber;
#endif  // !_MSC_VER

RemoveRelationSocialCmd::RemoveRelationSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RemoveRelationSocialCmd)
}

void RemoveRelationSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

RemoveRelationSocialCmd::RemoveRelationSocialCmd(const RemoveRelationSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RemoveRelationSocialCmd)
}

void RemoveRelationSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 82;
  user_ = NULL;
  destid_ = GOOGLE_ULONGLONG(0);
  relation_ = 1;
  to_global_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveRelationSocialCmd::~RemoveRelationSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RemoveRelationSocialCmd)
  SharedDtor();
}

void RemoveRelationSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void RemoveRelationSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveRelationSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveRelationSocialCmd_descriptor_;
}

const RemoveRelationSocialCmd& RemoveRelationSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

RemoveRelationSocialCmd* RemoveRelationSocialCmd::default_instance_ = NULL;

RemoveRelationSocialCmd* RemoveRelationSocialCmd::New() const {
  return new RemoveRelationSocialCmd;
}

void RemoveRelationSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    cmd_ = 208;
    param_ = 82;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
    destid_ = GOOGLE_ULONGLONG(0);
    relation_ = 1;
    to_global_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveRelationSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RemoveRelationSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVERELATION];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destid;
        break;
      }

      // optional uint64 destid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_destid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
      case 5: {
        if (tag == 40) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_to_global;
        break;
      }

      // optional bool to_global = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_to_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_global_)));
          set_has_to_global();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RemoveRelationSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RemoveRelationSocialCmd)
  return false;
#undef DO_
}

void RemoveRelationSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RemoveRelationSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVERELATION];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destid(), output);
  }

  // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->relation(), output);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->to_global(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RemoveRelationSocialCmd)
}

::google::protobuf::uint8* RemoveRelationSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RemoveRelationSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVERELATION];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destid(), target);
  }

  // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->relation(), target);
  }

  // optional bool to_global = 6 [default = false];
  if (has_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->to_global(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RemoveRelationSocialCmd)
  return target;
}

int RemoveRelationSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVERELATION];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 destid = 4 [default = 0];
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destid());
    }

    // optional .Cmd.ESocialRelation relation = 5 [default = ESOCIALRELATION_MIN];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

    // optional bool to_global = 6 [default = false];
    if (has_to_global()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRelationSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveRelationSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveRelationSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveRelationSocialCmd::MergeFrom(const RemoveRelationSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_to_global()) {
      set_to_global(from.to_global());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveRelationSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveRelationSocialCmd::CopyFrom(const RemoveRelationSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRelationSocialCmd::IsInitialized() const {

  return true;
}

void RemoveRelationSocialCmd::Swap(RemoveRelationSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(destid_, other->destid_);
    std::swap(relation_, other->relation_);
    std::swap(to_global_, other->to_global_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveRelationSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveRelationSocialCmd_descriptor_;
  metadata.reflection = RemoveRelationSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveSocialitySocialCmd::kCmdFieldNumber;
const int RemoveSocialitySocialCmd::kParamFieldNumber;
const int RemoveSocialitySocialCmd::kUserFieldNumber;
const int RemoveSocialitySocialCmd::kDestidFieldNumber;
const int RemoveSocialitySocialCmd::kToGlobalFieldNumber;
#endif  // !_MSC_VER

RemoveSocialitySocialCmd::RemoveSocialitySocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.RemoveSocialitySocialCmd)
}

void RemoveSocialitySocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

RemoveSocialitySocialCmd::RemoveSocialitySocialCmd(const RemoveSocialitySocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.RemoveSocialitySocialCmd)
}

void RemoveSocialitySocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 84;
  user_ = NULL;
  destid_ = GOOGLE_ULONGLONG(0);
  to_global_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveSocialitySocialCmd::~RemoveSocialitySocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.RemoveSocialitySocialCmd)
  SharedDtor();
}

void RemoveSocialitySocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void RemoveSocialitySocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveSocialitySocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveSocialitySocialCmd_descriptor_;
}

const RemoveSocialitySocialCmd& RemoveSocialitySocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

RemoveSocialitySocialCmd* RemoveSocialitySocialCmd::default_instance_ = NULL;

RemoveSocialitySocialCmd* RemoveSocialitySocialCmd::New() const {
  return new RemoveSocialitySocialCmd;
}

void RemoveSocialitySocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RemoveSocialitySocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(destid_, to_global_);
    cmd_ = 208;
    param_ = 84;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveSocialitySocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.RemoveSocialitySocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVESOCIAL];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_destid;
        break;
      }

      // optional uint64 destid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_destid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_to_global;
        break;
      }

      // optional bool to_global = 5 [default = false];
      case 5: {
        if (tag == 40) {
         parse_to_global:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &to_global_)));
          set_has_to_global();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.RemoveSocialitySocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.RemoveSocialitySocialCmd)
  return false;
#undef DO_
}

void RemoveSocialitySocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.RemoveSocialitySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVESOCIAL];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->destid(), output);
  }

  // optional bool to_global = 5 [default = false];
  if (has_to_global()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->to_global(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.RemoveSocialitySocialCmd)
}

::google::protobuf::uint8* RemoveSocialitySocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.RemoveSocialitySocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVESOCIAL];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 destid = 4 [default = 0];
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->destid(), target);
  }

  // optional bool to_global = 5 [default = false];
  if (has_to_global()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->to_global(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.RemoveSocialitySocialCmd)
  return target;
}

int RemoveSocialitySocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_REMOVESOCIAL];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 destid = 4 [default = 0];
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destid());
    }

    // optional bool to_global = 5 [default = false];
    if (has_to_global()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveSocialitySocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveSocialitySocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemoveSocialitySocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveSocialitySocialCmd::MergeFrom(const RemoveSocialitySocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_destid()) {
      set_destid(from.destid());
    }
    if (from.has_to_global()) {
      set_to_global(from.to_global());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveSocialitySocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveSocialitySocialCmd::CopyFrom(const RemoveSocialitySocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveSocialitySocialCmd::IsInitialized() const {

  return true;
}

void RemoveSocialitySocialCmd::Swap(RemoveSocialitySocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(destid_, other->destid_);
    std::swap(to_global_, other->to_global_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemoveSocialitySocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemoveSocialitySocialCmd_descriptor_;
  metadata.reflection = RemoveSocialitySocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialItem::kCharidFieldNumber;
const int SocialItem::kRelationFieldNumber;
const int SocialItem::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

SocialItem::SocialItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialItem)
}

void SocialItem::InitAsDefaultInstance() {
}

SocialItem::SocialItem(const SocialItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialItem)
}

void SocialItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  relation_ = 0u;
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialItem::~SocialItem() {
  // @@protoc_insertion_point(destructor:Cmd.SocialItem)
  SharedDtor();
}

void SocialItem::SharedDtor() {
  if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete createtime_;
  }
  if (this != default_instance_) {
  }
}

void SocialItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialItem_descriptor_;
}

const SocialItem& SocialItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SocialItem* SocialItem::default_instance_ = NULL;

SocialItem* SocialItem::New() const {
  return new SocialItem;
}

void SocialItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    charid_ = GOOGLE_ULONGLONG(0);
    relation_ = 0u;
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        createtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1 [default = 0];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_relation;
        break;
      }

      // optional uint32 relation = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_createtime;
        break;
      }

      // optional string createtime = 3;
      case 3: {
        if (tag == 26) {
         parse_createtime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "createtime");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialItem)
  return false;
#undef DO_
}

void SocialItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 relation = 2 [default = 0];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->relation(), output);
  }

  // optional string createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialItem)
}

::google::protobuf::uint8* SocialItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialItem)
  // optional uint64 charid = 1 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 relation = 2 [default = 0];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->relation(), target);
  }

  // optional string createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "createtime");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialItem)
  return target;
}

int SocialItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 relation = 2 [default = 0];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relation());
    }

    // optional string createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialItem::MergeFrom(const SocialItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialItem::CopyFrom(const SocialItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialItem::IsInitialized() const {

  return true;
}

void SocialItem::Swap(SocialItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(relation_, other->relation_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialItem_descriptor_;
  metadata.reflection = SocialItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncSocialListSocialCmd::kCmdFieldNumber;
const int SyncSocialListSocialCmd::kParamFieldNumber;
const int SyncSocialListSocialCmd::kCharidFieldNumber;
const int SyncSocialListSocialCmd::kItemsFieldNumber;
#endif  // !_MSC_VER

SyncSocialListSocialCmd::SyncSocialListSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncSocialListSocialCmd)
}

void SyncSocialListSocialCmd::InitAsDefaultInstance() {
}

SyncSocialListSocialCmd::SyncSocialListSocialCmd(const SyncSocialListSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncSocialListSocialCmd)
}

void SyncSocialListSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 85;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncSocialListSocialCmd::~SyncSocialListSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncSocialListSocialCmd)
  SharedDtor();
}

void SyncSocialListSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncSocialListSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncSocialListSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncSocialListSocialCmd_descriptor_;
}

const SyncSocialListSocialCmd& SyncSocialListSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SyncSocialListSocialCmd* SyncSocialListSocialCmd::default_instance_ = NULL;

SyncSocialListSocialCmd* SyncSocialListSocialCmd::New() const {
  return new SyncSocialListSocialCmd;
}

void SyncSocialListSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 85;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncSocialListSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncSocialListSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_SYNC_LIST];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        break;
      }

      // repeated .Cmd.SocialItem items = 4;
      case 4: {
        if (tag == 34) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncSocialListSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncSocialListSocialCmd)
  return false;
#undef DO_
}

void SyncSocialListSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncSocialListSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_SYNC_LIST];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.SocialItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncSocialListSocialCmd)
}

::google::protobuf::uint8* SyncSocialListSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncSocialListSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_SYNC_LIST];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.SocialItem items = 4;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncSocialListSocialCmd)
  return target;
}

int SyncSocialListSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_SYNC_LIST];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.SocialItem items = 4;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncSocialListSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncSocialListSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncSocialListSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncSocialListSocialCmd::MergeFrom(const SyncSocialListSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncSocialListSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncSocialListSocialCmd::CopyFrom(const SyncSocialListSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncSocialListSocialCmd::IsInitialized() const {

  return true;
}

void SyncSocialListSocialCmd::Swap(SyncSocialListSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncSocialListSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncSocialListSocialCmd_descriptor_;
  metadata.reflection = SyncSocialListSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialListUpdateSocialCmd::kCmdFieldNumber;
const int SocialListUpdateSocialCmd::kParamFieldNumber;
const int SocialListUpdateSocialCmd::kCharidFieldNumber;
const int SocialListUpdateSocialCmd::kUpdatesFieldNumber;
const int SocialListUpdateSocialCmd::kDelsFieldNumber;
#endif  // !_MSC_VER

SocialListUpdateSocialCmd::SocialListUpdateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SocialListUpdateSocialCmd)
}

void SocialListUpdateSocialCmd::InitAsDefaultInstance() {
}

SocialListUpdateSocialCmd::SocialListUpdateSocialCmd(const SocialListUpdateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SocialListUpdateSocialCmd)
}

void SocialListUpdateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 86;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialListUpdateSocialCmd::~SocialListUpdateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SocialListUpdateSocialCmd)
  SharedDtor();
}

void SocialListUpdateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SocialListUpdateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialListUpdateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialListUpdateSocialCmd_descriptor_;
}

const SocialListUpdateSocialCmd& SocialListUpdateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SocialListUpdateSocialCmd* SocialListUpdateSocialCmd::default_instance_ = NULL;

SocialListUpdateSocialCmd* SocialListUpdateSocialCmd::New() const {
  return new SocialListUpdateSocialCmd;
}

void SocialListUpdateSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 86;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  updates_.Clear();
  dels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialListUpdateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SocialListUpdateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_LIST_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        break;
      }

      // repeated .Cmd.SocialItem updates = 4;
      case 4: {
        if (tag == 34) {
         parse_updates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_updates;
        if (input->ExpectTag(40)) goto parse_dels;
        break;
      }

      // repeated uint64 dels = 5;
      case 5: {
        if (tag == 40) {
         parse_dels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_dels())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dels())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_dels;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SocialListUpdateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SocialListUpdateSocialCmd)
  return false;
#undef DO_
}

void SocialListUpdateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SocialListUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_LIST_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.SocialItem updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updates(i), output);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->dels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SocialListUpdateSocialCmd)
}

::google::protobuf::uint8* SocialListUpdateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SocialListUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_LIST_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.SocialItem updates = 4;
  for (int i = 0; i < this->updates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updates(i), target);
  }

  // repeated uint64 dels = 5;
  for (int i = 0; i < this->dels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->dels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SocialListUpdateSocialCmd)
  return target;
}

int SocialListUpdateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_LIST_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.SocialItem updates = 4;
  total_size += 1 * this->updates_size();
  for (int i = 0; i < this->updates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updates(i));
  }

  // repeated uint64 dels = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->dels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dels(i));
    }
    total_size += 1 * this->dels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialListUpdateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialListUpdateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialListUpdateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialListUpdateSocialCmd::MergeFrom(const SocialListUpdateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  updates_.MergeFrom(from.updates_);
  dels_.MergeFrom(from.dels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialListUpdateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialListUpdateSocialCmd::CopyFrom(const SocialListUpdateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialListUpdateSocialCmd::IsInitialized() const {

  return true;
}

void SocialListUpdateSocialCmd::Swap(SocialListUpdateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    updates_.Swap(&other->updates_);
    dels_.Swap(&other->dels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialListUpdateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialListUpdateSocialCmd_descriptor_;
  metadata.reflection = SocialListUpdateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRelationTimeSocialCmd::kCmdFieldNumber;
const int UpdateRelationTimeSocialCmd::kParamFieldNumber;
const int UpdateRelationTimeSocialCmd::kCharidFieldNumber;
const int UpdateRelationTimeSocialCmd::kTargetidFieldNumber;
const int UpdateRelationTimeSocialCmd::kTimeFieldNumber;
const int UpdateRelationTimeSocialCmd::kRelationFieldNumber;
#endif  // !_MSC_VER

UpdateRelationTimeSocialCmd::UpdateRelationTimeSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.UpdateRelationTimeSocialCmd)
}

void UpdateRelationTimeSocialCmd::InitAsDefaultInstance() {
}

UpdateRelationTimeSocialCmd::UpdateRelationTimeSocialCmd(const UpdateRelationTimeSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.UpdateRelationTimeSocialCmd)
}

void UpdateRelationTimeSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 91;
  charid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  time_ = 0u;
  relation_ = 8;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRelationTimeSocialCmd::~UpdateRelationTimeSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.UpdateRelationTimeSocialCmd)
  SharedDtor();
}

void UpdateRelationTimeSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateRelationTimeSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRelationTimeSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRelationTimeSocialCmd_descriptor_;
}

const UpdateRelationTimeSocialCmd& UpdateRelationTimeSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

UpdateRelationTimeSocialCmd* UpdateRelationTimeSocialCmd::default_instance_ = NULL;

UpdateRelationTimeSocialCmd* UpdateRelationTimeSocialCmd::New() const {
  return new UpdateRelationTimeSocialCmd;
}

void UpdateRelationTimeSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateRelationTimeSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(charid_, time_);
    cmd_ = 208;
    param_ = 91;
    relation_ = 8;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRelationTimeSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.UpdateRelationTimeSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_UPDATE_RELATIONTIME];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_targetid;
        break;
      }

      // optional uint64 targetid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_relation;
        break;
      }

      // optional .Cmd.ESocialRelation relation = 6 [default = ESOCIALRELATION_CHAT];
      case 6: {
        if (tag == 48) {
         parse_relation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ESocialRelation_IsValid(value)) {
            set_relation(static_cast< ::Cmd::ESocialRelation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.UpdateRelationTimeSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.UpdateRelationTimeSocialCmd)
  return false;
#undef DO_
}

void UpdateRelationTimeSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.UpdateRelationTimeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_UPDATE_RELATIONTIME];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional .Cmd.ESocialRelation relation = 6 [default = ESOCIALRELATION_CHAT];
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.UpdateRelationTimeSocialCmd)
}

::google::protobuf::uint8* UpdateRelationTimeSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.UpdateRelationTimeSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_UPDATE_RELATIONTIME];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional uint64 targetid = 4 [default = 0];
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional uint32 time = 5 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional .Cmd.ESocialRelation relation = 6 [default = ESOCIALRELATION_CHAT];
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.UpdateRelationTimeSocialCmd)
  return target;
}

int UpdateRelationTimeSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SOCIAL_UPDATE_RELATIONTIME];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint64 targetid = 4 [default = 0];
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint32 time = 5 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional .Cmd.ESocialRelation relation = 6 [default = ESOCIALRELATION_CHAT];
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRelationTimeSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRelationTimeSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRelationTimeSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRelationTimeSocialCmd::MergeFrom(const UpdateRelationTimeSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRelationTimeSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRelationTimeSocialCmd::CopyFrom(const UpdateRelationTimeSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRelationTimeSocialCmd::IsInitialized() const {

  return true;
}

void UpdateRelationTimeSocialCmd::Swap(UpdateRelationTimeSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(targetid_, other->targetid_);
    std::swap(time_, other->time_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRelationTimeSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRelationTimeSocialCmd_descriptor_;
  metadata.reflection = UpdateRelationTimeSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamerQuestUpdateSocialCmd::kCmdFieldNumber;
const int TeamerQuestUpdateSocialCmd::kParamFieldNumber;
const int TeamerQuestUpdateSocialCmd::kQuestFieldNumber;
#endif  // !_MSC_VER

TeamerQuestUpdateSocialCmd::TeamerQuestUpdateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamerQuestUpdateSocialCmd)
}

void TeamerQuestUpdateSocialCmd::InitAsDefaultInstance() {
  quest_ = const_cast< ::Cmd::MemberWantedQuest*>(&::Cmd::MemberWantedQuest::default_instance());
}

TeamerQuestUpdateSocialCmd::TeamerQuestUpdateSocialCmd(const TeamerQuestUpdateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamerQuestUpdateSocialCmd)
}

void TeamerQuestUpdateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 87;
  quest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamerQuestUpdateSocialCmd::~TeamerQuestUpdateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamerQuestUpdateSocialCmd)
  SharedDtor();
}

void TeamerQuestUpdateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete quest_;
  }
}

void TeamerQuestUpdateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamerQuestUpdateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamerQuestUpdateSocialCmd_descriptor_;
}

const TeamerQuestUpdateSocialCmd& TeamerQuestUpdateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamerQuestUpdateSocialCmd* TeamerQuestUpdateSocialCmd::default_instance_ = NULL;

TeamerQuestUpdateSocialCmd* TeamerQuestUpdateSocialCmd::New() const {
  return new TeamerQuestUpdateSocialCmd;
}

void TeamerQuestUpdateSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 87;
    if (has_quest()) {
      if (quest_ != NULL) quest_->::Cmd::MemberWantedQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamerQuestUpdateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamerQuestUpdateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUEST_UPDATE];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quest;
        break;
      }

      // optional .Cmd.MemberWantedQuest quest = 3;
      case 3: {
        if (tag == 26) {
         parse_quest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quest()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamerQuestUpdateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamerQuestUpdateSocialCmd)
  return false;
#undef DO_
}

void TeamerQuestUpdateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamerQuestUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUEST_UPDATE];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.MemberWantedQuest quest = 3;
  if (has_quest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quest(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamerQuestUpdateSocialCmd)
}

::google::protobuf::uint8* TeamerQuestUpdateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamerQuestUpdateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUEST_UPDATE];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.MemberWantedQuest quest = 3;
  if (has_quest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quest(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamerQuestUpdateSocialCmd)
  return target;
}

int TeamerQuestUpdateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_TEAM_QUEST_UPDATE];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.MemberWantedQuest quest = 3;
    if (has_quest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quest());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamerQuestUpdateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamerQuestUpdateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamerQuestUpdateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamerQuestUpdateSocialCmd::MergeFrom(const TeamerQuestUpdateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_quest()) {
      mutable_quest()->::Cmd::MemberWantedQuest::MergeFrom(from.quest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamerQuestUpdateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamerQuestUpdateSocialCmd::CopyFrom(const TeamerQuestUpdateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamerQuestUpdateSocialCmd::IsInitialized() const {

  return true;
}

void TeamerQuestUpdateSocialCmd::Swap(TeamerQuestUpdateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(quest_, other->quest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamerQuestUpdateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamerQuestUpdateSocialCmd_descriptor_;
  metadata.reflection = TeamerQuestUpdateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalForwardCmdSocialCmd::kCmdFieldNumber;
const int GlobalForwardCmdSocialCmd::kParamFieldNumber;
const int GlobalForwardCmdSocialCmd::kCharidFieldNumber;
const int GlobalForwardCmdSocialCmd::kDataFieldNumber;
const int GlobalForwardCmdSocialCmd::kLenFieldNumber;
const int GlobalForwardCmdSocialCmd::kDirFieldNumber;
#endif  // !_MSC_VER

GlobalForwardCmdSocialCmd::GlobalForwardCmdSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GlobalForwardCmdSocialCmd)
}

void GlobalForwardCmdSocialCmd::InitAsDefaultInstance() {
}

GlobalForwardCmdSocialCmd::GlobalForwardCmdSocialCmd(const GlobalForwardCmdSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GlobalForwardCmdSocialCmd)
}

void GlobalForwardCmdSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 88;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  dir_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalForwardCmdSocialCmd::~GlobalForwardCmdSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.GlobalForwardCmdSocialCmd)
  SharedDtor();
}

void GlobalForwardCmdSocialCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalForwardCmdSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalForwardCmdSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalForwardCmdSocialCmd_descriptor_;
}

const GlobalForwardCmdSocialCmd& GlobalForwardCmdSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GlobalForwardCmdSocialCmd* GlobalForwardCmdSocialCmd::default_instance_ = NULL;

GlobalForwardCmdSocialCmd* GlobalForwardCmdSocialCmd::New() const {
  return new GlobalForwardCmdSocialCmd;
}

void GlobalForwardCmdSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GlobalForwardCmdSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(len_, dir_);
    cmd_ = 208;
    param_ = 88;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalForwardCmdSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GlobalForwardCmdSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_dir;
        break;
      }

      // optional .Cmd.EDir dir = 6;
      case 6: {
        if (tag == 48) {
         parse_dir:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::EDir_IsValid(value)) {
            set_dir(static_cast< ::Cmd::EDir >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GlobalForwardCmdSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GlobalForwardCmdSocialCmd)
  return false;
#undef DO_
}

void GlobalForwardCmdSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GlobalForwardCmdSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  // optional .Cmd.EDir dir = 6;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GlobalForwardCmdSocialCmd)
}

::google::protobuf::uint8* GlobalForwardCmdSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GlobalForwardCmdSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  // optional .Cmd.EDir dir = 6;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GlobalForwardCmdSocialCmd)
  return target;
}

int GlobalForwardCmdSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

    // optional .Cmd.EDir dir = 6;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalForwardCmdSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalForwardCmdSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalForwardCmdSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalForwardCmdSocialCmd::MergeFrom(const GlobalForwardCmdSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
    if (from.has_dir()) {
      set_dir(from.dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalForwardCmdSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalForwardCmdSocialCmd::CopyFrom(const GlobalForwardCmdSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalForwardCmdSocialCmd::IsInitialized() const {

  return true;
}

void GlobalForwardCmdSocialCmd::Swap(GlobalForwardCmdSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(dir_, other->dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalForwardCmdSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalForwardCmdSocialCmd_descriptor_;
  metadata.reflection = GlobalForwardCmdSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthorizeInfoSyncSocialCmd::kCmdFieldNumber;
const int AuthorizeInfoSyncSocialCmd::kParamFieldNumber;
const int AuthorizeInfoSyncSocialCmd::kCharidFieldNumber;
const int AuthorizeInfoSyncSocialCmd::kIgnorepwdFieldNumber;
#endif  // !_MSC_VER

AuthorizeInfoSyncSocialCmd::AuthorizeInfoSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.AuthorizeInfoSyncSocialCmd)
}

void AuthorizeInfoSyncSocialCmd::InitAsDefaultInstance() {
}

AuthorizeInfoSyncSocialCmd::AuthorizeInfoSyncSocialCmd(const AuthorizeInfoSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.AuthorizeInfoSyncSocialCmd)
}

void AuthorizeInfoSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 90;
  charid_ = GOOGLE_ULONGLONG(0);
  ignorepwd_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthorizeInfoSyncSocialCmd::~AuthorizeInfoSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.AuthorizeInfoSyncSocialCmd)
  SharedDtor();
}

void AuthorizeInfoSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AuthorizeInfoSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthorizeInfoSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthorizeInfoSyncSocialCmd_descriptor_;
}

const AuthorizeInfoSyncSocialCmd& AuthorizeInfoSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

AuthorizeInfoSyncSocialCmd* AuthorizeInfoSyncSocialCmd::default_instance_ = NULL;

AuthorizeInfoSyncSocialCmd* AuthorizeInfoSyncSocialCmd::New() const {
  return new AuthorizeInfoSyncSocialCmd;
}

void AuthorizeInfoSyncSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AuthorizeInfoSyncSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(charid_, ignorepwd_);
    cmd_ = 208;
    param_ = 90;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthorizeInfoSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.AuthorizeInfoSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_AUTHORIZE_SYNC_INFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_ignorepwd;
        break;
      }

      // optional bool ignorepwd = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_ignorepwd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignorepwd_)));
          set_has_ignorepwd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.AuthorizeInfoSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.AuthorizeInfoSyncSocialCmd)
  return false;
#undef DO_
}

void AuthorizeInfoSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.AuthorizeInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_AUTHORIZE_SYNC_INFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bool ignorepwd = 4 [default = false];
  if (has_ignorepwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ignorepwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.AuthorizeInfoSyncSocialCmd)
}

::google::protobuf::uint8* AuthorizeInfoSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.AuthorizeInfoSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_AUTHORIZE_SYNC_INFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bool ignorepwd = 4 [default = false];
  if (has_ignorepwd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ignorepwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.AuthorizeInfoSyncSocialCmd)
  return target;
}

int AuthorizeInfoSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_AUTHORIZE_SYNC_INFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bool ignorepwd = 4 [default = false];
    if (has_ignorepwd()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthorizeInfoSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthorizeInfoSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthorizeInfoSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthorizeInfoSyncSocialCmd::MergeFrom(const AuthorizeInfoSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ignorepwd()) {
      set_ignorepwd(from.ignorepwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthorizeInfoSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthorizeInfoSyncSocialCmd::CopyFrom(const AuthorizeInfoSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthorizeInfoSyncSocialCmd::IsInitialized() const {

  return true;
}

void AuthorizeInfoSyncSocialCmd::Swap(AuthorizeInfoSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(ignorepwd_, other->ignorepwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthorizeInfoSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthorizeInfoSyncSocialCmd_descriptor_;
  metadata.reflection = AuthorizeInfoSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncRedTipSocialCmd::kCmdFieldNumber;
const int SyncRedTipSocialCmd::kParamFieldNumber;
const int SyncRedTipSocialCmd::kDwidFieldNumber;
const int SyncRedTipSocialCmd::kCharidFieldNumber;
const int SyncRedTipSocialCmd::kRedFieldNumber;
const int SyncRedTipSocialCmd::kAddFieldNumber;
#endif  // !_MSC_VER

SyncRedTipSocialCmd::SyncRedTipSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncRedTipSocialCmd)
}

void SyncRedTipSocialCmd::InitAsDefaultInstance() {
}

SyncRedTipSocialCmd::SyncRedTipSocialCmd(const SyncRedTipSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncRedTipSocialCmd)
}

void SyncRedTipSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 92;
  dwid_ = GOOGLE_ULONGLONG(0);
  charid_ = GOOGLE_ULONGLONG(0);
  red_ = 0;
  add_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncRedTipSocialCmd::~SyncRedTipSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncRedTipSocialCmd)
  SharedDtor();
}

void SyncRedTipSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncRedTipSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncRedTipSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncRedTipSocialCmd_descriptor_;
}

const SyncRedTipSocialCmd& SyncRedTipSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SyncRedTipSocialCmd* SyncRedTipSocialCmd::default_instance_ = NULL;

SyncRedTipSocialCmd* SyncRedTipSocialCmd::New() const {
  return new SyncRedTipSocialCmd;
}

void SyncRedTipSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncRedTipSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(dwid_, add_);
    cmd_ = 208;
    param_ = 92;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncRedTipSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncRedTipSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_REDTIP];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dwid;
        break;
      }

      // optional uint64 dwid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_dwid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dwid_)));
          set_has_dwid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_red;
        break;
      }

      // optional .Cmd.ERedSys red = 5 [default = EREDSYS_MIN];
      case 5: {
        if (tag == 40) {
         parse_red:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::ERedSys_IsValid(value)) {
            set_red(static_cast< ::Cmd::ERedSys >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_add;
        break;
      }

      // optional bool add = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &add_)));
          set_has_add();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncRedTipSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncRedTipSocialCmd)
  return false;
#undef DO_
}

void SyncRedTipSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncRedTipSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_REDTIP];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 dwid = 3 [default = 0];
  if (has_dwid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->dwid(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.ERedSys red = 5 [default = EREDSYS_MIN];
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->red(), output);
  }

  // optional bool add = 6 [default = false];
  if (has_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->add(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncRedTipSocialCmd)
}

::google::protobuf::uint8* SyncRedTipSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncRedTipSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_REDTIP];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 dwid = 3 [default = 0];
  if (has_dwid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->dwid(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.ERedSys red = 5 [default = EREDSYS_MIN];
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->red(), target);
  }

  // optional bool add = 6 [default = false];
  if (has_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->add(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncRedTipSocialCmd)
  return target;
}

int SyncRedTipSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_REDTIP];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 dwid = 3 [default = 0];
    if (has_dwid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dwid());
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.ERedSys red = 5 [default = EREDSYS_MIN];
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
    }

    // optional bool add = 6 [default = false];
    if (has_add()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncRedTipSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncRedTipSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncRedTipSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncRedTipSocialCmd::MergeFrom(const SyncRedTipSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_dwid()) {
      set_dwid(from.dwid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_add()) {
      set_add(from.add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncRedTipSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncRedTipSocialCmd::CopyFrom(const SyncRedTipSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncRedTipSocialCmd::IsInitialized() const {

  return true;
}

void SyncRedTipSocialCmd::Swap(SyncRedTipSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(dwid_, other->dwid_);
    std::swap(charid_, other->charid_);
    std::swap(red_, other->red_);
    std::swap(add_, other->add_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncRedTipSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncRedTipSocialCmd_descriptor_;
  metadata.reflection = SyncRedTipSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendTutorRewardSocialCmd::kCmdFieldNumber;
const int SendTutorRewardSocialCmd::kParamFieldNumber;
const int SendTutorRewardSocialCmd::kCharidFieldNumber;
const int SendTutorRewardSocialCmd::kRewardsFieldNumber;
#endif  // !_MSC_VER

SendTutorRewardSocialCmd::SendTutorRewardSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SendTutorRewardSocialCmd)
}

void SendTutorRewardSocialCmd::InitAsDefaultInstance() {
}

SendTutorRewardSocialCmd::SendTutorRewardSocialCmd(const SendTutorRewardSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SendTutorRewardSocialCmd)
}

void SendTutorRewardSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 93;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendTutorRewardSocialCmd::~SendTutorRewardSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SendTutorRewardSocialCmd)
  SharedDtor();
}

void SendTutorRewardSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SendTutorRewardSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendTutorRewardSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendTutorRewardSocialCmd_descriptor_;
}

const SendTutorRewardSocialCmd& SendTutorRewardSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SendTutorRewardSocialCmd* SendTutorRewardSocialCmd::default_instance_ = NULL;

SendTutorRewardSocialCmd* SendTutorRewardSocialCmd::New() const {
  return new SendTutorRewardSocialCmd;
}

void SendTutorRewardSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    cmd_ = 208;
    param_ = 93;
    charid_ = GOOGLE_ULONGLONG(0);
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendTutorRewardSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SendTutorRewardSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_TUTOR_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        break;
      }

      // repeated .Cmd.TutorReward rewards = 4;
      case 4: {
        if (tag == 34) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_rewards;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SendTutorRewardSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SendTutorRewardSocialCmd)
  return false;
#undef DO_
}

void SendTutorRewardSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SendTutorRewardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_TUTOR_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // repeated .Cmd.TutorReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SendTutorRewardSocialCmd)
}

::google::protobuf::uint8* SendTutorRewardSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SendTutorRewardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_TUTOR_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // repeated .Cmd.TutorReward rewards = 4;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SendTutorRewardSocialCmd)
  return target;
}

int SendTutorRewardSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SEND_TUTOR_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  // repeated .Cmd.TutorReward rewards = 4;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendTutorRewardSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendTutorRewardSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendTutorRewardSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendTutorRewardSocialCmd::MergeFrom(const SendTutorRewardSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendTutorRewardSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendTutorRewardSocialCmd::CopyFrom(const SendTutorRewardSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTutorRewardSocialCmd::IsInitialized() const {

  return true;
}

void SendTutorRewardSocialCmd::Swap(SendTutorRewardSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendTutorRewardSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendTutorRewardSocialCmd_descriptor_;
  metadata.reflection = SendTutorRewardSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncTutorRewardSocialCmd::kCmdFieldNumber;
const int SyncTutorRewardSocialCmd::kParamFieldNumber;
const int SyncTutorRewardSocialCmd::kSearchuserFieldNumber;
const int SyncTutorRewardSocialCmd::kCharidFieldNumber;
const int SyncTutorRewardSocialCmd::kRewardFieldNumber;
const int SyncTutorRewardSocialCmd::kRedpointtipFieldNumber;
#endif  // !_MSC_VER

SyncTutorRewardSocialCmd::SyncTutorRewardSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.SyncTutorRewardSocialCmd)
}

void SyncTutorRewardSocialCmd::InitAsDefaultInstance() {
  reward_ = const_cast< ::Cmd::TutorReward*>(&::Cmd::TutorReward::default_instance());
}

SyncTutorRewardSocialCmd::SyncTutorRewardSocialCmd(const SyncTutorRewardSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.SyncTutorRewardSocialCmd)
}

void SyncTutorRewardSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 94;
  searchuser_ = false;
  charid_ = GOOGLE_ULONGLONG(0);
  reward_ = NULL;
  redpointtip_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncTutorRewardSocialCmd::~SyncTutorRewardSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.SyncTutorRewardSocialCmd)
  SharedDtor();
}

void SyncTutorRewardSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete reward_;
  }
}

void SyncTutorRewardSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncTutorRewardSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncTutorRewardSocialCmd_descriptor_;
}

const SyncTutorRewardSocialCmd& SyncTutorRewardSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

SyncTutorRewardSocialCmd* SyncTutorRewardSocialCmd::default_instance_ = NULL;

SyncTutorRewardSocialCmd* SyncTutorRewardSocialCmd::New() const {
  return new SyncTutorRewardSocialCmd;
}

void SyncTutorRewardSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SyncTutorRewardSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(redpointtip_, searchuser_);
    cmd_ = 208;
    param_ = 94;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_reward()) {
      if (reward_ != NULL) reward_->::Cmd::TutorReward::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncTutorRewardSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.SyncTutorRewardSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TUTOR_REWARD];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_searchuser;
        break;
      }

      // optional bool searchuser = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_searchuser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &searchuser_)));
          set_has_searchuser();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_reward;
        break;
      }

      // optional .Cmd.TutorReward reward = 5;
      case 5: {
        if (tag == 42) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reward()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_redpointtip;
        break;
      }

      // optional uint64 redpointtip = 6 [default = 0];
      case 6: {
        if (tag == 48) {
         parse_redpointtip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &redpointtip_)));
          set_has_redpointtip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.SyncTutorRewardSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.SyncTutorRewardSocialCmd)
  return false;
#undef DO_
}

void SyncTutorRewardSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.SyncTutorRewardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TUTOR_REWARD];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional bool searchuser = 3 [default = false];
  if (has_searchuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->searchuser(), output);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->charid(), output);
  }

  // optional .Cmd.TutorReward reward = 5;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->reward(), output);
  }

  // optional uint64 redpointtip = 6 [default = 0];
  if (has_redpointtip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->redpointtip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.SyncTutorRewardSocialCmd)
}

::google::protobuf::uint8* SyncTutorRewardSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.SyncTutorRewardSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TUTOR_REWARD];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional bool searchuser = 3 [default = false];
  if (has_searchuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->searchuser(), target);
  }

  // optional uint64 charid = 4 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->charid(), target);
  }

  // optional .Cmd.TutorReward reward = 5;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->reward(), target);
  }

  // optional uint64 redpointtip = 6 [default = 0];
  if (has_redpointtip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->redpointtip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.SyncTutorRewardSocialCmd)
  return target;
}

int SyncTutorRewardSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TUTOR_REWARD];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional bool searchuser = 3 [default = false];
    if (has_searchuser()) {
      total_size += 1 + 1;
    }

    // optional uint64 charid = 4 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .Cmd.TutorReward reward = 5;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->reward());
    }

    // optional uint64 redpointtip = 6 [default = 0];
    if (has_redpointtip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->redpointtip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncTutorRewardSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncTutorRewardSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncTutorRewardSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncTutorRewardSocialCmd::MergeFrom(const SyncTutorRewardSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_searchuser()) {
      set_searchuser(from.searchuser());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_reward()) {
      mutable_reward()->::Cmd::TutorReward::MergeFrom(from.reward());
    }
    if (from.has_redpointtip()) {
      set_redpointtip(from.redpointtip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncTutorRewardSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncTutorRewardSocialCmd::CopyFrom(const SyncTutorRewardSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncTutorRewardSocialCmd::IsInitialized() const {

  return true;
}

void SyncTutorRewardSocialCmd::Swap(SyncTutorRewardSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(searchuser_, other->searchuser_);
    std::swap(charid_, other->charid_);
    std::swap(reward_, other->reward_);
    std::swap(redpointtip_, other->redpointtip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncTutorRewardSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncTutorRewardSocialCmd_descriptor_;
  metadata.reflection = SyncTutorRewardSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalForwardCmdSocialCmd2::kCmdFieldNumber;
const int GlobalForwardCmdSocialCmd2::kParamFieldNumber;
const int GlobalForwardCmdSocialCmd2::kCharidFieldNumber;
const int GlobalForwardCmdSocialCmd2::kDataFieldNumber;
const int GlobalForwardCmdSocialCmd2::kLenFieldNumber;
#endif  // !_MSC_VER

GlobalForwardCmdSocialCmd2::GlobalForwardCmdSocialCmd2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.GlobalForwardCmdSocialCmd2)
}

void GlobalForwardCmdSocialCmd2::InitAsDefaultInstance() {
}

GlobalForwardCmdSocialCmd2::GlobalForwardCmdSocialCmd2(const GlobalForwardCmdSocialCmd2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.GlobalForwardCmdSocialCmd2)
}

void GlobalForwardCmdSocialCmd2::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 95;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalForwardCmdSocialCmd2::~GlobalForwardCmdSocialCmd2() {
  // @@protoc_insertion_point(destructor:Cmd.GlobalForwardCmdSocialCmd2)
  SharedDtor();
}

void GlobalForwardCmdSocialCmd2::SharedDtor() {
  if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalForwardCmdSocialCmd2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalForwardCmdSocialCmd2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalForwardCmdSocialCmd2_descriptor_;
}

const GlobalForwardCmdSocialCmd2& GlobalForwardCmdSocialCmd2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

GlobalForwardCmdSocialCmd2* GlobalForwardCmdSocialCmd2::default_instance_ = NULL;

GlobalForwardCmdSocialCmd2* GlobalForwardCmdSocialCmd2::New() const {
  return new GlobalForwardCmdSocialCmd2;
}

void GlobalForwardCmdSocialCmd2::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    cmd_ = 208;
    param_ = 95;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        data_->clear();
      }
    }
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalForwardCmdSocialCmd2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.GlobalForwardCmdSocialCmd2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD2];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3;
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (tag == 34) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_len;
        break;
      }

      // optional uint32 len = 5;
      case 5: {
        if (tag == 40) {
         parse_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.GlobalForwardCmdSocialCmd2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.GlobalForwardCmdSocialCmd2)
  return false;
#undef DO_
}

void GlobalForwardCmdSocialCmd2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.GlobalForwardCmdSocialCmd2)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD2];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->len(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.GlobalForwardCmdSocialCmd2)
}

::google::protobuf::uint8* GlobalForwardCmdSocialCmd2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.GlobalForwardCmdSocialCmd2)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD2];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 len = 5;
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->len(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.GlobalForwardCmdSocialCmd2)
  return target;
}

int GlobalForwardCmdSocialCmd2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_GLOBAL_FORWARD_CMD2];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 len = 5;
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalForwardCmdSocialCmd2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalForwardCmdSocialCmd2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalForwardCmdSocialCmd2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalForwardCmdSocialCmd2::MergeFrom(const GlobalForwardCmdSocialCmd2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalForwardCmdSocialCmd2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalForwardCmdSocialCmd2::CopyFrom(const GlobalForwardCmdSocialCmd2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalForwardCmdSocialCmd2::IsInitialized() const {

  return true;
}

void GlobalForwardCmdSocialCmd2::Swap(GlobalForwardCmdSocialCmd2* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalForwardCmdSocialCmd2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalForwardCmdSocialCmd2_descriptor_;
  metadata.reflection = GlobalForwardCmdSocialCmd2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardSceneCreateSocialCmd::kCmdFieldNumber;
const int CardSceneCreateSocialCmd::kParamFieldNumber;
const int CardSceneCreateSocialCmd::kUseridFieldNumber;
const int CardSceneCreateSocialCmd::kTeamidFieldNumber;
const int CardSceneCreateSocialCmd::kConfigidFieldNumber;
#endif  // !_MSC_VER

CardSceneCreateSocialCmd::CardSceneCreateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CardSceneCreateSocialCmd)
}

void CardSceneCreateSocialCmd::InitAsDefaultInstance() {
}

CardSceneCreateSocialCmd::CardSceneCreateSocialCmd(const CardSceneCreateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CardSceneCreateSocialCmd)
}

void CardSceneCreateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 65;
  userid_ = GOOGLE_ULONGLONG(0);
  teamid_ = GOOGLE_ULONGLONG(0);
  configid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardSceneCreateSocialCmd::~CardSceneCreateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CardSceneCreateSocialCmd)
  SharedDtor();
}

void CardSceneCreateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardSceneCreateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSceneCreateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardSceneCreateSocialCmd_descriptor_;
}

const CardSceneCreateSocialCmd& CardSceneCreateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

CardSceneCreateSocialCmd* CardSceneCreateSocialCmd::default_instance_ = NULL;

CardSceneCreateSocialCmd* CardSceneCreateSocialCmd::New() const {
  return new CardSceneCreateSocialCmd;
}

void CardSceneCreateSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardSceneCreateSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(userid_, configid_);
    cmd_ = 208;
    param_ = 65;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardSceneCreateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CardSceneCreateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_PVECARDRAID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_userid;
        break;
      }

      // optional uint64 userid = 3;
      case 3: {
        if (tag == 24) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_configid;
        break;
      }

      // optional uint32 configid = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_configid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &configid_)));
          set_has_configid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CardSceneCreateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CardSceneCreateSocialCmd)
  return false;
#undef DO_
}

void CardSceneCreateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CardSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_PVECARDRAID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 userid = 3;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->userid(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 configid = 5 [default = 0];
  if (has_configid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->configid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CardSceneCreateSocialCmd)
}

::google::protobuf::uint8* CardSceneCreateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CardSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_PVECARDRAID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 userid = 3;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->userid(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 configid = 5 [default = 0];
  if (has_configid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->configid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CardSceneCreateSocialCmd)
  return target;
}

int CardSceneCreateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_PVECARDRAID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 userid = 3;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->userid());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 configid = 5 [default = 0];
    if (has_configid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->configid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSceneCreateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardSceneCreateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardSceneCreateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardSceneCreateSocialCmd::MergeFrom(const CardSceneCreateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_configid()) {
      set_configid(from.configid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardSceneCreateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSceneCreateSocialCmd::CopyFrom(const CardSceneCreateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSceneCreateSocialCmd::IsInitialized() const {

  return true;
}

void CardSceneCreateSocialCmd::Swap(CardSceneCreateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(userid_, other->userid_);
    std::swap(teamid_, other->teamid_);
    std::swap(configid_, other->configid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardSceneCreateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardSceneCreateSocialCmd_descriptor_;
  metadata.reflection = CardSceneCreateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CardSceneSyncSocialCmd::kCmdFieldNumber;
const int CardSceneSyncSocialCmd::kParamFieldNumber;
const int CardSceneSyncSocialCmd::kTeamidFieldNumber;
const int CardSceneSyncSocialCmd::kOpenFieldNumber;
#endif  // !_MSC_VER

CardSceneSyncSocialCmd::CardSceneSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.CardSceneSyncSocialCmd)
}

void CardSceneSyncSocialCmd::InitAsDefaultInstance() {
}

CardSceneSyncSocialCmd::CardSceneSyncSocialCmd(const CardSceneSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.CardSceneSyncSocialCmd)
}

void CardSceneSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 66;
  teamid_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CardSceneSyncSocialCmd::~CardSceneSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.CardSceneSyncSocialCmd)
  SharedDtor();
}

void CardSceneSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CardSceneSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CardSceneSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CardSceneSyncSocialCmd_descriptor_;
}

const CardSceneSyncSocialCmd& CardSceneSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

CardSceneSyncSocialCmd* CardSceneSyncSocialCmd::default_instance_ = NULL;

CardSceneSyncSocialCmd* CardSceneSyncSocialCmd::New() const {
  return new CardSceneSyncSocialCmd;
}

void CardSceneSyncSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CardSceneSyncSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(teamid_, open_);
    cmd_ = 208;
    param_ = 66;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CardSceneSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.CardSceneSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_PVECARD_SCENEINFO];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.CardSceneSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.CardSceneSyncSocialCmd)
  return false;
#undef DO_
}

void CardSceneSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.CardSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_PVECARD_SCENEINFO];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.CardSceneSyncSocialCmd)
}

::google::protobuf::uint8* CardSceneSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.CardSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_PVECARD_SCENEINFO];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.CardSceneSyncSocialCmd)
  return target;
}

int CardSceneSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_PVECARD_SCENEINFO];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional bool open = 4 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CardSceneSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CardSceneSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CardSceneSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CardSceneSyncSocialCmd::MergeFrom(const CardSceneSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CardSceneSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CardSceneSyncSocialCmd::CopyFrom(const CardSceneSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CardSceneSyncSocialCmd::IsInitialized() const {

  return true;
}

void CardSceneSyncSocialCmd::Swap(CardSceneSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(open_, other->open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CardSceneSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CardSceneSyncSocialCmd_descriptor_;
  metadata.reflection = CardSceneSyncSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModifyDepositSocialCmd::kCmdFieldNumber;
const int ModifyDepositSocialCmd::kParamFieldNumber;
const int ModifyDepositSocialCmd::kCharidFieldNumber;
const int ModifyDepositSocialCmd::kCommandFieldNumber;
#endif  // !_MSC_VER

ModifyDepositSocialCmd::ModifyDepositSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.ModifyDepositSocialCmd)
}

void ModifyDepositSocialCmd::InitAsDefaultInstance() {
}

ModifyDepositSocialCmd::ModifyDepositSocialCmd(const ModifyDepositSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.ModifyDepositSocialCmd)
}

void ModifyDepositSocialCmd::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 98;
  charid_ = GOOGLE_ULONGLONG(0);
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModifyDepositSocialCmd::~ModifyDepositSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.ModifyDepositSocialCmd)
  SharedDtor();
}

void ModifyDepositSocialCmd::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void ModifyDepositSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyDepositSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModifyDepositSocialCmd_descriptor_;
}

const ModifyDepositSocialCmd& ModifyDepositSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

ModifyDepositSocialCmd* ModifyDepositSocialCmd::default_instance_ = NULL;

ModifyDepositSocialCmd* ModifyDepositSocialCmd::New() const {
  return new ModifyDepositSocialCmd;
}

void ModifyDepositSocialCmd::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    cmd_ = 208;
    param_ = 98;
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_command()) {
      if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        command_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModifyDepositSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.ModifyDepositSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_MODIFY_DEPOSIT];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_command;
        break;
      }

      // optional string command = 4;
      case 4: {
        if (tag == 34) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.ModifyDepositSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.ModifyDepositSocialCmd)
  return false;
#undef DO_
}

void ModifyDepositSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.ModifyDepositSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_MODIFY_DEPOSIT];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->charid(), output);
  }

  // optional string command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->command(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.ModifyDepositSocialCmd)
}

::google::protobuf::uint8* ModifyDepositSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.ModifyDepositSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_MODIFY_DEPOSIT];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 charid = 3 [default = 0];
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->charid(), target);
  }

  // optional string command = 4;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->command(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.ModifyDepositSocialCmd)
  return target;
}

int ModifyDepositSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_MODIFY_DEPOSIT];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 charid = 3 [default = 0];
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional string command = 4;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyDepositSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModifyDepositSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModifyDepositSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModifyDepositSocialCmd::MergeFrom(const ModifyDepositSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModifyDepositSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyDepositSocialCmd::CopyFrom(const ModifyDepositSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyDepositSocialCmd::IsInitialized() const {

  return true;
}

void ModifyDepositSocialCmd::Swap(ModifyDepositSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(charid_, other->charid_);
    std::swap(command_, other->command_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModifyDepositSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModifyDepositSocialCmd_descriptor_;
  metadata.reflection = ModifyDepositSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidSceneCreateSocialCmd::kCmdFieldNumber;
const int TeamRaidSceneCreateSocialCmd::kParamFieldNumber;
const int TeamRaidSceneCreateSocialCmd::kUserFieldNumber;
const int TeamRaidSceneCreateSocialCmd::kTeamidFieldNumber;
const int TeamRaidSceneCreateSocialCmd::kRaidTypeFieldNumber;
#endif  // !_MSC_VER

TeamRaidSceneCreateSocialCmd::TeamRaidSceneCreateSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidSceneCreateSocialCmd)
}

void TeamRaidSceneCreateSocialCmd::InitAsDefaultInstance() {
  user_ = const_cast< ::Cmd::SocialUser*>(&::Cmd::SocialUser::default_instance());
}

TeamRaidSceneCreateSocialCmd::TeamRaidSceneCreateSocialCmd(const TeamRaidSceneCreateSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidSceneCreateSocialCmd)
}

void TeamRaidSceneCreateSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 96;
  user_ = NULL;
  teamid_ = GOOGLE_ULONGLONG(0);
  raid_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidSceneCreateSocialCmd::~TeamRaidSceneCreateSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidSceneCreateSocialCmd)
  SharedDtor();
}

void TeamRaidSceneCreateSocialCmd::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void TeamRaidSceneCreateSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidSceneCreateSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidSceneCreateSocialCmd_descriptor_;
}

const TeamRaidSceneCreateSocialCmd& TeamRaidSceneCreateSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamRaidSceneCreateSocialCmd* TeamRaidSceneCreateSocialCmd::default_instance_ = NULL;

TeamRaidSceneCreateSocialCmd* TeamRaidSceneCreateSocialCmd::New() const {
  return new TeamRaidSceneCreateSocialCmd;
}

void TeamRaidSceneCreateSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidSceneCreateSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, raid_type_);
    cmd_ = 208;
    param_ = 96;
    if (has_user()) {
      if (user_ != NULL) user_->::Cmd::SocialUser::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidSceneCreateSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidSceneCreateSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_TEAMRAID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // optional .Cmd.SocialUser user = 3;
      case 3: {
        if (tag == 26) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 4 [default = 0];
      case 4: {
        if (tag == 32) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raid_type;
        break;
      }

      // optional uint32 raid_type = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidSceneCreateSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidSceneCreateSocialCmd)
  return false;
#undef DO_
}

void TeamRaidSceneCreateSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_TEAMRAID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->user(), output);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->teamid(), output);
  }

  // optional uint32 raid_type = 5 [default = 0];
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raid_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidSceneCreateSocialCmd)
}

::google::protobuf::uint8* TeamRaidSceneCreateSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidSceneCreateSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_TEAMRAID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional .Cmd.SocialUser user = 3;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->user(), target);
  }

  // optional uint64 teamid = 4 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->teamid(), target);
  }

  // optional uint32 raid_type = 5 [default = 0];
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raid_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidSceneCreateSocialCmd)
  return target;
}

int TeamRaidSceneCreateSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_CREATE_TEAMRAID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional .Cmd.SocialUser user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

    // optional uint64 teamid = 4 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional uint32 raid_type = 5 [default = 0];
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidSceneCreateSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidSceneCreateSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidSceneCreateSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidSceneCreateSocialCmd::MergeFrom(const TeamRaidSceneCreateSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_user()) {
      mutable_user()->::Cmd::SocialUser::MergeFrom(from.user());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidSceneCreateSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidSceneCreateSocialCmd::CopyFrom(const TeamRaidSceneCreateSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidSceneCreateSocialCmd::IsInitialized() const {

  return true;
}

void TeamRaidSceneCreateSocialCmd::Swap(TeamRaidSceneCreateSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(user_, other->user_);
    std::swap(teamid_, other->teamid_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidSceneCreateSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidSceneCreateSocialCmd_descriptor_;
  metadata.reflection = TeamRaidSceneCreateSocialCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRaidSceneSyncSocialCmd::kCmdFieldNumber;
const int TeamRaidSceneSyncSocialCmd::kParamFieldNumber;
const int TeamRaidSceneSyncSocialCmd::kTeamidFieldNumber;
const int TeamRaidSceneSyncSocialCmd::kOpenFieldNumber;
const int TeamRaidSceneSyncSocialCmd::kRaidTypeFieldNumber;
#endif  // !_MSC_VER

TeamRaidSceneSyncSocialCmd::TeamRaidSceneSyncSocialCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Cmd.TeamRaidSceneSyncSocialCmd)
}

void TeamRaidSceneSyncSocialCmd::InitAsDefaultInstance() {
}

TeamRaidSceneSyncSocialCmd::TeamRaidSceneSyncSocialCmd(const TeamRaidSceneSyncSocialCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Cmd.TeamRaidSceneSyncSocialCmd)
}

void TeamRaidSceneSyncSocialCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = 208;
  param_ = 97;
  teamid_ = GOOGLE_ULONGLONG(0);
  open_ = false;
  raid_type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRaidSceneSyncSocialCmd::~TeamRaidSceneSyncSocialCmd() {
  // @@protoc_insertion_point(destructor:Cmd.TeamRaidSceneSyncSocialCmd)
  SharedDtor();
}

void TeamRaidSceneSyncSocialCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamRaidSceneSyncSocialCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRaidSceneSyncSocialCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRaidSceneSyncSocialCmd_descriptor_;
}

const TeamRaidSceneSyncSocialCmd& TeamRaidSceneSyncSocialCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SocialCmd_2eproto();
  return *default_instance_;
}

TeamRaidSceneSyncSocialCmd* TeamRaidSceneSyncSocialCmd::default_instance_ = NULL;

TeamRaidSceneSyncSocialCmd* TeamRaidSceneSyncSocialCmd::New() const {
  return new TeamRaidSceneSyncSocialCmd;
}

void TeamRaidSceneSyncSocialCmd::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TeamRaidSceneSyncSocialCmd*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(teamid_, raid_type_);
    cmd_ = 208;
    param_ = 97;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRaidSceneSyncSocialCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Cmd.TeamRaidSceneSyncSocialCmd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::Command_IsValid(value)) {
            set_cmd(static_cast< ::Cmd::Command >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_param;
        break;
      }

      // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TEAMRAID];
      case 2: {
        if (tag == 16) {
         parse_param:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Cmd::SocialParam_IsValid(value)) {
            set_param(static_cast< ::Cmd::SocialParam >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint64 teamid = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_open;
        break;
      }

      // optional bool open = 4 [default = false];
      case 4: {
        if (tag == 32) {
         parse_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &open_)));
          set_has_open();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_raid_type;
        break;
      }

      // optional uint32 raid_type = 5 [default = 0];
      case 5: {
        if (tag == 40) {
         parse_raid_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raid_type_)));
          set_has_raid_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Cmd.TeamRaidSceneSyncSocialCmd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Cmd.TeamRaidSceneSyncSocialCmd)
  return false;
#undef DO_
}

void TeamRaidSceneSyncSocialCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Cmd.TeamRaidSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->cmd(), output);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TEAMRAID];
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->param(), output);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->teamid(), output);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->open(), output);
  }

  // optional uint32 raid_type = 5 [default = 0];
  if (has_raid_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->raid_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Cmd.TeamRaidSceneSyncSocialCmd)
}

::google::protobuf::uint8* TeamRaidSceneSyncSocialCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Cmd.TeamRaidSceneSyncSocialCmd)
  // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->cmd(), target);
  }

  // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TEAMRAID];
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->param(), target);
  }

  // optional uint64 teamid = 3 [default = 0];
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->teamid(), target);
  }

  // optional bool open = 4 [default = false];
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->open(), target);
  }

  // optional uint32 raid_type = 5 [default = 0];
  if (has_raid_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->raid_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Cmd.TeamRaidSceneSyncSocialCmd)
  return target;
}

int TeamRaidSceneSyncSocialCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Cmd.Command cmd = 1 [default = SOCIAL_PROTOCMD];
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cmd());
    }

    // optional .Cmd.SocialParam param = 2 [default = SOCIALPARAM_SYNC_TEAMRAID];
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->param());
    }

    // optional uint64 teamid = 3 [default = 0];
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->teamid());
    }

    // optional bool open = 4 [default = false];
    if (has_open()) {
      total_size += 1 + 1;
    }

    // optional uint32 raid_type = 5 [default = 0];
    if (has_raid_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raid_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRaidSceneSyncSocialCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRaidSceneSyncSocialCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRaidSceneSyncSocialCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRaidSceneSyncSocialCmd::MergeFrom(const TeamRaidSceneSyncSocialCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_open()) {
      set_open(from.open());
    }
    if (from.has_raid_type()) {
      set_raid_type(from.raid_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRaidSceneSyncSocialCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRaidSceneSyncSocialCmd::CopyFrom(const TeamRaidSceneSyncSocialCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRaidSceneSyncSocialCmd::IsInitialized() const {

  return true;
}

void TeamRaidSceneSyncSocialCmd::Swap(TeamRaidSceneSyncSocialCmd* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(param_, other->param_);
    std::swap(teamid_, other->teamid_);
    std::swap(open_, other->open_);
    std::swap(raid_type_, other->raid_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRaidSceneSyncSocialCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRaidSceneSyncSocialCmd_descriptor_;
  metadata.reflection = TeamRaidSceneSyncSocialCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

// @@protoc_insertion_point(global_scope)
