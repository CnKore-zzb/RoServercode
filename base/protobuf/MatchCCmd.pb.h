// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MatchCCmd.proto

#ifndef PROTOBUF_MatchCCmd_2eproto__INCLUDED
#define PROTOBUF_MatchCCmd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "xCmd.pb.h"
#include "SessionTeam.pb.h"
#include "ProtoCommon.pb.h"
#include "SceneUser.pb.h"
// @@protoc_insertion_point(includes)

namespace Cmd {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MatchCCmd_2eproto();
void protobuf_AssignDesc_MatchCCmd_2eproto();
void protobuf_ShutdownFile_MatchCCmd_2eproto();

class MatchTeamData;
class RoomDetailInfo;
class RoomBriefInfo;
class ReqMyRoomMatchCCmd;
class ReqRoomListCCmd;
class ReqRoomDetailCCmd;
class JoinRoomUser;
class TutorMatcher;
class JoinRoomCCmd;
class LeaveRoomCCmd;
class NtfRoomStateCCmd;
class NtfFightStatCCmd;
class JoinFightingCCmd;
class ComboNotifyCCmd;
class RevChallengeCCmd;
class KickTeamCCmd;
class FightConfirmCCmd;
class RankInfo;
class RewardInfo;
class PvpResultCCmd;
class MatchTeamMemUpdateInfo;
class PvpTeamMemberUpdateCCmd;
class MatchTeamMemDataUpdateInfo;
class PvpMemberDataUpdateCCmd;
class NtfMatchInfoCCmd;
class GodEndTimeCCmd;
class RankNameInfo;
class NtfRankChangeCCmd;
class OpenGlobalShopPanelCCmd;
class TutorMatchResultNtfMatchCCmd;
class TutorMatchResponseMatchCCmd;
class TeamPwsPreInfo;
class TeamPwsPreInfoMatchCCmd;
class UpdatePreInfoMatchCCmd;
class TeamPwsRankInfo;
class QueryTeamPwsRankMatchCCmd;
class TeamPwsUserInfo;
class QueryTeamPwsTeamInfoMatchCCmd;

enum MatchCParam {
  MATCHCPARAM_REQ_MY_ROOM = 1,
  MATCHCPARAM_REQ_ROOM_LIST = 2,
  MATCHCPARAM_REQ_ROOM_DETAIL = 3,
  MATCHCPARAM_JOIN_ROOM = 4,
  MATCHCPARAM_LEAVE_ROOM = 5,
  MATCHCPARAM_NTF_ROOM_STATE = 7,
  MATCHCPARAM_NTF_FIGHTING_STATE = 8,
  MATCHCPARAM_JOIN_FIGHTING = 9,
  MATCHCPARAM_COMBO_KILL = 10,
  MATCHCPARAM_REV_CHALLENGE = 11,
  MATCHCPARAM_KICK_TEAM = 12,
  MATCHCPARAM_FIGHT_CONFIRM = 13,
  MATCHCPARAM_PVP_RESULT = 14,
  MATCHCPARAM_PVP_MEMBERUPDATE = 15,
  MATCHCPARAM_PVP_MEMBERDATAUPDATE = 16,
  MATCHCPARAM_NTF_MATCHINFO = 17,
  MATCHCPARAM_GOD_ENDTIME = 18,
  MATCHCPARAM_NTF_RANK_CHANGE = 19,
  MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL = 20,
  MATCHCPARAM_TUTOR_MATCHNTF = 21,
  MATCHCPARAM_TUTOR_MATCHRESPONSE = 22,
  MATCHCPARAM_TEAMPWS_PREPARE_LIST = 23,
  MATCHCPARAM_TEAMPWS_PREPARE_UPDATE = 24,
  MATCHCPARAM_TEAMPWS_QUERY_RANK = 25,
  MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO = 26
};
bool MatchCParam_IsValid(int value);
const MatchCParam MatchCParam_MIN = MATCHCPARAM_REQ_MY_ROOM;
const MatchCParam MatchCParam_MAX = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO;
const int MatchCParam_ARRAYSIZE = MatchCParam_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchCParam_descriptor();
inline const ::std::string& MatchCParam_Name(MatchCParam value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchCParam_descriptor(), value);
}
inline bool MatchCParam_Parse(
    const ::std::string& name, MatchCParam* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchCParam>(
    MatchCParam_descriptor(), name, value);
}
enum EPvpType {
  EPVPTYPE_MIN = 0,
  EPVPTYPE_LLH = 1,
  EPVPTYPE_SMZL = 2,
  EPVPTYPE_HLJS = 3,
  EPVPTYPE_POLLY = 4,
  EPVPTYPE_MVP = 5,
  EPVPTYPE_SUGVG = 6,
  EPVPTYPE_TUTOR = 7,
  EPVPTYPE_TEAMPWS = 8,
  EPVPTYPE_TEAMPWS_RELAX = 9
};
bool EPvpType_IsValid(int value);
const EPvpType EPvpType_MIN = EPVPTYPE_MIN;
const EPvpType EPvpType_MAX = EPVPTYPE_TEAMPWS_RELAX;
const int EPvpType_ARRAYSIZE = EPvpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPvpType_descriptor();
inline const ::std::string& EPvpType_Name(EPvpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPvpType_descriptor(), value);
}
inline bool EPvpType_Parse(
    const ::std::string& name, EPvpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPvpType>(
    EPvpType_descriptor(), name, value);
}
enum ERoomState {
  EROOMSTATE_WAIT_JOIN = 1,
  EROOMSTATE_MATCH_SUCCESS = 2,
  EROOMSTATE_READY_FOR_FIGHT = 3,
  EROOMSTATE_FIGHTING = 4,
  EROOMSTATE_END = 5
};
bool ERoomState_IsValid(int value);
const ERoomState ERoomState_MIN = EROOMSTATE_WAIT_JOIN;
const ERoomState ERoomState_MAX = EROOMSTATE_END;
const int ERoomState_ARRAYSIZE = ERoomState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ERoomState_descriptor();
inline const ::std::string& ERoomState_Name(ERoomState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ERoomState_descriptor(), value);
}
inline bool ERoomState_Parse(
    const ::std::string& name, ERoomState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ERoomState>(
    ERoomState_descriptor(), name, value);
}
enum EPvpResult {
  EPVPRESULT_MIN = 0,
  EPVPRESULT_SUCCESS = 1,
  EPVPRESULT_FAIL = 2,
  EPVPRESULT_TIE = 3
};
bool EPvpResult_IsValid(int value);
const EPvpResult EPvpResult_MIN = EPVPRESULT_MIN;
const EPvpResult EPvpResult_MAX = EPVPRESULT_TIE;
const int EPvpResult_ARRAYSIZE = EPvpResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* EPvpResult_descriptor();
inline const ::std::string& EPvpResult_Name(EPvpResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    EPvpResult_descriptor(), value);
}
inline bool EPvpResult_Parse(
    const ::std::string& name, EPvpResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EPvpResult>(
    EPvpResult_descriptor(), name, value);
}
enum EMatchReply {
  EMATCHREPLY_AGREE = 1,
  EMATCHREPLY_REFUSE = 2
};
bool EMatchReply_IsValid(int value);
const EMatchReply EMatchReply_MIN = EMATCHREPLY_AGREE;
const EMatchReply EMatchReply_MAX = EMATCHREPLY_REFUSE;
const int EMatchReply_ARRAYSIZE = EMatchReply_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchReply_descriptor();
inline const ::std::string& EMatchReply_Name(EMatchReply value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchReply_descriptor(), value);
}
inline bool EMatchReply_Parse(
    const ::std::string& name, EMatchReply* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchReply>(
    EMatchReply_descriptor(), name, value);
}
enum ETutorMatch {
  ETUTORMATCH_MIN = 0,
  ETUTORMATCH_START = 1,
  ETUTORMATCH_MATCH = 2,
  ETUTORMATCH_AGREE = 3,
  ETUTORMATCH_REFUSE = 4,
  ETUTORMATCH_STOP = 5,
  ETUTORMATCH_RESTART = 6,
  ETUTORMATCH_MAX = 7
};
bool ETutorMatch_IsValid(int value);
const ETutorMatch ETutorMatch_MIN = ETUTORMATCH_MIN;
const ETutorMatch ETutorMatch_MAX = ETUTORMATCH_MAX;
const int ETutorMatch_ARRAYSIZE = ETutorMatch_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETutorMatch_descriptor();
inline const ::std::string& ETutorMatch_Name(ETutorMatch value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETutorMatch_descriptor(), value);
}
inline bool ETutorMatch_Parse(
    const ::std::string& name, ETutorMatch* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETutorMatch>(
    ETutorMatch_descriptor(), name, value);
}
enum ETeamPwsRank {
  ETEAMPWSRANK_EXCELLENT = 1,
  ETEAMPWSRANK_SUPER = 2,
  ETEAMPWSRANK_GOOD = 3,
  ETEAMPWSRANK_NORMAL = 4,
  ETEAMPWSRANK_NONE = 5
};
bool ETeamPwsRank_IsValid(int value);
const ETeamPwsRank ETeamPwsRank_MIN = ETEAMPWSRANK_EXCELLENT;
const ETeamPwsRank ETeamPwsRank_MAX = ETEAMPWSRANK_NONE;
const int ETeamPwsRank_ARRAYSIZE = ETeamPwsRank_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETeamPwsRank_descriptor();
inline const ::std::string& ETeamPwsRank_Name(ETeamPwsRank value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETeamPwsRank_descriptor(), value);
}
inline bool ETeamPwsRank_Parse(
    const ::std::string& name, ETeamPwsRank* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETeamPwsRank>(
    ETeamPwsRank_descriptor(), name, value);
}
// ===================================================================

class MatchTeamData : public ::google::protobuf::Message {
 public:
  MatchTeamData();
  virtual ~MatchTeamData();

  MatchTeamData(const MatchTeamData& from);

  inline MatchTeamData& operator=(const MatchTeamData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchTeamData& default_instance();

  void Swap(MatchTeamData* other);

  // implements Message ----------------------------------------------

  MatchTeamData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchTeamData& from);
  void MergeFrom(const MatchTeamData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 teamid = 1 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 1;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 8 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 8;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // repeated .Cmd.TeamMember members = 4;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 4;
  inline const ::Cmd::TeamMember& members(int index) const;
  inline ::Cmd::TeamMember* mutable_members(int index);
  inline ::Cmd::TeamMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:Cmd.MatchTeamData)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::std::string* name_;
  ::google::protobuf::uint32 zoneid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember > members_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static MatchTeamData* default_instance_;
};
// -------------------------------------------------------------------

class RoomDetailInfo : public ::google::protobuf::Message {
 public:
  RoomDetailInfo();
  virtual ~RoomDetailInfo();

  RoomDetailInfo(const RoomDetailInfo& from);

  inline RoomDetailInfo& operator=(const RoomDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomDetailInfo& default_instance();

  void Swap(RoomDetailInfo* other);

  // implements Message ----------------------------------------------

  RoomDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomDetailInfo& from);
  void MergeFrom(const RoomDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EPvpType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional .Cmd.ERoomState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::Cmd::ERoomState state() const;
  inline void set_state(::Cmd::ERoomState value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .Cmd.MatchTeamData team_datas = 5;
  inline int team_datas_size() const;
  inline void clear_team_datas();
  static const int kTeamDatasFieldNumber = 5;
  inline const ::Cmd::MatchTeamData& team_datas(int index) const;
  inline ::Cmd::MatchTeamData* mutable_team_datas(int index);
  inline ::Cmd::MatchTeamData* add_team_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatchTeamData >&
      team_datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatchTeamData >*
      mutable_team_datas();

  // @@protoc_insertion_point(class_scope:Cmd.RoomDetailInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int state_;
  ::google::protobuf::uint64 roomid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MatchTeamData > team_datas_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RoomDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoomBriefInfo : public ::google::protobuf::Message {
 public:
  RoomBriefInfo();
  virtual ~RoomBriefInfo();

  RoomBriefInfo(const RoomBriefInfo& from);

  inline RoomBriefInfo& operator=(const RoomBriefInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomBriefInfo& default_instance();

  void Swap(RoomBriefInfo* other);

  // implements Message ----------------------------------------------

  RoomBriefInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomBriefInfo& from);
  void MergeFrom(const RoomBriefInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.EPvpType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional .Cmd.ERoomState state = 2;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 2;
  inline ::Cmd::ERoomState state() const;
  inline void set_state(::Cmd::ERoomState value);

  // optional uint64 roomid = 3;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 3;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 raidid = 5;
  inline bool has_raidid() const;
  inline void clear_raidid();
  static const int kRaididFieldNumber = 5;
  inline ::google::protobuf::uint32 raidid() const;
  inline void set_raidid(::google::protobuf::uint32 value);

  // optional uint32 player_num = 6;
  inline bool has_player_num() const;
  inline void clear_player_num();
  static const int kPlayerNumFieldNumber = 6;
  inline ::google::protobuf::uint32 player_num() const;
  inline void set_player_num(::google::protobuf::uint32 value);

  // optional uint32 num1 = 7;
  inline bool has_num1() const;
  inline void clear_num1();
  static const int kNum1FieldNumber = 7;
  inline ::google::protobuf::uint32 num1() const;
  inline void set_num1(::google::protobuf::uint32 value);

  // optional uint32 num2 = 8;
  inline bool has_num2() const;
  inline void clear_num2();
  static const int kNum2FieldNumber = 8;
  inline ::google::protobuf::uint32 num2() const;
  inline void set_num2(::google::protobuf::uint32 value);

  // optional uint32 num3 = 9;
  inline bool has_num3() const;
  inline void clear_num3();
  static const int kNum3FieldNumber = 9;
  inline ::google::protobuf::uint32 num3() const;
  inline void set_num3(::google::protobuf::uint32 value);

  // optional uint32 zoneid = 10;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 10;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RoomBriefInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_raidid();
  inline void clear_has_raidid();
  inline void set_has_player_num();
  inline void clear_has_player_num();
  inline void set_has_num1();
  inline void clear_has_num1();
  inline void set_has_num2();
  inline void clear_has_num2();
  inline void set_has_num3();
  inline void clear_has_num3();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  int state_;
  ::google::protobuf::uint64 roomid_;
  ::std::string* name_;
  ::google::protobuf::uint32 raidid_;
  ::google::protobuf::uint32 player_num_;
  ::google::protobuf::uint32 num1_;
  ::google::protobuf::uint32 num2_;
  ::google::protobuf::uint32 num3_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RoomBriefInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqMyRoomMatchCCmd : public ::google::protobuf::Message {
 public:
  ReqMyRoomMatchCCmd();
  virtual ~ReqMyRoomMatchCCmd();

  ReqMyRoomMatchCCmd(const ReqMyRoomMatchCCmd& from);

  inline ReqMyRoomMatchCCmd& operator=(const ReqMyRoomMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMyRoomMatchCCmd& default_instance();

  void Swap(ReqMyRoomMatchCCmd* other);

  // implements Message ----------------------------------------------

  ReqMyRoomMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMyRoomMatchCCmd& from);
  void MergeFrom(const ReqMyRoomMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional .Cmd.RoomBriefInfo brief_info = 4;
  inline bool has_brief_info() const;
  inline void clear_brief_info();
  static const int kBriefInfoFieldNumber = 4;
  inline const ::Cmd::RoomBriefInfo& brief_info() const;
  inline ::Cmd::RoomBriefInfo* mutable_brief_info();
  inline ::Cmd::RoomBriefInfo* release_brief_info();
  inline void set_allocated_brief_info(::Cmd::RoomBriefInfo* brief_info);

  // @@protoc_insertion_point(class_scope:Cmd.ReqMyRoomMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_brief_info();
  inline void clear_has_brief_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::RoomBriefInfo* brief_info_;
  int type_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqMyRoomMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqRoomListCCmd : public ::google::protobuf::Message {
 public:
  ReqRoomListCCmd();
  virtual ~ReqRoomListCCmd();

  ReqRoomListCCmd(const ReqRoomListCCmd& from);

  inline ReqRoomListCCmd& operator=(const ReqRoomListCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRoomListCCmd& default_instance();

  void Swap(ReqRoomListCCmd* other);

  // implements Message ----------------------------------------------

  ReqRoomListCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRoomListCCmd& from);
  void MergeFrom(const ReqRoomListCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // repeated uint64 roomids = 4;
  inline int roomids_size() const;
  inline void clear_roomids();
  static const int kRoomidsFieldNumber = 4;
  inline ::google::protobuf::uint64 roomids(int index) const;
  inline void set_roomids(int index, ::google::protobuf::uint64 value);
  inline void add_roomids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      roomids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_roomids();

  // repeated .Cmd.RoomBriefInfo room_lists = 5;
  inline int room_lists_size() const;
  inline void clear_room_lists();
  static const int kRoomListsFieldNumber = 5;
  inline const ::Cmd::RoomBriefInfo& room_lists(int index) const;
  inline ::Cmd::RoomBriefInfo* mutable_room_lists(int index);
  inline ::Cmd::RoomBriefInfo* add_room_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RoomBriefInfo >&
      room_lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RoomBriefInfo >*
      mutable_room_lists();

  // @@protoc_insertion_point(class_scope:Cmd.ReqRoomListCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > roomids_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RoomBriefInfo > room_lists_;
  int type_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqRoomListCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ReqRoomDetailCCmd : public ::google::protobuf::Message {
 public:
  ReqRoomDetailCCmd();
  virtual ~ReqRoomDetailCCmd();

  ReqRoomDetailCCmd(const ReqRoomDetailCCmd& from);

  inline ReqRoomDetailCCmd& operator=(const ReqRoomDetailCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqRoomDetailCCmd& default_instance();

  void Swap(ReqRoomDetailCCmd* other);

  // implements Message ----------------------------------------------

  ReqRoomDetailCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqRoomDetailCCmd& from);
  void MergeFrom(const ReqRoomDetailCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional .Cmd.RoomDetailInfo datail_info = 5;
  inline bool has_datail_info() const;
  inline void clear_datail_info();
  static const int kDatailInfoFieldNumber = 5;
  inline const ::Cmd::RoomDetailInfo& datail_info() const;
  inline ::Cmd::RoomDetailInfo* mutable_datail_info();
  inline ::Cmd::RoomDetailInfo* release_datail_info();
  inline void set_allocated_datail_info(::Cmd::RoomDetailInfo* datail_info);

  // @@protoc_insertion_point(class_scope:Cmd.ReqRoomDetailCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_datail_info();
  inline void clear_has_datail_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::Cmd::RoomDetailInfo* datail_info_;
  int type_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static ReqRoomDetailCCmd* default_instance_;
};
// -------------------------------------------------------------------

class JoinRoomUser : public ::google::protobuf::Message {
 public:
  JoinRoomUser();
  virtual ~JoinRoomUser();

  JoinRoomUser(const JoinRoomUser& from);

  inline JoinRoomUser& operator=(const JoinRoomUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomUser& default_instance();

  void Swap(JoinRoomUser* other);

  // implements Message ----------------------------------------------

  JoinRoomUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinRoomUser& from);
  void MergeFrom(const JoinRoomUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.JoinRoomUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static JoinRoomUser* default_instance_;
};
// -------------------------------------------------------------------

class TutorMatcher : public ::google::protobuf::Message {
 public:
  TutorMatcher();
  virtual ~TutorMatcher();

  TutorMatcher(const TutorMatcher& from);

  inline TutorMatcher& operator=(const TutorMatcher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TutorMatcher& default_instance();

  void Swap(TutorMatcher* other);

  // implements Message ----------------------------------------------

  TutorMatcher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TutorMatcher& from);
  void MergeFrom(const TutorMatcher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 zoneid = 2 [default = 0];
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 2;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional bool findtutor = 3 [default = false];
  inline bool has_findtutor() const;
  inline void clear_findtutor();
  static const int kFindtutorFieldNumber = 3;
  inline bool findtutor() const;
  inline void set_findtutor(bool value);

  // optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
  inline bool has_gender() const;
  inline void clear_gender();
  static const int kGenderFieldNumber = 4;
  inline ::Cmd::EGender gender() const;
  inline void set_gender(::Cmd::EGender value);

  // optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
  inline bool has_selfgender() const;
  inline void clear_selfgender();
  static const int kSelfgenderFieldNumber = 5;
  inline ::Cmd::EGender selfgender() const;
  inline void set_selfgender(::Cmd::EGender value);

  // repeated .Cmd.UserData datas = 6;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 6;
  inline const ::Cmd::UserData& datas(int index) const;
  inline ::Cmd::UserData* mutable_datas(int index);
  inline ::Cmd::UserData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
      mutable_datas();

  // repeated uint64 blackids = 7;
  inline int blackids_size() const;
  inline void clear_blackids();
  static const int kBlackidsFieldNumber = 7;
  inline ::google::protobuf::uint64 blackids(int index) const;
  inline void set_blackids(int index, ::google::protobuf::uint64 value);
  inline void add_blackids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      blackids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_blackids();

  // @@protoc_insertion_point(class_scope:Cmd.TutorMatcher)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_findtutor();
  inline void clear_has_findtutor();
  inline void set_has_gender();
  inline void clear_has_gender();
  inline void set_has_selfgender();
  inline void clear_has_selfgender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 zoneid_;
  bool findtutor_;
  int gender_;
  int selfgender_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::UserData > datas_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > blackids_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TutorMatcher* default_instance_;
};
// -------------------------------------------------------------------

class JoinRoomCCmd : public ::google::protobuf::Message {
 public:
  JoinRoomCCmd();
  virtual ~JoinRoomCCmd();

  JoinRoomCCmd(const JoinRoomCCmd& from);

  inline JoinRoomCCmd& operator=(const JoinRoomCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinRoomCCmd& default_instance();

  void Swap(JoinRoomCCmd* other);

  // implements Message ----------------------------------------------

  JoinRoomCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinRoomCCmd& from);
  void MergeFrom(const JoinRoomCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bool isquick = 6;
  inline bool has_isquick() const;
  inline void clear_isquick();
  static const int kIsquickFieldNumber = 6;
  inline bool isquick() const;
  inline void set_isquick(bool value);

  // optional uint64 teamid = 7;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 7;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // repeated uint64 teammember = 8;
  inline int teammember_size() const;
  inline void clear_teammember();
  static const int kTeammemberFieldNumber = 8;
  inline ::google::protobuf::uint64 teammember(int index) const;
  inline void set_teammember(int index, ::google::protobuf::uint64 value);
  inline void add_teammember(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      teammember() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_teammember();

  // optional bool ret = 9;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 9;
  inline bool ret() const;
  inline void set_ret(bool value);

  // optional uint64 guildid = 10;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildidFieldNumber = 10;
  inline ::google::protobuf::uint64 guildid() const;
  inline void set_guildid(::google::protobuf::uint64 value);

  // repeated .Cmd.JoinRoomUser users = 11;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 11;
  inline const ::Cmd::JoinRoomUser& users(int index) const;
  inline ::Cmd::JoinRoomUser* mutable_users(int index);
  inline ::Cmd::JoinRoomUser* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::JoinRoomUser >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::JoinRoomUser >*
      mutable_users();

  // optional .Cmd.TutorMatcher matcher = 12;
  inline bool has_matcher() const;
  inline void clear_matcher();
  static const int kMatcherFieldNumber = 12;
  inline const ::Cmd::TutorMatcher& matcher() const;
  inline ::Cmd::TutorMatcher* mutable_matcher();
  inline ::Cmd::TutorMatcher* release_matcher();
  inline void set_allocated_matcher(::Cmd::TutorMatcher* matcher);

  // @@protoc_insertion_point(class_scope:Cmd.JoinRoomCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_isquick();
  inline void clear_has_isquick();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_matcher();
  inline void clear_has_matcher();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::std::string* name_;
  int type_;
  bool isquick_;
  bool ret_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > teammember_;
  ::google::protobuf::uint64 guildid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::JoinRoomUser > users_;
  ::Cmd::TutorMatcher* matcher_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static JoinRoomCCmd* default_instance_;
};
// -------------------------------------------------------------------

class LeaveRoomCCmd : public ::google::protobuf::Message {
 public:
  LeaveRoomCCmd();
  virtual ~LeaveRoomCCmd();

  LeaveRoomCCmd(const LeaveRoomCCmd& from);

  inline LeaveRoomCCmd& operator=(const LeaveRoomCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LeaveRoomCCmd& default_instance();

  void Swap(LeaveRoomCCmd* other);

  // implements Message ----------------------------------------------

  LeaveRoomCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LeaveRoomCCmd& from);
  void MergeFrom(const LeaveRoomCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 5 [default = 0];
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 5;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.LeaveRoomCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 teamid_;
  int type_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static LeaveRoomCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfRoomStateCCmd : public ::google::protobuf::Message {
 public:
  NtfRoomStateCCmd();
  virtual ~NtfRoomStateCCmd();

  NtfRoomStateCCmd(const NtfRoomStateCCmd& from);

  inline NtfRoomStateCCmd& operator=(const NtfRoomStateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfRoomStateCCmd& default_instance();

  void Swap(NtfRoomStateCCmd* other);

  // implements Message ----------------------------------------------

  NtfRoomStateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfRoomStateCCmd& from);
  void MergeFrom(const NtfRoomStateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType pvp_type = 3;
  inline bool has_pvp_type() const;
  inline void clear_pvp_type();
  static const int kPvpTypeFieldNumber = 3;
  inline ::Cmd::EPvpType pvp_type() const;
  inline void set_pvp_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional .Cmd.ERoomState state = 5;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 5;
  inline ::Cmd::ERoomState state() const;
  inline void set_state(::Cmd::ERoomState value);

  // optional uint32 endtime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 6;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfRoomStateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_pvp_type();
  inline void clear_has_pvp_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  int pvp_type_;
  int state_;
  ::google::protobuf::uint32 endtime_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfRoomStateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfFightStatCCmd : public ::google::protobuf::Message {
 public:
  NtfFightStatCCmd();
  virtual ~NtfFightStatCCmd();

  NtfFightStatCCmd(const NtfFightStatCCmd& from);

  inline NtfFightStatCCmd& operator=(const NtfFightStatCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfFightStatCCmd& default_instance();

  void Swap(NtfFightStatCCmd* other);

  // implements Message ----------------------------------------------

  NtfFightStatCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfFightStatCCmd& from);
  void MergeFrom(const NtfFightStatCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType pvp_type = 3;
  inline bool has_pvp_type() const;
  inline void clear_pvp_type();
  static const int kPvpTypeFieldNumber = 3;
  inline ::Cmd::EPvpType pvp_type() const;
  inline void set_pvp_type(::Cmd::EPvpType value);

  // optional uint32 starttime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 4;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 player_num = 5;
  inline bool has_player_num() const;
  inline void clear_player_num();
  static const int kPlayerNumFieldNumber = 5;
  inline ::google::protobuf::uint32 player_num() const;
  inline void set_player_num(::google::protobuf::uint32 value);

  // optional uint64 score = 6;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 6;
  inline ::google::protobuf::uint64 score() const;
  inline void set_score(::google::protobuf::uint64 value);

  // optional uint64 my_teamscore = 10;
  inline bool has_my_teamscore() const;
  inline void clear_my_teamscore();
  static const int kMyTeamscoreFieldNumber = 10;
  inline ::google::protobuf::uint64 my_teamscore() const;
  inline void set_my_teamscore(::google::protobuf::uint64 value);

  // optional uint64 enemy_teamscore = 11;
  inline bool has_enemy_teamscore() const;
  inline void clear_enemy_teamscore();
  static const int kEnemyTeamscoreFieldNumber = 11;
  inline ::google::protobuf::uint64 enemy_teamscore() const;
  inline void set_enemy_teamscore(::google::protobuf::uint64 value);

  // optional uint32 remain_hp = 15;
  inline bool has_remain_hp() const;
  inline void clear_remain_hp();
  static const int kRemainHpFieldNumber = 15;
  inline ::google::protobuf::uint32 remain_hp() const;
  inline void set_remain_hp(::google::protobuf::uint32 value);

  // optional uint32 myrank = 16;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 16;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfFightStatCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_pvp_type();
  inline void clear_has_pvp_type();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_player_num();
  inline void clear_has_player_num();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_my_teamscore();
  inline void clear_has_my_teamscore();
  inline void set_has_enemy_teamscore();
  inline void clear_has_enemy_teamscore();
  inline void set_has_remain_hp();
  inline void clear_has_remain_hp();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int pvp_type_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint64 score_;
  ::google::protobuf::uint64 my_teamscore_;
  ::google::protobuf::uint32 player_num_;
  ::google::protobuf::uint32 remain_hp_;
  ::google::protobuf::uint64 enemy_teamscore_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfFightStatCCmd* default_instance_;
};
// -------------------------------------------------------------------

class JoinFightingCCmd : public ::google::protobuf::Message {
 public:
  JoinFightingCCmd();
  virtual ~JoinFightingCCmd();

  JoinFightingCCmd(const JoinFightingCCmd& from);

  inline JoinFightingCCmd& operator=(const JoinFightingCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JoinFightingCCmd& default_instance();

  void Swap(JoinFightingCCmd* other);

  // implements Message ----------------------------------------------

  JoinFightingCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JoinFightingCCmd& from);
  void MergeFrom(const JoinFightingCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional bool ret = 5;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 5;
  inline bool ret() const;
  inline void set_ret(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.JoinFightingCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  int type_;
  bool ret_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static JoinFightingCCmd* default_instance_;
};
// -------------------------------------------------------------------

class ComboNotifyCCmd : public ::google::protobuf::Message {
 public:
  ComboNotifyCCmd();
  virtual ~ComboNotifyCCmd();

  ComboNotifyCCmd(const ComboNotifyCCmd& from);

  inline ComboNotifyCCmd& operator=(const ComboNotifyCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ComboNotifyCCmd& default_instance();

  void Swap(ComboNotifyCCmd* other);

  // implements Message ----------------------------------------------

  ComboNotifyCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ComboNotifyCCmd& from);
  void MergeFrom(const ComboNotifyCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional uint32 comboNum = 3;
  inline bool has_combonum() const;
  inline void clear_combonum();
  static const int kComboNumFieldNumber = 3;
  inline ::google::protobuf::uint32 combonum() const;
  inline void set_combonum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.ComboNotifyCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_combonum();
  inline void clear_has_combonum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 combonum_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static ComboNotifyCCmd* default_instance_;
};
// -------------------------------------------------------------------

class RevChallengeCCmd : public ::google::protobuf::Message {
 public:
  RevChallengeCCmd();
  virtual ~RevChallengeCCmd();

  RevChallengeCCmd(const RevChallengeCCmd& from);

  inline RevChallengeCCmd& operator=(const RevChallengeCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RevChallengeCCmd& default_instance();

  void Swap(RevChallengeCCmd* other);

  // implements Message ----------------------------------------------

  RevChallengeCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RevChallengeCCmd& from);
  void MergeFrom(const RevChallengeCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional string challenger = 5;
  inline bool has_challenger() const;
  inline void clear_challenger();
  static const int kChallengerFieldNumber = 5;
  inline const ::std::string& challenger() const;
  inline void set_challenger(const ::std::string& value);
  inline void set_challenger(const char* value);
  inline void set_challenger(const char* value, size_t size);
  inline ::std::string* mutable_challenger();
  inline ::std::string* release_challenger();
  inline void set_allocated_challenger(::std::string* challenger);

  // optional uint32 challenger_zoneid = 6;
  inline bool has_challenger_zoneid() const;
  inline void clear_challenger_zoneid();
  static const int kChallengerZoneidFieldNumber = 6;
  inline ::google::protobuf::uint32 challenger_zoneid() const;
  inline void set_challenger_zoneid(::google::protobuf::uint32 value);

  // repeated .Cmd.TeamMember members = 7;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 7;
  inline const ::Cmd::TeamMember& members(int index) const;
  inline ::Cmd::TeamMember* mutable_members(int index);
  inline ::Cmd::TeamMember* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
      mutable_members();

  // optional .Cmd.EMatchReply reply = 8;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 8;
  inline ::Cmd::EMatchReply reply() const;
  inline void set_reply(::Cmd::EMatchReply value);

  // @@protoc_insertion_point(class_scope:Cmd.RevChallengeCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_challenger();
  inline void clear_has_challenger();
  inline void set_has_challenger_zoneid();
  inline void clear_has_challenger_zoneid();
  inline void set_has_reply();
  inline void clear_has_reply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  int type_;
  ::google::protobuf::uint32 challenger_zoneid_;
  ::std::string* challenger_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember > members_;
  int reply_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RevChallengeCCmd* default_instance_;
};
// -------------------------------------------------------------------

class KickTeamCCmd : public ::google::protobuf::Message {
 public:
  KickTeamCCmd();
  virtual ~KickTeamCCmd();

  KickTeamCCmd(const KickTeamCCmd& from);

  inline KickTeamCCmd& operator=(const KickTeamCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KickTeamCCmd& default_instance();

  void Swap(KickTeamCCmd* other);

  // implements Message ----------------------------------------------

  KickTeamCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KickTeamCCmd& from);
  void MergeFrom(const KickTeamCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 zoneid = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 5;
  inline ::google::protobuf::uint64 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 6;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 6;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Cmd.KickTeamCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::uint64 zoneid_;
  ::google::protobuf::uint64 teamid_;
  int type_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static KickTeamCCmd* default_instance_;
};
// -------------------------------------------------------------------

class FightConfirmCCmd : public ::google::protobuf::Message {
 public:
  FightConfirmCCmd();
  virtual ~FightConfirmCCmd();

  FightConfirmCCmd(const FightConfirmCCmd& from);

  inline FightConfirmCCmd& operator=(const FightConfirmCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FightConfirmCCmd& default_instance();

  void Swap(FightConfirmCCmd* other);

  // implements Message ----------------------------------------------

  FightConfirmCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FightConfirmCCmd& from);
  void MergeFrom(const FightConfirmCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // optional uint64 roomid = 4;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 4;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional uint64 teamid = 5;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 5;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional .Cmd.EMatchReply reply = 6;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 6;
  inline ::Cmd::EMatchReply reply() const;
  inline void set_reply(::Cmd::EMatchReply value);

  // optional string challenger = 7;
  inline bool has_challenger() const;
  inline void clear_challenger();
  static const int kChallengerFieldNumber = 7;
  inline const ::std::string& challenger() const;
  inline void set_challenger(const ::std::string& value);
  inline void set_challenger(const char* value);
  inline void set_challenger(const char* value, size_t size);
  inline ::std::string* mutable_challenger();
  inline ::std::string* release_challenger();
  inline void set_allocated_challenger(::std::string* challenger);

  // @@protoc_insertion_point(class_scope:Cmd.FightConfirmCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_reply();
  inline void clear_has_reply();
  inline void set_has_challenger();
  inline void clear_has_challenger();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 roomid_;
  int type_;
  int reply_;
  ::google::protobuf::uint64 teamid_;
  ::std::string* challenger_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static FightConfirmCCmd* default_instance_;
};
// -------------------------------------------------------------------

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Cmd.RankInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 rank_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class RewardInfo : public ::google::protobuf::Message {
 public:
  RewardInfo();
  virtual ~RewardInfo();

  RewardInfo(const RewardInfo& from);

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardInfo& default_instance();

  void Swap(RewardInfo* other);

  // implements Message ----------------------------------------------

  RewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemid = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemidFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RewardInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 count_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpResultCCmd : public ::google::protobuf::Message {
 public:
  PvpResultCCmd();
  virtual ~PvpResultCCmd();

  PvpResultCCmd(const PvpResultCCmd& from);

  inline PvpResultCCmd& operator=(const PvpResultCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpResultCCmd& default_instance();

  void Swap(PvpResultCCmd* other);

  // implements Message ----------------------------------------------

  PvpResultCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpResultCCmd& from);
  void MergeFrom(const PvpResultCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // required .Cmd.EPvpType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::Cmd::EPvpType type() const;
  inline void set_type(::Cmd::EPvpType value);

  // required .Cmd.EPvpResult result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::Cmd::EPvpResult result() const;
  inline void set_result(::Cmd::EPvpResult value);

  // repeated .Cmd.RankInfo rank = 5;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline const ::Cmd::RankInfo& rank(int index) const;
  inline ::Cmd::RankInfo* mutable_rank(int index);
  inline ::Cmd::RankInfo* add_rank();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RankInfo >&
      rank() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RankInfo >*
      mutable_rank();

  // repeated .Cmd.RewardInfo reward = 6;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 6;
  inline const ::Cmd::RewardInfo& reward(int index) const;
  inline ::Cmd::RewardInfo* mutable_reward(int index);
  inline ::Cmd::RewardInfo* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RewardInfo >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RewardInfo >*
      mutable_reward();

  // optional uint32 apple = 7;
  inline bool has_apple() const;
  inline void clear_apple();
  static const int kAppleFieldNumber = 7;
  inline ::google::protobuf::uint32 apple() const;
  inline void set_apple(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.PvpResultCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_apple();
  inline void clear_has_apple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int type_;
  int result_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RankInfo > rank_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RewardInfo > reward_;
  ::google::protobuf::uint32 apple_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static PvpResultCCmd* default_instance_;
};
// -------------------------------------------------------------------

class MatchTeamMemUpdateInfo : public ::google::protobuf::Message {
 public:
  MatchTeamMemUpdateInfo();
  virtual ~MatchTeamMemUpdateInfo();

  MatchTeamMemUpdateInfo(const MatchTeamMemUpdateInfo& from);

  inline MatchTeamMemUpdateInfo& operator=(const MatchTeamMemUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchTeamMemUpdateInfo& default_instance();

  void Swap(MatchTeamMemUpdateInfo* other);

  // implements Message ----------------------------------------------

  MatchTeamMemUpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchTeamMemUpdateInfo& from);
  void MergeFrom(const MatchTeamMemUpdateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 5;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 5;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // optional bool isfirst = 6;
  inline bool has_isfirst() const;
  inline void clear_isfirst();
  static const int kIsfirstFieldNumber = 6;
  inline bool isfirst() const;
  inline void set_isfirst(bool value);

  // repeated .Cmd.TeamMember updates = 7;
  inline int updates_size() const;
  inline void clear_updates();
  static const int kUpdatesFieldNumber = 7;
  inline const ::Cmd::TeamMember& updates(int index) const;
  inline ::Cmd::TeamMember* mutable_updates(int index);
  inline ::Cmd::TeamMember* add_updates();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
      updates() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
      mutable_updates();

  // repeated uint64 deletes = 8;
  inline int deletes_size() const;
  inline void clear_deletes();
  static const int kDeletesFieldNumber = 8;
  inline ::google::protobuf::uint64 deletes(int index) const;
  inline void set_deletes(int index, ::google::protobuf::uint64 value);
  inline void add_deletes(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      deletes() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_deletes();

  // optional uint32 index = 9;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 9;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional string teamname = 10;
  inline bool has_teamname() const;
  inline void clear_teamname();
  static const int kTeamnameFieldNumber = 10;
  inline const ::std::string& teamname() const;
  inline void set_teamname(const ::std::string& value);
  inline void set_teamname(const char* value);
  inline void set_teamname(const char* value, size_t size);
  inline ::std::string* mutable_teamname();
  inline ::std::string* release_teamname();
  inline void set_allocated_teamname(::std::string* teamname);

  // @@protoc_insertion_point(class_scope:Cmd.MatchTeamMemUpdateInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_isfirst();
  inline void clear_has_isfirst();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_teamname();
  inline void clear_has_teamname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint32 zoneid_;
  bool isfirst_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember > updates_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > deletes_;
  ::std::string* teamname_;
  ::google::protobuf::uint32 index_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static MatchTeamMemUpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpTeamMemberUpdateCCmd : public ::google::protobuf::Message {
 public:
  PvpTeamMemberUpdateCCmd();
  virtual ~PvpTeamMemberUpdateCCmd();

  PvpTeamMemberUpdateCCmd(const PvpTeamMemberUpdateCCmd& from);

  inline PvpTeamMemberUpdateCCmd& operator=(const PvpTeamMemberUpdateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpTeamMemberUpdateCCmd& default_instance();

  void Swap(PvpTeamMemberUpdateCCmd* other);

  // implements Message ----------------------------------------------

  PvpTeamMemberUpdateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpTeamMemberUpdateCCmd& from);
  void MergeFrom(const PvpTeamMemberUpdateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.MatchTeamMemUpdateInfo data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::MatchTeamMemUpdateInfo& data() const;
  inline ::Cmd::MatchTeamMemUpdateInfo* mutable_data();
  inline ::Cmd::MatchTeamMemUpdateInfo* release_data();
  inline void set_allocated_data(::Cmd::MatchTeamMemUpdateInfo* data);

  // @@protoc_insertion_point(class_scope:Cmd.PvpTeamMemberUpdateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::MatchTeamMemUpdateInfo* data_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static PvpTeamMemberUpdateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class MatchTeamMemDataUpdateInfo : public ::google::protobuf::Message {
 public:
  MatchTeamMemDataUpdateInfo();
  virtual ~MatchTeamMemDataUpdateInfo();

  MatchTeamMemDataUpdateInfo(const MatchTeamMemDataUpdateInfo& from);

  inline MatchTeamMemDataUpdateInfo& operator=(const MatchTeamMemDataUpdateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MatchTeamMemDataUpdateInfo& default_instance();

  void Swap(MatchTeamMemDataUpdateInfo* other);

  // implements Message ----------------------------------------------

  MatchTeamMemDataUpdateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MatchTeamMemDataUpdateInfo& from);
  void MergeFrom(const MatchTeamMemDataUpdateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 zoneid = 3;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneidFieldNumber = 3;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // optional uint64 teamid = 4;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 4;
  inline ::google::protobuf::uint64 teamid() const;
  inline void set_teamid(::google::protobuf::uint64 value);

  // optional uint64 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint64 roomid = 6;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  inline ::google::protobuf::uint64 roomid() const;
  inline void set_roomid(::google::protobuf::uint64 value);

  // repeated .Cmd.MemberData members = 7;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 7;
  inline const ::Cmd::MemberData& members(int index) const;
  inline ::Cmd::MemberData* mutable_members(int index);
  inline ::Cmd::MemberData* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MemberData >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::MemberData >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:Cmd.MatchTeamMemDataUpdateInfo)
 private:
  inline void set_has_zoneid();
  inline void clear_has_zoneid();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_roomid();
  inline void clear_has_roomid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 teamid_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint64 roomid_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::MemberData > members_;
  ::google::protobuf::uint32 zoneid_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static MatchTeamMemDataUpdateInfo* default_instance_;
};
// -------------------------------------------------------------------

class PvpMemberDataUpdateCCmd : public ::google::protobuf::Message {
 public:
  PvpMemberDataUpdateCCmd();
  virtual ~PvpMemberDataUpdateCCmd();

  PvpMemberDataUpdateCCmd(const PvpMemberDataUpdateCCmd& from);

  inline PvpMemberDataUpdateCCmd& operator=(const PvpMemberDataUpdateCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvpMemberDataUpdateCCmd& default_instance();

  void Swap(PvpMemberDataUpdateCCmd* other);

  // implements Message ----------------------------------------------

  PvpMemberDataUpdateCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvpMemberDataUpdateCCmd& from);
  void MergeFrom(const PvpMemberDataUpdateCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Cmd::MatchTeamMemDataUpdateInfo& data() const;
  inline ::Cmd::MatchTeamMemDataUpdateInfo* mutable_data();
  inline ::Cmd::MatchTeamMemDataUpdateInfo* release_data();
  inline void set_allocated_data(::Cmd::MatchTeamMemDataUpdateInfo* data);

  // @@protoc_insertion_point(class_scope:Cmd.PvpMemberDataUpdateCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::MatchTeamMemDataUpdateInfo* data_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static PvpMemberDataUpdateCCmd* default_instance_;
};
// -------------------------------------------------------------------

class NtfMatchInfoCCmd : public ::google::protobuf::Message {
 public:
  NtfMatchInfoCCmd();
  virtual ~NtfMatchInfoCCmd();

  NtfMatchInfoCCmd(const NtfMatchInfoCCmd& from);

  inline NtfMatchInfoCCmd& operator=(const NtfMatchInfoCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfMatchInfoCCmd& default_instance();

  void Swap(NtfMatchInfoCCmd* other);

  // implements Message ----------------------------------------------

  NtfMatchInfoCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfMatchInfoCCmd& from);
  void MergeFrom(const NtfMatchInfoCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 3;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // optional bool ismatch = 4 [default = false];
  inline bool has_ismatch() const;
  inline void clear_ismatch();
  static const int kIsmatchFieldNumber = 4;
  inline bool ismatch() const;
  inline void set_ismatch(bool value);

  // optional bool isfight = 5 [default = false];
  inline bool has_isfight() const;
  inline void clear_isfight();
  static const int kIsfightFieldNumber = 5;
  inline bool isfight() const;
  inline void set_isfight(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.NtfMatchInfoCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_ismatch();
  inline void clear_has_ismatch();
  inline void set_has_isfight();
  inline void clear_has_isfight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int etype_;
  bool ismatch_;
  bool isfight_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfMatchInfoCCmd* default_instance_;
};
// -------------------------------------------------------------------

class GodEndTimeCCmd : public ::google::protobuf::Message {
 public:
  GodEndTimeCCmd();
  virtual ~GodEndTimeCCmd();

  GodEndTimeCCmd(const GodEndTimeCCmd& from);

  inline GodEndTimeCCmd& operator=(const GodEndTimeCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GodEndTimeCCmd& default_instance();

  void Swap(GodEndTimeCCmd* other);

  // implements Message ----------------------------------------------

  GodEndTimeCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GodEndTimeCCmd& from);
  void MergeFrom(const GodEndTimeCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional uint32 endtime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.GodEndTimeCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint32 endtime_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static GodEndTimeCCmd* default_instance_;
};
// -------------------------------------------------------------------

class RankNameInfo : public ::google::protobuf::Message {
 public:
  RankNameInfo();
  virtual ~RankNameInfo();

  RankNameInfo(const RankNameInfo& from);

  inline RankNameInfo& operator=(const RankNameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankNameInfo& default_instance();

  void Swap(RankNameInfo* other);

  // implements Message ----------------------------------------------

  RankNameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankNameInfo& from);
  void MergeFrom(const RankNameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 apple = 2;
  inline bool has_apple() const;
  inline void clear_apple();
  static const int kAppleFieldNumber = 2;
  inline ::google::protobuf::uint32 apple() const;
  inline void set_apple(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.RankNameInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_apple();
  inline void clear_has_apple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google::protobuf::uint32 apple_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static RankNameInfo* default_instance_;
};
// -------------------------------------------------------------------

class NtfRankChangeCCmd : public ::google::protobuf::Message {
 public:
  NtfRankChangeCCmd();
  virtual ~NtfRankChangeCCmd();

  NtfRankChangeCCmd(const NtfRankChangeCCmd& from);

  inline NtfRankChangeCCmd& operator=(const NtfRankChangeCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtfRankChangeCCmd& default_instance();

  void Swap(NtfRankChangeCCmd* other);

  // implements Message ----------------------------------------------

  NtfRankChangeCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtfRankChangeCCmd& from);
  void MergeFrom(const NtfRankChangeCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // repeated .Cmd.RankNameInfo ranks = 3;
  inline int ranks_size() const;
  inline void clear_ranks();
  static const int kRanksFieldNumber = 3;
  inline const ::Cmd::RankNameInfo& ranks(int index) const;
  inline ::Cmd::RankNameInfo* mutable_ranks(int index);
  inline ::Cmd::RankNameInfo* add_ranks();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RankNameInfo >&
      ranks() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::RankNameInfo >*
      mutable_ranks();

  // @@protoc_insertion_point(class_scope:Cmd.NtfRankChangeCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::RankNameInfo > ranks_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static NtfRankChangeCCmd* default_instance_;
};
// -------------------------------------------------------------------

class OpenGlobalShopPanelCCmd : public ::google::protobuf::Message {
 public:
  OpenGlobalShopPanelCCmd();
  virtual ~OpenGlobalShopPanelCCmd();

  OpenGlobalShopPanelCCmd(const OpenGlobalShopPanelCCmd& from);

  inline OpenGlobalShopPanelCCmd& operator=(const OpenGlobalShopPanelCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenGlobalShopPanelCCmd& default_instance();

  void Swap(OpenGlobalShopPanelCCmd* other);

  // implements Message ----------------------------------------------

  OpenGlobalShopPanelCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OpenGlobalShopPanelCCmd& from);
  void MergeFrom(const OpenGlobalShopPanelCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional bool open = 3;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 3;
  inline bool open() const;
  inline void set_open(bool value);

  // @@protoc_insertion_point(class_scope:Cmd.OpenGlobalShopPanelCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_open();
  inline void clear_has_open();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  bool open_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static OpenGlobalShopPanelCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TutorMatchResultNtfMatchCCmd : public ::google::protobuf::Message {
 public:
  TutorMatchResultNtfMatchCCmd();
  virtual ~TutorMatchResultNtfMatchCCmd();

  TutorMatchResultNtfMatchCCmd(const TutorMatchResultNtfMatchCCmd& from);

  inline TutorMatchResultNtfMatchCCmd& operator=(const TutorMatchResultNtfMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TutorMatchResultNtfMatchCCmd& default_instance();

  void Swap(TutorMatchResultNtfMatchCCmd* other);

  // implements Message ----------------------------------------------

  TutorMatchResultNtfMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TutorMatchResultNtfMatchCCmd& from);
  void MergeFrom(const TutorMatchResultNtfMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.TutorMatcher target = 3;
  inline bool has_target() const;
  inline void clear_target();
  static const int kTargetFieldNumber = 3;
  inline const ::Cmd::TutorMatcher& target() const;
  inline ::Cmd::TutorMatcher* mutable_target();
  inline ::Cmd::TutorMatcher* release_target();
  inline void set_allocated_target(::Cmd::TutorMatcher* target);

  // optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::Cmd::ETutorMatch status() const;
  inline void set_status(::Cmd::ETutorMatch value);

  // @@protoc_insertion_point(class_scope:Cmd.TutorMatchResultNtfMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_target();
  inline void clear_has_target();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::Cmd::TutorMatcher* target_;
  int status_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TutorMatchResultNtfMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TutorMatchResponseMatchCCmd : public ::google::protobuf::Message {
 public:
  TutorMatchResponseMatchCCmd();
  virtual ~TutorMatchResponseMatchCCmd();

  TutorMatchResponseMatchCCmd(const TutorMatchResponseMatchCCmd& from);

  inline TutorMatchResponseMatchCCmd& operator=(const TutorMatchResponseMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TutorMatchResponseMatchCCmd& default_instance();

  void Swap(TutorMatchResponseMatchCCmd* other);

  // implements Message ----------------------------------------------

  TutorMatchResponseMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TutorMatchResponseMatchCCmd& from);
  void MergeFrom(const TutorMatchResponseMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 3;
  inline ::Cmd::ETutorMatch status() const;
  inline void set_status(::Cmd::ETutorMatch value);

  // @@protoc_insertion_point(class_scope:Cmd.TutorMatchResponseMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  int status_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TutorMatchResponseMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsPreInfo : public ::google::protobuf::Message {
 public:
  TeamPwsPreInfo();
  virtual ~TeamPwsPreInfo();

  TeamPwsPreInfo(const TeamPwsPreInfo& from);

  inline TeamPwsPreInfo& operator=(const TeamPwsPreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsPreInfo& default_instance();

  void Swap(TeamPwsPreInfo* other);

  // implements Message ----------------------------------------------

  TeamPwsPreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsPreInfo& from);
  void MergeFrom(const TeamPwsPreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 charids = 1;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharidsFieldNumber = 1;
  inline ::google::protobuf::uint64 charids(int index) const;
  inline void set_charids(int index, ::google::protobuf::uint64 value);
  inline void add_charids(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      charids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_charids();

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsPreInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > charids_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsPreInfo* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsPreInfoMatchCCmd : public ::google::protobuf::Message {
 public:
  TeamPwsPreInfoMatchCCmd();
  virtual ~TeamPwsPreInfoMatchCCmd();

  TeamPwsPreInfoMatchCCmd(const TeamPwsPreInfoMatchCCmd& from);

  inline TeamPwsPreInfoMatchCCmd& operator=(const TeamPwsPreInfoMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsPreInfoMatchCCmd& default_instance();

  void Swap(TeamPwsPreInfoMatchCCmd* other);

  // implements Message ----------------------------------------------

  TeamPwsPreInfoMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsPreInfoMatchCCmd& from);
  void MergeFrom(const TeamPwsPreInfoMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
  inline int teaminfos_size() const;
  inline void clear_teaminfos();
  static const int kTeaminfosFieldNumber = 3;
  inline const ::Cmd::TeamPwsPreInfo& teaminfos(int index) const;
  inline ::Cmd::TeamPwsPreInfo* mutable_teaminfos(int index);
  inline ::Cmd::TeamPwsPreInfo* add_teaminfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsPreInfo >&
      teaminfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsPreInfo >*
      mutable_teaminfos();

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsPreInfoMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsPreInfo > teaminfos_;
  int etype_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsPreInfoMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class UpdatePreInfoMatchCCmd : public ::google::protobuf::Message {
 public:
  UpdatePreInfoMatchCCmd();
  virtual ~UpdatePreInfoMatchCCmd();

  UpdatePreInfoMatchCCmd(const UpdatePreInfoMatchCCmd& from);

  inline UpdatePreInfoMatchCCmd& operator=(const UpdatePreInfoMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePreInfoMatchCCmd& default_instance();

  void Swap(UpdatePreInfoMatchCCmd* other);

  // implements Message ----------------------------------------------

  UpdatePreInfoMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdatePreInfoMatchCCmd& from);
  void MergeFrom(const UpdatePreInfoMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // optional uint64 charid = 3 [default = 0];
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kEtypeFieldNumber = 4;
  inline ::Cmd::EPvpType etype() const;
  inline void set_etype(::Cmd::EPvpType value);

  // @@protoc_insertion_point(class_scope:Cmd.UpdatePreInfoMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::uint64 charid_;
  int etype_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static UpdatePreInfoMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsRankInfo : public ::google::protobuf::Message {
 public:
  TeamPwsRankInfo();
  virtual ~TeamPwsRankInfo();

  TeamPwsRankInfo(const TeamPwsRankInfo& from);

  inline TeamPwsRankInfo& operator=(const TeamPwsRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsRankInfo& default_instance();

  void Swap(TeamPwsRankInfo* other);

  // implements Message ----------------------------------------------

  TeamPwsRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsRankInfo& from);
  void MergeFrom(const TeamPwsRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .Cmd.UserPortraitData portrait = 2;
  inline bool has_portrait() const;
  inline void clear_portrait();
  static const int kPortraitFieldNumber = 2;
  inline const ::Cmd::UserPortraitData& portrait() const;
  inline ::Cmd::UserPortraitData* mutable_portrait();
  inline ::Cmd::UserPortraitData* release_portrait();
  inline void set_allocated_portrait(::Cmd::UserPortraitData* portrait);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional .Cmd.ETeamPwsRank erank = 5;
  inline bool has_erank() const;
  inline void clear_erank();
  static const int kErankFieldNumber = 5;
  inline ::Cmd::ETeamPwsRank erank() const;
  inline void set_erank(::Cmd::ETeamPwsRank value);

  // optional .Cmd.EProfession profession = 6;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 6;
  inline ::Cmd::EProfession profession() const;
  inline void set_profession(::Cmd::EProfession value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsRankInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_portrait();
  inline void clear_has_portrait();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_erank();
  inline void clear_has_erank();
  inline void set_has_profession();
  inline void clear_has_profession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::Cmd::UserPortraitData* portrait_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 score_;
  int erank_;
  int profession_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryTeamPwsRankMatchCCmd : public ::google::protobuf::Message {
 public:
  QueryTeamPwsRankMatchCCmd();
  virtual ~QueryTeamPwsRankMatchCCmd();

  QueryTeamPwsRankMatchCCmd(const QueryTeamPwsRankMatchCCmd& from);

  inline QueryTeamPwsRankMatchCCmd& operator=(const QueryTeamPwsRankMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTeamPwsRankMatchCCmd& default_instance();

  void Swap(QueryTeamPwsRankMatchCCmd* other);

  // implements Message ----------------------------------------------

  QueryTeamPwsRankMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTeamPwsRankMatchCCmd& from);
  void MergeFrom(const QueryTeamPwsRankMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
  inline int rankinfo_size() const;
  inline void clear_rankinfo();
  static const int kRankinfoFieldNumber = 3;
  inline const ::Cmd::TeamPwsRankInfo& rankinfo(int index) const;
  inline ::Cmd::TeamPwsRankInfo* mutable_rankinfo(int index);
  inline ::Cmd::TeamPwsRankInfo* add_rankinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRankInfo >&
      rankinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRankInfo >*
      mutable_rankinfo();

  // @@protoc_insertion_point(class_scope:Cmd.QueryTeamPwsRankMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRankInfo > rankinfo_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryTeamPwsRankMatchCCmd* default_instance_;
};
// -------------------------------------------------------------------

class TeamPwsUserInfo : public ::google::protobuf::Message {
 public:
  TeamPwsUserInfo();
  virtual ~TeamPwsUserInfo();

  TeamPwsUserInfo(const TeamPwsUserInfo& from);

  inline TeamPwsUserInfo& operator=(const TeamPwsUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamPwsUserInfo& default_instance();

  void Swap(TeamPwsUserInfo* other);

  // implements Message ----------------------------------------------

  TeamPwsUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamPwsUserInfo& from);
  void MergeFrom(const TeamPwsUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint64 charid() const;
  inline void set_charid(::google::protobuf::uint64 value);

  // optional uint32 score = 2 [default = 0];
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
  inline bool has_erank() const;
  inline void clear_erank();
  static const int kErankFieldNumber = 3;
  inline ::Cmd::ETeamPwsRank erank() const;
  inline void set_erank(::Cmd::ETeamPwsRank value);

  // @@protoc_insertion_point(class_scope:Cmd.TeamPwsUserInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_erank();
  inline void clear_has_erank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 charid_;
  ::google::protobuf::uint32 score_;
  int erank_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static TeamPwsUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class QueryTeamPwsTeamInfoMatchCCmd : public ::google::protobuf::Message {
 public:
  QueryTeamPwsTeamInfoMatchCCmd();
  virtual ~QueryTeamPwsTeamInfoMatchCCmd();

  QueryTeamPwsTeamInfoMatchCCmd(const QueryTeamPwsTeamInfoMatchCCmd& from);

  inline QueryTeamPwsTeamInfoMatchCCmd& operator=(const QueryTeamPwsTeamInfoMatchCCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryTeamPwsTeamInfoMatchCCmd& default_instance();

  void Swap(QueryTeamPwsTeamInfoMatchCCmd* other);

  // implements Message ----------------------------------------------

  QueryTeamPwsTeamInfoMatchCCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryTeamPwsTeamInfoMatchCCmd& from);
  void MergeFrom(const QueryTeamPwsTeamInfoMatchCCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 1;
  inline ::Cmd::Command cmd() const;
  inline void set_cmd(::Cmd::Command value);

  // optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
  inline bool has_param() const;
  inline void clear_param();
  static const int kParamFieldNumber = 2;
  inline ::Cmd::MatchCParam param() const;
  inline void set_param(::Cmd::MatchCParam value);

  // repeated .Cmd.TeamPwsUserInfo userinfos = 3;
  inline int userinfos_size() const;
  inline void clear_userinfos();
  static const int kUserinfosFieldNumber = 3;
  inline const ::Cmd::TeamPwsUserInfo& userinfos(int index) const;
  inline ::Cmd::TeamPwsUserInfo* mutable_userinfos(int index);
  inline ::Cmd::TeamPwsUserInfo* add_userinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserInfo >&
      userinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserInfo >*
      mutable_userinfos();

  // optional uint32 myrank = 4 [default = 0];
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 4;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd.QueryTeamPwsTeamInfoMatchCCmd)
 private:
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_param();
  inline void clear_has_param();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int cmd_;
  int param_;
  ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserInfo > userinfos_;
  ::google::protobuf::uint32 myrank_;
  friend void  protobuf_AddDesc_MatchCCmd_2eproto();
  friend void protobuf_AssignDesc_MatchCCmd_2eproto();
  friend void protobuf_ShutdownFile_MatchCCmd_2eproto();

  void InitAsDefaultInstance();
  static QueryTeamPwsTeamInfoMatchCCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// MatchTeamData

// optional uint64 teamid = 1 [default = 0];
inline bool MatchTeamData::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchTeamData::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchTeamData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchTeamData::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 MatchTeamData::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamData.teamid)
  return teamid_;
}
inline void MatchTeamData::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamData.teamid)
}

// optional uint32 zoneid = 8 [default = 0];
inline bool MatchTeamData::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchTeamData::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchTeamData::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchTeamData::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 MatchTeamData::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamData.zoneid)
  return zoneid_;
}
inline void MatchTeamData::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamData.zoneid)
}

// optional string name = 2;
inline bool MatchTeamData::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchTeamData::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchTeamData::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchTeamData::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MatchTeamData::name() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamData.name)
  return *name_;
}
inline void MatchTeamData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamData.name)
}
inline void MatchTeamData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MatchTeamData.name)
}
inline void MatchTeamData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MatchTeamData.name)
}
inline ::std::string* MatchTeamData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MatchTeamData.name)
  return name_;
}
inline ::std::string* MatchTeamData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchTeamData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MatchTeamData.name)
}

// optional uint32 index = 3;
inline bool MatchTeamData::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchTeamData::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchTeamData::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchTeamData::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MatchTeamData::index() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamData.index)
  return index_;
}
inline void MatchTeamData::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamData.index)
}

// repeated .Cmd.TeamMember members = 4;
inline int MatchTeamData::members_size() const {
  return members_.size();
}
inline void MatchTeamData::clear_members() {
  members_.Clear();
}
inline const ::Cmd::TeamMember& MatchTeamData::members(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamData.members)
  return members_.Get(index);
}
inline ::Cmd::TeamMember* MatchTeamData::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MatchTeamData.members)
  return members_.Mutable(index);
}
inline ::Cmd::TeamMember* MatchTeamData::add_members() {
  // @@protoc_insertion_point(field_add:Cmd.MatchTeamData.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
MatchTeamData::members() const {
  // @@protoc_insertion_point(field_list:Cmd.MatchTeamData.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
MatchTeamData::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MatchTeamData.members)
  return &members_;
}

// -------------------------------------------------------------------

// RoomDetailInfo

// optional .Cmd.EPvpType type = 1;
inline bool RoomDetailInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomDetailInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomDetailInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomDetailInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType RoomDetailInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomDetailInfo.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void RoomDetailInfo::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomDetailInfo.type)
}

// optional .Cmd.ERoomState state = 2;
inline bool RoomDetailInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomDetailInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomDetailInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomDetailInfo::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Cmd::ERoomState RoomDetailInfo::state() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomDetailInfo.state)
  return static_cast< ::Cmd::ERoomState >(state_);
}
inline void RoomDetailInfo::set_state(::Cmd::ERoomState value) {
  assert(::Cmd::ERoomState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomDetailInfo.state)
}

// optional uint64 roomid = 3;
inline bool RoomDetailInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomDetailInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomDetailInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomDetailInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 RoomDetailInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomDetailInfo.roomid)
  return roomid_;
}
inline void RoomDetailInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomDetailInfo.roomid)
}

// optional string name = 4;
inline bool RoomDetailInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomDetailInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomDetailInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomDetailInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoomDetailInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomDetailInfo.name)
  return *name_;
}
inline void RoomDetailInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RoomDetailInfo.name)
}
inline void RoomDetailInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RoomDetailInfo.name)
}
inline void RoomDetailInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RoomDetailInfo.name)
}
inline ::std::string* RoomDetailInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RoomDetailInfo.name)
  return name_;
}
inline ::std::string* RoomDetailInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomDetailInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RoomDetailInfo.name)
}

// repeated .Cmd.MatchTeamData team_datas = 5;
inline int RoomDetailInfo::team_datas_size() const {
  return team_datas_.size();
}
inline void RoomDetailInfo::clear_team_datas() {
  team_datas_.Clear();
}
inline const ::Cmd::MatchTeamData& RoomDetailInfo::team_datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RoomDetailInfo.team_datas)
  return team_datas_.Get(index);
}
inline ::Cmd::MatchTeamData* RoomDetailInfo::mutable_team_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RoomDetailInfo.team_datas)
  return team_datas_.Mutable(index);
}
inline ::Cmd::MatchTeamData* RoomDetailInfo::add_team_datas() {
  // @@protoc_insertion_point(field_add:Cmd.RoomDetailInfo.team_datas)
  return team_datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MatchTeamData >&
RoomDetailInfo::team_datas() const {
  // @@protoc_insertion_point(field_list:Cmd.RoomDetailInfo.team_datas)
  return team_datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MatchTeamData >*
RoomDetailInfo::mutable_team_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RoomDetailInfo.team_datas)
  return &team_datas_;
}

// -------------------------------------------------------------------

// RoomBriefInfo

// optional .Cmd.EPvpType type = 1;
inline bool RoomBriefInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomBriefInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomBriefInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomBriefInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType RoomBriefInfo::type() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void RoomBriefInfo::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.type)
}

// optional .Cmd.ERoomState state = 2;
inline bool RoomBriefInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomBriefInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomBriefInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomBriefInfo::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Cmd::ERoomState RoomBriefInfo::state() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.state)
  return static_cast< ::Cmd::ERoomState >(state_);
}
inline void RoomBriefInfo::set_state(::Cmd::ERoomState value) {
  assert(::Cmd::ERoomState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.state)
}

// optional uint64 roomid = 3;
inline bool RoomBriefInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoomBriefInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoomBriefInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoomBriefInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 RoomBriefInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.roomid)
  return roomid_;
}
inline void RoomBriefInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.roomid)
}

// optional string name = 4;
inline bool RoomBriefInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoomBriefInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoomBriefInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoomBriefInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoomBriefInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.name)
  return *name_;
}
inline void RoomBriefInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.name)
}
inline void RoomBriefInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RoomBriefInfo.name)
}
inline void RoomBriefInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RoomBriefInfo.name)
}
inline ::std::string* RoomBriefInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RoomBriefInfo.name)
  return name_;
}
inline ::std::string* RoomBriefInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RoomBriefInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RoomBriefInfo.name)
}

// optional uint32 raidid = 5;
inline bool RoomBriefInfo::has_raidid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoomBriefInfo::set_has_raidid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoomBriefInfo::clear_has_raidid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoomBriefInfo::clear_raidid() {
  raidid_ = 0u;
  clear_has_raidid();
}
inline ::google::protobuf::uint32 RoomBriefInfo::raidid() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.raidid)
  return raidid_;
}
inline void RoomBriefInfo::set_raidid(::google::protobuf::uint32 value) {
  set_has_raidid();
  raidid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.raidid)
}

// optional uint32 player_num = 6;
inline bool RoomBriefInfo::has_player_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoomBriefInfo::set_has_player_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoomBriefInfo::clear_has_player_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoomBriefInfo::clear_player_num() {
  player_num_ = 0u;
  clear_has_player_num();
}
inline ::google::protobuf::uint32 RoomBriefInfo::player_num() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.player_num)
  return player_num_;
}
inline void RoomBriefInfo::set_player_num(::google::protobuf::uint32 value) {
  set_has_player_num();
  player_num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.player_num)
}

// optional uint32 num1 = 7;
inline bool RoomBriefInfo::has_num1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoomBriefInfo::set_has_num1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoomBriefInfo::clear_has_num1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoomBriefInfo::clear_num1() {
  num1_ = 0u;
  clear_has_num1();
}
inline ::google::protobuf::uint32 RoomBriefInfo::num1() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.num1)
  return num1_;
}
inline void RoomBriefInfo::set_num1(::google::protobuf::uint32 value) {
  set_has_num1();
  num1_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.num1)
}

// optional uint32 num2 = 8;
inline bool RoomBriefInfo::has_num2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoomBriefInfo::set_has_num2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoomBriefInfo::clear_has_num2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoomBriefInfo::clear_num2() {
  num2_ = 0u;
  clear_has_num2();
}
inline ::google::protobuf::uint32 RoomBriefInfo::num2() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.num2)
  return num2_;
}
inline void RoomBriefInfo::set_num2(::google::protobuf::uint32 value) {
  set_has_num2();
  num2_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.num2)
}

// optional uint32 num3 = 9;
inline bool RoomBriefInfo::has_num3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoomBriefInfo::set_has_num3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoomBriefInfo::clear_has_num3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoomBriefInfo::clear_num3() {
  num3_ = 0u;
  clear_has_num3();
}
inline ::google::protobuf::uint32 RoomBriefInfo::num3() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.num3)
  return num3_;
}
inline void RoomBriefInfo::set_num3(::google::protobuf::uint32 value) {
  set_has_num3();
  num3_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.num3)
}

// optional uint32 zoneid = 10;
inline bool RoomBriefInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoomBriefInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoomBriefInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoomBriefInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 RoomBriefInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RoomBriefInfo.zoneid)
  return zoneid_;
}
inline void RoomBriefInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RoomBriefInfo.zoneid)
}

// -------------------------------------------------------------------

// ReqMyRoomMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool ReqMyRoomMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMyRoomMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMyRoomMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMyRoomMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command ReqMyRoomMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyRoomMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqMyRoomMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyRoomMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_MY_ROOM];
inline bool ReqMyRoomMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMyRoomMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqMyRoomMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqMyRoomMatchCCmd::clear_param() {
  param_ = 1;
  clear_has_param();
}
inline ::Cmd::MatchCParam ReqMyRoomMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyRoomMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void ReqMyRoomMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyRoomMatchCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool ReqMyRoomMatchCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMyRoomMatchCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqMyRoomMatchCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqMyRoomMatchCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType ReqMyRoomMatchCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyRoomMatchCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void ReqMyRoomMatchCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqMyRoomMatchCCmd.type)
}

// optional .Cmd.RoomBriefInfo brief_info = 4;
inline bool ReqMyRoomMatchCCmd::has_brief_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqMyRoomMatchCCmd::set_has_brief_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqMyRoomMatchCCmd::clear_has_brief_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqMyRoomMatchCCmd::clear_brief_info() {
  if (brief_info_ != NULL) brief_info_->::Cmd::RoomBriefInfo::Clear();
  clear_has_brief_info();
}
inline const ::Cmd::RoomBriefInfo& ReqMyRoomMatchCCmd::brief_info() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqMyRoomMatchCCmd.brief_info)
  return brief_info_ != NULL ? *brief_info_ : *default_instance_->brief_info_;
}
inline ::Cmd::RoomBriefInfo* ReqMyRoomMatchCCmd::mutable_brief_info() {
  set_has_brief_info();
  if (brief_info_ == NULL) brief_info_ = new ::Cmd::RoomBriefInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqMyRoomMatchCCmd.brief_info)
  return brief_info_;
}
inline ::Cmd::RoomBriefInfo* ReqMyRoomMatchCCmd::release_brief_info() {
  clear_has_brief_info();
  ::Cmd::RoomBriefInfo* temp = brief_info_;
  brief_info_ = NULL;
  return temp;
}
inline void ReqMyRoomMatchCCmd::set_allocated_brief_info(::Cmd::RoomBriefInfo* brief_info) {
  delete brief_info_;
  brief_info_ = brief_info;
  if (brief_info) {
    set_has_brief_info();
  } else {
    clear_has_brief_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqMyRoomMatchCCmd.brief_info)
}

// -------------------------------------------------------------------

// ReqRoomListCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool ReqRoomListCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRoomListCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRoomListCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRoomListCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command ReqRoomListCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomListCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqRoomListCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomListCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_LIST];
inline bool ReqRoomListCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRoomListCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRoomListCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRoomListCCmd::clear_param() {
  param_ = 2;
  clear_has_param();
}
inline ::Cmd::MatchCParam ReqRoomListCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomListCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void ReqRoomListCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomListCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool ReqRoomListCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRoomListCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRoomListCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRoomListCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType ReqRoomListCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomListCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void ReqRoomListCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomListCCmd.type)
}

// repeated uint64 roomids = 4;
inline int ReqRoomListCCmd::roomids_size() const {
  return roomids_.size();
}
inline void ReqRoomListCCmd::clear_roomids() {
  roomids_.Clear();
}
inline ::google::protobuf::uint64 ReqRoomListCCmd::roomids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomListCCmd.roomids)
  return roomids_.Get(index);
}
inline void ReqRoomListCCmd::set_roomids(int index, ::google::protobuf::uint64 value) {
  roomids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomListCCmd.roomids)
}
inline void ReqRoomListCCmd::add_roomids(::google::protobuf::uint64 value) {
  roomids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.ReqRoomListCCmd.roomids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ReqRoomListCCmd::roomids() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqRoomListCCmd.roomids)
  return roomids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ReqRoomListCCmd::mutable_roomids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqRoomListCCmd.roomids)
  return &roomids_;
}

// repeated .Cmd.RoomBriefInfo room_lists = 5;
inline int ReqRoomListCCmd::room_lists_size() const {
  return room_lists_.size();
}
inline void ReqRoomListCCmd::clear_room_lists() {
  room_lists_.Clear();
}
inline const ::Cmd::RoomBriefInfo& ReqRoomListCCmd::room_lists(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomListCCmd.room_lists)
  return room_lists_.Get(index);
}
inline ::Cmd::RoomBriefInfo* ReqRoomListCCmd::mutable_room_lists(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.ReqRoomListCCmd.room_lists)
  return room_lists_.Mutable(index);
}
inline ::Cmd::RoomBriefInfo* ReqRoomListCCmd::add_room_lists() {
  // @@protoc_insertion_point(field_add:Cmd.ReqRoomListCCmd.room_lists)
  return room_lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RoomBriefInfo >&
ReqRoomListCCmd::room_lists() const {
  // @@protoc_insertion_point(field_list:Cmd.ReqRoomListCCmd.room_lists)
  return room_lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RoomBriefInfo >*
ReqRoomListCCmd::mutable_room_lists() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.ReqRoomListCCmd.room_lists)
  return &room_lists_;
}

// -------------------------------------------------------------------

// ReqRoomDetailCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool ReqRoomDetailCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqRoomDetailCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqRoomDetailCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqRoomDetailCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command ReqRoomDetailCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomDetailCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ReqRoomDetailCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomDetailCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REQ_ROOM_DETAIL];
inline bool ReqRoomDetailCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqRoomDetailCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqRoomDetailCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqRoomDetailCCmd::clear_param() {
  param_ = 3;
  clear_has_param();
}
inline ::Cmd::MatchCParam ReqRoomDetailCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomDetailCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void ReqRoomDetailCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomDetailCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool ReqRoomDetailCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqRoomDetailCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqRoomDetailCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqRoomDetailCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType ReqRoomDetailCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomDetailCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void ReqRoomDetailCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomDetailCCmd.type)
}

// optional uint64 roomid = 4;
inline bool ReqRoomDetailCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqRoomDetailCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqRoomDetailCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqRoomDetailCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 ReqRoomDetailCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomDetailCCmd.roomid)
  return roomid_;
}
inline void ReqRoomDetailCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ReqRoomDetailCCmd.roomid)
}

// optional .Cmd.RoomDetailInfo datail_info = 5;
inline bool ReqRoomDetailCCmd::has_datail_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqRoomDetailCCmd::set_has_datail_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqRoomDetailCCmd::clear_has_datail_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqRoomDetailCCmd::clear_datail_info() {
  if (datail_info_ != NULL) datail_info_->::Cmd::RoomDetailInfo::Clear();
  clear_has_datail_info();
}
inline const ::Cmd::RoomDetailInfo& ReqRoomDetailCCmd::datail_info() const {
  // @@protoc_insertion_point(field_get:Cmd.ReqRoomDetailCCmd.datail_info)
  return datail_info_ != NULL ? *datail_info_ : *default_instance_->datail_info_;
}
inline ::Cmd::RoomDetailInfo* ReqRoomDetailCCmd::mutable_datail_info() {
  set_has_datail_info();
  if (datail_info_ == NULL) datail_info_ = new ::Cmd::RoomDetailInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.ReqRoomDetailCCmd.datail_info)
  return datail_info_;
}
inline ::Cmd::RoomDetailInfo* ReqRoomDetailCCmd::release_datail_info() {
  clear_has_datail_info();
  ::Cmd::RoomDetailInfo* temp = datail_info_;
  datail_info_ = NULL;
  return temp;
}
inline void ReqRoomDetailCCmd::set_allocated_datail_info(::Cmd::RoomDetailInfo* datail_info) {
  delete datail_info_;
  datail_info_ = datail_info;
  if (datail_info) {
    set_has_datail_info();
  } else {
    clear_has_datail_info();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.ReqRoomDetailCCmd.datail_info)
}

// -------------------------------------------------------------------

// JoinRoomUser

// optional uint64 charid = 1;
inline bool JoinRoomUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinRoomUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinRoomUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinRoomUser::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 JoinRoomUser::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomUser.charid)
  return charid_;
}
inline void JoinRoomUser::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomUser.charid)
}

// optional string name = 2;
inline bool JoinRoomUser::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinRoomUser::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinRoomUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinRoomUser::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& JoinRoomUser::name() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomUser.name)
  return *name_;
}
inline void JoinRoomUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomUser.name)
}
inline void JoinRoomUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinRoomUser.name)
}
inline void JoinRoomUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinRoomUser.name)
}
inline ::std::string* JoinRoomUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinRoomUser.name)
  return name_;
}
inline ::std::string* JoinRoomUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinRoomUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinRoomUser.name)
}

// -------------------------------------------------------------------

// TutorMatcher

// optional uint64 charid = 1 [default = 0];
inline bool TutorMatcher::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TutorMatcher::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TutorMatcher::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TutorMatcher::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TutorMatcher::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.charid)
  return charid_;
}
inline void TutorMatcher::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.charid)
}

// optional uint32 zoneid = 2 [default = 0];
inline bool TutorMatcher::has_zoneid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TutorMatcher::set_has_zoneid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TutorMatcher::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TutorMatcher::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 TutorMatcher::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.zoneid)
  return zoneid_;
}
inline void TutorMatcher::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.zoneid)
}

// optional bool findtutor = 3 [default = false];
inline bool TutorMatcher::has_findtutor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TutorMatcher::set_has_findtutor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TutorMatcher::clear_has_findtutor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TutorMatcher::clear_findtutor() {
  findtutor_ = false;
  clear_has_findtutor();
}
inline bool TutorMatcher::findtutor() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.findtutor)
  return findtutor_;
}
inline void TutorMatcher::set_findtutor(bool value) {
  set_has_findtutor();
  findtutor_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.findtutor)
}

// optional .Cmd.EGender gender = 4 [default = EGENDER_MIN];
inline bool TutorMatcher::has_gender() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TutorMatcher::set_has_gender() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TutorMatcher::clear_has_gender() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TutorMatcher::clear_gender() {
  gender_ = 0;
  clear_has_gender();
}
inline ::Cmd::EGender TutorMatcher::gender() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.gender)
  return static_cast< ::Cmd::EGender >(gender_);
}
inline void TutorMatcher::set_gender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_gender();
  gender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.gender)
}

// optional .Cmd.EGender selfgender = 5 [default = EGENDER_MIN];
inline bool TutorMatcher::has_selfgender() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TutorMatcher::set_has_selfgender() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TutorMatcher::clear_has_selfgender() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TutorMatcher::clear_selfgender() {
  selfgender_ = 0;
  clear_has_selfgender();
}
inline ::Cmd::EGender TutorMatcher::selfgender() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.selfgender)
  return static_cast< ::Cmd::EGender >(selfgender_);
}
inline void TutorMatcher::set_selfgender(::Cmd::EGender value) {
  assert(::Cmd::EGender_IsValid(value));
  set_has_selfgender();
  selfgender_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.selfgender)
}

// repeated .Cmd.UserData datas = 6;
inline int TutorMatcher::datas_size() const {
  return datas_.size();
}
inline void TutorMatcher::clear_datas() {
  datas_.Clear();
}
inline const ::Cmd::UserData& TutorMatcher::datas(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.datas)
  return datas_.Get(index);
}
inline ::Cmd::UserData* TutorMatcher::mutable_datas(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TutorMatcher.datas)
  return datas_.Mutable(index);
}
inline ::Cmd::UserData* TutorMatcher::add_datas() {
  // @@protoc_insertion_point(field_add:Cmd.TutorMatcher.datas)
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >&
TutorMatcher::datas() const {
  // @@protoc_insertion_point(field_list:Cmd.TutorMatcher.datas)
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::UserData >*
TutorMatcher::mutable_datas() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TutorMatcher.datas)
  return &datas_;
}

// repeated uint64 blackids = 7;
inline int TutorMatcher::blackids_size() const {
  return blackids_.size();
}
inline void TutorMatcher::clear_blackids() {
  blackids_.Clear();
}
inline ::google::protobuf::uint64 TutorMatcher::blackids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatcher.blackids)
  return blackids_.Get(index);
}
inline void TutorMatcher::set_blackids(int index, ::google::protobuf::uint64 value) {
  blackids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TutorMatcher.blackids)
}
inline void TutorMatcher::add_blackids(::google::protobuf::uint64 value) {
  blackids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TutorMatcher.blackids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TutorMatcher::blackids() const {
  // @@protoc_insertion_point(field_list:Cmd.TutorMatcher.blackids)
  return blackids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TutorMatcher::mutable_blackids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TutorMatcher.blackids)
  return &blackids_;
}

// -------------------------------------------------------------------

// JoinRoomCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool JoinRoomCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinRoomCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinRoomCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinRoomCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command JoinRoomCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinRoomCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_ROOM];
inline bool JoinRoomCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinRoomCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinRoomCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinRoomCCmd::clear_param() {
  param_ = 4;
  clear_has_param();
}
inline ::Cmd::MatchCParam JoinRoomCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void JoinRoomCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool JoinRoomCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinRoomCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinRoomCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinRoomCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType JoinRoomCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void JoinRoomCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.type)
}

// optional uint64 roomid = 4;
inline bool JoinRoomCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinRoomCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinRoomCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinRoomCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 JoinRoomCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.roomid)
  return roomid_;
}
inline void JoinRoomCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.roomid)
}

// optional string name = 5;
inline bool JoinRoomCCmd::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinRoomCCmd::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinRoomCCmd::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinRoomCCmd::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& JoinRoomCCmd::name() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.name)
  return *name_;
}
inline void JoinRoomCCmd::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.name)
}
inline void JoinRoomCCmd::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.JoinRoomCCmd.name)
}
inline void JoinRoomCCmd::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.JoinRoomCCmd.name)
}
inline ::std::string* JoinRoomCCmd::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.JoinRoomCCmd.name)
  return name_;
}
inline ::std::string* JoinRoomCCmd::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void JoinRoomCCmd::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinRoomCCmd.name)
}

// optional bool isquick = 6;
inline bool JoinRoomCCmd::has_isquick() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JoinRoomCCmd::set_has_isquick() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JoinRoomCCmd::clear_has_isquick() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JoinRoomCCmd::clear_isquick() {
  isquick_ = false;
  clear_has_isquick();
}
inline bool JoinRoomCCmd::isquick() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.isquick)
  return isquick_;
}
inline void JoinRoomCCmd::set_isquick(bool value) {
  set_has_isquick();
  isquick_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.isquick)
}

// optional uint64 teamid = 7;
inline bool JoinRoomCCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JoinRoomCCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JoinRoomCCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JoinRoomCCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 JoinRoomCCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.teamid)
  return teamid_;
}
inline void JoinRoomCCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.teamid)
}

// repeated uint64 teammember = 8;
inline int JoinRoomCCmd::teammember_size() const {
  return teammember_.size();
}
inline void JoinRoomCCmd::clear_teammember() {
  teammember_.Clear();
}
inline ::google::protobuf::uint64 JoinRoomCCmd::teammember(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.teammember)
  return teammember_.Get(index);
}
inline void JoinRoomCCmd::set_teammember(int index, ::google::protobuf::uint64 value) {
  teammember_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.teammember)
}
inline void JoinRoomCCmd::add_teammember(::google::protobuf::uint64 value) {
  teammember_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.JoinRoomCCmd.teammember)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
JoinRoomCCmd::teammember() const {
  // @@protoc_insertion_point(field_list:Cmd.JoinRoomCCmd.teammember)
  return teammember_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
JoinRoomCCmd::mutable_teammember() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.JoinRoomCCmd.teammember)
  return &teammember_;
}

// optional bool ret = 9;
inline bool JoinRoomCCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JoinRoomCCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JoinRoomCCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JoinRoomCCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool JoinRoomCCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.ret)
  return ret_;
}
inline void JoinRoomCCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.ret)
}

// optional uint64 guildid = 10;
inline bool JoinRoomCCmd::has_guildid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JoinRoomCCmd::set_has_guildid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JoinRoomCCmd::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JoinRoomCCmd::clear_guildid() {
  guildid_ = GOOGLE_ULONGLONG(0);
  clear_has_guildid();
}
inline ::google::protobuf::uint64 JoinRoomCCmd::guildid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.guildid)
  return guildid_;
}
inline void JoinRoomCCmd::set_guildid(::google::protobuf::uint64 value) {
  set_has_guildid();
  guildid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinRoomCCmd.guildid)
}

// repeated .Cmd.JoinRoomUser users = 11;
inline int JoinRoomCCmd::users_size() const {
  return users_.size();
}
inline void JoinRoomCCmd::clear_users() {
  users_.Clear();
}
inline const ::Cmd::JoinRoomUser& JoinRoomCCmd::users(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.users)
  return users_.Get(index);
}
inline ::Cmd::JoinRoomUser* JoinRoomCCmd::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.JoinRoomCCmd.users)
  return users_.Mutable(index);
}
inline ::Cmd::JoinRoomUser* JoinRoomCCmd::add_users() {
  // @@protoc_insertion_point(field_add:Cmd.JoinRoomCCmd.users)
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::JoinRoomUser >&
JoinRoomCCmd::users() const {
  // @@protoc_insertion_point(field_list:Cmd.JoinRoomCCmd.users)
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::JoinRoomUser >*
JoinRoomCCmd::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.JoinRoomCCmd.users)
  return &users_;
}

// optional .Cmd.TutorMatcher matcher = 12;
inline bool JoinRoomCCmd::has_matcher() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void JoinRoomCCmd::set_has_matcher() {
  _has_bits_[0] |= 0x00000800u;
}
inline void JoinRoomCCmd::clear_has_matcher() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void JoinRoomCCmd::clear_matcher() {
  if (matcher_ != NULL) matcher_->::Cmd::TutorMatcher::Clear();
  clear_has_matcher();
}
inline const ::Cmd::TutorMatcher& JoinRoomCCmd::matcher() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinRoomCCmd.matcher)
  return matcher_ != NULL ? *matcher_ : *default_instance_->matcher_;
}
inline ::Cmd::TutorMatcher* JoinRoomCCmd::mutable_matcher() {
  set_has_matcher();
  if (matcher_ == NULL) matcher_ = new ::Cmd::TutorMatcher;
  // @@protoc_insertion_point(field_mutable:Cmd.JoinRoomCCmd.matcher)
  return matcher_;
}
inline ::Cmd::TutorMatcher* JoinRoomCCmd::release_matcher() {
  clear_has_matcher();
  ::Cmd::TutorMatcher* temp = matcher_;
  matcher_ = NULL;
  return temp;
}
inline void JoinRoomCCmd::set_allocated_matcher(::Cmd::TutorMatcher* matcher) {
  delete matcher_;
  matcher_ = matcher;
  if (matcher) {
    set_has_matcher();
  } else {
    clear_has_matcher();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.JoinRoomCCmd.matcher)
}

// -------------------------------------------------------------------

// LeaveRoomCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool LeaveRoomCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LeaveRoomCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LeaveRoomCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LeaveRoomCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command LeaveRoomCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.LeaveRoomCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void LeaveRoomCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeaveRoomCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_LEAVE_ROOM];
inline bool LeaveRoomCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LeaveRoomCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LeaveRoomCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LeaveRoomCCmd::clear_param() {
  param_ = 5;
  clear_has_param();
}
inline ::Cmd::MatchCParam LeaveRoomCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.LeaveRoomCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void LeaveRoomCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeaveRoomCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool LeaveRoomCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LeaveRoomCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LeaveRoomCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LeaveRoomCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType LeaveRoomCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.LeaveRoomCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void LeaveRoomCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeaveRoomCCmd.type)
}

// optional uint64 roomid = 4;
inline bool LeaveRoomCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LeaveRoomCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LeaveRoomCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LeaveRoomCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 LeaveRoomCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.LeaveRoomCCmd.roomid)
  return roomid_;
}
inline void LeaveRoomCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeaveRoomCCmd.roomid)
}

// optional uint64 teamid = 5 [default = 0];
inline bool LeaveRoomCCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LeaveRoomCCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LeaveRoomCCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LeaveRoomCCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 LeaveRoomCCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.LeaveRoomCCmd.teamid)
  return teamid_;
}
inline void LeaveRoomCCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.LeaveRoomCCmd.teamid)
}

// -------------------------------------------------------------------

// NtfRoomStateCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool NtfRoomStateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfRoomStateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfRoomStateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfRoomStateCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command NtfRoomStateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfRoomStateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_ROOM_STATE];
inline bool NtfRoomStateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfRoomStateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfRoomStateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfRoomStateCCmd::clear_param() {
  param_ = 7;
  clear_has_param();
}
inline ::Cmd::MatchCParam NtfRoomStateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void NtfRoomStateCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.param)
}

// optional .Cmd.EPvpType pvp_type = 3;
inline bool NtfRoomStateCCmd::has_pvp_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfRoomStateCCmd::set_has_pvp_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfRoomStateCCmd::clear_has_pvp_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfRoomStateCCmd::clear_pvp_type() {
  pvp_type_ = 0;
  clear_has_pvp_type();
}
inline ::Cmd::EPvpType NtfRoomStateCCmd::pvp_type() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.pvp_type)
  return static_cast< ::Cmd::EPvpType >(pvp_type_);
}
inline void NtfRoomStateCCmd::set_pvp_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_pvp_type();
  pvp_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.pvp_type)
}

// optional uint64 roomid = 4;
inline bool NtfRoomStateCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfRoomStateCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfRoomStateCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfRoomStateCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 NtfRoomStateCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.roomid)
  return roomid_;
}
inline void NtfRoomStateCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.roomid)
}

// optional .Cmd.ERoomState state = 5;
inline bool NtfRoomStateCCmd::has_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfRoomStateCCmd::set_has_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfRoomStateCCmd::clear_has_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfRoomStateCCmd::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Cmd::ERoomState NtfRoomStateCCmd::state() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.state)
  return static_cast< ::Cmd::ERoomState >(state_);
}
inline void NtfRoomStateCCmd::set_state(::Cmd::ERoomState value) {
  assert(::Cmd::ERoomState_IsValid(value));
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.state)
}

// optional uint32 endtime = 6;
inline bool NtfRoomStateCCmd::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfRoomStateCCmd::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfRoomStateCCmd::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfRoomStateCCmd::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 NtfRoomStateCCmd::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRoomStateCCmd.endtime)
  return endtime_;
}
inline void NtfRoomStateCCmd::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRoomStateCCmd.endtime)
}

// -------------------------------------------------------------------

// NtfFightStatCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool NtfFightStatCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfFightStatCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfFightStatCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfFightStatCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command NtfFightStatCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfFightStatCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_FIGHTING_STATE];
inline bool NtfFightStatCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfFightStatCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfFightStatCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfFightStatCCmd::clear_param() {
  param_ = 8;
  clear_has_param();
}
inline ::Cmd::MatchCParam NtfFightStatCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void NtfFightStatCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.param)
}

// optional .Cmd.EPvpType pvp_type = 3;
inline bool NtfFightStatCCmd::has_pvp_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfFightStatCCmd::set_has_pvp_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfFightStatCCmd::clear_has_pvp_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfFightStatCCmd::clear_pvp_type() {
  pvp_type_ = 0;
  clear_has_pvp_type();
}
inline ::Cmd::EPvpType NtfFightStatCCmd::pvp_type() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.pvp_type)
  return static_cast< ::Cmd::EPvpType >(pvp_type_);
}
inline void NtfFightStatCCmd::set_pvp_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_pvp_type();
  pvp_type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.pvp_type)
}

// optional uint32 starttime = 4;
inline bool NtfFightStatCCmd::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfFightStatCCmd::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfFightStatCCmd::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfFightStatCCmd::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 NtfFightStatCCmd::starttime() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.starttime)
  return starttime_;
}
inline void NtfFightStatCCmd::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.starttime)
}

// optional uint32 player_num = 5;
inline bool NtfFightStatCCmd::has_player_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfFightStatCCmd::set_has_player_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfFightStatCCmd::clear_has_player_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfFightStatCCmd::clear_player_num() {
  player_num_ = 0u;
  clear_has_player_num();
}
inline ::google::protobuf::uint32 NtfFightStatCCmd::player_num() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.player_num)
  return player_num_;
}
inline void NtfFightStatCCmd::set_player_num(::google::protobuf::uint32 value) {
  set_has_player_num();
  player_num_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.player_num)
}

// optional uint64 score = 6;
inline bool NtfFightStatCCmd::has_score() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NtfFightStatCCmd::set_has_score() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NtfFightStatCCmd::clear_has_score() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NtfFightStatCCmd::clear_score() {
  score_ = GOOGLE_ULONGLONG(0);
  clear_has_score();
}
inline ::google::protobuf::uint64 NtfFightStatCCmd::score() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.score)
  return score_;
}
inline void NtfFightStatCCmd::set_score(::google::protobuf::uint64 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.score)
}

// optional uint64 my_teamscore = 10;
inline bool NtfFightStatCCmd::has_my_teamscore() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NtfFightStatCCmd::set_has_my_teamscore() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NtfFightStatCCmd::clear_has_my_teamscore() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NtfFightStatCCmd::clear_my_teamscore() {
  my_teamscore_ = GOOGLE_ULONGLONG(0);
  clear_has_my_teamscore();
}
inline ::google::protobuf::uint64 NtfFightStatCCmd::my_teamscore() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.my_teamscore)
  return my_teamscore_;
}
inline void NtfFightStatCCmd::set_my_teamscore(::google::protobuf::uint64 value) {
  set_has_my_teamscore();
  my_teamscore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.my_teamscore)
}

// optional uint64 enemy_teamscore = 11;
inline bool NtfFightStatCCmd::has_enemy_teamscore() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NtfFightStatCCmd::set_has_enemy_teamscore() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NtfFightStatCCmd::clear_has_enemy_teamscore() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NtfFightStatCCmd::clear_enemy_teamscore() {
  enemy_teamscore_ = GOOGLE_ULONGLONG(0);
  clear_has_enemy_teamscore();
}
inline ::google::protobuf::uint64 NtfFightStatCCmd::enemy_teamscore() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.enemy_teamscore)
  return enemy_teamscore_;
}
inline void NtfFightStatCCmd::set_enemy_teamscore(::google::protobuf::uint64 value) {
  set_has_enemy_teamscore();
  enemy_teamscore_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.enemy_teamscore)
}

// optional uint32 remain_hp = 15;
inline bool NtfFightStatCCmd::has_remain_hp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NtfFightStatCCmd::set_has_remain_hp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NtfFightStatCCmd::clear_has_remain_hp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NtfFightStatCCmd::clear_remain_hp() {
  remain_hp_ = 0u;
  clear_has_remain_hp();
}
inline ::google::protobuf::uint32 NtfFightStatCCmd::remain_hp() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.remain_hp)
  return remain_hp_;
}
inline void NtfFightStatCCmd::set_remain_hp(::google::protobuf::uint32 value) {
  set_has_remain_hp();
  remain_hp_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.remain_hp)
}

// optional uint32 myrank = 16;
inline bool NtfFightStatCCmd::has_myrank() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NtfFightStatCCmd::set_has_myrank() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NtfFightStatCCmd::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NtfFightStatCCmd::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 NtfFightStatCCmd::myrank() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfFightStatCCmd.myrank)
  return myrank_;
}
inline void NtfFightStatCCmd::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfFightStatCCmd.myrank)
}

// -------------------------------------------------------------------

// JoinFightingCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool JoinFightingCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JoinFightingCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JoinFightingCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JoinFightingCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command JoinFightingCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinFightingCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void JoinFightingCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinFightingCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_JOIN_FIGHTING];
inline bool JoinFightingCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JoinFightingCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JoinFightingCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JoinFightingCCmd::clear_param() {
  param_ = 9;
  clear_has_param();
}
inline ::Cmd::MatchCParam JoinFightingCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinFightingCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void JoinFightingCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinFightingCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool JoinFightingCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JoinFightingCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JoinFightingCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JoinFightingCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType JoinFightingCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinFightingCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void JoinFightingCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinFightingCCmd.type)
}

// optional uint64 roomid = 4;
inline bool JoinFightingCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JoinFightingCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JoinFightingCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JoinFightingCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 JoinFightingCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinFightingCCmd.roomid)
  return roomid_;
}
inline void JoinFightingCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinFightingCCmd.roomid)
}

// optional bool ret = 5;
inline bool JoinFightingCCmd::has_ret() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JoinFightingCCmd::set_has_ret() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JoinFightingCCmd::clear_has_ret() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JoinFightingCCmd::clear_ret() {
  ret_ = false;
  clear_has_ret();
}
inline bool JoinFightingCCmd::ret() const {
  // @@protoc_insertion_point(field_get:Cmd.JoinFightingCCmd.ret)
  return ret_;
}
inline void JoinFightingCCmd::set_ret(bool value) {
  set_has_ret();
  ret_ = value;
  // @@protoc_insertion_point(field_set:Cmd.JoinFightingCCmd.ret)
}

// -------------------------------------------------------------------

// ComboNotifyCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool ComboNotifyCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComboNotifyCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComboNotifyCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComboNotifyCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command ComboNotifyCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.ComboNotifyCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void ComboNotifyCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComboNotifyCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_COMBO_KILL];
inline bool ComboNotifyCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComboNotifyCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComboNotifyCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComboNotifyCCmd::clear_param() {
  param_ = 10;
  clear_has_param();
}
inline ::Cmd::MatchCParam ComboNotifyCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.ComboNotifyCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void ComboNotifyCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComboNotifyCCmd.param)
}

// optional uint32 comboNum = 3;
inline bool ComboNotifyCCmd::has_combonum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ComboNotifyCCmd::set_has_combonum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ComboNotifyCCmd::clear_has_combonum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ComboNotifyCCmd::clear_combonum() {
  combonum_ = 0u;
  clear_has_combonum();
}
inline ::google::protobuf::uint32 ComboNotifyCCmd::combonum() const {
  // @@protoc_insertion_point(field_get:Cmd.ComboNotifyCCmd.comboNum)
  return combonum_;
}
inline void ComboNotifyCCmd::set_combonum(::google::protobuf::uint32 value) {
  set_has_combonum();
  combonum_ = value;
  // @@protoc_insertion_point(field_set:Cmd.ComboNotifyCCmd.comboNum)
}

// -------------------------------------------------------------------

// RevChallengeCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool RevChallengeCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RevChallengeCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RevChallengeCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RevChallengeCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command RevChallengeCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void RevChallengeCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_REV_CHALLENGE];
inline bool RevChallengeCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RevChallengeCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RevChallengeCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RevChallengeCCmd::clear_param() {
  param_ = 11;
  clear_has_param();
}
inline ::Cmd::MatchCParam RevChallengeCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void RevChallengeCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool RevChallengeCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RevChallengeCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RevChallengeCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RevChallengeCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType RevChallengeCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void RevChallengeCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.type)
}

// optional uint64 roomid = 4;
inline bool RevChallengeCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RevChallengeCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RevChallengeCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RevChallengeCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 RevChallengeCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.roomid)
  return roomid_;
}
inline void RevChallengeCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.roomid)
}

// optional string challenger = 5;
inline bool RevChallengeCCmd::has_challenger() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RevChallengeCCmd::set_has_challenger() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RevChallengeCCmd::clear_has_challenger() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RevChallengeCCmd::clear_challenger() {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_->clear();
  }
  clear_has_challenger();
}
inline const ::std::string& RevChallengeCCmd::challenger() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.challenger)
  return *challenger_;
}
inline void RevChallengeCCmd::set_challenger(const ::std::string& value) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.challenger)
}
inline void RevChallengeCCmd::set_challenger(const char* value) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RevChallengeCCmd.challenger)
}
inline void RevChallengeCCmd::set_challenger(const char* value, size_t size) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RevChallengeCCmd.challenger)
}
inline ::std::string* RevChallengeCCmd::mutable_challenger() {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RevChallengeCCmd.challenger)
  return challenger_;
}
inline ::std::string* RevChallengeCCmd::release_challenger() {
  clear_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = challenger_;
    challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RevChallengeCCmd::set_allocated_challenger(::std::string* challenger) {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenger_;
  }
  if (challenger) {
    set_has_challenger();
    challenger_ = challenger;
  } else {
    clear_has_challenger();
    challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RevChallengeCCmd.challenger)
}

// optional uint32 challenger_zoneid = 6;
inline bool RevChallengeCCmd::has_challenger_zoneid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RevChallengeCCmd::set_has_challenger_zoneid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RevChallengeCCmd::clear_has_challenger_zoneid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RevChallengeCCmd::clear_challenger_zoneid() {
  challenger_zoneid_ = 0u;
  clear_has_challenger_zoneid();
}
inline ::google::protobuf::uint32 RevChallengeCCmd::challenger_zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.challenger_zoneid)
  return challenger_zoneid_;
}
inline void RevChallengeCCmd::set_challenger_zoneid(::google::protobuf::uint32 value) {
  set_has_challenger_zoneid();
  challenger_zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.challenger_zoneid)
}

// repeated .Cmd.TeamMember members = 7;
inline int RevChallengeCCmd::members_size() const {
  return members_.size();
}
inline void RevChallengeCCmd::clear_members() {
  members_.Clear();
}
inline const ::Cmd::TeamMember& RevChallengeCCmd::members(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.members)
  return members_.Get(index);
}
inline ::Cmd::TeamMember* RevChallengeCCmd::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.RevChallengeCCmd.members)
  return members_.Mutable(index);
}
inline ::Cmd::TeamMember* RevChallengeCCmd::add_members() {
  // @@protoc_insertion_point(field_add:Cmd.RevChallengeCCmd.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
RevChallengeCCmd::members() const {
  // @@protoc_insertion_point(field_list:Cmd.RevChallengeCCmd.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
RevChallengeCCmd::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.RevChallengeCCmd.members)
  return &members_;
}

// optional .Cmd.EMatchReply reply = 8;
inline bool RevChallengeCCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RevChallengeCCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RevChallengeCCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RevChallengeCCmd::clear_reply() {
  reply_ = 1;
  clear_has_reply();
}
inline ::Cmd::EMatchReply RevChallengeCCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.RevChallengeCCmd.reply)
  return static_cast< ::Cmd::EMatchReply >(reply_);
}
inline void RevChallengeCCmd::set_reply(::Cmd::EMatchReply value) {
  assert(::Cmd::EMatchReply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RevChallengeCCmd.reply)
}

// -------------------------------------------------------------------

// KickTeamCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool KickTeamCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KickTeamCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KickTeamCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KickTeamCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command KickTeamCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void KickTeamCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_KICK_TEAM];
inline bool KickTeamCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KickTeamCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KickTeamCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KickTeamCCmd::clear_param() {
  param_ = 12;
  clear_has_param();
}
inline ::Cmd::MatchCParam KickTeamCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void KickTeamCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool KickTeamCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KickTeamCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KickTeamCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KickTeamCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType KickTeamCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void KickTeamCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.type)
}

// optional uint64 roomid = 4;
inline bool KickTeamCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KickTeamCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KickTeamCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KickTeamCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 KickTeamCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.roomid)
  return roomid_;
}
inline void KickTeamCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.roomid)
}

// optional uint64 zoneid = 5;
inline bool KickTeamCCmd::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KickTeamCCmd::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KickTeamCCmd::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KickTeamCCmd::clear_zoneid() {
  zoneid_ = GOOGLE_ULONGLONG(0);
  clear_has_zoneid();
}
inline ::google::protobuf::uint64 KickTeamCCmd::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.zoneid)
  return zoneid_;
}
inline void KickTeamCCmd::set_zoneid(::google::protobuf::uint64 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.zoneid)
}

// optional uint64 teamid = 6;
inline bool KickTeamCCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KickTeamCCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KickTeamCCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KickTeamCCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 KickTeamCCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.KickTeamCCmd.teamid)
  return teamid_;
}
inline void KickTeamCCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.KickTeamCCmd.teamid)
}

// -------------------------------------------------------------------

// FightConfirmCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool FightConfirmCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FightConfirmCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FightConfirmCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FightConfirmCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command FightConfirmCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void FightConfirmCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_FIGHT_CONFIRM];
inline bool FightConfirmCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FightConfirmCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FightConfirmCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FightConfirmCCmd::clear_param() {
  param_ = 13;
  clear_has_param();
}
inline ::Cmd::MatchCParam FightConfirmCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void FightConfirmCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.param)
}

// optional .Cmd.EPvpType type = 3;
inline bool FightConfirmCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FightConfirmCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FightConfirmCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FightConfirmCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType FightConfirmCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void FightConfirmCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.type)
}

// optional uint64 roomid = 4;
inline bool FightConfirmCCmd::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FightConfirmCCmd::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FightConfirmCCmd::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FightConfirmCCmd::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 FightConfirmCCmd::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.roomid)
  return roomid_;
}
inline void FightConfirmCCmd::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.roomid)
}

// optional uint64 teamid = 5;
inline bool FightConfirmCCmd::has_teamid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FightConfirmCCmd::set_has_teamid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FightConfirmCCmd::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FightConfirmCCmd::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 FightConfirmCCmd::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.teamid)
  return teamid_;
}
inline void FightConfirmCCmd::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.teamid)
}

// optional .Cmd.EMatchReply reply = 6;
inline bool FightConfirmCCmd::has_reply() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FightConfirmCCmd::set_has_reply() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FightConfirmCCmd::clear_has_reply() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FightConfirmCCmd::clear_reply() {
  reply_ = 1;
  clear_has_reply();
}
inline ::Cmd::EMatchReply FightConfirmCCmd::reply() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.reply)
  return static_cast< ::Cmd::EMatchReply >(reply_);
}
inline void FightConfirmCCmd::set_reply(::Cmd::EMatchReply value) {
  assert(::Cmd::EMatchReply_IsValid(value));
  set_has_reply();
  reply_ = value;
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.reply)
}

// optional string challenger = 7;
inline bool FightConfirmCCmd::has_challenger() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FightConfirmCCmd::set_has_challenger() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FightConfirmCCmd::clear_has_challenger() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FightConfirmCCmd::clear_challenger() {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_->clear();
  }
  clear_has_challenger();
}
inline const ::std::string& FightConfirmCCmd::challenger() const {
  // @@protoc_insertion_point(field_get:Cmd.FightConfirmCCmd.challenger)
  return *challenger_;
}
inline void FightConfirmCCmd::set_challenger(const ::std::string& value) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.FightConfirmCCmd.challenger)
}
inline void FightConfirmCCmd::set_challenger(const char* value) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.FightConfirmCCmd.challenger)
}
inline void FightConfirmCCmd::set_challenger(const char* value, size_t size) {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  challenger_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.FightConfirmCCmd.challenger)
}
inline ::std::string* FightConfirmCCmd::mutable_challenger() {
  set_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    challenger_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.FightConfirmCCmd.challenger)
  return challenger_;
}
inline ::std::string* FightConfirmCCmd::release_challenger() {
  clear_has_challenger();
  if (challenger_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = challenger_;
    challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FightConfirmCCmd::set_allocated_challenger(::std::string* challenger) {
  if (challenger_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete challenger_;
  }
  if (challenger) {
    set_has_challenger();
    challenger_ = challenger;
  } else {
    clear_has_challenger();
    challenger_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.FightConfirmCCmd.challenger)
}

// -------------------------------------------------------------------

// RankInfo

// optional uint64 charid = 1;
inline bool RankInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 RankInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.RankInfo.charid)
  return charid_;
}
inline void RankInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankInfo.charid)
}

// optional uint32 index = 2;
inline bool RankInfo::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 RankInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.RankInfo.index)
  return index_;
}
inline void RankInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankInfo.index)
}

// optional uint32 rank = 3;
inline bool RankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 RankInfo::rank() const {
  // @@protoc_insertion_point(field_get:Cmd.RankInfo.rank)
  return rank_;
}
inline void RankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankInfo.rank)
}

// optional string name = 4;
inline bool RankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.RankInfo.name)
  return *name_;
}
inline void RankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RankInfo.name)
}
inline void RankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RankInfo.name)
}
inline void RankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RankInfo.name)
}
inline ::std::string* RankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RankInfo.name)
  return name_;
}
inline ::std::string* RankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RankInfo.name)
}

// -------------------------------------------------------------------

// RewardInfo

// optional uint32 itemid = 1;
inline bool RewardInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 RewardInfo::itemid() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardInfo.itemid)
  return itemid_;
}
inline void RewardInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardInfo.itemid)
}

// optional uint32 count = 2;
inline bool RewardInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardInfo::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 RewardInfo::count() const {
  // @@protoc_insertion_point(field_get:Cmd.RewardInfo.count)
  return count_;
}
inline void RewardInfo::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RewardInfo.count)
}

// -------------------------------------------------------------------

// PvpResultCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool PvpResultCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpResultCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpResultCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpResultCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command PvpResultCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PvpResultCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpResultCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_RESULT];
inline bool PvpResultCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpResultCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpResultCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpResultCCmd::clear_param() {
  param_ = 14;
  clear_has_param();
}
inline ::Cmd::MatchCParam PvpResultCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void PvpResultCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpResultCCmd.param)
}

// required .Cmd.EPvpType type = 3;
inline bool PvpResultCCmd::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpResultCCmd::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpResultCCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpResultCCmd::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::Cmd::EPvpType PvpResultCCmd::type() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.type)
  return static_cast< ::Cmd::EPvpType >(type_);
}
inline void PvpResultCCmd::set_type(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpResultCCmd.type)
}

// required .Cmd.EPvpResult result = 4;
inline bool PvpResultCCmd::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvpResultCCmd::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvpResultCCmd::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvpResultCCmd::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::Cmd::EPvpResult PvpResultCCmd::result() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.result)
  return static_cast< ::Cmd::EPvpResult >(result_);
}
inline void PvpResultCCmd::set_result(::Cmd::EPvpResult value) {
  assert(::Cmd::EPvpResult_IsValid(value));
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpResultCCmd.result)
}

// repeated .Cmd.RankInfo rank = 5;
inline int PvpResultCCmd::rank_size() const {
  return rank_.size();
}
inline void PvpResultCCmd::clear_rank() {
  rank_.Clear();
}
inline const ::Cmd::RankInfo& PvpResultCCmd::rank(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.rank)
  return rank_.Get(index);
}
inline ::Cmd::RankInfo* PvpResultCCmd::mutable_rank(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PvpResultCCmd.rank)
  return rank_.Mutable(index);
}
inline ::Cmd::RankInfo* PvpResultCCmd::add_rank() {
  // @@protoc_insertion_point(field_add:Cmd.PvpResultCCmd.rank)
  return rank_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RankInfo >&
PvpResultCCmd::rank() const {
  // @@protoc_insertion_point(field_list:Cmd.PvpResultCCmd.rank)
  return rank_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RankInfo >*
PvpResultCCmd::mutable_rank() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PvpResultCCmd.rank)
  return &rank_;
}

// repeated .Cmd.RewardInfo reward = 6;
inline int PvpResultCCmd::reward_size() const {
  return reward_.size();
}
inline void PvpResultCCmd::clear_reward() {
  reward_.Clear();
}
inline const ::Cmd::RewardInfo& PvpResultCCmd::reward(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.reward)
  return reward_.Get(index);
}
inline ::Cmd::RewardInfo* PvpResultCCmd::mutable_reward(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.PvpResultCCmd.reward)
  return reward_.Mutable(index);
}
inline ::Cmd::RewardInfo* PvpResultCCmd::add_reward() {
  // @@protoc_insertion_point(field_add:Cmd.PvpResultCCmd.reward)
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RewardInfo >&
PvpResultCCmd::reward() const {
  // @@protoc_insertion_point(field_list:Cmd.PvpResultCCmd.reward)
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RewardInfo >*
PvpResultCCmd::mutable_reward() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.PvpResultCCmd.reward)
  return &reward_;
}

// optional uint32 apple = 7;
inline bool PvpResultCCmd::has_apple() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvpResultCCmd::set_has_apple() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvpResultCCmd::clear_has_apple() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvpResultCCmd::clear_apple() {
  apple_ = 0u;
  clear_has_apple();
}
inline ::google::protobuf::uint32 PvpResultCCmd::apple() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpResultCCmd.apple)
  return apple_;
}
inline void PvpResultCCmd::set_apple(::google::protobuf::uint32 value) {
  set_has_apple();
  apple_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpResultCCmd.apple)
}

// -------------------------------------------------------------------

// MatchTeamMemUpdateInfo

// optional uint32 zoneid = 3;
inline bool MatchTeamMemUpdateInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchTeamMemUpdateInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchTeamMemUpdateInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 MatchTeamMemUpdateInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.zoneid)
  return zoneid_;
}
inline void MatchTeamMemUpdateInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.zoneid)
}

// optional uint64 teamid = 4;
inline bool MatchTeamMemUpdateInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchTeamMemUpdateInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchTeamMemUpdateInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 MatchTeamMemUpdateInfo::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.teamid)
  return teamid_;
}
inline void MatchTeamMemUpdateInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.teamid)
}

// optional uint64 roomid = 5;
inline bool MatchTeamMemUpdateInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchTeamMemUpdateInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchTeamMemUpdateInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 MatchTeamMemUpdateInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.roomid)
  return roomid_;
}
inline void MatchTeamMemUpdateInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.roomid)
}

// optional bool isfirst = 6;
inline bool MatchTeamMemUpdateInfo::has_isfirst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_isfirst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchTeamMemUpdateInfo::clear_has_isfirst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchTeamMemUpdateInfo::clear_isfirst() {
  isfirst_ = false;
  clear_has_isfirst();
}
inline bool MatchTeamMemUpdateInfo::isfirst() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.isfirst)
  return isfirst_;
}
inline void MatchTeamMemUpdateInfo::set_isfirst(bool value) {
  set_has_isfirst();
  isfirst_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.isfirst)
}

// repeated .Cmd.TeamMember updates = 7;
inline int MatchTeamMemUpdateInfo::updates_size() const {
  return updates_.size();
}
inline void MatchTeamMemUpdateInfo::clear_updates() {
  updates_.Clear();
}
inline const ::Cmd::TeamMember& MatchTeamMemUpdateInfo::updates(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.updates)
  return updates_.Get(index);
}
inline ::Cmd::TeamMember* MatchTeamMemUpdateInfo::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MatchTeamMemUpdateInfo.updates)
  return updates_.Mutable(index);
}
inline ::Cmd::TeamMember* MatchTeamMemUpdateInfo::add_updates() {
  // @@protoc_insertion_point(field_add:Cmd.MatchTeamMemUpdateInfo.updates)
  return updates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >&
MatchTeamMemUpdateInfo::updates() const {
  // @@protoc_insertion_point(field_list:Cmd.MatchTeamMemUpdateInfo.updates)
  return updates_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamMember >*
MatchTeamMemUpdateInfo::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MatchTeamMemUpdateInfo.updates)
  return &updates_;
}

// repeated uint64 deletes = 8;
inline int MatchTeamMemUpdateInfo::deletes_size() const {
  return deletes_.size();
}
inline void MatchTeamMemUpdateInfo::clear_deletes() {
  deletes_.Clear();
}
inline ::google::protobuf::uint64 MatchTeamMemUpdateInfo::deletes(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.deletes)
  return deletes_.Get(index);
}
inline void MatchTeamMemUpdateInfo::set_deletes(int index, ::google::protobuf::uint64 value) {
  deletes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.deletes)
}
inline void MatchTeamMemUpdateInfo::add_deletes(::google::protobuf::uint64 value) {
  deletes_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.MatchTeamMemUpdateInfo.deletes)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
MatchTeamMemUpdateInfo::deletes() const {
  // @@protoc_insertion_point(field_list:Cmd.MatchTeamMemUpdateInfo.deletes)
  return deletes_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
MatchTeamMemUpdateInfo::mutable_deletes() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MatchTeamMemUpdateInfo.deletes)
  return &deletes_;
}

// optional uint32 index = 9;
inline bool MatchTeamMemUpdateInfo::has_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MatchTeamMemUpdateInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MatchTeamMemUpdateInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 MatchTeamMemUpdateInfo::index() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.index)
  return index_;
}
inline void MatchTeamMemUpdateInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.index)
}

// optional string teamname = 10;
inline bool MatchTeamMemUpdateInfo::has_teamname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MatchTeamMemUpdateInfo::set_has_teamname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MatchTeamMemUpdateInfo::clear_has_teamname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MatchTeamMemUpdateInfo::clear_teamname() {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_->clear();
  }
  clear_has_teamname();
}
inline const ::std::string& MatchTeamMemUpdateInfo::teamname() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemUpdateInfo.teamname)
  return *teamname_;
}
inline void MatchTeamMemUpdateInfo::set_teamname(const ::std::string& value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemUpdateInfo.teamname)
}
inline void MatchTeamMemUpdateInfo::set_teamname(const char* value) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.MatchTeamMemUpdateInfo.teamname)
}
inline void MatchTeamMemUpdateInfo::set_teamname(const char* value, size_t size) {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  teamname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.MatchTeamMemUpdateInfo.teamname)
}
inline ::std::string* MatchTeamMemUpdateInfo::mutable_teamname() {
  set_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    teamname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.MatchTeamMemUpdateInfo.teamname)
  return teamname_;
}
inline ::std::string* MatchTeamMemUpdateInfo::release_teamname() {
  clear_has_teamname();
  if (teamname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = teamname_;
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MatchTeamMemUpdateInfo::set_allocated_teamname(::std::string* teamname) {
  if (teamname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete teamname_;
  }
  if (teamname) {
    set_has_teamname();
    teamname_ = teamname;
  } else {
    clear_has_teamname();
    teamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.MatchTeamMemUpdateInfo.teamname)
}

// -------------------------------------------------------------------

// PvpTeamMemberUpdateCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool PvpTeamMemberUpdateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpTeamMemberUpdateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpTeamMemberUpdateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpTeamMemberUpdateCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command PvpTeamMemberUpdateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PvpTeamMemberUpdateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpTeamMemberUpdateCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERUPDATE];
inline bool PvpTeamMemberUpdateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpTeamMemberUpdateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpTeamMemberUpdateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpTeamMemberUpdateCCmd::clear_param() {
  param_ = 15;
  clear_has_param();
}
inline ::Cmd::MatchCParam PvpTeamMemberUpdateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void PvpTeamMemberUpdateCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpTeamMemberUpdateCCmd.param)
}

// optional .Cmd.MatchTeamMemUpdateInfo data = 3;
inline bool PvpTeamMemberUpdateCCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpTeamMemberUpdateCCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpTeamMemberUpdateCCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpTeamMemberUpdateCCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::MatchTeamMemUpdateInfo::Clear();
  clear_has_data();
}
inline const ::Cmd::MatchTeamMemUpdateInfo& PvpTeamMemberUpdateCCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpTeamMemberUpdateCCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::MatchTeamMemUpdateInfo* PvpTeamMemberUpdateCCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::MatchTeamMemUpdateInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.PvpTeamMemberUpdateCCmd.data)
  return data_;
}
inline ::Cmd::MatchTeamMemUpdateInfo* PvpTeamMemberUpdateCCmd::release_data() {
  clear_has_data();
  ::Cmd::MatchTeamMemUpdateInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PvpTeamMemberUpdateCCmd::set_allocated_data(::Cmd::MatchTeamMemUpdateInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PvpTeamMemberUpdateCCmd.data)
}

// -------------------------------------------------------------------

// MatchTeamMemDataUpdateInfo

// optional uint32 zoneid = 3;
inline bool MatchTeamMemDataUpdateInfo::has_zoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MatchTeamMemDataUpdateInfo::set_has_zoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MatchTeamMemDataUpdateInfo::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MatchTeamMemDataUpdateInfo::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 MatchTeamMemDataUpdateInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemDataUpdateInfo.zoneid)
  return zoneid_;
}
inline void MatchTeamMemDataUpdateInfo::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemDataUpdateInfo.zoneid)
}

// optional uint64 teamid = 4;
inline bool MatchTeamMemDataUpdateInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MatchTeamMemDataUpdateInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MatchTeamMemDataUpdateInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MatchTeamMemDataUpdateInfo::clear_teamid() {
  teamid_ = GOOGLE_ULONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::uint64 MatchTeamMemDataUpdateInfo::teamid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemDataUpdateInfo.teamid)
  return teamid_;
}
inline void MatchTeamMemDataUpdateInfo::set_teamid(::google::protobuf::uint64 value) {
  set_has_teamid();
  teamid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemDataUpdateInfo.teamid)
}

// optional uint64 charid = 5;
inline bool MatchTeamMemDataUpdateInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MatchTeamMemDataUpdateInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MatchTeamMemDataUpdateInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MatchTeamMemDataUpdateInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 MatchTeamMemDataUpdateInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemDataUpdateInfo.charid)
  return charid_;
}
inline void MatchTeamMemDataUpdateInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemDataUpdateInfo.charid)
}

// optional uint64 roomid = 6;
inline bool MatchTeamMemDataUpdateInfo::has_roomid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MatchTeamMemDataUpdateInfo::set_has_roomid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MatchTeamMemDataUpdateInfo::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MatchTeamMemDataUpdateInfo::clear_roomid() {
  roomid_ = GOOGLE_ULONGLONG(0);
  clear_has_roomid();
}
inline ::google::protobuf::uint64 MatchTeamMemDataUpdateInfo::roomid() const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemDataUpdateInfo.roomid)
  return roomid_;
}
inline void MatchTeamMemDataUpdateInfo::set_roomid(::google::protobuf::uint64 value) {
  set_has_roomid();
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.MatchTeamMemDataUpdateInfo.roomid)
}

// repeated .Cmd.MemberData members = 7;
inline int MatchTeamMemDataUpdateInfo::members_size() const {
  return members_.size();
}
inline void MatchTeamMemDataUpdateInfo::clear_members() {
  members_.Clear();
}
inline const ::Cmd::MemberData& MatchTeamMemDataUpdateInfo::members(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.MatchTeamMemDataUpdateInfo.members)
  return members_.Get(index);
}
inline ::Cmd::MemberData* MatchTeamMemDataUpdateInfo::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.MatchTeamMemDataUpdateInfo.members)
  return members_.Mutable(index);
}
inline ::Cmd::MemberData* MatchTeamMemDataUpdateInfo::add_members() {
  // @@protoc_insertion_point(field_add:Cmd.MatchTeamMemDataUpdateInfo.members)
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::MemberData >&
MatchTeamMemDataUpdateInfo::members() const {
  // @@protoc_insertion_point(field_list:Cmd.MatchTeamMemDataUpdateInfo.members)
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::MemberData >*
MatchTeamMemDataUpdateInfo::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.MatchTeamMemDataUpdateInfo.members)
  return &members_;
}

// -------------------------------------------------------------------

// PvpMemberDataUpdateCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool PvpMemberDataUpdateCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvpMemberDataUpdateCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvpMemberDataUpdateCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvpMemberDataUpdateCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command PvpMemberDataUpdateCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void PvpMemberDataUpdateCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpMemberDataUpdateCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_PVP_MEMBERDATAUPDATE];
inline bool PvpMemberDataUpdateCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvpMemberDataUpdateCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvpMemberDataUpdateCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvpMemberDataUpdateCCmd::clear_param() {
  param_ = 16;
  clear_has_param();
}
inline ::Cmd::MatchCParam PvpMemberDataUpdateCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void PvpMemberDataUpdateCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.PvpMemberDataUpdateCCmd.param)
}

// optional .Cmd.MatchTeamMemDataUpdateInfo data = 3;
inline bool PvpMemberDataUpdateCCmd::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvpMemberDataUpdateCCmd::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvpMemberDataUpdateCCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvpMemberDataUpdateCCmd::clear_data() {
  if (data_ != NULL) data_->::Cmd::MatchTeamMemDataUpdateInfo::Clear();
  clear_has_data();
}
inline const ::Cmd::MatchTeamMemDataUpdateInfo& PvpMemberDataUpdateCCmd::data() const {
  // @@protoc_insertion_point(field_get:Cmd.PvpMemberDataUpdateCCmd.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Cmd::MatchTeamMemDataUpdateInfo* PvpMemberDataUpdateCCmd::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Cmd::MatchTeamMemDataUpdateInfo;
  // @@protoc_insertion_point(field_mutable:Cmd.PvpMemberDataUpdateCCmd.data)
  return data_;
}
inline ::Cmd::MatchTeamMemDataUpdateInfo* PvpMemberDataUpdateCCmd::release_data() {
  clear_has_data();
  ::Cmd::MatchTeamMemDataUpdateInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void PvpMemberDataUpdateCCmd::set_allocated_data(::Cmd::MatchTeamMemDataUpdateInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.PvpMemberDataUpdateCCmd.data)
}

// -------------------------------------------------------------------

// NtfMatchInfoCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool NtfMatchInfoCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfMatchInfoCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfMatchInfoCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfMatchInfoCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command NtfMatchInfoCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMatchInfoCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfMatchInfoCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMatchInfoCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_MATCHINFO];
inline bool NtfMatchInfoCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfMatchInfoCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfMatchInfoCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfMatchInfoCCmd::clear_param() {
  param_ = 17;
  clear_has_param();
}
inline ::Cmd::MatchCParam NtfMatchInfoCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMatchInfoCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void NtfMatchInfoCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMatchInfoCCmd.param)
}

// optional .Cmd.EPvpType etype = 3 [default = EPVPTYPE_POLLY];
inline bool NtfMatchInfoCCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtfMatchInfoCCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtfMatchInfoCCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtfMatchInfoCCmd::clear_etype() {
  etype_ = 4;
  clear_has_etype();
}
inline ::Cmd::EPvpType NtfMatchInfoCCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMatchInfoCCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void NtfMatchInfoCCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMatchInfoCCmd.etype)
}

// optional bool ismatch = 4 [default = false];
inline bool NtfMatchInfoCCmd::has_ismatch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtfMatchInfoCCmd::set_has_ismatch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtfMatchInfoCCmd::clear_has_ismatch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtfMatchInfoCCmd::clear_ismatch() {
  ismatch_ = false;
  clear_has_ismatch();
}
inline bool NtfMatchInfoCCmd::ismatch() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMatchInfoCCmd.ismatch)
  return ismatch_;
}
inline void NtfMatchInfoCCmd::set_ismatch(bool value) {
  set_has_ismatch();
  ismatch_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMatchInfoCCmd.ismatch)
}

// optional bool isfight = 5 [default = false];
inline bool NtfMatchInfoCCmd::has_isfight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NtfMatchInfoCCmd::set_has_isfight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NtfMatchInfoCCmd::clear_has_isfight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NtfMatchInfoCCmd::clear_isfight() {
  isfight_ = false;
  clear_has_isfight();
}
inline bool NtfMatchInfoCCmd::isfight() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfMatchInfoCCmd.isfight)
  return isfight_;
}
inline void NtfMatchInfoCCmd::set_isfight(bool value) {
  set_has_isfight();
  isfight_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfMatchInfoCCmd.isfight)
}

// -------------------------------------------------------------------

// GodEndTimeCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool GodEndTimeCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GodEndTimeCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GodEndTimeCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GodEndTimeCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command GodEndTimeCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.GodEndTimeCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void GodEndTimeCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GodEndTimeCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_GOD_ENDTIME];
inline bool GodEndTimeCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GodEndTimeCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GodEndTimeCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GodEndTimeCCmd::clear_param() {
  param_ = 18;
  clear_has_param();
}
inline ::Cmd::MatchCParam GodEndTimeCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.GodEndTimeCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void GodEndTimeCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GodEndTimeCCmd.param)
}

// optional uint32 endtime = 3;
inline bool GodEndTimeCCmd::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GodEndTimeCCmd::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GodEndTimeCCmd::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GodEndTimeCCmd::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 GodEndTimeCCmd::endtime() const {
  // @@protoc_insertion_point(field_get:Cmd.GodEndTimeCCmd.endtime)
  return endtime_;
}
inline void GodEndTimeCCmd::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:Cmd.GodEndTimeCCmd.endtime)
}

// -------------------------------------------------------------------

// RankNameInfo

// optional string name = 1;
inline bool RankNameInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankNameInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankNameInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankNameInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RankNameInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.RankNameInfo.name)
  return *name_;
}
inline void RankNameInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.RankNameInfo.name)
}
inline void RankNameInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.RankNameInfo.name)
}
inline void RankNameInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.RankNameInfo.name)
}
inline ::std::string* RankNameInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.RankNameInfo.name)
  return name_;
}
inline ::std::string* RankNameInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RankNameInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.RankNameInfo.name)
}

// optional uint32 apple = 2;
inline bool RankNameInfo::has_apple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankNameInfo::set_has_apple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankNameInfo::clear_has_apple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankNameInfo::clear_apple() {
  apple_ = 0u;
  clear_has_apple();
}
inline ::google::protobuf::uint32 RankNameInfo::apple() const {
  // @@protoc_insertion_point(field_get:Cmd.RankNameInfo.apple)
  return apple_;
}
inline void RankNameInfo::set_apple(::google::protobuf::uint32 value) {
  set_has_apple();
  apple_ = value;
  // @@protoc_insertion_point(field_set:Cmd.RankNameInfo.apple)
}

// -------------------------------------------------------------------

// NtfRankChangeCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool NtfRankChangeCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtfRankChangeCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtfRankChangeCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtfRankChangeCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command NtfRankChangeCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRankChangeCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void NtfRankChangeCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRankChangeCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_NTF_RANK_CHANGE];
inline bool NtfRankChangeCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtfRankChangeCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtfRankChangeCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtfRankChangeCCmd::clear_param() {
  param_ = 19;
  clear_has_param();
}
inline ::Cmd::MatchCParam NtfRankChangeCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRankChangeCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void NtfRankChangeCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.NtfRankChangeCCmd.param)
}

// repeated .Cmd.RankNameInfo ranks = 3;
inline int NtfRankChangeCCmd::ranks_size() const {
  return ranks_.size();
}
inline void NtfRankChangeCCmd::clear_ranks() {
  ranks_.Clear();
}
inline const ::Cmd::RankNameInfo& NtfRankChangeCCmd::ranks(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.NtfRankChangeCCmd.ranks)
  return ranks_.Get(index);
}
inline ::Cmd::RankNameInfo* NtfRankChangeCCmd::mutable_ranks(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.NtfRankChangeCCmd.ranks)
  return ranks_.Mutable(index);
}
inline ::Cmd::RankNameInfo* NtfRankChangeCCmd::add_ranks() {
  // @@protoc_insertion_point(field_add:Cmd.NtfRankChangeCCmd.ranks)
  return ranks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::RankNameInfo >&
NtfRankChangeCCmd::ranks() const {
  // @@protoc_insertion_point(field_list:Cmd.NtfRankChangeCCmd.ranks)
  return ranks_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::RankNameInfo >*
NtfRankChangeCCmd::mutable_ranks() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.NtfRankChangeCCmd.ranks)
  return &ranks_;
}

// -------------------------------------------------------------------

// OpenGlobalShopPanelCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool OpenGlobalShopPanelCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OpenGlobalShopPanelCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OpenGlobalShopPanelCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OpenGlobalShopPanelCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command OpenGlobalShopPanelCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenGlobalShopPanelCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void OpenGlobalShopPanelCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenGlobalShopPanelCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_OPEN_GLOBAL_SHOP_PANEL];
inline bool OpenGlobalShopPanelCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OpenGlobalShopPanelCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OpenGlobalShopPanelCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OpenGlobalShopPanelCCmd::clear_param() {
  param_ = 20;
  clear_has_param();
}
inline ::Cmd::MatchCParam OpenGlobalShopPanelCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenGlobalShopPanelCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void OpenGlobalShopPanelCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenGlobalShopPanelCCmd.param)
}

// optional bool open = 3;
inline bool OpenGlobalShopPanelCCmd::has_open() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OpenGlobalShopPanelCCmd::set_has_open() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OpenGlobalShopPanelCCmd::clear_has_open() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OpenGlobalShopPanelCCmd::clear_open() {
  open_ = false;
  clear_has_open();
}
inline bool OpenGlobalShopPanelCCmd::open() const {
  // @@protoc_insertion_point(field_get:Cmd.OpenGlobalShopPanelCCmd.open)
  return open_;
}
inline void OpenGlobalShopPanelCCmd::set_open(bool value) {
  set_has_open();
  open_ = value;
  // @@protoc_insertion_point(field_set:Cmd.OpenGlobalShopPanelCCmd.open)
}

// -------------------------------------------------------------------

// TutorMatchResultNtfMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool TutorMatchResultNtfMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TutorMatchResultNtfMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command TutorMatchResultNtfMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResultNtfMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TutorMatchResultNtfMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResultNtfMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHNTF];
inline bool TutorMatchResultNtfMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TutorMatchResultNtfMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_param() {
  param_ = 21;
  clear_has_param();
}
inline ::Cmd::MatchCParam TutorMatchResultNtfMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResultNtfMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void TutorMatchResultNtfMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResultNtfMatchCCmd.param)
}

// optional .Cmd.TutorMatcher target = 3;
inline bool TutorMatchResultNtfMatchCCmd::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TutorMatchResultNtfMatchCCmd::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_target() {
  if (target_ != NULL) target_->::Cmd::TutorMatcher::Clear();
  clear_has_target();
}
inline const ::Cmd::TutorMatcher& TutorMatchResultNtfMatchCCmd::target() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResultNtfMatchCCmd.target)
  return target_ != NULL ? *target_ : *default_instance_->target_;
}
inline ::Cmd::TutorMatcher* TutorMatchResultNtfMatchCCmd::mutable_target() {
  set_has_target();
  if (target_ == NULL) target_ = new ::Cmd::TutorMatcher;
  // @@protoc_insertion_point(field_mutable:Cmd.TutorMatchResultNtfMatchCCmd.target)
  return target_;
}
inline ::Cmd::TutorMatcher* TutorMatchResultNtfMatchCCmd::release_target() {
  clear_has_target();
  ::Cmd::TutorMatcher* temp = target_;
  target_ = NULL;
  return temp;
}
inline void TutorMatchResultNtfMatchCCmd::set_allocated_target(::Cmd::TutorMatcher* target) {
  delete target_;
  target_ = target;
  if (target) {
    set_has_target();
  } else {
    clear_has_target();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TutorMatchResultNtfMatchCCmd.target)
}

// optional .Cmd.ETutorMatch status = 4 [default = ETUTORMATCH_MIN];
inline bool TutorMatchResultNtfMatchCCmd::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TutorMatchResultNtfMatchCCmd::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TutorMatchResultNtfMatchCCmd::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ETutorMatch TutorMatchResultNtfMatchCCmd::status() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResultNtfMatchCCmd.status)
  return static_cast< ::Cmd::ETutorMatch >(status_);
}
inline void TutorMatchResultNtfMatchCCmd::set_status(::Cmd::ETutorMatch value) {
  assert(::Cmd::ETutorMatch_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResultNtfMatchCCmd.status)
}

// -------------------------------------------------------------------

// TutorMatchResponseMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool TutorMatchResponseMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TutorMatchResponseMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TutorMatchResponseMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TutorMatchResponseMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command TutorMatchResponseMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResponseMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TutorMatchResponseMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResponseMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TUTOR_MATCHRESPONSE];
inline bool TutorMatchResponseMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TutorMatchResponseMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TutorMatchResponseMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TutorMatchResponseMatchCCmd::clear_param() {
  param_ = 22;
  clear_has_param();
}
inline ::Cmd::MatchCParam TutorMatchResponseMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResponseMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void TutorMatchResponseMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResponseMatchCCmd.param)
}

// optional .Cmd.ETutorMatch status = 3 [default = ETUTORMATCH_MIN];
inline bool TutorMatchResponseMatchCCmd::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TutorMatchResponseMatchCCmd::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TutorMatchResponseMatchCCmd::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TutorMatchResponseMatchCCmd::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::Cmd::ETutorMatch TutorMatchResponseMatchCCmd::status() const {
  // @@protoc_insertion_point(field_get:Cmd.TutorMatchResponseMatchCCmd.status)
  return static_cast< ::Cmd::ETutorMatch >(status_);
}
inline void TutorMatchResponseMatchCCmd::set_status(::Cmd::ETutorMatch value) {
  assert(::Cmd::ETutorMatch_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TutorMatchResponseMatchCCmd.status)
}

// -------------------------------------------------------------------

// TeamPwsPreInfo

// repeated uint64 charids = 1;
inline int TeamPwsPreInfo::charids_size() const {
  return charids_.size();
}
inline void TeamPwsPreInfo::clear_charids() {
  charids_.Clear();
}
inline ::google::protobuf::uint64 TeamPwsPreInfo::charids(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsPreInfo.charids)
  return charids_.Get(index);
}
inline void TeamPwsPreInfo::set_charids(int index, ::google::protobuf::uint64 value) {
  charids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsPreInfo.charids)
}
inline void TeamPwsPreInfo::add_charids(::google::protobuf::uint64 value) {
  charids_.Add(value);
  // @@protoc_insertion_point(field_add:Cmd.TeamPwsPreInfo.charids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
TeamPwsPreInfo::charids() const {
  // @@protoc_insertion_point(field_list:Cmd.TeamPwsPreInfo.charids)
  return charids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
TeamPwsPreInfo::mutable_charids() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TeamPwsPreInfo.charids)
  return &charids_;
}

// -------------------------------------------------------------------

// TeamPwsPreInfoMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool TeamPwsPreInfoMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPwsPreInfoMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command TeamPwsPreInfoMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsPreInfoMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void TeamPwsPreInfoMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsPreInfoMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_LIST];
inline bool TeamPwsPreInfoMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPwsPreInfoMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_param() {
  param_ = 23;
  clear_has_param();
}
inline ::Cmd::MatchCParam TeamPwsPreInfoMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsPreInfoMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void TeamPwsPreInfoMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsPreInfoMatchCCmd.param)
}

// repeated .Cmd.TeamPwsPreInfo teaminfos = 3;
inline int TeamPwsPreInfoMatchCCmd::teaminfos_size() const {
  return teaminfos_.size();
}
inline void TeamPwsPreInfoMatchCCmd::clear_teaminfos() {
  teaminfos_.Clear();
}
inline const ::Cmd::TeamPwsPreInfo& TeamPwsPreInfoMatchCCmd::teaminfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsPreInfoMatchCCmd.teaminfos)
  return teaminfos_.Get(index);
}
inline ::Cmd::TeamPwsPreInfo* TeamPwsPreInfoMatchCCmd::mutable_teaminfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.TeamPwsPreInfoMatchCCmd.teaminfos)
  return teaminfos_.Mutable(index);
}
inline ::Cmd::TeamPwsPreInfo* TeamPwsPreInfoMatchCCmd::add_teaminfos() {
  // @@protoc_insertion_point(field_add:Cmd.TeamPwsPreInfoMatchCCmd.teaminfos)
  return teaminfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsPreInfo >&
TeamPwsPreInfoMatchCCmd::teaminfos() const {
  // @@protoc_insertion_point(field_list:Cmd.TeamPwsPreInfoMatchCCmd.teaminfos)
  return teaminfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsPreInfo >*
TeamPwsPreInfoMatchCCmd::mutable_teaminfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.TeamPwsPreInfoMatchCCmd.teaminfos)
  return &teaminfos_;
}

// optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_TEAMPWS];
inline bool TeamPwsPreInfoMatchCCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamPwsPreInfoMatchCCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamPwsPreInfoMatchCCmd::clear_etype() {
  etype_ = 8;
  clear_has_etype();
}
inline ::Cmd::EPvpType TeamPwsPreInfoMatchCCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsPreInfoMatchCCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void TeamPwsPreInfoMatchCCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsPreInfoMatchCCmd.etype)
}

// -------------------------------------------------------------------

// UpdatePreInfoMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool UpdatePreInfoMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdatePreInfoMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdatePreInfoMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdatePreInfoMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command UpdatePreInfoMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdatePreInfoMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void UpdatePreInfoMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdatePreInfoMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_PREPARE_UPDATE];
inline bool UpdatePreInfoMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdatePreInfoMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdatePreInfoMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdatePreInfoMatchCCmd::clear_param() {
  param_ = 24;
  clear_has_param();
}
inline ::Cmd::MatchCParam UpdatePreInfoMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdatePreInfoMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void UpdatePreInfoMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdatePreInfoMatchCCmd.param)
}

// optional uint64 charid = 3 [default = 0];
inline bool UpdatePreInfoMatchCCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdatePreInfoMatchCCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdatePreInfoMatchCCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdatePreInfoMatchCCmd::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 UpdatePreInfoMatchCCmd::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdatePreInfoMatchCCmd.charid)
  return charid_;
}
inline void UpdatePreInfoMatchCCmd::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdatePreInfoMatchCCmd.charid)
}

// optional .Cmd.EPvpType etype = 4 [default = EPVPTYPE_MIN];
inline bool UpdatePreInfoMatchCCmd::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdatePreInfoMatchCCmd::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdatePreInfoMatchCCmd::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdatePreInfoMatchCCmd::clear_etype() {
  etype_ = 0;
  clear_has_etype();
}
inline ::Cmd::EPvpType UpdatePreInfoMatchCCmd::etype() const {
  // @@protoc_insertion_point(field_get:Cmd.UpdatePreInfoMatchCCmd.etype)
  return static_cast< ::Cmd::EPvpType >(etype_);
}
inline void UpdatePreInfoMatchCCmd::set_etype(::Cmd::EPvpType value) {
  assert(::Cmd::EPvpType_IsValid(value));
  set_has_etype();
  etype_ = value;
  // @@protoc_insertion_point(field_set:Cmd.UpdatePreInfoMatchCCmd.etype)
}

// -------------------------------------------------------------------

// TeamPwsRankInfo

// optional string name = 1;
inline bool TeamPwsRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPwsRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPwsRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPwsRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& TeamPwsRankInfo::name() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.name)
  return *name_;
}
inline void TeamPwsRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRankInfo.name)
}
inline void TeamPwsRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:Cmd.TeamPwsRankInfo.name)
}
inline void TeamPwsRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Cmd.TeamPwsRankInfo.name)
}
inline ::std::string* TeamPwsRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:Cmd.TeamPwsRankInfo.name)
  return name_;
}
inline ::std::string* TeamPwsRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeamPwsRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamPwsRankInfo.name)
}

// optional .Cmd.UserPortraitData portrait = 2;
inline bool TeamPwsRankInfo::has_portrait() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPwsRankInfo::set_has_portrait() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPwsRankInfo::clear_has_portrait() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPwsRankInfo::clear_portrait() {
  if (portrait_ != NULL) portrait_->::Cmd::UserPortraitData::Clear();
  clear_has_portrait();
}
inline const ::Cmd::UserPortraitData& TeamPwsRankInfo::portrait() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.portrait)
  return portrait_ != NULL ? *portrait_ : *default_instance_->portrait_;
}
inline ::Cmd::UserPortraitData* TeamPwsRankInfo::mutable_portrait() {
  set_has_portrait();
  if (portrait_ == NULL) portrait_ = new ::Cmd::UserPortraitData;
  // @@protoc_insertion_point(field_mutable:Cmd.TeamPwsRankInfo.portrait)
  return portrait_;
}
inline ::Cmd::UserPortraitData* TeamPwsRankInfo::release_portrait() {
  clear_has_portrait();
  ::Cmd::UserPortraitData* temp = portrait_;
  portrait_ = NULL;
  return temp;
}
inline void TeamPwsRankInfo::set_allocated_portrait(::Cmd::UserPortraitData* portrait) {
  delete portrait_;
  portrait_ = portrait;
  if (portrait) {
    set_has_portrait();
  } else {
    clear_has_portrait();
  }
  // @@protoc_insertion_point(field_set_allocated:Cmd.TeamPwsRankInfo.portrait)
}

// optional uint32 rank = 3;
inline bool TeamPwsRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamPwsRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamPwsRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamPwsRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 TeamPwsRankInfo::rank() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.rank)
  return rank_;
}
inline void TeamPwsRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRankInfo.rank)
}

// optional uint32 score = 4;
inline bool TeamPwsRankInfo::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamPwsRankInfo::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamPwsRankInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamPwsRankInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TeamPwsRankInfo::score() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.score)
  return score_;
}
inline void TeamPwsRankInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRankInfo.score)
}

// optional .Cmd.ETeamPwsRank erank = 5;
inline bool TeamPwsRankInfo::has_erank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamPwsRankInfo::set_has_erank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamPwsRankInfo::clear_has_erank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamPwsRankInfo::clear_erank() {
  erank_ = 1;
  clear_has_erank();
}
inline ::Cmd::ETeamPwsRank TeamPwsRankInfo::erank() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.erank)
  return static_cast< ::Cmd::ETeamPwsRank >(erank_);
}
inline void TeamPwsRankInfo::set_erank(::Cmd::ETeamPwsRank value) {
  assert(::Cmd::ETeamPwsRank_IsValid(value));
  set_has_erank();
  erank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRankInfo.erank)
}

// optional .Cmd.EProfession profession = 6;
inline bool TeamPwsRankInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeamPwsRankInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeamPwsRankInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeamPwsRankInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::Cmd::EProfession TeamPwsRankInfo::profession() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsRankInfo.profession)
  return static_cast< ::Cmd::EProfession >(profession_);
}
inline void TeamPwsRankInfo::set_profession(::Cmd::EProfession value) {
  assert(::Cmd::EProfession_IsValid(value));
  set_has_profession();
  profession_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsRankInfo.profession)
}

// -------------------------------------------------------------------

// QueryTeamPwsRankMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool QueryTeamPwsRankMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTeamPwsRankMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTeamPwsRankMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTeamPwsRankMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command QueryTeamPwsRankMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsRankMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryTeamPwsRankMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTeamPwsRankMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_RANK];
inline bool QueryTeamPwsRankMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryTeamPwsRankMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryTeamPwsRankMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryTeamPwsRankMatchCCmd::clear_param() {
  param_ = 25;
  clear_has_param();
}
inline ::Cmd::MatchCParam QueryTeamPwsRankMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsRankMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void QueryTeamPwsRankMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTeamPwsRankMatchCCmd.param)
}

// repeated .Cmd.TeamPwsRankInfo rankinfo = 3;
inline int QueryTeamPwsRankMatchCCmd::rankinfo_size() const {
  return rankinfo_.size();
}
inline void QueryTeamPwsRankMatchCCmd::clear_rankinfo() {
  rankinfo_.Clear();
}
inline const ::Cmd::TeamPwsRankInfo& QueryTeamPwsRankMatchCCmd::rankinfo(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsRankMatchCCmd.rankinfo)
  return rankinfo_.Get(index);
}
inline ::Cmd::TeamPwsRankInfo* QueryTeamPwsRankMatchCCmd::mutable_rankinfo(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryTeamPwsRankMatchCCmd.rankinfo)
  return rankinfo_.Mutable(index);
}
inline ::Cmd::TeamPwsRankInfo* QueryTeamPwsRankMatchCCmd::add_rankinfo() {
  // @@protoc_insertion_point(field_add:Cmd.QueryTeamPwsRankMatchCCmd.rankinfo)
  return rankinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRankInfo >&
QueryTeamPwsRankMatchCCmd::rankinfo() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryTeamPwsRankMatchCCmd.rankinfo)
  return rankinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsRankInfo >*
QueryTeamPwsRankMatchCCmd::mutable_rankinfo() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryTeamPwsRankMatchCCmd.rankinfo)
  return &rankinfo_;
}

// -------------------------------------------------------------------

// TeamPwsUserInfo

// optional uint64 charid = 1;
inline bool TeamPwsUserInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamPwsUserInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamPwsUserInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamPwsUserInfo::clear_charid() {
  charid_ = GOOGLE_ULONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::uint64 TeamPwsUserInfo::charid() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsUserInfo.charid)
  return charid_;
}
inline void TeamPwsUserInfo::set_charid(::google::protobuf::uint64 value) {
  set_has_charid();
  charid_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsUserInfo.charid)
}

// optional uint32 score = 2 [default = 0];
inline bool TeamPwsUserInfo::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamPwsUserInfo::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamPwsUserInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamPwsUserInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 TeamPwsUserInfo::score() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsUserInfo.score)
  return score_;
}
inline void TeamPwsUserInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsUserInfo.score)
}

// optional .Cmd.ETeamPwsRank erank = 3 [default = ETEAMPWSRANK_NONE];
inline bool TeamPwsUserInfo::has_erank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamPwsUserInfo::set_has_erank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamPwsUserInfo::clear_has_erank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamPwsUserInfo::clear_erank() {
  erank_ = 5;
  clear_has_erank();
}
inline ::Cmd::ETeamPwsRank TeamPwsUserInfo::erank() const {
  // @@protoc_insertion_point(field_get:Cmd.TeamPwsUserInfo.erank)
  return static_cast< ::Cmd::ETeamPwsRank >(erank_);
}
inline void TeamPwsUserInfo::set_erank(::Cmd::ETeamPwsRank value) {
  assert(::Cmd::ETeamPwsRank_IsValid(value));
  set_has_erank();
  erank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.TeamPwsUserInfo.erank)
}

// -------------------------------------------------------------------

// QueryTeamPwsTeamInfoMatchCCmd

// optional .Cmd.Command cmd = 1 [default = MATCHC_PROTOCMD];
inline bool QueryTeamPwsTeamInfoMatchCCmd::has_cmd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_has_cmd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_cmd() {
  cmd_ = 61;
  clear_has_cmd();
}
inline ::Cmd::Command QueryTeamPwsTeamInfoMatchCCmd::cmd() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsTeamInfoMatchCCmd.cmd)
  return static_cast< ::Cmd::Command >(cmd_);
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_cmd(::Cmd::Command value) {
  assert(::Cmd::Command_IsValid(value));
  set_has_cmd();
  cmd_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTeamPwsTeamInfoMatchCCmd.cmd)
}

// optional .Cmd.MatchCParam param = 2 [default = MATCHCPARAM_TEAMPWS_QUERY_TEAMINFO];
inline bool QueryTeamPwsTeamInfoMatchCCmd::has_param() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_has_param() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_has_param() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_param() {
  param_ = 26;
  clear_has_param();
}
inline ::Cmd::MatchCParam QueryTeamPwsTeamInfoMatchCCmd::param() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsTeamInfoMatchCCmd.param)
  return static_cast< ::Cmd::MatchCParam >(param_);
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_param(::Cmd::MatchCParam value) {
  assert(::Cmd::MatchCParam_IsValid(value));
  set_has_param();
  param_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTeamPwsTeamInfoMatchCCmd.param)
}

// repeated .Cmd.TeamPwsUserInfo userinfos = 3;
inline int QueryTeamPwsTeamInfoMatchCCmd::userinfos_size() const {
  return userinfos_.size();
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_userinfos() {
  userinfos_.Clear();
}
inline const ::Cmd::TeamPwsUserInfo& QueryTeamPwsTeamInfoMatchCCmd::userinfos(int index) const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos)
  return userinfos_.Get(index);
}
inline ::Cmd::TeamPwsUserInfo* QueryTeamPwsTeamInfoMatchCCmd::mutable_userinfos(int index) {
  // @@protoc_insertion_point(field_mutable:Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos)
  return userinfos_.Mutable(index);
}
inline ::Cmd::TeamPwsUserInfo* QueryTeamPwsTeamInfoMatchCCmd::add_userinfos() {
  // @@protoc_insertion_point(field_add:Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos)
  return userinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserInfo >&
QueryTeamPwsTeamInfoMatchCCmd::userinfos() const {
  // @@protoc_insertion_point(field_list:Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos)
  return userinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Cmd::TeamPwsUserInfo >*
QueryTeamPwsTeamInfoMatchCCmd::mutable_userinfos() {
  // @@protoc_insertion_point(field_mutable_list:Cmd.QueryTeamPwsTeamInfoMatchCCmd.userinfos)
  return &userinfos_;
}

// optional uint32 myrank = 4 [default = 0];
inline bool QueryTeamPwsTeamInfoMatchCCmd::has_myrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_has_myrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 QueryTeamPwsTeamInfoMatchCCmd::myrank() const {
  // @@protoc_insertion_point(field_get:Cmd.QueryTeamPwsTeamInfoMatchCCmd.myrank)
  return myrank_;
}
inline void QueryTeamPwsTeamInfoMatchCCmd::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
  // @@protoc_insertion_point(field_set:Cmd.QueryTeamPwsTeamInfoMatchCCmd.myrank)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Cmd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Cmd::MatchCParam> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::MatchCParam>() {
  return ::Cmd::MatchCParam_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPvpType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPvpType>() {
  return ::Cmd::EPvpType_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ERoomState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ERoomState>() {
  return ::Cmd::ERoomState_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EPvpResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EPvpResult>() {
  return ::Cmd::EPvpResult_descriptor();
}
template <> struct is_proto_enum< ::Cmd::EMatchReply> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::EMatchReply>() {
  return ::Cmd::EMatchReply_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETutorMatch> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETutorMatch>() {
  return ::Cmd::ETutorMatch_descriptor();
}
template <> struct is_proto_enum< ::Cmd::ETeamPwsRank> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Cmd::ETeamPwsRank>() {
  return ::Cmd::ETeamPwsRank_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MatchCCmd_2eproto__INCLUDED
