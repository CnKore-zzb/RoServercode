/**
 * @file ServantConfig.h
 * @brief 
 * @author liangyongqiang, liangyongqiang@xindong.com
 * @version v1
 * @date 2018-02-28
 */

#pragma once

#include "xSingleton.h"
#include "TableManager.h"

using std::vector;
using std::string;
using std::map;

const DWORD SERVANT_GROWTH_ID_PARAM = 1000;

enum ECycleType
{
  ECYCLE_MIN = 0,
  ECYCLE_DAY = 1,
  ECYCLE_WEEK = 2,
  ECYCLE_FOREVER = 3,
  ECYCLE_FOREVER_GUIDE = 4,
};

enum ETriggerType
{
  ETRIGGER_MIN = 0,
  ETRIGGER_POLLY_FIGHT,
  ETRIGGER_CAPRA,
  ETRIGGER_CAT_INVASION,
  ETRIGGER_GUILD_FUBEN,
  ETRIGGER_TOWER_PASS,
  ETRIGGER_GVG,
  ETRIGGER_ITEM_GET,
  ETRIGGER_LEVELUP,
  ETRIGGER_MENU,
  ETRIGGER_PET_ADVENTURE,
  ETRIGGER_QUEST_SUBMIT,
  ETRIGGER_OWN_STUDENT,
  ETRIGGER_TUTOR_SKILL,
  ETRIGGER_AUGURY,
  ETRIGGER_WANTED_QUEST_DAY,
  ETRIGGER_DAILYMONSTER,
  ETRIGGER_REPAIR_SEAL,
  ETRIGGER_LABORATORY,
  ETRIGGER_BATTLE_TIME,
  ETRIGGER_JOIN_GUILD,
  ETRIGGER_GUILD_DONATE,
  ETRIGGER_GUILD_PRAY,
  ETRIGGER_GUILD_BUILDING,
  ETRIGGER_LISTEN_MUSIC,
  ETRIGGER_PLAY_MUSIC,
  ETRIGGER_PVP_KILL,
  ETRIGGER_PHOTO_SCENERY,
  ETRIGGER_DOJO,
  ETRIGGER_ENCHANT_PRIMARY,
  ETRIGGER_ENCHANT_MIDDLE,
  ETRIGGER_ENCHANT_ADVANCED,
  ETRIGGER_COOKFOOD,
  ETRIGGER_OWN_TUTOR,
  ETRIGGER_HAIR,
  ETRIGGER_EYE,
  ETRIGGER_TITLE,
  ETRIGGER_RECOMMEND,
  ETRIGGER_PETWORK,
  ETRIGGER_EAT_FOOD,
  ETRIGGER_MAPID,
  ETRIGGER_LOTTERY,
  ETRIGGER_GUILD_BUILD_DONATE,
  ETRIGGER_WORLD_FREYJA,
  ETRIGGER_CARD_RESET,
  ETRIGGER_CARD_CUSTOMIZE,
  ETRIGGER_TIME_INTERVAL,
  ETRIGGER_ADVENTURE_SKILL,
  ETRIGGER_PRODUCE_HEAD,
  ETRIGGER_ENCHANT_HEAD,
  ETRIGGER_MERCENARY_CAT,
  ETRIGGER_CHANGE_PROFESSION,
  ETRIGGER_KILL_MINI,
  ETRIGGER_KILL_MVP,
  ETRIGGER_PVE_CARD,
  ETRIGGER_KILL_STAR_NPC,
  ETRIGGER_MVP_BATTLE,
  ETRIGGER_JOBLEVELUP,
  ETRIGGER_MAXJOBLEVEL,
  ETRIGGER_UNLOCK_CATNUM,


  //提升功能添加
  ETRIGGER_LAST_GROWTH,
  ETRIGGER_QUICK_WANTED_QUEST,
  ETRIGGER_EQUIP_STRENGTH,
  ETRIGGER_PET_CAPTURE,
  ETRIGGER_ACCEPT_QUEST,
  ETRIGGER_EXCHANGE_HEAD_DRAWING,
  ETRIGGER_QUICK_BUY_DRAWING,
  ETRIGGER_HEAD_COMPOSE,
  ETRIGGER_EQUIP_REFINE,
  ETRIGGER_SAFE_REFINE,
  ETRIGGER_EQUIP_COMPOSE,
  ETRIGGER_EQUIP_COMPOSE_WEAPON,
  ETRIGGER_EQUIP_COMPOSE_ARMOUR,
  ETRIGGER_ENTER_PVP,
  ETRIGGER_CARD_MOSAIC,
  ETRIGGER_USE_CATAPULT,
  ETRIGGER_EXTRACT_CAT_LITTER,
  ETRIGGER_VENDING_MACHINE,
  ETRIGGER_EQUIP_UPGRADE,
  ETRIGGER_GUILD_SPECIAL_PRAY,
  ETRIGGER_GUILD_HEAD_REFINE,
  ETRIGGER_GUILD_EQUIP_FIRM,
  ETRIGGER_CASTLE_RAID,
  ETRIGGER_EQUIP_DECOMPOSE,
  ETRIGGER_EQUIP_RESTORE,
  ETRIGGER_GRADUATE,
  ETRIGGER_MVP_BATTLE_KILL,
  ETRIGGER_MVP_RECORD_SAVE,
  ETRIGGER_MVP_RECORD_LOAD,
  ETRIGGER_PROFESSION_EXCHANGE,
  ETRIGGER_BUY_PROFESSION,
  ETRIGGER_PVE_CARD_SIMPLE,
  ETRIGGER_PVE_CARD_MIDDLE,
  ETRIGGER_FLAME_RAID,
  ETRIGGER_OWN_PET,
  ETRIGGER_PET_FRIEND_FULL,
  ETRIGGER_PET_ADVENTURE_REWARD,
  ETRIGGER_FRIENDSHIP_MORACOIN,
  ETRIGGER_START_PETWORK,
  ETRIGGER_PETWORK_SPACE,
  ETRIGGER_EQUIP_EXCHANGE,
  ETRIGGER_GOLD_MEDAL,
  ETRIGGER_NIGHTMARE_RAID,
  ETRIGGER_TERRORIST_RAID,
  ETRIGGER_GUILD_ARTIFACT,
  ETRIGGER_GUILD_LEVEL,
  ETRIGGER_SPACE_BREAK_SKILL,
  ETRIGGER_LUN_SHARD,
  ETRIGGER_LUN_SHARD_SPECIAL,
  ETRIGGER_GVG_DEFENSE,
  ETRIGGER_GUILD_QUEST_ACCEPT,
  ETRIGGER_GUILD_QUEST_SUBMIT,
  ETRIGGER_TRADE_MATERIAL,
  ETRIGGER_MANUAL_UNLOCK,
  ETRIGGER_BIG_LOTTERY,
};

struct SRecommendCond
{
  ETriggerType eTrigger = ETRIGGER_MIN;
  TVecDWORD vecParams;
};

struct SServantItemCFG
{
  DWORD dwID = 0;
  DWORD dwReward = 0;
  DWORD dwFavorability = 0;
  ECycleType eType = ECYCLE_MIN;
  bool bIsAcc = false;

  SRecommendCond stAppearCondition;         //出现条件
  SRecommendCond stFinishCondition;       //领取条件
};

typedef std::map<DWORD, SServantItemCFG> TMapServantCFG;

struct SGrowthCond
{
  ETriggerType eTrigger = ETRIGGER_MIN;
  TVecDWORD vecParams;
};

struct SGrowthItemCFG
{
  DWORD dwID = 0;
  DWORD dwGroupID = 0;
  DWORD dwReward = 0;
  DWORD dwGrowth = 0;
  DWORD dwType = 0;

  SGrowthCond stGroupAppearCond1;
  SGrowthCond stGroupAppearCond2;

  SGrowthCond stGrowthAppearCond;
  SGrowthCond stGrowthFinishCond;
};

typedef std::map<DWORD, SGrowthItemCFG> TMapGrowthCFG;

// config
class ServantConfig : public xSingleton<ServantConfig>
{
  public:
    ServantConfig();
    virtual ~ServantConfig();

    bool loadConfig();
    bool loadRecommendConfig();
    bool loadGrowthConfig();
    bool checkConfig();

    const SServantItemCFG* getServantCFG(DWORD id);
    const TMapServantCFG& getAllServantCFG() { return m_mapServantCFG; }
    bool checkInTimeInterval(DWORD curTime, DWORD startWeekDay, DWORD startHour, DWORD endWeekDay, DWORD endHour);

    ETriggerType getTriggerCondition(const string& str);

    ETriggerType getRecoTrigger(DWORD id);
    ETriggerType getFinishTrigger(DWORD id);

    const SGrowthItemCFG* getGrowthCFG(DWORD id);
    const TMapGrowthCFG& getAllGrowthCFG() { return m_mapGrowthCFG; }
    ETriggerType getGrowthAppearTrigger(DWORD id);
    ETriggerType getGrowthFinishTrigger(DWORD id);
  private:
    TMapServantCFG m_mapServantCFG;
    TMapGrowthCFG m_mapGrowthCFG;
};

