#include "LuaManager.h"
#include "MailManager.h"
#include "MsgManager.h"

SLuaParams GLOBAL_ONE_LUA_PARAM;
SLuaParams& getOneLuaParam()
{
  GLOBAL_ONE_LUA_PARAM.clear();
  return GLOBAL_ONE_LUA_PARAM;
}

SLuaNumberArray GLOBAL_ONE_LUA_ARRAY;
SLuaNumberArray& getOneLuaArray()
{
  GLOBAL_ONE_LUA_ARRAY.clear();
  return GLOBAL_ONE_LUA_ARRAY;
}

LuaManager::LuaManager()
{

}

LuaManager::~LuaManager()
{
  lua_close(_L);
}

bool LuaManager::load()
{
  _L = lua_open();
  if (_L == nullptr)
    return false;

  luaL_openlibs(_L);
  lua_tinker::init(_L);
  lua_tinker::init_u64(_L);

  GLOBAL(cPlusLog);
  GLOBAL(cPlusLogError);
  GLOBAL(sendMail);
  GLOBAL(sendOptMail);
  GLOBAL(sendMsg);
  GLOBAL(getOneLuaParam);
  GLOBAL(getOneLuaArray);

  registerinferface();

  if (lua_tinker::dofile(_L, "Lua/Server.lua") == false)
  {
    XERR << "[LuaManager] 读取 server.lua 失败" << XEND;
    return false;
  }

  return true;
}

bool LuaManager::reload()
{
  if (_L == nullptr)
  {
    _L = lua_open();
    luaL_openlibs(_L);
    lua_tinker::init(_L);
    lua_tinker::init_u64(_L);
  }
  if (_L == nullptr)
  {
    XERR << "[LuaManager] 重加载 server.lua 失败" << XEND;
    return false;
  }
  if (lua_tinker::dofile(_L, "Lua/Server.lua") == false)
  {
    XERR << "[LuaManager] 读取 server.lua 失败" << XEND;
    return false;
  }

  return true;
}

void LuaManager::registerinferface()
{
  // profession
  ENUM(EPROFESSION_MIN);
  ENUM(EPROFESSION_NOVICE);
  ENUM(EPROFESSION_WARRIOR);
  ENUM(EPROFESSION_KNIGHT);
  ENUM(EPROFESSION_LORDKNIGHT);
  ENUM(EPROFESSION_RUNEKNIGHT);
  ENUM(EPROFESSION_CRUSADER);
  ENUM(EPROFESSION_PALADIN);
  ENUM(EPROFESSION_ROYALGUARD);
  ENUM(EPROFESSION_MAGICIAN);
  ENUM(EPROFESSION_WIZARD);
  ENUM(EPROFESSION_HIGHWIZARD);
  ENUM(EPROFESSION_WARLOCK);
  ENUM(EPROFESSION_SAGE);
  ENUM(EPROFESSION_PROFESSOR);
  ENUM(EPROFESSION_SORCERER);
  ENUM(EPROFESSION_THIEF);
  ENUM(EPROFESSION_ASSASSIN);
  ENUM(EPROFESSION_ASSASSINCROSS);
  ENUM(EPROFESSION_GUILLOTINECROSS);
  ENUM(EPROFESSION_ROGUE);
  ENUM(EPROFESSION_STALKER);
  ENUM(EPROFESSION_SHADOWCHASER);
  ENUM(EPROFESSION_ARCHER);
  ENUM(EPROFESSION_HUNTER);
  ENUM(EPROFESSION_SNIPER);
  ENUM(EPROFESSION_RANGER);
  ENUM(EPROFESSION_BARD);
  ENUM(EPROFESSION_CLOWN);
  ENUM(EPROFESSION_MINSTREL);
  ENUM(EPROFESSION_DANCER);
  ENUM(EPROFESSION_GYPSY);
  ENUM(EPROFESSION_WANDERER);
  ENUM(EPROFESSION_ACOLYTE);
  ENUM(EPROFESSION_PRIEST);
  ENUM(EPROFESSION_HIGHPRIEST);
  ENUM(EPROFESSION_ARCHBISHOP);
  ENUM(EPROFESSION_MONK);
  ENUM(EPROFESSION_CHAMPION);
  ENUM(EPROFESSION_SHURA);
  ENUM(EPROFESSION_MERCHANT);
  ENUM(EPROFESSION_BLACKSMITH);
  ENUM(EPROFESSION_WHITESMITH);
  ENUM(EPROFESSION_MECHANIC);
  ENUM(EPROFESSION_ALCHEMIST);
  ENUM(EPROFESSION_CREATOR);
  ENUM(EPROFESSION_GENETIC);
  ENUM(EPROFESSION_MAX);

  // gender
  ENUM(EGENDER_MALE);
  ENUM(EGENDER_FEMALE);

  // pack
  ENUM(EPACKTYPE_MAIN);
  ENUM(EPACKTYPE_EQUIP);
  ENUM(EPACKTYPE_FASHION);
  ENUM(EPACKTYPE_FASHIONEQUIP);
  ENUM(EPACKTYPE_CARD);
  ENUM(EPACKTYPE_STORE);
  ENUM(EPACKTYPE_PERSONAL_STORE);
  ENUM(EPACKTYPE_TEMP_MAIN);
  ENUM(EPACKTYPE_BARROW);
  ENUM(EPACKTYPE_FOOD);

  // source
  ENUM(ESOURCE_NORMAL);
  ENUM(ESOURCE_PACKAGE);
  ENUM(ESOURCE_QUEST);
  ENUM(ESOURCE_EQUIP);
  ENUM(ESOURCE_CARD);
  ENUM(ESOURCE_ACTSKILL);
  ENUM(ESOURCE_COMPOSE);
  ENUM(ESOURCE_REWARD);
  ENUM(ESOURCE_MONSTERKILL);
  ENUM(ESOURCE_GM);
  ENUM(ESOURCE_FUBEN);
  ENUM(ESOURCE_CHARGE);
  ENUM(ESOURCE_LABORATORY);
  ENUM(ESOURCE_MAPTRANS);
  ENUM(ESOURCE_HAIR);
  ENUM(ESOURCE_STRENGTH);
  ENUM(ESOURCE_SHOP);
  ENUM(ESOURCE_SELL);
  ENUM(ESOURCE_PICKUP);
  ENUM(ESOURCE_OFFLINE);
  ENUM(ESOURCE_LVUP);
  ENUM(ESOURCE_TRADE);
  ENUM(ESOURCE_TRANSFER);
  ENUM(ESOURCE_SEAL);
  ENUM(ESOURCE_GUILDPRAY);
  ENUM(ESOURCE_ENCHANT);
  ENUM(ESOURCE_GUILDCREATE);
  ENUM(ESOURCE_GUILDLEVELUP);
  ENUM(ESOURCE_RELIVE);
  ENUM(ESOURCE_REPAIR);
  ENUM(ESOURCE_STORE);
  ENUM(ESOURCE_MUSICBOX);
  ENUM(ESOURCE_TOWER);
  ENUM(ESOURCE_DOJOFIRST);
  ENUM(ESOURCE_DOJOHELP);
  ENUM(ESOURCE_MANUAL);
  ENUM(ESOURCE_ROB);
  ENUM(ESOURCE_WANTEDQUEST);
  ENUM(ESOURCE_DONATE);
  ENUM(ESOURCE_TREASURE);
  ENUM(ESOURCE_FERRISWHEEL);
  ENUM(ESOURCE_JUMPZONE);
  ENUM(ESOURCE_DOG);
  ENUM(ESOURCE_DECOMPOSE);
  ENUM(ESOURCE_CAT);

  // attr
  ENUM(EATTRTYPE_MIN);

  ENUM(EATTRTYPE_STR);
  ENUM(EATTRTYPE_INT);
  ENUM(EATTRTYPE_AGI);
  ENUM(EATTRTYPE_DEX);
  ENUM(EATTRTYPE_VIT);
  ENUM(EATTRTYPE_LUK);

  ENUM(EATTRTYPE_ATK);
  ENUM(EATTRTYPE_ATKPER);
  ENUM(EATTRTYPE_DEF);
  ENUM(EATTRTYPE_DEFPER);
  ENUM(EATTRTYPE_MATK);
  ENUM(EATTRTYPE_MATKPER);
  ENUM(EATTRTYPE_MDEF);
  ENUM(EATTRTYPE_MDEFPER);
  ENUM(EATTRTYPE_MAXHP);
  ENUM(EATTRTYPE_MAXHPPER);
  ENUM(EATTRTYPE_MAXSP);
  ENUM(EATTRTYPE_MAXSPPER);
  ENUM(EATTRTYPE_HP);
  ENUM(EATTRTYPE_SP);
  ENUM(EATTRTYPE_HIT);
  ENUM(EATTRTYPE_FLEE);
  ENUM(EATTRTYPE_CRI);
  ENUM(EATTRTYPE_CRIRES);
  ENUM(EATTRTYPE_CRIDAMPER);
  ENUM(EATTRTYPE_CRIDEFPER);
  ENUM(EATTRTYPE_ATKSPD);
  ENUM(EATTRTYPE_MOVESPD);
  ENUM(EATTRTYPE_CASTSPD);
  ENUM(EATTRTYPE_RESTORESPD);
  ENUM(EATTRTYPE_SPRESTORESPD);
  ENUM(EATTRTYPE_ITEMRESTORESPD);
  ENUM(EATTRTYPE_ITEMSPRESTORESPD);
  ENUM(EATTRTYPE_RESTORESPDPER);
  ENUM(EATTRTYPE_SPRESTORESPDPER);
  ENUM(EATTRTYPE_CRIPER);

  ENUM(EATTRTYPE_REFINE);
  ENUM(EATTRTYPE_MREFINE);

  ENUM(EATTRTYPE_MOVESPDPER);
  ENUM(EATTRTYPE_EQUIPASPD);
  ENUM(EATTRTYPE_SKILLASPD);
  ENUM(EATTRTYPE_HITPER);
  ENUM(EATTRTYPE_FLEEPER);
  ENUM(EATTRTYPE_STRPER);
  ENUM(EATTRTYPE_INTPER);
  ENUM(EATTRTYPE_AGIPER);
  ENUM(EATTRTYPE_DEXPER);
  ENUM(EATTRTYPE_VITPER);
  ENUM(EATTRTYPE_LUKPER);

  ENUM(EATTRTYPE_SHOWATK);
  ENUM(EATTRTYPE_SHOWDEF);
  ENUM(EATTRTYPE_SHOWMATK);
  ENUM(EATTRTYPE_SHOWMDEF);
  ENUM(EATTRTYPE_SHOWMAXHP);
  ENUM(EATTRTYPE_SHOWMAXSP);
  ENUM(EATTRTYPE_SHOWHIT);
  ENUM(EATTRTYPE_SHOWFLEE);
  ENUM(EATTRTYPE_SHOWCRI);
  ENUM(EATTRTYPE_SHOWCRIRES);
  ENUM(EATTRTYPE_SHOWATKSPD);
  ENUM(EATTRTYPE_SHOWMOVESPD);
  ENUM(EATTRTYPE_SHOWCASTSPD);
  ENUM(EATTRTYPE_SHOWRESTORESPD);
  ENUM(EATTRTYPE_DAMREDUC);
  ENUM(EATTRTYPE_MDAMREDUC);
  ENUM(EATTRTYPE_IGNOREDEF);
  ENUM(EATTRTYPE_IGNOREMDEF);
  ENUM(EATTRTYPE_DAMREBOUND);
  ENUM(EATTRTYPE_MDAMREBOUND);
  ENUM(EATTRTYPE_DAMINCREASE);
  ENUM(EATTRTYPE_MDAMINCREASE);
  ENUM(EATTRTYPE_VAMPIRIC);
  ENUM(EATTRTYPE_BEVAMPIRIC);
  ENUM(EATTRTYPE_HARMIMMUNE);
  ENUM(EATTRTYPE_REALDAMAGE);
  ENUM(EATTRTYPE_RANGEDAM);
  ENUM(EATTRTYPE_SHOTDAMREDUC);
  ENUM(EATTRTYPE_LONGDAMREDUC);
  ENUM(EATTRTYPE_LONGMDAMREDUC);
  ENUM(EATTRTYPE_IGNOREEQUIPDEF);
  ENUM(EATTRTYPE_SHAPEATKPER);
  ENUM(EATTRTYPE_DAMSPIKE);
  ENUM(EATTRTYPE_MDAMSPIKE);
  ENUM(EATTRTYPE_REFINEDAMREDUC);
  ENUM(EATTRTYPE_REFINEMDAMREDUC);
  ENUM(EATTRTYPE_ENERGYDAMREDUC);
  ENUM(EATTRTYPE_STEELDAMREDUC);
  ENUM(EATTRTYPE_STEELMDAMREDUC);
  ENUM(EATTRTYPE_PROTECTDAMREDUC);
  ENUM(EATTRTYPE_PROTECTMDAMREDUC);
  ENUM(EATTRTYPE_HIDEDAMREDUC);
  ENUM(EATTRTYPE_HIDEMDAMREDUC);
  ENUM(EATTRTYPE_DRAGONDAMREDUC);
  ENUM(EATTRTYPE_DRAGONMDAMREDUC);
  ENUM(EATTRTYPE_NORMALREALDAM);
  ENUM(EATTRTYPE_NORMALMREALDAM);
  ENUM(EATTRTYPE_SKILLREALDAM);
  ENUM(EATTRTYPE_SKILLMREALDAM);

  ENUM(EATTRTYPE_NORMALATK);
  ENUM(EATTRTYPE_NORMALATKDAM);
  ENUM(EATTRTYPE_NORMALATKRES);
  ENUM(EATTRTYPE_SKILLDAM);
  ENUM(EATTRTYPE_SKILLRES);
  ENUM(EATTRTYPE_WINDMDAMREDUC);
  ENUM(EATTRTYPE_DEADDAMREDUC);
  ENUM(EATTRTYPE_DEADMDAMREDUC);

  ENUM(EATTRTYPE_CTCHANGE);
  ENUM(EATTRTYPE_CTCHANGEPER);
  ENUM(EATTRTYPE_CDCHANGE);
  ENUM(EATTRTYPE_CDCHANGEPER);

  ENUM(EATTRTYPE_SPCOST);
  ENUM(EATTRTYPE_SPCOSTPER);
  ENUM(EATTRTYPE_ATKDISTANCE);
  ENUM(EATTRTYPE_ATKDISTANCEPER);
  ENUM(EATTRTYPE_CTFIXED);
  ENUM(EATTRTYPE_CTFIXEDPER);
  ENUM(EATTRTYPE_SELLDISCOUNT);
  ENUM(EATTRTYPE_BUYDISCOUNT);
  ENUM(EATTRTYPE_HPCOST);
  ENUM(EATTRTYPE_HPCOSTPER);

  ENUM(EATTRTYPE_DELAYCDCHANGE);
  ENUM(EATTRTYPE_DELAYCDCHANGEPER);
  ENUM(EATTRTYPE_DCHANGE);
  ENUM(EATTRTYPE_DCHANGEPER);

  ENUM(EATTRTYPE_NOSKILL);
  ENUM(EATTRTYPE_NOACT);
  ENUM(EATTRTYPE_NOMOVE);
  ENUM(EATTRTYPE_NOSTIFF);
  ENUM(EATTRTYPE_NOATTACK);
  ENUM(EATTRTYPE_FEARRUN);
  ENUM(EATTRTYPE_HIDE);
  ENUM(EATTRTYPE_TAUNT);
  ENUM(EATTRTYPE_FREEZE);
  ENUM(EATTRTYPE_NOEFFECTMOVE);
  ENUM(EATTRTYPE_STATEEFFECT);
  ENUM(EATTRTYPE_ATTREFFECT);
  ENUM(EATTRTYPE_NOATTACKED);
  ENUM(EATTRTYPE_ATTRFUNCTION);
  ENUM(EATTRTYPE_ATTREFFECT2);
  ENUM(EATTRTYPE_FUNCLIMIT);

  ENUM(EATTRTYPE_ATKATTR);
  ENUM(EATTRTYPE_DEFATTR);
  ENUM(EATTRTYPE_WINDDAMPER);
  ENUM(EATTRTYPE_EARTHDAMPER);
  ENUM(EATTRTYPE_WATERDAMPER);
  ENUM(EATTRTYPE_FIREDAMPER);
  ENUM(EATTRTYPE_NEUTRALDAMPER);
  ENUM(EATTRTYPE_HOLYDAMPER);
  ENUM(EATTRTYPE_SHADOWDAMPER);
  ENUM(EATTRTYPE_GHOSTDAMPER);
  ENUM(EATTRTYPE_UNDEADDAMPER);
  ENUM(EATTRTYPE_POSIONDAMPER);
  ENUM(EATTRTYPE_BEWINDDAMPER);
  ENUM(EATTRTYPE_BEEARTHDAMPER);
  ENUM(EATTRTYPE_BEWATERDAMPER);
  ENUM(EATTRTYPE_BEFIREDAMPER);
  ENUM(EATTRTYPE_BENEUTRALDAMPER);
  ENUM(EATTRTYPE_BEHOLYDAMPER);
  ENUM(EATTRTYPE_BESHADOWDAMPER);
  ENUM(EATTRTYPE_BEGHOSTDAMPER);
  ENUM(EATTRTYPE_BEUNDEADDAMPER);
  ENUM(EATTRTYPE_BEPOSIONDAMPER);
  ENUM(EATTRTYPE_WINDATK);
  ENUM(EATTRTYPE_EARTHATK);
  ENUM(EATTRTYPE_FIREATK);
  ENUM(EATTRTYPE_WATERATK);
  ENUM(EATTRTYPE_NEUTRALATK);
  ENUM(EATTRTYPE_HOLYATK);
  ENUM(EATTRTYPE_DARKATK);
  ENUM(EATTRTYPE_WINDDEF);
  ENUM(EATTRTYPE_EARTHDEF);
  ENUM(EATTRTYPE_FIREDEF);
  ENUM(EATTRTYPE_WATERDEF);
  ENUM(EATTRTYPE_NEUTRALDEF);
  ENUM(EATTRTYPE_HOLYDEF);
  ENUM(EATTRTYPE_DARKDEF);
  ENUM(EATTRTYPE_GHOSTATK);
  ENUM(EATTRTYPE_UNDEADATK);
  ENUM(EATTRTYPE_POISONINGATK);

  ENUM(EATTRTYPE_BRUTEDAMPER);
  ENUM(EATTRTYPE_DEMIHUMANDAMPER);
  ENUM(EATTRTYPE_DEMONDAMPER);
  ENUM(EATTRTYPE_PLANTDAMPER);
  ENUM(EATTRTYPE_DEADLESSDAMPER);
  ENUM(EATTRTYPE_FORMLESSDAMPER);
  ENUM(EATTRTYPE_FISHDAMPER);
  ENUM(EATTRTYPE_ANGLEDAMPER);
  ENUM(EATTRTYPE_INSECTDAMPER);
  ENUM(EATTRTYPE_DRAGONDAMPER);
  ENUM(EATTRTYPE_BRUTERESPER);
  ENUM(EATTRTYPE_DEMIHUMANRESPER);
  ENUM(EATTRTYPE_DEMONRESPER);
  ENUM(EATTRTYPE_PLANTRESPER);
  ENUM(EATTRTYPE_DEADLESSRESPER);
  ENUM(EATTRTYPE_FORMLESSRESPER);
  ENUM(EATTRTYPE_FISHRESPER);
  ENUM(EATTRTYPE_ANGLERESPER);
  ENUM(EATTRTYPE_INSECTRESPER);
  ENUM(EATTRTYPE_DRAGONRESPER);

  ENUM(EATTRTYPE_SMALLDAMPER);
  ENUM(EATTRTYPE_SMALLRESPER);
  ENUM(EATTRTYPE_MIDDAMPER);
  ENUM(EATTRTYPE_MIDRESPER);
  ENUM(EATTRTYPE_BIGDAMPER);
  ENUM(EATTRTYPE_BIGRESPER);
  ENUM(EATTRTYPE_BOSSDAMPER);
  ENUM(EATTRTYPE_BOSSRESPER);
  ENUM(EATTRTYPE_MONSTERDAMPER);
  ENUM(EATTRTYPE_MONSTERRESPER);
  ENUM(EATTRTYPE_NPCDAMPER);
  ENUM(EATTRTYPE_NPCRESPER);

  ENUM(EATTRTYPE_SILENCEATK);
  ENUM(EATTRTYPE_SILENCEDEF);
  ENUM(EATTRTYPE_FREEZEATK);
  ENUM(EATTRTYPE_FREEZEDEF);
  ENUM(EATTRTYPE_STONEATK);
  ENUM(EATTRTYPE_STONEDEF);
  ENUM(EATTRTYPE_STUNATK);
  ENUM(EATTRTYPE_STUNDEF);
  ENUM(EATTRTYPE_BLINDATK);
  ENUM(EATTRTYPE_BLINDDEF);
  ENUM(EATTRTYPE_POSIONATK);
  ENUM(EATTRTYPE_POSIONDEF);
  ENUM(EATTRTYPE_SLOWATK);
  ENUM(EATTRTYPE_SLOWDEF);
  ENUM(EATTRTYPE_CHAOSATK);
  ENUM(EATTRTYPE_CHAOSDEF);
  ENUM(EATTRTYPE_CURSEATK);
  ENUM(EATTRTYPE_CURSEDEF);

  ENUM(EATTRTYPE_TRANSFORMID);
  ENUM(EATTRTYPE_SLEEPATK);
  ENUM(EATTRTYPE_SLEEPDEF);

  ENUM(EATTRTYPE_BEHEALENCPER);
  ENUM(EATTRTYPE_HEALENCPER);

  ENUM(EATTRTYPE_DEADSOON);
  ENUM(EATTRTYPE_SAVE_HP);
  ENUM(EATTRTYPE_SAVE_SP);
  ENUM(EATTRTYPE_SLIM_HEIGHT);
  ENUM(EATTRTYPE_SLIM_WEIGHT);
  ENUM(EATTRTYPE_BASEEXPPER);
  ENUM(EATTRTYPE_JOBEXPPER);
  ENUM(EATTRTYPE_MAX);

  if (registerfunc != nullptr)
    registerfunc();
}

void LuaManager::cPlusLog(const char* str)
{
  if (str == nullptr)
    return;
  XLOG << "[Lua-log打印]:" << str << XEND;
}

void LuaManager::cPlusLogError(const char* str)
{
  if (str == nullptr)
    return;
  XERR << "[Lua-报错]:" << str << XEND;
}

void LuaManager::sendMail(QWORD qwTargetID, DWORD dwMailID)
{
  MailManager::getMe().sendMail(qwTargetID, dwMailID);
}

void LuaManager::sendOptMail(QWORD qwTargetID, const char* sender, const char* title, const char* msg, DWORD dwItemID, DWORD dwCount)
{
  ItemInfo oItem;
  oItem.set_id(dwItemID);
  oItem.set_count(dwCount);
  oItem.set_source(ESOURCE_MAIL);
  MailManager::getMe().sendMail(qwTargetID, 0, sender, title, msg, EMAILTYPE_NORMAL, 0, TVecItemInfo{oItem});
}

void LuaManager::sendMsg(QWORD qwTargetID, DWORD dwMsgID)
{
  MsgManager::sendMsg(qwTargetID, dwMsgID);
}

